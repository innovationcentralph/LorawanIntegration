
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017de8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001570  08017f28  08017f28  00027f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019498  08019498  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  08019498  08019498  00029498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080194a0  080194a0  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080194a0  080194a0  000294a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080194a8  080194a8  000294a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         000002e0  20000000  080194b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b98  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          000016c8  200002e0  200002e0  000402e0  2**2
                  ALLOC
 12 RAM1_region   00000000  200019a8  200019a8  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  200019a8  200019a8  000402e0  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   0005b271  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000bc4a  00000000  00000000  00099873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00025801  00000000  00000000  000a54bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002d98  00000000  00000000  000cacc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002f70  00000000  00000000  000cda58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002c80e  00000000  00000000  000d09c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004ce85  00000000  00000000  000fd1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e1998  00000000  00000000  0014a05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0022b9f3  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009488  00000000  00000000  0022ba44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002e0 	.word	0x200002e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08017f10 	.word	0x08017f10

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002e4 	.word	0x200002e4
 800017c:	08017f10 	.word	0x08017f10

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_fmul>:
 8000230:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000234:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000238:	bf1e      	ittt	ne
 800023a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800023e:	ea92 0f0c 	teqne	r2, ip
 8000242:	ea93 0f0c 	teqne	r3, ip
 8000246:	d06f      	beq.n	8000328 <__aeabi_fmul+0xf8>
 8000248:	441a      	add	r2, r3
 800024a:	ea80 0c01 	eor.w	ip, r0, r1
 800024e:	0240      	lsls	r0, r0, #9
 8000250:	bf18      	it	ne
 8000252:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000256:	d01e      	beq.n	8000296 <__aeabi_fmul+0x66>
 8000258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800025c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000260:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000264:	fba0 3101 	umull	r3, r1, r0, r1
 8000268:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800026c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000270:	bf3e      	ittt	cc
 8000272:	0049      	lslcc	r1, r1, #1
 8000274:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000278:	005b      	lslcc	r3, r3, #1
 800027a:	ea40 0001 	orr.w	r0, r0, r1
 800027e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000282:	2afd      	cmp	r2, #253	; 0xfd
 8000284:	d81d      	bhi.n	80002c2 <__aeabi_fmul+0x92>
 8000286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800028a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800028e:	bf08      	it	eq
 8000290:	f020 0001 	biceq.w	r0, r0, #1
 8000294:	4770      	bx	lr
 8000296:	f090 0f00 	teq	r0, #0
 800029a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800029e:	bf08      	it	eq
 80002a0:	0249      	lsleq	r1, r1, #9
 80002a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002aa:	3a7f      	subs	r2, #127	; 0x7f
 80002ac:	bfc2      	ittt	gt
 80002ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002b6:	4770      	bxgt	lr
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	3a01      	subs	r2, #1
 80002c2:	dc5d      	bgt.n	8000380 <__aeabi_fmul+0x150>
 80002c4:	f112 0f19 	cmn.w	r2, #25
 80002c8:	bfdc      	itt	le
 80002ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002ce:	4770      	bxle	lr
 80002d0:	f1c2 0200 	rsb	r2, r2, #0
 80002d4:	0041      	lsls	r1, r0, #1
 80002d6:	fa21 f102 	lsr.w	r1, r1, r2
 80002da:	f1c2 0220 	rsb	r2, r2, #32
 80002de:	fa00 fc02 	lsl.w	ip, r0, r2
 80002e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80002e6:	f140 0000 	adc.w	r0, r0, #0
 80002ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002ee:	bf08      	it	eq
 80002f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002f4:	4770      	bx	lr
 80002f6:	f092 0f00 	teq	r2, #0
 80002fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002fe:	bf02      	ittt	eq
 8000300:	0040      	lsleq	r0, r0, #1
 8000302:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000306:	3a01      	subeq	r2, #1
 8000308:	d0f9      	beq.n	80002fe <__aeabi_fmul+0xce>
 800030a:	ea40 000c 	orr.w	r0, r0, ip
 800030e:	f093 0f00 	teq	r3, #0
 8000312:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000316:	bf02      	ittt	eq
 8000318:	0049      	lsleq	r1, r1, #1
 800031a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800031e:	3b01      	subeq	r3, #1
 8000320:	d0f9      	beq.n	8000316 <__aeabi_fmul+0xe6>
 8000322:	ea41 010c 	orr.w	r1, r1, ip
 8000326:	e78f      	b.n	8000248 <__aeabi_fmul+0x18>
 8000328:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800032c:	ea92 0f0c 	teq	r2, ip
 8000330:	bf18      	it	ne
 8000332:	ea93 0f0c 	teqne	r3, ip
 8000336:	d00a      	beq.n	800034e <__aeabi_fmul+0x11e>
 8000338:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800033c:	bf18      	it	ne
 800033e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000342:	d1d8      	bne.n	80002f6 <__aeabi_fmul+0xc6>
 8000344:	ea80 0001 	eor.w	r0, r0, r1
 8000348:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800034c:	4770      	bx	lr
 800034e:	f090 0f00 	teq	r0, #0
 8000352:	bf17      	itett	ne
 8000354:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000358:	4608      	moveq	r0, r1
 800035a:	f091 0f00 	teqne	r1, #0
 800035e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000362:	d014      	beq.n	800038e <__aeabi_fmul+0x15e>
 8000364:	ea92 0f0c 	teq	r2, ip
 8000368:	d101      	bne.n	800036e <__aeabi_fmul+0x13e>
 800036a:	0242      	lsls	r2, r0, #9
 800036c:	d10f      	bne.n	800038e <__aeabi_fmul+0x15e>
 800036e:	ea93 0f0c 	teq	r3, ip
 8000372:	d103      	bne.n	800037c <__aeabi_fmul+0x14c>
 8000374:	024b      	lsls	r3, r1, #9
 8000376:	bf18      	it	ne
 8000378:	4608      	movne	r0, r1
 800037a:	d108      	bne.n	800038e <__aeabi_fmul+0x15e>
 800037c:	ea80 0001 	eor.w	r0, r0, r1
 8000380:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000384:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000388:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800038c:	4770      	bx	lr
 800038e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000392:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000396:	4770      	bx	lr

08000398 <__aeabi_drsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800039c:	e002      	b.n	80003a4 <__adddf3>
 800039e:	bf00      	nop

080003a0 <__aeabi_dsub>:
 80003a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003a4 <__adddf3>:
 80003a4:	b530      	push	{r4, r5, lr}
 80003a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ae:	ea94 0f05 	teq	r4, r5
 80003b2:	bf08      	it	eq
 80003b4:	ea90 0f02 	teqeq	r0, r2
 80003b8:	bf1f      	itttt	ne
 80003ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ca:	f000 80e2 	beq.w	8000592 <__adddf3+0x1ee>
 80003ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003d6:	bfb8      	it	lt
 80003d8:	426d      	neglt	r5, r5
 80003da:	dd0c      	ble.n	80003f6 <__adddf3+0x52>
 80003dc:	442c      	add	r4, r5
 80003de:	ea80 0202 	eor.w	r2, r0, r2
 80003e2:	ea81 0303 	eor.w	r3, r1, r3
 80003e6:	ea82 0000 	eor.w	r0, r2, r0
 80003ea:	ea83 0101 	eor.w	r1, r3, r1
 80003ee:	ea80 0202 	eor.w	r2, r0, r2
 80003f2:	ea81 0303 	eor.w	r3, r1, r3
 80003f6:	2d36      	cmp	r5, #54	; 0x36
 80003f8:	bf88      	it	hi
 80003fa:	bd30      	pophi	{r4, r5, pc}
 80003fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000400:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000404:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000408:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800040c:	d002      	beq.n	8000414 <__adddf3+0x70>
 800040e:	4240      	negs	r0, r0
 8000410:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000414:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000418:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800041c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000420:	d002      	beq.n	8000428 <__adddf3+0x84>
 8000422:	4252      	negs	r2, r2
 8000424:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000428:	ea94 0f05 	teq	r4, r5
 800042c:	f000 80a7 	beq.w	800057e <__adddf3+0x1da>
 8000430:	f1a4 0401 	sub.w	r4, r4, #1
 8000434:	f1d5 0e20 	rsbs	lr, r5, #32
 8000438:	db0d      	blt.n	8000456 <__adddf3+0xb2>
 800043a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800043e:	fa22 f205 	lsr.w	r2, r2, r5
 8000442:	1880      	adds	r0, r0, r2
 8000444:	f141 0100 	adc.w	r1, r1, #0
 8000448:	fa03 f20e 	lsl.w	r2, r3, lr
 800044c:	1880      	adds	r0, r0, r2
 800044e:	fa43 f305 	asr.w	r3, r3, r5
 8000452:	4159      	adcs	r1, r3
 8000454:	e00e      	b.n	8000474 <__adddf3+0xd0>
 8000456:	f1a5 0520 	sub.w	r5, r5, #32
 800045a:	f10e 0e20 	add.w	lr, lr, #32
 800045e:	2a01      	cmp	r2, #1
 8000460:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000464:	bf28      	it	cs
 8000466:	f04c 0c02 	orrcs.w	ip, ip, #2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	18c0      	adds	r0, r0, r3
 8000470:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	d507      	bpl.n	800048a <__adddf3+0xe6>
 800047a:	f04f 0e00 	mov.w	lr, #0
 800047e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000482:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000486:	eb6e 0101 	sbc.w	r1, lr, r1
 800048a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800048e:	d31b      	bcc.n	80004c8 <__adddf3+0x124>
 8000490:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000494:	d30c      	bcc.n	80004b0 <__adddf3+0x10c>
 8000496:	0849      	lsrs	r1, r1, #1
 8000498:	ea5f 0030 	movs.w	r0, r0, rrx
 800049c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a0:	f104 0401 	add.w	r4, r4, #1
 80004a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004ac:	f080 809a 	bcs.w	80005e4 <__adddf3+0x240>
 80004b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004b4:	bf08      	it	eq
 80004b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ba:	f150 0000 	adcs.w	r0, r0, #0
 80004be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004c2:	ea41 0105 	orr.w	r1, r1, r5
 80004c6:	bd30      	pop	{r4, r5, pc}
 80004c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004cc:	4140      	adcs	r0, r0
 80004ce:	eb41 0101 	adc.w	r1, r1, r1
 80004d2:	3c01      	subs	r4, #1
 80004d4:	bf28      	it	cs
 80004d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004da:	d2e9      	bcs.n	80004b0 <__adddf3+0x10c>
 80004dc:	f091 0f00 	teq	r1, #0
 80004e0:	bf04      	itt	eq
 80004e2:	4601      	moveq	r1, r0
 80004e4:	2000      	moveq	r0, #0
 80004e6:	fab1 f381 	clz	r3, r1
 80004ea:	bf08      	it	eq
 80004ec:	3320      	addeq	r3, #32
 80004ee:	f1a3 030b 	sub.w	r3, r3, #11
 80004f2:	f1b3 0220 	subs.w	r2, r3, #32
 80004f6:	da0c      	bge.n	8000512 <__adddf3+0x16e>
 80004f8:	320c      	adds	r2, #12
 80004fa:	dd08      	ble.n	800050e <__adddf3+0x16a>
 80004fc:	f102 0c14 	add.w	ip, r2, #20
 8000500:	f1c2 020c 	rsb	r2, r2, #12
 8000504:	fa01 f00c 	lsl.w	r0, r1, ip
 8000508:	fa21 f102 	lsr.w	r1, r1, r2
 800050c:	e00c      	b.n	8000528 <__adddf3+0x184>
 800050e:	f102 0214 	add.w	r2, r2, #20
 8000512:	bfd8      	it	le
 8000514:	f1c2 0c20 	rsble	ip, r2, #32
 8000518:	fa01 f102 	lsl.w	r1, r1, r2
 800051c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000520:	bfdc      	itt	le
 8000522:	ea41 010c 	orrle.w	r1, r1, ip
 8000526:	4090      	lslle	r0, r2
 8000528:	1ae4      	subs	r4, r4, r3
 800052a:	bfa2      	ittt	ge
 800052c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000530:	4329      	orrge	r1, r5
 8000532:	bd30      	popge	{r4, r5, pc}
 8000534:	ea6f 0404 	mvn.w	r4, r4
 8000538:	3c1f      	subs	r4, #31
 800053a:	da1c      	bge.n	8000576 <__adddf3+0x1d2>
 800053c:	340c      	adds	r4, #12
 800053e:	dc0e      	bgt.n	800055e <__adddf3+0x1ba>
 8000540:	f104 0414 	add.w	r4, r4, #20
 8000544:	f1c4 0220 	rsb	r2, r4, #32
 8000548:	fa20 f004 	lsr.w	r0, r0, r4
 800054c:	fa01 f302 	lsl.w	r3, r1, r2
 8000550:	ea40 0003 	orr.w	r0, r0, r3
 8000554:	fa21 f304 	lsr.w	r3, r1, r4
 8000558:	ea45 0103 	orr.w	r1, r5, r3
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	f1c4 040c 	rsb	r4, r4, #12
 8000562:	f1c4 0220 	rsb	r2, r4, #32
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 f304 	lsl.w	r3, r1, r4
 800056e:	ea40 0003 	orr.w	r0, r0, r3
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	fa21 f004 	lsr.w	r0, r1, r4
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f094 0f00 	teq	r4, #0
 8000582:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000586:	bf06      	itte	eq
 8000588:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800058c:	3401      	addeq	r4, #1
 800058e:	3d01      	subne	r5, #1
 8000590:	e74e      	b.n	8000430 <__adddf3+0x8c>
 8000592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000596:	bf18      	it	ne
 8000598:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800059c:	d029      	beq.n	80005f2 <__adddf3+0x24e>
 800059e:	ea94 0f05 	teq	r4, r5
 80005a2:	bf08      	it	eq
 80005a4:	ea90 0f02 	teqeq	r0, r2
 80005a8:	d005      	beq.n	80005b6 <__adddf3+0x212>
 80005aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ae:	bf04      	itt	eq
 80005b0:	4619      	moveq	r1, r3
 80005b2:	4610      	moveq	r0, r2
 80005b4:	bd30      	pop	{r4, r5, pc}
 80005b6:	ea91 0f03 	teq	r1, r3
 80005ba:	bf1e      	ittt	ne
 80005bc:	2100      	movne	r1, #0
 80005be:	2000      	movne	r0, #0
 80005c0:	bd30      	popne	{r4, r5, pc}
 80005c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005c6:	d105      	bne.n	80005d4 <__adddf3+0x230>
 80005c8:	0040      	lsls	r0, r0, #1
 80005ca:	4149      	adcs	r1, r1
 80005cc:	bf28      	it	cs
 80005ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005d2:	bd30      	pop	{r4, r5, pc}
 80005d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d8:	bf3c      	itt	cc
 80005da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005de:	bd30      	popcc	{r4, r5, pc}
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005ec:	f04f 0000 	mov.w	r0, #0
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf1a      	itte	ne
 80005f8:	4619      	movne	r1, r3
 80005fa:	4610      	movne	r0, r2
 80005fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000600:	bf1c      	itt	ne
 8000602:	460b      	movne	r3, r1
 8000604:	4602      	movne	r2, r0
 8000606:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800060a:	bf06      	itte	eq
 800060c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000610:	ea91 0f03 	teqeq	r1, r3
 8000614:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	bf00      	nop

0800061c <__aeabi_ui2d>:
 800061c:	f090 0f00 	teq	r0, #0
 8000620:	bf04      	itt	eq
 8000622:	2100      	moveq	r1, #0
 8000624:	4770      	bxeq	lr
 8000626:	b530      	push	{r4, r5, lr}
 8000628:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000630:	f04f 0500 	mov.w	r5, #0
 8000634:	f04f 0100 	mov.w	r1, #0
 8000638:	e750      	b.n	80004dc <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_i2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000650:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000654:	bf48      	it	mi
 8000656:	4240      	negmi	r0, r0
 8000658:	f04f 0100 	mov.w	r1, #0
 800065c:	e73e      	b.n	80004dc <__adddf3+0x138>
 800065e:	bf00      	nop

08000660 <__aeabi_f2d>:
 8000660:	0042      	lsls	r2, r0, #1
 8000662:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000666:	ea4f 0131 	mov.w	r1, r1, rrx
 800066a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800066e:	bf1f      	itttt	ne
 8000670:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000674:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000678:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800067c:	4770      	bxne	lr
 800067e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000682:	bf08      	it	eq
 8000684:	4770      	bxeq	lr
 8000686:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800068a:	bf04      	itt	eq
 800068c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000690:	4770      	bxeq	lr
 8000692:	b530      	push	{r4, r5, lr}
 8000694:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800069c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	e71c      	b.n	80004dc <__adddf3+0x138>
 80006a2:	bf00      	nop

080006a4 <__aeabi_ul2d>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	b530      	push	{r4, r5, lr}
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	e00a      	b.n	80006ca <__aeabi_l2d+0x16>

080006b4 <__aeabi_l2d>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	b530      	push	{r4, r5, lr}
 80006be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006c2:	d502      	bpl.n	80006ca <__aeabi_l2d+0x16>
 80006c4:	4240      	negs	r0, r0
 80006c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006d6:	f43f aed8 	beq.w	800048a <__adddf3+0xe6>
 80006da:	f04f 0203 	mov.w	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006f2:	f1c2 0320 	rsb	r3, r2, #32
 80006f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006fa:	fa20 f002 	lsr.w	r0, r0, r2
 80006fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000702:	ea40 000e 	orr.w	r0, r0, lr
 8000706:	fa21 f102 	lsr.w	r1, r1, r2
 800070a:	4414      	add	r4, r2
 800070c:	e6bd      	b.n	800048a <__adddf3+0xe6>
 800070e:	bf00      	nop

08000710 <__aeabi_dmul>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8de 	bleq	80008ec <__aeabi_dmul+0x1dc>
 8000730:	442c      	add	r4, r5
 8000732:	ea81 0603 	eor.w	r6, r1, r3
 8000736:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800073a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800073e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000742:	bf18      	it	ne
 8000744:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800074c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000750:	d038      	beq.n	80007c4 <__aeabi_dmul+0xb4>
 8000752:	fba0 ce02 	umull	ip, lr, r0, r2
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800075e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000762:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000766:	f04f 0600 	mov.w	r6, #0
 800076a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800076e:	f09c 0f00 	teq	ip, #0
 8000772:	bf18      	it	ne
 8000774:	f04e 0e01 	orrne.w	lr, lr, #1
 8000778:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800077c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000780:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000784:	d204      	bcs.n	8000790 <__aeabi_dmul+0x80>
 8000786:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800078a:	416d      	adcs	r5, r5
 800078c:	eb46 0606 	adc.w	r6, r6, r6
 8000790:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000794:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000798:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800079c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007a8:	bf88      	it	hi
 80007aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007ae:	d81e      	bhi.n	80007ee <__aeabi_dmul+0xde>
 80007b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007b4:	bf08      	it	eq
 80007b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007ba:	f150 0000 	adcs.w	r0, r0, #0
 80007be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007c8:	ea46 0101 	orr.w	r1, r6, r1
 80007cc:	ea40 0002 	orr.w	r0, r0, r2
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d8:	bfc2      	ittt	gt
 80007da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007e2:	bd70      	popgt	{r4, r5, r6, pc}
 80007e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e8:	f04f 0e00 	mov.w	lr, #0
 80007ec:	3c01      	subs	r4, #1
 80007ee:	f300 80ab 	bgt.w	8000948 <__aeabi_dmul+0x238>
 80007f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007f6:	bfde      	ittt	le
 80007f8:	2000      	movle	r0, #0
 80007fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007fe:	bd70      	pople	{r4, r5, r6, pc}
 8000800:	f1c4 0400 	rsb	r4, r4, #0
 8000804:	3c20      	subs	r4, #32
 8000806:	da35      	bge.n	8000874 <__aeabi_dmul+0x164>
 8000808:	340c      	adds	r4, #12
 800080a:	dc1b      	bgt.n	8000844 <__aeabi_dmul+0x134>
 800080c:	f104 0414 	add.w	r4, r4, #20
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f305 	lsl.w	r3, r0, r5
 8000818:	fa20 f004 	lsr.w	r0, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800082c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000830:	fa21 f604 	lsr.w	r6, r1, r4
 8000834:	eb42 0106 	adc.w	r1, r2, r6
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f1c4 040c 	rsb	r4, r4, #12
 8000848:	f1c4 0520 	rsb	r5, r4, #32
 800084c:	fa00 f304 	lsl.w	r3, r0, r4
 8000850:	fa20 f005 	lsr.w	r0, r0, r5
 8000854:	fa01 f204 	lsl.w	r2, r1, r4
 8000858:	ea40 0002 	orr.w	r0, r0, r2
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000860:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000864:	f141 0100 	adc.w	r1, r1, #0
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f1c4 0520 	rsb	r5, r4, #32
 8000878:	fa00 f205 	lsl.w	r2, r0, r5
 800087c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000880:	fa20 f304 	lsr.w	r3, r0, r4
 8000884:	fa01 f205 	lsl.w	r2, r1, r5
 8000888:	ea43 0302 	orr.w	r3, r3, r2
 800088c:	fa21 f004 	lsr.w	r0, r1, r4
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	fa21 f204 	lsr.w	r2, r1, r4
 8000898:	ea20 0002 	bic.w	r0, r0, r2
 800089c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008a4:	bf08      	it	eq
 80008a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
 80008ac:	f094 0f00 	teq	r4, #0
 80008b0:	d10f      	bne.n	80008d2 <__aeabi_dmul+0x1c2>
 80008b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008b6:	0040      	lsls	r0, r0, #1
 80008b8:	eb41 0101 	adc.w	r1, r1, r1
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	bf08      	it	eq
 80008c2:	3c01      	subeq	r4, #1
 80008c4:	d0f7      	beq.n	80008b6 <__aeabi_dmul+0x1a6>
 80008c6:	ea41 0106 	orr.w	r1, r1, r6
 80008ca:	f095 0f00 	teq	r5, #0
 80008ce:	bf18      	it	ne
 80008d0:	4770      	bxne	lr
 80008d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008d6:	0052      	lsls	r2, r2, #1
 80008d8:	eb43 0303 	adc.w	r3, r3, r3
 80008dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008e0:	bf08      	it	eq
 80008e2:	3d01      	subeq	r5, #1
 80008e4:	d0f7      	beq.n	80008d6 <__aeabi_dmul+0x1c6>
 80008e6:	ea43 0306 	orr.w	r3, r3, r6
 80008ea:	4770      	bx	lr
 80008ec:	ea94 0f0c 	teq	r4, ip
 80008f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008f4:	bf18      	it	ne
 80008f6:	ea95 0f0c 	teqne	r5, ip
 80008fa:	d00c      	beq.n	8000916 <__aeabi_dmul+0x206>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	d1d1      	bne.n	80008ac <__aeabi_dmul+0x19c>
 8000908:	ea81 0103 	eor.w	r1, r1, r3
 800090c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	bd70      	pop	{r4, r5, r6, pc}
 8000916:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800091a:	bf06      	itte	eq
 800091c:	4610      	moveq	r0, r2
 800091e:	4619      	moveq	r1, r3
 8000920:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000924:	d019      	beq.n	800095a <__aeabi_dmul+0x24a>
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	d102      	bne.n	8000932 <__aeabi_dmul+0x222>
 800092c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000930:	d113      	bne.n	800095a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	d105      	bne.n	8000944 <__aeabi_dmul+0x234>
 8000938:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800093c:	bf1c      	itt	ne
 800093e:	4610      	movne	r0, r2
 8000940:	4619      	movne	r1, r3
 8000942:	d10a      	bne.n	800095a <__aeabi_dmul+0x24a>
 8000944:	ea81 0103 	eor.w	r1, r1, r3
 8000948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800094c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000950:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800095e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000962:	bd70      	pop	{r4, r5, r6, pc}

08000964 <__aeabi_ddiv>:
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800096a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800096e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000972:	bf1d      	ittte	ne
 8000974:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000978:	ea94 0f0c 	teqne	r4, ip
 800097c:	ea95 0f0c 	teqne	r5, ip
 8000980:	f000 f8a7 	bleq	8000ad2 <__aeabi_ddiv+0x16e>
 8000984:	eba4 0405 	sub.w	r4, r4, r5
 8000988:	ea81 0e03 	eor.w	lr, r1, r3
 800098c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000990:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000994:	f000 8088 	beq.w	8000aa8 <__aeabi_ddiv+0x144>
 8000998:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800099c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009bc:	429d      	cmp	r5, r3
 80009be:	bf08      	it	eq
 80009c0:	4296      	cmpeq	r6, r2
 80009c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ca:	d202      	bcs.n	80009d2 <__aeabi_ddiv+0x6e>
 80009cc:	085b      	lsrs	r3, r3, #1
 80009ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d2:	1ab6      	subs	r6, r6, r2
 80009d4:	eb65 0503 	sbc.w	r5, r5, r3
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a36:	bf22      	ittt	cs
 8000a38:	1ab6      	subcs	r6, r6, r2
 8000a3a:	4675      	movcs	r5, lr
 8000a3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a40:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a44:	d018      	beq.n	8000a78 <__aeabi_ddiv+0x114>
 8000a46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a62:	d1c0      	bne.n	80009e6 <__aeabi_ddiv+0x82>
 8000a64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a68:	d10b      	bne.n	8000a82 <__aeabi_ddiv+0x11e>
 8000a6a:	ea41 0100 	orr.w	r1, r1, r0
 8000a6e:	f04f 0000 	mov.w	r0, #0
 8000a72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a76:	e7b6      	b.n	80009e6 <__aeabi_ddiv+0x82>
 8000a78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a7c:	bf04      	itt	eq
 8000a7e:	4301      	orreq	r1, r0
 8000a80:	2000      	moveq	r0, #0
 8000a82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a86:	bf88      	it	hi
 8000a88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a8c:	f63f aeaf 	bhi.w	80007ee <__aeabi_dmul+0xde>
 8000a90:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a94:	bf04      	itt	eq
 8000a96:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a9e:	f150 0000 	adcs.w	r0, r0, #0
 8000aa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000aac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ab4:	bfc2      	ittt	gt
 8000ab6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000abe:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac4:	f04f 0e00 	mov.w	lr, #0
 8000ac8:	3c01      	subs	r4, #1
 8000aca:	e690      	b.n	80007ee <__aeabi_dmul+0xde>
 8000acc:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad0:	e68d      	b.n	80007ee <__aeabi_dmul+0xde>
 8000ad2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ad6:	ea94 0f0c 	teq	r4, ip
 8000ada:	bf08      	it	eq
 8000adc:	ea95 0f0c 	teqeq	r5, ip
 8000ae0:	f43f af3b 	beq.w	800095a <__aeabi_dmul+0x24a>
 8000ae4:	ea94 0f0c 	teq	r4, ip
 8000ae8:	d10a      	bne.n	8000b00 <__aeabi_ddiv+0x19c>
 8000aea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aee:	f47f af34 	bne.w	800095a <__aeabi_dmul+0x24a>
 8000af2:	ea95 0f0c 	teq	r5, ip
 8000af6:	f47f af25 	bne.w	8000944 <__aeabi_dmul+0x234>
 8000afa:	4610      	mov	r0, r2
 8000afc:	4619      	mov	r1, r3
 8000afe:	e72c      	b.n	800095a <__aeabi_dmul+0x24a>
 8000b00:	ea95 0f0c 	teq	r5, ip
 8000b04:	d106      	bne.n	8000b14 <__aeabi_ddiv+0x1b0>
 8000b06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b0a:	f43f aefd 	beq.w	8000908 <__aeabi_dmul+0x1f8>
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4619      	mov	r1, r3
 8000b12:	e722      	b.n	800095a <__aeabi_dmul+0x24a>
 8000b14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b18:	bf18      	it	ne
 8000b1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b1e:	f47f aec5 	bne.w	80008ac <__aeabi_dmul+0x19c>
 8000b22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b26:	f47f af0d 	bne.w	8000944 <__aeabi_dmul+0x234>
 8000b2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b2e:	f47f aeeb 	bne.w	8000908 <__aeabi_dmul+0x1f8>
 8000b32:	e712      	b.n	800095a <__aeabi_dmul+0x24a>

08000b34 <__gedf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295
 8000b38:	e006      	b.n	8000b48 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__ledf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpdf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b5e:	d01b      	beq.n	8000b98 <__cmpdf2+0x54>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b66:	bf0c      	ite	eq
 8000b68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b6c:	ea91 0f03 	teqne	r1, r3
 8000b70:	bf02      	ittt	eq
 8000b72:	ea90 0f02 	teqeq	r0, r2
 8000b76:	2000      	moveq	r0, #0
 8000b78:	4770      	bxeq	lr
 8000b7a:	f110 0f00 	cmn.w	r0, #0
 8000b7e:	ea91 0f03 	teq	r1, r3
 8000b82:	bf58      	it	pl
 8000b84:	4299      	cmppl	r1, r3
 8000b86:	bf08      	it	eq
 8000b88:	4290      	cmpeq	r0, r2
 8000b8a:	bf2c      	ite	cs
 8000b8c:	17d8      	asrcs	r0, r3, #31
 8000b8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b92:	f040 0001 	orr.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__cmpdf2+0x64>
 8000ba2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ba6:	d107      	bne.n	8000bb8 <__cmpdf2+0x74>
 8000ba8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb0:	d1d6      	bne.n	8000b60 <__cmpdf2+0x1c>
 8000bb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bb6:	d0d3      	beq.n	8000b60 <__cmpdf2+0x1c>
 8000bb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_cdrcmple>:
 8000bc0:	4684      	mov	ip, r0
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4662      	mov	r2, ip
 8000bc6:	468c      	mov	ip, r1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4663      	mov	r3, ip
 8000bcc:	e000      	b.n	8000bd0 <__aeabi_cdcmpeq>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_cdcmpeq>:
 8000bd0:	b501      	push	{r0, lr}
 8000bd2:	f7ff ffb7 	bl	8000b44 <__cmpdf2>
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	bf48      	it	mi
 8000bda:	f110 0f00 	cmnmi.w	r0, #0
 8000bde:	bd01      	pop	{r0, pc}

08000be0 <__aeabi_dcmpeq>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff fff4 	bl	8000bd0 <__aeabi_cdcmpeq>
 8000be8:	bf0c      	ite	eq
 8000bea:	2001      	moveq	r0, #1
 8000bec:	2000      	movne	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmplt>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffea 	bl	8000bd0 <__aeabi_cdcmpeq>
 8000bfc:	bf34      	ite	cc
 8000bfe:	2001      	movcc	r0, #1
 8000c00:	2000      	movcs	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmple>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffe0 	bl	8000bd0 <__aeabi_cdcmpeq>
 8000c10:	bf94      	ite	ls
 8000c12:	2001      	movls	r0, #1
 8000c14:	2000      	movhi	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpge>:
 8000c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c20:	f7ff ffce 	bl	8000bc0 <__aeabi_cdrcmple>
 8000c24:	bf94      	ite	ls
 8000c26:	2001      	movls	r0, #1
 8000c28:	2000      	movhi	r0, #0
 8000c2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2e:	bf00      	nop

08000c30 <__aeabi_dcmpgt>:
 8000c30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c34:	f7ff ffc4 	bl	8000bc0 <__aeabi_cdrcmple>
 8000c38:	bf34      	ite	cc
 8000c3a:	2001      	movcc	r0, #1
 8000c3c:	2000      	movcs	r0, #0
 8000c3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c42:	bf00      	nop

08000c44 <__aeabi_dcmpun>:
 8000c44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c4c:	d102      	bne.n	8000c54 <__aeabi_dcmpun+0x10>
 8000c4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c52:	d10a      	bne.n	8000c6a <__aeabi_dcmpun+0x26>
 8000c54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c5c:	d102      	bne.n	8000c64 <__aeabi_dcmpun+0x20>
 8000c5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c62:	d102      	bne.n	8000c6a <__aeabi_dcmpun+0x26>
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	f04f 0001 	mov.w	r0, #1
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_d2iz>:
 8000c70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c78:	d215      	bcs.n	8000ca6 <__aeabi_d2iz+0x36>
 8000c7a:	d511      	bpl.n	8000ca0 <__aeabi_d2iz+0x30>
 8000c7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c84:	d912      	bls.n	8000cac <__aeabi_d2iz+0x3c>
 8000c86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c96:	fa23 f002 	lsr.w	r0, r3, r2
 8000c9a:	bf18      	it	ne
 8000c9c:	4240      	negne	r0, r0
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000caa:	d105      	bne.n	8000cb8 <__aeabi_d2iz+0x48>
 8000cac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cb6:	4770      	bx	lr
 8000cb8:	f04f 0000 	mov.w	r0, #0
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_d2uiz>:
 8000cc0:	004a      	lsls	r2, r1, #1
 8000cc2:	d211      	bcs.n	8000ce8 <__aeabi_d2uiz+0x28>
 8000cc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cc8:	d211      	bcs.n	8000cee <__aeabi_d2uiz+0x2e>
 8000cca:	d50d      	bpl.n	8000ce8 <__aeabi_d2uiz+0x28>
 8000ccc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cd4:	d40e      	bmi.n	8000cf4 <__aeabi_d2uiz+0x34>
 8000cd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ce2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ce6:	4770      	bx	lr
 8000ce8:	f04f 0000 	mov.w	r0, #0
 8000cec:	4770      	bx	lr
 8000cee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cf2:	d102      	bne.n	8000cfa <__aeabi_d2uiz+0x3a>
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	4770      	bx	lr
 8000cfa:	f04f 0000 	mov.w	r0, #0
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_d2f>:
 8000d00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000d08:	bf24      	itt	cs
 8000d0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000d0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000d12:	d90d      	bls.n	8000d30 <__aeabi_d2f+0x30>
 8000d14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d34:	d121      	bne.n	8000d7a <__aeabi_d2f+0x7a>
 8000d36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d3a:	bfbc      	itt	lt
 8000d3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d40:	4770      	bxlt	lr
 8000d42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d4a:	f1c2 0218 	rsb	r2, r2, #24
 8000d4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000d52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d56:	fa20 f002 	lsr.w	r0, r0, r2
 8000d5a:	bf18      	it	ne
 8000d5c:	f040 0001 	orrne.w	r0, r0, #1
 8000d60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d6c:	ea40 000c 	orr.w	r0, r0, ip
 8000d70:	fa23 f302 	lsr.w	r3, r3, r2
 8000d74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d78:	e7cc      	b.n	8000d14 <__aeabi_d2f+0x14>
 8000d7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d7e:	d107      	bne.n	8000d90 <__aeabi_d2f+0x90>
 8000d80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d84:	bf1e      	ittt	ne
 8000d86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d8e:	4770      	bxne	lr
 8000d90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <__aeabi_frsub>:
 8000da0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	e002      	b.n	8000dac <__addsf3>
 8000da6:	bf00      	nop

08000da8 <__aeabi_fsub>:
 8000da8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dac <__addsf3>:
 8000dac:	0042      	lsls	r2, r0, #1
 8000dae:	bf1f      	itttt	ne
 8000db0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000db4:	ea92 0f03 	teqne	r2, r3
 8000db8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc0:	d06a      	beq.n	8000e98 <__addsf3+0xec>
 8000dc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dca:	bfc1      	itttt	gt
 8000dcc:	18d2      	addgt	r2, r2, r3
 8000dce:	4041      	eorgt	r1, r0
 8000dd0:	4048      	eorgt	r0, r1
 8000dd2:	4041      	eorgt	r1, r0
 8000dd4:	bfb8      	it	lt
 8000dd6:	425b      	neglt	r3, r3
 8000dd8:	2b19      	cmp	r3, #25
 8000dda:	bf88      	it	hi
 8000ddc:	4770      	bxhi	lr
 8000dde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000de2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000dea:	bf18      	it	ne
 8000dec:	4240      	negne	r0, r0
 8000dee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000df2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000df6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000dfa:	bf18      	it	ne
 8000dfc:	4249      	negne	r1, r1
 8000dfe:	ea92 0f03 	teq	r2, r3
 8000e02:	d03f      	beq.n	8000e84 <__addsf3+0xd8>
 8000e04:	f1a2 0201 	sub.w	r2, r2, #1
 8000e08:	fa41 fc03 	asr.w	ip, r1, r3
 8000e0c:	eb10 000c 	adds.w	r0, r0, ip
 8000e10:	f1c3 0320 	rsb	r3, r3, #32
 8000e14:	fa01 f103 	lsl.w	r1, r1, r3
 8000e18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e1c:	d502      	bpl.n	8000e24 <__addsf3+0x78>
 8000e1e:	4249      	negs	r1, r1
 8000e20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e28:	d313      	bcc.n	8000e52 <__addsf3+0xa6>
 8000e2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e2e:	d306      	bcc.n	8000e3e <__addsf3+0x92>
 8000e30:	0840      	lsrs	r0, r0, #1
 8000e32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e36:	f102 0201 	add.w	r2, r2, #1
 8000e3a:	2afe      	cmp	r2, #254	; 0xfe
 8000e3c:	d251      	bcs.n	8000ee2 <__addsf3+0x136>
 8000e3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e46:	bf08      	it	eq
 8000e48:	f020 0001 	biceq.w	r0, r0, #1
 8000e4c:	ea40 0003 	orr.w	r0, r0, r3
 8000e50:	4770      	bx	lr
 8000e52:	0049      	lsls	r1, r1, #1
 8000e54:	eb40 0000 	adc.w	r0, r0, r0
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	bf28      	it	cs
 8000e5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e60:	d2ed      	bcs.n	8000e3e <__addsf3+0x92>
 8000e62:	fab0 fc80 	clz	ip, r0
 8000e66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000e6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e72:	bfaa      	itet	ge
 8000e74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e78:	4252      	neglt	r2, r2
 8000e7a:	4318      	orrge	r0, r3
 8000e7c:	bfbc      	itt	lt
 8000e7e:	40d0      	lsrlt	r0, r2
 8000e80:	4318      	orrlt	r0, r3
 8000e82:	4770      	bx	lr
 8000e84:	f092 0f00 	teq	r2, #0
 8000e88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000e8c:	bf06      	itte	eq
 8000e8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000e92:	3201      	addeq	r2, #1
 8000e94:	3b01      	subne	r3, #1
 8000e96:	e7b5      	b.n	8000e04 <__addsf3+0x58>
 8000e98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea0:	bf18      	it	ne
 8000ea2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ea6:	d021      	beq.n	8000eec <__addsf3+0x140>
 8000ea8:	ea92 0f03 	teq	r2, r3
 8000eac:	d004      	beq.n	8000eb8 <__addsf3+0x10c>
 8000eae:	f092 0f00 	teq	r2, #0
 8000eb2:	bf08      	it	eq
 8000eb4:	4608      	moveq	r0, r1
 8000eb6:	4770      	bx	lr
 8000eb8:	ea90 0f01 	teq	r0, r1
 8000ebc:	bf1c      	itt	ne
 8000ebe:	2000      	movne	r0, #0
 8000ec0:	4770      	bxne	lr
 8000ec2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ec6:	d104      	bne.n	8000ed2 <__addsf3+0x126>
 8000ec8:	0040      	lsls	r0, r0, #1
 8000eca:	bf28      	it	cs
 8000ecc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ed6:	bf3c      	itt	cc
 8000ed8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bxcc	lr
 8000ede:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ee2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ee6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eea:	4770      	bx	lr
 8000eec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef0:	bf16      	itet	ne
 8000ef2:	4608      	movne	r0, r1
 8000ef4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ef8:	4601      	movne	r1, r0
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	bf06      	itte	eq
 8000efe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f02:	ea90 0f01 	teqeq	r0, r1
 8000f06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_ui2f>:
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	e004      	b.n	8000f1c <__aeabi_i2f+0x8>
 8000f12:	bf00      	nop

08000f14 <__aeabi_i2f>:
 8000f14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f18:	bf48      	it	mi
 8000f1a:	4240      	negmi	r0, r0
 8000f1c:	ea5f 0c00 	movs.w	ip, r0
 8000f20:	bf08      	it	eq
 8000f22:	4770      	bxeq	lr
 8000f24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f28:	4601      	mov	r1, r0
 8000f2a:	f04f 0000 	mov.w	r0, #0
 8000f2e:	e01c      	b.n	8000f6a <__aeabi_l2f+0x2a>

08000f30 <__aeabi_ul2f>:
 8000f30:	ea50 0201 	orrs.w	r2, r0, r1
 8000f34:	bf08      	it	eq
 8000f36:	4770      	bxeq	lr
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e00a      	b.n	8000f54 <__aeabi_l2f+0x14>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_l2f>:
 8000f40:	ea50 0201 	orrs.w	r2, r0, r1
 8000f44:	bf08      	it	eq
 8000f46:	4770      	bxeq	lr
 8000f48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f4c:	d502      	bpl.n	8000f54 <__aeabi_l2f+0x14>
 8000f4e:	4240      	negs	r0, r0
 8000f50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f54:	ea5f 0c01 	movs.w	ip, r1
 8000f58:	bf02      	ittt	eq
 8000f5a:	4684      	moveq	ip, r0
 8000f5c:	4601      	moveq	r1, r0
 8000f5e:	2000      	moveq	r0, #0
 8000f60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f64:	bf08      	it	eq
 8000f66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f6e:	fabc f28c 	clz	r2, ip
 8000f72:	3a08      	subs	r2, #8
 8000f74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f78:	db10      	blt.n	8000f9c <__aeabi_l2f+0x5c>
 8000f7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f7e:	4463      	add	r3, ip
 8000f80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f84:	f1c2 0220 	rsb	r2, r2, #32
 8000f88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000f90:	eb43 0002 	adc.w	r0, r3, r2
 8000f94:	bf08      	it	eq
 8000f96:	f020 0001 	biceq.w	r0, r0, #1
 8000f9a:	4770      	bx	lr
 8000f9c:	f102 0220 	add.w	r2, r2, #32
 8000fa0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fa4:	f1c2 0220 	rsb	r2, r2, #32
 8000fa8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fac:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb0:	eb43 0002 	adc.w	r0, r3, r2
 8000fb4:	bf08      	it	eq
 8000fb6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_f2iz>:
 8000fbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fc4:	d30f      	bcc.n	8000fe6 <__aeabi_f2iz+0x2a>
 8000fc6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fce:	d90d      	bls.n	8000fec <__aeabi_f2iz+0x30>
 8000fd0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fdc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe0:	bf18      	it	ne
 8000fe2:	4240      	negne	r0, r0
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr
 8000fec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ff0:	d101      	bne.n	8000ff6 <__aeabi_f2iz+0x3a>
 8000ff2:	0242      	lsls	r2, r0, #9
 8000ff4:	d105      	bne.n	8001002 <__aeabi_f2iz+0x46>
 8000ff6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ffa:	bf08      	it	eq
 8000ffc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001000:	4770      	bx	lr
 8001002:	f04f 0000 	mov.w	r0, #0
 8001006:	4770      	bx	lr

08001008 <__aeabi_f2uiz>:
 8001008:	0042      	lsls	r2, r0, #1
 800100a:	d20e      	bcs.n	800102a <__aeabi_f2uiz+0x22>
 800100c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001010:	d30b      	bcc.n	800102a <__aeabi_f2uiz+0x22>
 8001012:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001016:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101a:	d409      	bmi.n	8001030 <__aeabi_f2uiz+0x28>
 800101c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001020:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001024:	fa23 f002 	lsr.w	r0, r3, r2
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr
 8001030:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001034:	d101      	bne.n	800103a <__aeabi_f2uiz+0x32>
 8001036:	0242      	lsls	r2, r0, #9
 8001038:	d102      	bne.n	8001040 <__aeabi_f2uiz+0x38>
 800103a:	f04f 30ff 	mov.w	r0, #4294967295
 800103e:	4770      	bx	lr
 8001040:	f04f 0000 	mov.w	r0, #0
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__aeabi_uldivmod>:
 8001048:	b953      	cbnz	r3, 8001060 <__aeabi_uldivmod+0x18>
 800104a:	b94a      	cbnz	r2, 8001060 <__aeabi_uldivmod+0x18>
 800104c:	2900      	cmp	r1, #0
 800104e:	bf08      	it	eq
 8001050:	2800      	cmpeq	r0, #0
 8001052:	bf1c      	itt	ne
 8001054:	f04f 31ff 	movne.w	r1, #4294967295
 8001058:	f04f 30ff 	movne.w	r0, #4294967295
 800105c:	f000 b9ac 	b.w	80013b8 <__aeabi_idiv0>
 8001060:	f1ad 0c08 	sub.w	ip, sp, #8
 8001064:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001068:	f000 f83e 	bl	80010e8 <__udivmoddi4>
 800106c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001074:	b004      	add	sp, #16
 8001076:	4770      	bx	lr

08001078 <__aeabi_d2lz>:
 8001078:	b538      	push	{r3, r4, r5, lr}
 800107a:	4605      	mov	r5, r0
 800107c:	460c      	mov	r4, r1
 800107e:	4628      	mov	r0, r5
 8001080:	4621      	mov	r1, r4
 8001082:	2200      	movs	r2, #0
 8001084:	2300      	movs	r3, #0
 8001086:	f7ff fdb5 	bl	8000bf4 <__aeabi_dcmplt>
 800108a:	b928      	cbnz	r0, 8001098 <__aeabi_d2lz+0x20>
 800108c:	4628      	mov	r0, r5
 800108e:	4621      	mov	r1, r4
 8001090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001094:	f000 b80a 	b.w	80010ac <__aeabi_d2ulz>
 8001098:	4628      	mov	r0, r5
 800109a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800109e:	f000 f805 	bl	80010ac <__aeabi_d2ulz>
 80010a2:	4240      	negs	r0, r0
 80010a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a8:	bd38      	pop	{r3, r4, r5, pc}
 80010aa:	bf00      	nop

080010ac <__aeabi_d2ulz>:
 80010ac:	b5d0      	push	{r4, r6, r7, lr}
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__aeabi_d2ulz+0x34>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	4606      	mov	r6, r0
 80010b4:	460f      	mov	r7, r1
 80010b6:	f7ff fb2b 	bl	8000710 <__aeabi_dmul>
 80010ba:	f7ff fe01 	bl	8000cc0 <__aeabi_d2uiz>
 80010be:	4604      	mov	r4, r0
 80010c0:	f7ff faac 	bl	800061c <__aeabi_ui2d>
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <__aeabi_d2ulz+0x38>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	f7ff fb22 	bl	8000710 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4630      	mov	r0, r6
 80010d2:	4639      	mov	r1, r7
 80010d4:	f7ff f964 	bl	80003a0 <__aeabi_dsub>
 80010d8:	f7ff fdf2 	bl	8000cc0 <__aeabi_d2uiz>
 80010dc:	4621      	mov	r1, r4
 80010de:	bdd0      	pop	{r4, r6, r7, pc}
 80010e0:	3df00000 	.word	0x3df00000
 80010e4:	41f00000 	.word	0x41f00000

080010e8 <__udivmoddi4>:
 80010e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010ec:	9e08      	ldr	r6, [sp, #32]
 80010ee:	460d      	mov	r5, r1
 80010f0:	4604      	mov	r4, r0
 80010f2:	4688      	mov	r8, r1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d14d      	bne.n	8001194 <__udivmoddi4+0xac>
 80010f8:	428a      	cmp	r2, r1
 80010fa:	4694      	mov	ip, r2
 80010fc:	d968      	bls.n	80011d0 <__udivmoddi4+0xe8>
 80010fe:	fab2 f282 	clz	r2, r2
 8001102:	b152      	cbz	r2, 800111a <__udivmoddi4+0x32>
 8001104:	fa01 f302 	lsl.w	r3, r1, r2
 8001108:	f1c2 0120 	rsb	r1, r2, #32
 800110c:	fa20 f101 	lsr.w	r1, r0, r1
 8001110:	fa0c fc02 	lsl.w	ip, ip, r2
 8001114:	ea41 0803 	orr.w	r8, r1, r3
 8001118:	4094      	lsls	r4, r2
 800111a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800111e:	0c21      	lsrs	r1, r4, #16
 8001120:	fbb8 fef5 	udiv	lr, r8, r5
 8001124:	fa1f f78c 	uxth.w	r7, ip
 8001128:	fb05 831e 	mls	r3, r5, lr, r8
 800112c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001130:	fb0e f107 	mul.w	r1, lr, r7
 8001134:	4299      	cmp	r1, r3
 8001136:	d90b      	bls.n	8001150 <__udivmoddi4+0x68>
 8001138:	eb1c 0303 	adds.w	r3, ip, r3
 800113c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8001140:	f080 811e 	bcs.w	8001380 <__udivmoddi4+0x298>
 8001144:	4299      	cmp	r1, r3
 8001146:	f240 811b 	bls.w	8001380 <__udivmoddi4+0x298>
 800114a:	f1ae 0e02 	sub.w	lr, lr, #2
 800114e:	4463      	add	r3, ip
 8001150:	1a5b      	subs	r3, r3, r1
 8001152:	b2a4      	uxth	r4, r4
 8001154:	fbb3 f0f5 	udiv	r0, r3, r5
 8001158:	fb05 3310 	mls	r3, r5, r0, r3
 800115c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001160:	fb00 f707 	mul.w	r7, r0, r7
 8001164:	42a7      	cmp	r7, r4
 8001166:	d90a      	bls.n	800117e <__udivmoddi4+0x96>
 8001168:	eb1c 0404 	adds.w	r4, ip, r4
 800116c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001170:	f080 8108 	bcs.w	8001384 <__udivmoddi4+0x29c>
 8001174:	42a7      	cmp	r7, r4
 8001176:	f240 8105 	bls.w	8001384 <__udivmoddi4+0x29c>
 800117a:	4464      	add	r4, ip
 800117c:	3802      	subs	r0, #2
 800117e:	1be4      	subs	r4, r4, r7
 8001180:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001184:	2100      	movs	r1, #0
 8001186:	b11e      	cbz	r6, 8001190 <__udivmoddi4+0xa8>
 8001188:	40d4      	lsrs	r4, r2
 800118a:	2300      	movs	r3, #0
 800118c:	e9c6 4300 	strd	r4, r3, [r6]
 8001190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001194:	428b      	cmp	r3, r1
 8001196:	d908      	bls.n	80011aa <__udivmoddi4+0xc2>
 8001198:	2e00      	cmp	r6, #0
 800119a:	f000 80ee 	beq.w	800137a <__udivmoddi4+0x292>
 800119e:	2100      	movs	r1, #0
 80011a0:	e9c6 0500 	strd	r0, r5, [r6]
 80011a4:	4608      	mov	r0, r1
 80011a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011aa:	fab3 f183 	clz	r1, r3
 80011ae:	2900      	cmp	r1, #0
 80011b0:	d14a      	bne.n	8001248 <__udivmoddi4+0x160>
 80011b2:	42ab      	cmp	r3, r5
 80011b4:	d302      	bcc.n	80011bc <__udivmoddi4+0xd4>
 80011b6:	4282      	cmp	r2, r0
 80011b8:	f200 80f9 	bhi.w	80013ae <__udivmoddi4+0x2c6>
 80011bc:	1a84      	subs	r4, r0, r2
 80011be:	eb65 0303 	sbc.w	r3, r5, r3
 80011c2:	2001      	movs	r0, #1
 80011c4:	4698      	mov	r8, r3
 80011c6:	2e00      	cmp	r6, #0
 80011c8:	d0e2      	beq.n	8001190 <__udivmoddi4+0xa8>
 80011ca:	e9c6 4800 	strd	r4, r8, [r6]
 80011ce:	e7df      	b.n	8001190 <__udivmoddi4+0xa8>
 80011d0:	b902      	cbnz	r2, 80011d4 <__udivmoddi4+0xec>
 80011d2:	deff      	udf	#255	; 0xff
 80011d4:	fab2 f282 	clz	r2, r2
 80011d8:	2a00      	cmp	r2, #0
 80011da:	f040 8091 	bne.w	8001300 <__udivmoddi4+0x218>
 80011de:	eba1 050c 	sub.w	r5, r1, ip
 80011e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011e6:	fa1f fe8c 	uxth.w	lr, ip
 80011ea:	2101      	movs	r1, #1
 80011ec:	fbb5 f3f7 	udiv	r3, r5, r7
 80011f0:	fb07 5013 	mls	r0, r7, r3, r5
 80011f4:	0c25      	lsrs	r5, r4, #16
 80011f6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011fa:	fb0e f003 	mul.w	r0, lr, r3
 80011fe:	42a8      	cmp	r0, r5
 8001200:	d908      	bls.n	8001214 <__udivmoddi4+0x12c>
 8001202:	eb1c 0505 	adds.w	r5, ip, r5
 8001206:	f103 38ff 	add.w	r8, r3, #4294967295
 800120a:	d202      	bcs.n	8001212 <__udivmoddi4+0x12a>
 800120c:	42a8      	cmp	r0, r5
 800120e:	f200 80cb 	bhi.w	80013a8 <__udivmoddi4+0x2c0>
 8001212:	4643      	mov	r3, r8
 8001214:	1a2d      	subs	r5, r5, r0
 8001216:	b2a4      	uxth	r4, r4
 8001218:	fbb5 f0f7 	udiv	r0, r5, r7
 800121c:	fb07 5510 	mls	r5, r7, r0, r5
 8001220:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001224:	fb0e fe00 	mul.w	lr, lr, r0
 8001228:	45a6      	cmp	lr, r4
 800122a:	d908      	bls.n	800123e <__udivmoddi4+0x156>
 800122c:	eb1c 0404 	adds.w	r4, ip, r4
 8001230:	f100 35ff 	add.w	r5, r0, #4294967295
 8001234:	d202      	bcs.n	800123c <__udivmoddi4+0x154>
 8001236:	45a6      	cmp	lr, r4
 8001238:	f200 80bb 	bhi.w	80013b2 <__udivmoddi4+0x2ca>
 800123c:	4628      	mov	r0, r5
 800123e:	eba4 040e 	sub.w	r4, r4, lr
 8001242:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001246:	e79e      	b.n	8001186 <__udivmoddi4+0x9e>
 8001248:	f1c1 0720 	rsb	r7, r1, #32
 800124c:	408b      	lsls	r3, r1
 800124e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001252:	ea4c 0c03 	orr.w	ip, ip, r3
 8001256:	fa20 f407 	lsr.w	r4, r0, r7
 800125a:	fa05 f301 	lsl.w	r3, r5, r1
 800125e:	431c      	orrs	r4, r3
 8001260:	40fd      	lsrs	r5, r7
 8001262:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001266:	fa00 f301 	lsl.w	r3, r0, r1
 800126a:	fbb5 f8f9 	udiv	r8, r5, r9
 800126e:	0c20      	lsrs	r0, r4, #16
 8001270:	fa1f fe8c 	uxth.w	lr, ip
 8001274:	fb09 5518 	mls	r5, r9, r8, r5
 8001278:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800127c:	fb08 f00e 	mul.w	r0, r8, lr
 8001280:	42a8      	cmp	r0, r5
 8001282:	fa02 f201 	lsl.w	r2, r2, r1
 8001286:	d90b      	bls.n	80012a0 <__udivmoddi4+0x1b8>
 8001288:	eb1c 0505 	adds.w	r5, ip, r5
 800128c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001290:	f080 8088 	bcs.w	80013a4 <__udivmoddi4+0x2bc>
 8001294:	42a8      	cmp	r0, r5
 8001296:	f240 8085 	bls.w	80013a4 <__udivmoddi4+0x2bc>
 800129a:	f1a8 0802 	sub.w	r8, r8, #2
 800129e:	4465      	add	r5, ip
 80012a0:	1a2d      	subs	r5, r5, r0
 80012a2:	b2a4      	uxth	r4, r4
 80012a4:	fbb5 f0f9 	udiv	r0, r5, r9
 80012a8:	fb09 5510 	mls	r5, r9, r0, r5
 80012ac:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80012b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80012b4:	45ae      	cmp	lr, r5
 80012b6:	d908      	bls.n	80012ca <__udivmoddi4+0x1e2>
 80012b8:	eb1c 0505 	adds.w	r5, ip, r5
 80012bc:	f100 34ff 	add.w	r4, r0, #4294967295
 80012c0:	d26c      	bcs.n	800139c <__udivmoddi4+0x2b4>
 80012c2:	45ae      	cmp	lr, r5
 80012c4:	d96a      	bls.n	800139c <__udivmoddi4+0x2b4>
 80012c6:	3802      	subs	r0, #2
 80012c8:	4465      	add	r5, ip
 80012ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012ce:	fba0 9402 	umull	r9, r4, r0, r2
 80012d2:	eba5 050e 	sub.w	r5, r5, lr
 80012d6:	42a5      	cmp	r5, r4
 80012d8:	46c8      	mov	r8, r9
 80012da:	46a6      	mov	lr, r4
 80012dc:	d356      	bcc.n	800138c <__udivmoddi4+0x2a4>
 80012de:	d053      	beq.n	8001388 <__udivmoddi4+0x2a0>
 80012e0:	b15e      	cbz	r6, 80012fa <__udivmoddi4+0x212>
 80012e2:	ebb3 0208 	subs.w	r2, r3, r8
 80012e6:	eb65 050e 	sbc.w	r5, r5, lr
 80012ea:	fa05 f707 	lsl.w	r7, r5, r7
 80012ee:	fa22 f301 	lsr.w	r3, r2, r1
 80012f2:	40cd      	lsrs	r5, r1
 80012f4:	431f      	orrs	r7, r3
 80012f6:	e9c6 7500 	strd	r7, r5, [r6]
 80012fa:	2100      	movs	r1, #0
 80012fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001300:	f1c2 0320 	rsb	r3, r2, #32
 8001304:	fa20 f103 	lsr.w	r1, r0, r3
 8001308:	fa0c fc02 	lsl.w	ip, ip, r2
 800130c:	fa25 f303 	lsr.w	r3, r5, r3
 8001310:	4095      	lsls	r5, r2
 8001312:	430d      	orrs	r5, r1
 8001314:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001318:	fa1f fe8c 	uxth.w	lr, ip
 800131c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001320:	fb07 3011 	mls	r0, r7, r1, r3
 8001324:	0c2b      	lsrs	r3, r5, #16
 8001326:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800132a:	fb01 f00e 	mul.w	r0, r1, lr
 800132e:	4298      	cmp	r0, r3
 8001330:	fa04 f402 	lsl.w	r4, r4, r2
 8001334:	d908      	bls.n	8001348 <__udivmoddi4+0x260>
 8001336:	eb1c 0303 	adds.w	r3, ip, r3
 800133a:	f101 38ff 	add.w	r8, r1, #4294967295
 800133e:	d22f      	bcs.n	80013a0 <__udivmoddi4+0x2b8>
 8001340:	4298      	cmp	r0, r3
 8001342:	d92d      	bls.n	80013a0 <__udivmoddi4+0x2b8>
 8001344:	3902      	subs	r1, #2
 8001346:	4463      	add	r3, ip
 8001348:	1a1b      	subs	r3, r3, r0
 800134a:	b2ad      	uxth	r5, r5
 800134c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001350:	fb07 3310 	mls	r3, r7, r0, r3
 8001354:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001358:	fb00 f30e 	mul.w	r3, r0, lr
 800135c:	42ab      	cmp	r3, r5
 800135e:	d908      	bls.n	8001372 <__udivmoddi4+0x28a>
 8001360:	eb1c 0505 	adds.w	r5, ip, r5
 8001364:	f100 38ff 	add.w	r8, r0, #4294967295
 8001368:	d216      	bcs.n	8001398 <__udivmoddi4+0x2b0>
 800136a:	42ab      	cmp	r3, r5
 800136c:	d914      	bls.n	8001398 <__udivmoddi4+0x2b0>
 800136e:	3802      	subs	r0, #2
 8001370:	4465      	add	r5, ip
 8001372:	1aed      	subs	r5, r5, r3
 8001374:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001378:	e738      	b.n	80011ec <__udivmoddi4+0x104>
 800137a:	4631      	mov	r1, r6
 800137c:	4630      	mov	r0, r6
 800137e:	e707      	b.n	8001190 <__udivmoddi4+0xa8>
 8001380:	4686      	mov	lr, r0
 8001382:	e6e5      	b.n	8001150 <__udivmoddi4+0x68>
 8001384:	4618      	mov	r0, r3
 8001386:	e6fa      	b.n	800117e <__udivmoddi4+0x96>
 8001388:	454b      	cmp	r3, r9
 800138a:	d2a9      	bcs.n	80012e0 <__udivmoddi4+0x1f8>
 800138c:	ebb9 0802 	subs.w	r8, r9, r2
 8001390:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001394:	3801      	subs	r0, #1
 8001396:	e7a3      	b.n	80012e0 <__udivmoddi4+0x1f8>
 8001398:	4640      	mov	r0, r8
 800139a:	e7ea      	b.n	8001372 <__udivmoddi4+0x28a>
 800139c:	4620      	mov	r0, r4
 800139e:	e794      	b.n	80012ca <__udivmoddi4+0x1e2>
 80013a0:	4641      	mov	r1, r8
 80013a2:	e7d1      	b.n	8001348 <__udivmoddi4+0x260>
 80013a4:	46d0      	mov	r8, sl
 80013a6:	e77b      	b.n	80012a0 <__udivmoddi4+0x1b8>
 80013a8:	3b02      	subs	r3, #2
 80013aa:	4465      	add	r5, ip
 80013ac:	e732      	b.n	8001214 <__udivmoddi4+0x12c>
 80013ae:	4608      	mov	r0, r1
 80013b0:	e709      	b.n	80011c6 <__udivmoddi4+0xde>
 80013b2:	4464      	add	r4, ip
 80013b4:	3802      	subs	r0, #2
 80013b6:	e742      	b.n	800123e <__udivmoddi4+0x156>

080013b8 <__aeabi_idiv0>:
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013bc:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013be:	4813      	ldr	r0, [pc, #76]	; (800140c <MX_ADC_Init+0x50>)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_ADC_Init+0x54>)
 80013c2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013c8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013ca:	2300      	movs	r3, #0
 80013cc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ce:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d2:	2204      	movs	r2, #4
 80013d4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013d6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013d8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013da:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 80013dc:	2201      	movs	r2, #1
 80013de:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013e0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013e8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80013f2:	2207      	movs	r2, #7
 80013f4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80013f6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80013f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80013fc:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013fe:	f002 f8fd 	bl	80035fc <HAL_ADC_Init>
 8001402:	b900      	cbnz	r0, 8001406 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001404:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001406:	f000 fb25 	bl	8001a54 <Error_Handler>
}
 800140a:	e7fb      	b.n	8001404 <MX_ADC_Init+0x48>
 800140c:	200002fc 	.word	0x200002fc
 8001410:	40012400 	.word	0x40012400

08001414 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001414:	6802      	ldr	r2, [r0, #0]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_ADC_MspInit+0x28>)
 8001418:	429a      	cmp	r2, r3
 800141a:	d000      	beq.n	800141e <HAL_ADC_MspInit+0xa>
 800141c:	4770      	bx	lr
{
 800141e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001424:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800142a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800142c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001432:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001434:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001436:	b002      	add	sp, #8
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40012400 	.word	0x40012400

08001440 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001440:	6802      	ldr	r2, [r0, #0]
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_ADC_MspDeInit+0x18>)
 8001444:	429a      	cmp	r2, r3
 8001446:	d000      	beq.n	800144a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001448:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800144a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800144e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001454:	6613      	str	r3, [r2, #96]	; 0x60
 8001456:	e7f7      	b.n	8001448 <HAL_ADC_MspDeInit+0x8>
 8001458:	40012400 	.word	0x40012400

0800145c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800145c:	b530      	push	{r4, r5, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001462:	2300      	movs	r3, #0
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 800146a:	f7ff ffa7 	bl	80013bc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800146e:	4816      	ldr	r0, [pc, #88]	; (80014c8 <ADC_ReadChannels+0x6c>)
 8001470:	f002 fcfe 	bl	8003e70 <HAL_ADCEx_Calibration_Start>
 8001474:	b9f8      	cbnz	r0, 80014b6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001476:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001478:	2300      	movs	r3, #0
 800147a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800147c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800147e:	a901      	add	r1, sp, #4
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <ADC_ReadChannels+0x6c>)
 8001482:	f002 fa35 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8001486:	b9c8      	cbnz	r0, 80014bc <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001488:	480f      	ldr	r0, [pc, #60]	; (80014c8 <ADC_ReadChannels+0x6c>)
 800148a:	f002 fbf5 	bl	8003c78 <HAL_ADC_Start>
 800148e:	b9c0      	cbnz	r0, 80014c2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001490:	4c0d      	ldr	r4, [pc, #52]	; (80014c8 <ADC_ReadChannels+0x6c>)
 8001492:	f04f 31ff 	mov.w	r1, #4294967295
 8001496:	4620      	mov	r0, r4
 8001498:	f002 f9c8 	bl	800382c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800149c:	4620      	mov	r0, r4
 800149e:	f002 fcc7 	bl	8003e30 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80014a2:	4620      	mov	r0, r4
 80014a4:	f002 fa21 	bl	80038ea <HAL_ADC_GetValue>
 80014a8:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 80014aa:	4620      	mov	r0, r4
 80014ac:	f002 fc60 	bl	8003d70 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80014b0:	4628      	mov	r0, r5
 80014b2:	b005      	add	sp, #20
 80014b4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80014b6:	f000 facd 	bl	8001a54 <Error_Handler>
 80014ba:	e7dc      	b.n	8001476 <ADC_ReadChannels+0x1a>
    Error_Handler();
 80014bc:	f000 faca 	bl	8001a54 <Error_Handler>
 80014c0:	e7e2      	b.n	8001488 <ADC_ReadChannels+0x2c>
    Error_Handler();
 80014c2:	f000 fac7 	bl	8001a54 <Error_Handler>
 80014c6:	e7e3      	b.n	8001490 <ADC_ReadChannels+0x34>
 80014c8:	200002fc 	.word	0x200002fc

080014cc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 80014cc:	4b01      	ldr	r3, [pc, #4]	; (80014d4 <SYS_InitMeasurement+0x8>)
 80014ce:	4a02      	ldr	r2, [pc, #8]	; (80014d8 <SYS_InitMeasurement+0xc>)
 80014d0:	601a      	str	r2, [r3, #0]
}
 80014d2:	4770      	bx	lr
 80014d4:	200002fc 	.word	0x200002fc
 80014d8:	40012400 	.word	0x40012400

080014dc <SYS_GetBatteryLevel>:
{
 80014dc:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <SYS_GetBatteryLevel+0x38>)
 80014e0:	f7ff ffbc 	bl	800145c <ADC_ReadChannels>
  if (measuredLevel == 0)
 80014e4:	b1a0      	cbz	r0, 8001510 <SYS_GetBatteryLevel+0x34>
 80014e6:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <SYS_GetBatteryLevel+0x3c>)
 80014ea:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80014ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014f2:	428b      	cmp	r3, r1
 80014f4:	d007      	beq.n	8001506 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80014f6:	f640 40e4 	movw	r0, #3300	; 0xce4
 80014fa:	fb03 f000 	mul.w	r0, r3, r0
 80014fe:	fbb0 f0f2 	udiv	r0, r0, r2
 8001502:	b280      	uxth	r0, r0
 8001504:	e005      	b.n	8001512 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <SYS_GetBatteryLevel+0x40>)
 8001508:	fbb0 f0f2 	udiv	r0, r0, r2
 800150c:	b280      	uxth	r0, r0
 800150e:	e000      	b.n	8001512 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001510:	2000      	movs	r0, #0
}
 8001512:	bd08      	pop	{r3, pc}
 8001514:	b4002000 	.word	0xb4002000
 8001518:	1fff7500 	.word	0x1fff7500
 800151c:	004c08d8 	.word	0x004c08d8

08001520 <SYS_GetTemperatureLevel>:
{
 8001520:	b510      	push	{r4, lr}
 8001522:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800152a:	f7ff ffd7 	bl	80014dc <SYS_GetBatteryLevel>
 800152e:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001530:	4821      	ldr	r0, [pc, #132]	; (80015b8 <SYS_GetTemperatureLevel+0x98>)
 8001532:	f7ff ff93 	bl	800145c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <SYS_GetTemperatureLevel+0x9c>)
 8001538:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 800153c:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001540:	428a      	cmp	r2, r1
 8001542:	d01d      	beq.n	8001580 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001544:	fb00 f304 	mul.w	r3, r0, r4
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	4c1d      	ldr	r4, [pc, #116]	; (80015c0 <SYS_GetTemperatureLevel+0xa0>)
 800154c:	fba4 0303 	umull	r0, r3, r4, r3
 8001550:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001554:	2064      	movs	r0, #100	; 0x64
 8001556:	fb00 f303 	mul.w	r3, r0, r3
 800155a:	1a52      	subs	r2, r2, r1
 800155c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001560:	331e      	adds	r3, #30
 8001562:	b21b      	sxth	r3, r3
 8001564:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001568:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800156c:	b21b      	sxth	r3, r3
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21b      	sxth	r3, r3
 8001572:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001576:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 800157a:	b200      	sxth	r0, r0
 800157c:	b002      	add	sp, #8
 800157e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001580:	fb00 f404 	mul.w	r4, r0, r4
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <SYS_GetTemperatureLevel+0xa4>)
 8001586:	fba3 2304 	umull	r2, r3, r3, r4
 800158a:	1ae4      	subs	r4, r4, r3
 800158c:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001590:	0ae4      	lsrs	r4, r4, #11
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fb03 f404 	mul.w	r4, r3, r4
 800159a:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 800159e:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <SYS_GetTemperatureLevel+0xa8>)
 80015a4:	fb83 2304 	smull	r2, r3, r3, r4
 80015a8:	17e4      	asrs	r4, r4, #31
 80015aa:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 80015ae:	341e      	adds	r4, #30
 80015b0:	b224      	sxth	r4, r4
 80015b2:	f8ad 4006 	strh.w	r4, [sp, #6]
 80015b6:	e7d7      	b.n	8001568 <SYS_GetTemperatureLevel+0x48>
 80015b8:	b0001000 	.word	0xb0001000
 80015bc:	1fff7500 	.word	0x1fff7500
 80015c0:	09ee009f 	.word	0x09ee009f
 80015c4:	00100101 	.word	0x00100101
 80015c8:	68db8bad 	.word	0x68db8bad

080015cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015cc:	b500      	push	{lr}
 80015ce:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015d6:	f042 0204 	orr.w	r2, r2, #4
 80015da:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015de:	f002 0204 	and.w	r2, r2, #4
 80015e2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80015e4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015e8:	f042 0201 	orr.w	r2, r2, #1
 80015ec:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80015f6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2102      	movs	r1, #2
 80015fc:	200f      	movs	r0, #15
 80015fe:	f002 fce9 	bl	8003fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001602:	200f      	movs	r0, #15
 8001604:	f002 fd1e 	bl	8004044 <HAL_NVIC_EnableIRQ>

}
 8001608:	b003      	add	sp, #12
 800160a:	f85d fb04 	ldr.w	pc, [sp], #4

0800160e <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 800160e:	2300      	movs	r3, #0
 8001610:	e001      	b.n	8001616 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001612:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001614:	3308      	adds	r3, #8
 8001616:	428b      	cmp	r3, r1
 8001618:	d20a      	bcs.n	8001630 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 800161a:	6842      	ldr	r2, [r0, #4]
 800161c:	f8d0 c000 	ldr.w	ip, [r0]
 8001620:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001624:	bf08      	it	eq
 8001626:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 800162a:	d0f2      	beq.n	8001612 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 800162c:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 800162e:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001630:	2000      	movs	r0, #0
 8001632:	4770      	bx	lr

08001634 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001634:	b130      	cbz	r0, 8001644 <FLASH_IF_INT_Read+0x10>
{
 8001636:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001638:	b139      	cbz	r1, 800164a <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800163a:	b292      	uxth	r2, r2
 800163c:	f010 fe66 	bl	801230c <UTIL_MEM_cpy_8>
  return ret_status;
 8001640:	2000      	movs	r0, #0
}
 8001642:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001644:	f06f 0005 	mvn.w	r0, #5
}
 8001648:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 800164a:	f06f 0005 	mvn.w	r0, #5
 800164e:	e7f8      	b.n	8001642 <FLASH_IF_INT_Read+0xe>

08001650 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001650:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001652:	f002 ffc7 	bl	80045e4 <HAL_FLASH_Unlock>
 8001656:	b978      	cbnz	r0, 8001678 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <FLASH_IF_INT_Clear_Error+0x30>)
 800165a:	699a      	ldr	r2, [r3, #24]
 800165c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001660:	619a      	str	r2, [r3, #24]
 8001662:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001666:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001668:	f002 ffd4 	bl	8004614 <HAL_FLASH_Lock>
 800166c:	b908      	cbnz	r0, 8001672 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800166e:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001670:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001672:	f06f 0004 	mvn.w	r0, #4
 8001676:	e7fb      	b.n	8001670 <FLASH_IF_INT_Clear_Error+0x20>
 8001678:	f06f 0004 	mvn.w	r0, #4
 800167c:	e7f8      	b.n	8001670 <FLASH_IF_INT_Clear_Error+0x20>
 800167e:	bf00      	nop
 8001680:	58004000 	.word	0x58004000

08001684 <FLASH_IF_INT_Erase>:
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 800168c:	2800      	cmp	r0, #0
 800168e:	d039      	beq.n	8001704 <FLASH_IF_INT_Erase+0x80>
 8001690:	460e      	mov	r6, r1
 8001692:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001694:	f7ff ffdc 	bl	8001650 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001698:	4605      	mov	r5, r0
 800169a:	b110      	cbz	r0, 80016a2 <FLASH_IF_INT_Erase+0x1e>
}
 800169c:	4628      	mov	r0, r5
 800169e:	b004      	add	sp, #16
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80016a2:	f002 ff9f 	bl	80045e4 <HAL_FLASH_Unlock>
 80016a6:	bb80      	cbnz	r0, 800170a <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80016a8:	2302      	movs	r3, #2
 80016aa:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 80016ac:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80016b0:	4817      	ldr	r0, [pc, #92]	; (8001710 <FLASH_IF_INT_Erase+0x8c>)
 80016b2:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <FLASH_IF_INT_Erase+0x90>)
 80016b8:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 80016bc:	fbb3 fcf1 	udiv	ip, r3, r1
 80016c0:	fb01 331c 	mls	r3, r1, ip, r3
 80016c4:	0adb      	lsrs	r3, r3, #11
 80016c6:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80016c8:	4434      	add	r4, r6
 80016ca:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 80016ce:	3c01      	subs	r4, #1
 80016d0:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80016d4:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 80016d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80016dc:	fb02 4411 	mls	r4, r2, r1, r4
 80016e0:	ebc3 24d4 	rsb	r4, r3, r4, lsr #11
 80016e4:	3401      	adds	r4, #1
 80016e6:	9402      	str	r4, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80016e8:	a903      	add	r1, sp, #12
 80016ea:	4668      	mov	r0, sp
 80016ec:	f003 f85e 	bl	80047ac <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 80016f0:	b118      	cbz	r0, 80016fa <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80016f2:	2802      	cmp	r0, #2
 80016f4:	d004      	beq.n	8001700 <FLASH_IF_INT_Erase+0x7c>
 80016f6:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 80016fa:	f002 ff8b 	bl	8004614 <HAL_FLASH_Lock>
 80016fe:	e7cd      	b.n	800169c <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001700:	2501      	movs	r5, #1
 8001702:	e7fa      	b.n	80016fa <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8001704:	f06f 0505 	mvn.w	r5, #5
 8001708:	e7c8      	b.n	800169c <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 800170a:	f06f 0504 	mvn.w	r5, #4
 800170e:	e7c5      	b.n	800169c <FLASH_IF_INT_Erase+0x18>
 8001710:	1fff7000 	.word	0x1fff7000
 8001714:	03fffc00 	.word	0x03fffc00

08001718 <FLASH_IF_INT_Write>:
{
 8001718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800171c:	b089      	sub	sp, #36	; 0x24
 800171e:	9003      	str	r0, [sp, #12]
 8001720:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 8001722:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001724:	2800      	cmp	r0, #0
 8001726:	f000 80a9 	beq.w	800187c <FLASH_IF_INT_Write+0x164>
 800172a:	4683      	mov	fp, r0
 800172c:	2900      	cmp	r1, #0
 800172e:	f000 80a9 	beq.w	8001884 <FLASH_IF_INT_Write+0x16c>
 8001732:	f012 0f07 	tst.w	r2, #7
 8001736:	f040 80a9 	bne.w	800188c <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800173a:	f010 0307 	ands.w	r3, r0, #7
 800173e:	9305      	str	r3, [sp, #20]
 8001740:	f040 80a8 	bne.w	8001894 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001744:	f7ff ff84 	bl	8001650 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001748:	9002      	str	r0, [sp, #8]
 800174a:	b118      	cbz	r0, 8001754 <FLASH_IF_INT_Write+0x3c>
}
 800174c:	9802      	ldr	r0, [sp, #8]
 800174e:	b009      	add	sp, #36	; 0x24
 8001750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001754:	f002 ff46 	bl	80045e4 <HAL_FLASH_Unlock>
 8001758:	2800      	cmp	r0, #0
 800175a:	f040 809f 	bne.w	800189c <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 800175e:	9c03      	ldr	r4, [sp, #12]
 8001760:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8001764:	4a4f      	ldr	r2, [pc, #316]	; (80018a4 <FLASH_IF_INT_Write+0x18c>)
 8001766:	f8d2 25e0 	ldr.w	r2, [r2, #1504]	; 0x5e0
 800176a:	494f      	ldr	r1, [pc, #316]	; (80018a8 <FLASH_IF_INT_Write+0x190>)
 800176c:	ea01 2182 	and.w	r1, r1, r2, lsl #10
 8001770:	fbb3 f2f1 	udiv	r2, r3, r1
 8001774:	fb01 3212 	mls	r2, r1, r2, r3
 8001778:	0ad3      	lsrs	r3, r2, #11
 800177a:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800177c:	9b04      	ldr	r3, [sp, #16]
 800177e:	18e3      	adds	r3, r4, r3
 8001780:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001784:	3b01      	subs	r3, #1
 8001786:	fbb3 f0f1 	udiv	r0, r3, r1
 800178a:	fb01 3310 	mls	r3, r1, r0, r3
 800178e:	0adb      	lsrs	r3, r3, #11
 8001790:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001794:	3301      	adds	r3, #1
 8001796:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8001798:	2b01      	cmp	r3, #1
 800179a:	d906      	bls.n	80017aa <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800179c:	f3c4 090a 	ubfx	r9, r4, #0, #11
 80017a0:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
              ret_status = FLASH_IF_WRITE_ERROR;
 80017a4:	f8dd a018 	ldr.w	sl, [sp, #24]
 80017a8:	e02f      	b.n	800180a <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 80017aa:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80017ae:	e7f9      	b.n	80017a4 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 80017b0:	46c8      	mov	r8, r9
          current_source = uSource;
 80017b2:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 80017b4:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80017b6:	9d05      	ldr	r5, [sp, #20]
 80017b8:	4545      	cmp	r5, r8
 80017ba:	d215      	bcs.n	80017e8 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80017bc:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80017be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80017c2:	4621      	mov	r1, r4
 80017c4:	2001      	movs	r0, #1
 80017c6:	f002 ff69 	bl	800469c <HAL_FLASH_Program>
 80017ca:	b950      	cbnz	r0, 80017e2 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80017cc:	6820      	ldr	r0, [r4, #0]
 80017ce:	6862      	ldr	r2, [r4, #4]
 80017d0:	59e9      	ldr	r1, [r5, r7]
 80017d2:	6873      	ldr	r3, [r6, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	bf08      	it	eq
 80017d8:	4288      	cmpeq	r0, r1
 80017da:	d141      	bne.n	8001860 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 80017dc:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80017de:	3508      	adds	r5, #8
 80017e0:	e7ea      	b.n	80017b8 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 80017e2:	f06f 0303 	mvn.w	r3, #3
 80017e6:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 80017e8:	9b02      	ldr	r3, [sp, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d13f      	bne.n	800186e <FLASH_IF_INT_Write+0x156>
        uDest += length;
 80017ee:	44cb      	add	fp, r9
        uSource += length;
 80017f0:	9b01      	ldr	r3, [sp, #4]
 80017f2:	444b      	add	r3, r9
 80017f4:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80017f6:	9b04      	ldr	r3, [sp, #16]
 80017f8:	eba3 0909 	sub.w	r9, r3, r9
 80017fc:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 8001800:	bf28      	it	cs
 8001802:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001806:	f10a 0a01 	add.w	sl, sl, #1
 800180a:	9b06      	ldr	r3, [sp, #24]
 800180c:	9a07      	ldr	r2, [sp, #28]
 800180e:	4413      	add	r3, r2
 8001810:	4553      	cmp	r3, sl
 8001812:	d92c      	bls.n	800186e <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001814:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 8001818:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800181a:	4649      	mov	r1, r9
 800181c:	9803      	ldr	r0, [sp, #12]
 800181e:	f7ff fef6 	bl	800160e <FLASH_IF_INT_IsEmpty>
 8001822:	2800      	cmp	r0, #0
 8001824:	d0c4      	beq.n	80017b0 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <FLASH_IF_INT_Write+0x194>)
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	b1e8      	cbz	r0, 8001868 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 800182c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001830:	4621      	mov	r1, r4
 8001832:	f7ff feff 	bl	8001634 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <FLASH_IF_INT_Write+0x194>)
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f3cb 030a 	ubfx	r3, fp, #0, #11
 800183e:	fa1f f289 	uxth.w	r2, r9
 8001842:	9901      	ldr	r1, [sp, #4]
 8001844:	4418      	add	r0, r3
 8001846:	f010 fd61 	bl	801230c <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800184a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff ff18 	bl	8001684 <FLASH_IF_INT_Erase>
 8001854:	b970      	cbnz	r0, 8001874 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <FLASH_IF_INT_Write+0x194>)
 8001858:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800185a:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800185e:	e7aa      	b.n	80017b6 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 8001860:	f06f 0303 	mvn.w	r3, #3
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	e7bf      	b.n	80017e8 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001868:	f06f 0305 	mvn.w	r3, #5
 800186c:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 800186e:	f002 fed1 	bl	8004614 <HAL_FLASH_Lock>
 8001872:	e76b      	b.n	800174c <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001874:	f06f 0301 	mvn.w	r3, #1
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	e7f8      	b.n	800186e <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 800187c:	f06f 0305 	mvn.w	r3, #5
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	e763      	b.n	800174c <FLASH_IF_INT_Write+0x34>
 8001884:	f06f 0305 	mvn.w	r3, #5
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	e75f      	b.n	800174c <FLASH_IF_INT_Write+0x34>
 800188c:	f06f 0305 	mvn.w	r3, #5
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	e75b      	b.n	800174c <FLASH_IF_INT_Write+0x34>
 8001894:	f06f 0305 	mvn.w	r3, #5
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	e757      	b.n	800174c <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 800189c:	f06f 0304 	mvn.w	r3, #4
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	e753      	b.n	800174c <FLASH_IF_INT_Write+0x34>
 80018a4:	1fff7000 	.word	0x1fff7000
 80018a8:	03fffc00 	.word	0x03fffc00
 80018ac:	20000360 	.word	0x20000360

080018b0 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80018b0:	4b01      	ldr	r3, [pc, #4]	; (80018b8 <FLASH_IF_Init+0x8>)
 80018b2:	6018      	str	r0, [r3, #0]
}
 80018b4:	2000      	movs	r0, #0
 80018b6:	4770      	bx	lr
 80018b8:	20000360 	.word	0x20000360

080018bc <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80018bc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80018c0:	d30e      	bcc.n	80018e0 <FLASH_IF_Write+0x24>
{
 80018c2:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <FLASH_IF_Write+0x30>)
 80018c6:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <FLASH_IF_Write+0x34>)
 80018cc:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80018d0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4298      	cmp	r0, r3
 80018d8:	d805      	bhi.n	80018e6 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80018da:	f7ff ff1d 	bl	8001718 <FLASH_IF_INT_Write>
}
 80018de:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80018e4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ea:	e7f8      	b.n	80018de <FLASH_IF_Write+0x22>
 80018ec:	1fff7000 	.word	0x1fff7000
 80018f0:	03fffc00 	.word	0x03fffc00

080018f4 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80018f4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80018f8:	d30e      	bcc.n	8001918 <FLASH_IF_Read+0x24>
{
 80018fa:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <FLASH_IF_Read+0x30>)
 80018fe:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <FLASH_IF_Read+0x34>)
 8001904:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001908:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800190c:	3b01      	subs	r3, #1
 800190e:	4299      	cmp	r1, r3
 8001910:	d805      	bhi.n	800191e <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001912:	f7ff fe8f 	bl	8001634 <FLASH_IF_INT_Read>
}
 8001916:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
}
 800191c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800191e:	f04f 30ff 	mov.w	r0, #4294967295
 8001922:	e7f8      	b.n	8001916 <FLASH_IF_Read+0x22>
 8001924:	1fff7000 	.word	0x1fff7000
 8001928:	03fffc00 	.word	0x03fffc00

0800192c <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800192c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001930:	d30e      	bcc.n	8001950 <FLASH_IF_Erase+0x24>
{
 8001932:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <FLASH_IF_Erase+0x30>)
 8001936:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <FLASH_IF_Erase+0x34>)
 800193c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001940:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001944:	3b01      	subs	r3, #1
 8001946:	4298      	cmp	r0, r3
 8001948:	d805      	bhi.n	8001956 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800194a:	f7ff fe9b 	bl	8001684 <FLASH_IF_INT_Erase>
}
 800194e:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001954:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001956:	f04f 30ff 	mov.w	r0, #4294967295
 800195a:	e7f8      	b.n	800194e <FLASH_IF_Erase+0x22>
 800195c:	1fff7000 	.word	0x1fff7000
 8001960:	03fffc00 	.word	0x03fffc00

08001964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001968:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	2400      	movs	r4, #0
 800196c:	9403      	str	r4, [sp, #12]
 800196e:	9404      	str	r4, [sp, #16]
 8001970:	9405      	str	r4, [sp, #20]
 8001972:	9406      	str	r4, [sp, #24]
 8001974:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800197c:	f042 0202 	orr.w	r2, r2, #2
 8001980:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001984:	f002 0202 	and.w	r2, r2, #2
 8001988:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800198a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800198c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800198e:	f042 0204 	orr.w	r2, r2, #4
 8001992:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001996:	f002 0204 	and.w	r2, r2, #4
 800199a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800199c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800199e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80019ae:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80019b0:	4e26      	ldr	r6, [pc, #152]	; (8001a4c <MX_GPIO_Init+0xe8>)
 80019b2:	4622      	mov	r2, r4
 80019b4:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80019b8:	4630      	mov	r0, r6
 80019ba:	f003 f887 	bl	8004acc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80019be:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80019c2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2501      	movs	r5, #1
 80019c6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ca:	2302      	movs	r3, #2
 80019cc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	a903      	add	r1, sp, #12
 80019d0:	4630      	mov	r0, r6
 80019d2:	f002 ff2b 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80019d6:	f04f 0803 	mov.w	r8, #3
 80019da:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019de:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80019e2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	a903      	add	r1, sp, #12
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ec:	f002 ff1e 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80019f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	a903      	add	r1, sp, #12
 8001a00:	4630      	mov	r0, r6
 8001a02:	f002 ff13 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001a06:	2340      	movs	r3, #64	; 0x40
 8001a08:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a0a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	a903      	add	r1, sp, #12
 8001a10:	480f      	ldr	r0, [pc, #60]	; (8001a50 <MX_GPIO_Init+0xec>)
 8001a12:	f002 ff0b 	bl	800482c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a16:	4622      	mov	r2, r4
 8001a18:	4621      	mov	r1, r4
 8001a1a:	2006      	movs	r0, #6
 8001a1c:	f002 fada 	bl	8003fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a20:	2006      	movs	r0, #6
 8001a22:	f002 fb0f 	bl	8004044 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a26:	4622      	mov	r2, r4
 8001a28:	4621      	mov	r1, r4
 8001a2a:	2007      	movs	r0, #7
 8001a2c:	f002 fad2 	bl	8003fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a30:	2007      	movs	r0, #7
 8001a32:	f002 fb07 	bl	8004044 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a36:	4622      	mov	r2, r4
 8001a38:	4621      	mov	r1, r4
 8001a3a:	2016      	movs	r0, #22
 8001a3c:	f002 faca 	bl	8003fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a40:	2016      	movs	r0, #22
 8001a42:	f002 faff 	bl	8004044 <HAL_NVIC_EnableIRQ>

}
 8001a46:	b008      	add	sp, #32
 8001a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a4c:	48000400 	.word	0x48000400
 8001a50:	48000800 	.word	0x48000800

08001a54 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <Error_Handler+0x2>

08001a58 <SystemClock_Config>:
{
 8001a58:	b510      	push	{r4, lr}
 8001a5a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5c:	2248      	movs	r2, #72	; 0x48
 8001a5e:	2100      	movs	r1, #0
 8001a60:	a808      	add	r0, sp, #32
 8001a62:	f011 f91b 	bl	8012c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a66:	2400      	movs	r4, #0
 8001a68:	9401      	str	r4, [sp, #4]
 8001a6a:	9402      	str	r4, [sp, #8]
 8001a6c:	9403      	str	r4, [sp, #12]
 8001a6e:	9404      	str	r4, [sp, #16]
 8001a70:	9405      	str	r4, [sp, #20]
 8001a72:	9406      	str	r4, [sp, #24]
 8001a74:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001a76:	f003 f845 	bl	8004b04 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001a82:	f023 0318 	bic.w	r3, r3, #24
 8001a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a8e:	6813      	ldr	r3, [r2, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	6813      	ldr	r3, [r2, #0]
 8001a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001aa4:	2324      	movs	r3, #36	; 0x24
 8001aa6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001aa8:	2381      	movs	r3, #129	; 0x81
 8001aaa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001aac:	2301      	movs	r3, #1
 8001aae:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001ab0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001ab2:	23b0      	movs	r3, #176	; 0xb0
 8001ab4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ab6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab8:	a808      	add	r0, sp, #32
 8001aba:	f003 f9bd 	bl	8004e38 <HAL_RCC_OscConfig>
 8001abe:	b970      	cbnz	r0, 8001ade <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001ac0:	234f      	movs	r3, #79	; 0x4f
 8001ac2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aca:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001acc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001ace:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	a801      	add	r0, sp, #4
 8001ad4:	f003 fce2 	bl	800549c <HAL_RCC_ClockConfig>
 8001ad8:	b918      	cbnz	r0, 8001ae2 <SystemClock_Config+0x8a>
}
 8001ada:	b01a      	add	sp, #104	; 0x68
 8001adc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001ade:	f7ff ffb9 	bl	8001a54 <Error_Handler>
    Error_Handler();
 8001ae2:	f7ff ffb7 	bl	8001a54 <Error_Handler>
	...

08001ae8 <main>:
{
 8001ae8:	b508      	push	{r3, lr}
  HAL_Init();
 8001aea:	f001 fd39 	bl	8003560 <HAL_Init>
  SystemClock_Config();
 8001aee:	f7ff ffb3 	bl	8001a58 <SystemClock_Config>
  MX_GPIO_Init();
 8001af2:	f7ff ff37 	bl	8001964 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001af6:	f000 ffa3 	bl	8002a40 <MX_LoRaWAN_Init>
  MX_USART1_UART_Init();
 8001afa:	f000 fc1d 	bl	8002338 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001afe:	f000 fc4f 	bl	80023a0 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart1, &_charRx, 1);
 8001b02:	4c07      	ldr	r4, [pc, #28]	; (8001b20 <main+0x38>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	4621      	mov	r1, r4
 8001b08:	4806      	ldr	r0, [pc, #24]	; (8001b24 <main+0x3c>)
 8001b0a:	f005 fe49 	bl	80077a0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &_charRx, 1);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4621      	mov	r1, r4
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <main+0x40>)
 8001b14:	f005 fe44 	bl	80077a0 <HAL_UART_Receive_IT>
    MX_LoRaWAN_Process();
 8001b18:	f000 ff98 	bl	8002a4c <MX_LoRaWAN_Process>
  while (1)
 8001b1c:	e7fc      	b.n	8001b18 <main+0x30>
 8001b1e:	bf00      	nop
 8001b20:	20000364 	.word	0x20000364
 8001b24:	2000041c 	.word	0x2000041c
 8001b28:	200004b0 	.word	0x200004b0

08001b2c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b2c:	b500      	push	{lr}
 8001b2e:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001b30:	222c      	movs	r2, #44	; 0x2c
 8001b32:	2100      	movs	r1, #0
 8001b34:	a801      	add	r0, sp, #4
 8001b36:	f011 f8b1 	bl	8012c9c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b3a:	4819      	ldr	r0, [pc, #100]	; (8001ba0 <MX_RTC_Init+0x74>)
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <MX_RTC_Init+0x78>)
 8001b3e:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001b40:	231f      	movs	r3, #31
 8001b42:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b48:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b4a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b50:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b52:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b58:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b5a:	f004 f805 	bl	8005b68 <HAL_RTC_Init>
 8001b5e:	b9a8      	cbnz	r0, 8001b8c <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001b60:	480f      	ldr	r0, [pc, #60]	; (8001ba0 <MX_RTC_Init+0x74>)
 8001b62:	f004 f943 	bl	8005dec <HAL_RTCEx_SetSSRU_IT>
 8001b66:	b9a0      	cbnz	r0, 8001b92 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001b68:	2200      	movs	r2, #0
 8001b6a:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b6c:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b6e:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001b70:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b74:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001b7c:	a901      	add	r1, sp, #4
 8001b7e:	4808      	ldr	r0, [pc, #32]	; (8001ba0 <MX_RTC_Init+0x74>)
 8001b80:	f004 f858 	bl	8005c34 <HAL_RTC_SetAlarm_IT>
 8001b84:	b940      	cbnz	r0, 8001b98 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b86:	b00d      	add	sp, #52	; 0x34
 8001b88:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b8c:	f7ff ff62 	bl	8001a54 <Error_Handler>
 8001b90:	e7e6      	b.n	8001b60 <MX_RTC_Init+0x34>
    Error_Handler();
 8001b92:	f7ff ff5f 	bl	8001a54 <Error_Handler>
 8001b96:	e7e7      	b.n	8001b68 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001b98:	f7ff ff5c 	bl	8001a54 <Error_Handler>
}
 8001b9c:	e7f3      	b.n	8001b86 <MX_RTC_Init+0x5a>
 8001b9e:	bf00      	nop
 8001ba0:	20000368 	.word	0x20000368
 8001ba4:	40002800 	.word	0x40002800

08001ba8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ba8:	b510      	push	{r4, lr}
 8001baa:	b090      	sub	sp, #64	; 0x40
 8001bac:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bae:	2238      	movs	r2, #56	; 0x38
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	a802      	add	r0, sp, #8
 8001bb4:	f011 f872 	bl	8012c9c <memset>
  if(rtcHandle->Instance==RTC)
 8001bb8:	6822      	ldr	r2, [r4, #0]
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_RTC_MspInit+0x7c>)
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001bc0:	b010      	add	sp, #64	; 0x40
 8001bc2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc8:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bce:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd0:	a802      	add	r0, sp, #8
 8001bd2:	f003 fdb7 	bl	8005744 <HAL_RCCEx_PeriphCLKConfig>
 8001bd6:	bb08      	cbnz	r0, 8001c1c <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001be4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001be8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bee:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001bf8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	2002      	movs	r0, #2
 8001c00:	f002 f9e8 	bl	8003fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001c04:	2002      	movs	r0, #2
 8001c06:	f002 fa1d 	bl	8004044 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	202a      	movs	r0, #42	; 0x2a
 8001c10:	f002 f9e0 	bl	8003fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c14:	202a      	movs	r0, #42	; 0x2a
 8001c16:	f002 fa15 	bl	8004044 <HAL_NVIC_EnableIRQ>
}
 8001c1a:	e7d1      	b.n	8001bc0 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001c1c:	f7ff ff1a 	bl	8001a54 <Error_Handler>
 8001c20:	e7da      	b.n	8001bd8 <HAL_RTC_MspInit+0x30>
 8001c22:	bf00      	nop
 8001c24:	40002800 	.word	0x40002800

08001c28 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001c28:	4770      	bx	lr

08001c2a <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001c2a:	4770      	bx	lr

08001c2c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001c2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001c2e:	f001 fcad 	bl	800358c <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001c32:	2001      	movs	r0, #1
 8001c34:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <PWR_EnterStopMode+0x14>)
 8001c36:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001c3a:	f002 ffc7 	bl	8004bcc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001c3e:	bd08      	pop	{r3, pc}
 8001c40:	58000400 	.word	0x58000400

08001c44 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001c44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001c46:	f001 fca8 	bl	800359a <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001c4a:	bd08      	pop	{r3, pc}

08001c4c <PWR_ExitStopMode>:
{
 8001c4c:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001c4e:	f001 fca4 	bl	800359a <HAL_ResumeTick>
  vcom_Resume();
 8001c52:	f000 fe11 	bl	8002878 <vcom_Resume>
}
 8001c56:	bd08      	pop	{r3, pc}

08001c58 <PWR_EnterSleepMode>:
{
 8001c58:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001c5a:	f001 fc97 	bl	800358c <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001c5e:	2101      	movs	r1, #1
 8001c60:	2000      	movs	r0, #0
 8001c62:	f002 ff57 	bl	8004b14 <HAL_PWR_EnterSLEEPMode>
}
 8001c66:	bd08      	pop	{r3, pc}

08001c68 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c68:	4770      	bx	lr

08001c6a <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <NMI_Handler>

08001c6c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <HardFault_Handler>

08001c6e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <MemManage_Handler>

08001c70 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <BusFault_Handler>

08001c72 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <UsageFault_Handler>

08001c74 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c74:	4770      	bx	lr

08001c76 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c76:	4770      	bx	lr

08001c78 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c78:	4770      	bx	lr

08001c7a <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7a:	4770      	bx	lr

08001c7c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001c7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001c7e:	4802      	ldr	r0, [pc, #8]	; (8001c88 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001c80:	f004 f8e0 	bl	8005e44 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001c84:	bd08      	pop	{r3, pc}
 8001c86:	bf00      	nop
 8001c88:	20000368 	.word	0x20000368

08001c8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f002 ff2a 	bl	8004ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c94:	bd08      	pop	{r3, pc}

08001c96 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c96:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f002 ff25 	bl	8004ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c9e:	bd08      	pop	{r3, pc}

08001ca0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ca0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ca2:	4802      	ldr	r0, [pc, #8]	; (8001cac <DMA1_Channel5_IRQHandler+0xc>)
 8001ca4:	f002 fbec 	bl	8004480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ca8:	bd08      	pop	{r3, pc}
 8001caa:	bf00      	nop
 8001cac:	200003bc 	.word	0x200003bc

08001cb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001cb2:	2040      	movs	r0, #64	; 0x40
 8001cb4:	f002 ff18 	bl	8004ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cb8:	bd08      	pop	{r3, pc}
	...

08001cbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cbe:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <USART1_IRQHandler+0xc>)
 8001cc0:	f004 fd7e 	bl	80067c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cc4:	bd08      	pop	{r3, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000041c 	.word	0x2000041c

08001ccc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ccc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cce:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <USART2_IRQHandler+0xc>)
 8001cd0:	f004 fd76 	bl	80067c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cd4:	bd08      	pop	{r3, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200004b0 	.word	0x200004b0

08001cdc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001cdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001cde:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <RTC_Alarm_IRQHandler+0xc>)
 8001ce0:	f003 feba 	bl	8005a58 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ce4:	bd08      	pop	{r3, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000368 	.word	0x20000368

08001cec <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001cec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001cee:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001cf0:	f004 fb5c 	bl	80063ac <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001cf4:	bd08      	pop	{r3, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200003a0 	.word	0x200003a0

08001cfc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001cfc:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_SUBGHZ_Init+0x18>)
 8001d00:	2308      	movs	r3, #8
 8001d02:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001d04:	f004 f8d4 	bl	8005eb0 <HAL_SUBGHZ_Init>
 8001d08:	b900      	cbnz	r0, 8001d0c <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001d0a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001d0c:	f7ff fea2 	bl	8001a54 <Error_Handler>
}
 8001d10:	e7fb      	b.n	8001d0a <MX_SUBGHZ_Init+0xe>
 8001d12:	bf00      	nop
 8001d14:	200003a0 	.word	0x200003a0

08001d18 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001d18:	b500      	push	{lr}
 8001d1a:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d30:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	4611      	mov	r1, r2
 8001d36:	2032      	movs	r0, #50	; 0x32
 8001d38:	f002 f94c 	bl	8003fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001d3c:	2032      	movs	r0, #50	; 0x32
 8001d3e:	f002 f981 	bl	8004044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001d42:	b003      	add	sp, #12
 8001d44:	f85d fb04 	ldr.w	pc, [sp], #4

08001d48 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001d48:	b40c      	push	{r2, r3}
 8001d4a:	b500      	push	{lr}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	ab04      	add	r3, sp, #16
 8001d50:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001d54:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001d56:	f010 feb3 	bl	8012ac0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001d5a:	b003      	add	sp, #12
 8001d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d60:	b002      	add	sp, #8
 8001d62:	4770      	bx	lr

08001d64 <TimestampNow>:
{
 8001d64:	b530      	push	{r4, r5, lr}
 8001d66:	b085      	sub	sp, #20
 8001d68:	4604      	mov	r4, r0
 8001d6a:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001d6c:	a802      	add	r0, sp, #8
 8001d6e:	f010 fc1d 	bl	80125ac <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001d72:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	9b02      	ldr	r3, [sp, #8]
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <TimestampNow+0x2c>)
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f7ff ffe2 	bl	8001d48 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7fe f9fb 	bl	8000180 <strlen>
 8001d8a:	8028      	strh	r0, [r5, #0]
}
 8001d8c:	b005      	add	sp, #20
 8001d8e:	bd30      	pop	{r4, r5, pc}
 8001d90:	08017fd4 	.word	0x08017fd4

08001d94 <SystemApp_Init>:
{
 8001d94:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9a:	6893      	ldr	r3, [r2, #8]
 8001d9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001da0:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001da2:	f010 fc87 	bl	80126b4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001da6:	2401      	movs	r4, #1
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <SystemApp_Init+0x54>)
 8001daa:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001dac:	f000 f8c0 	bl	8001f30 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001db0:	f010 f922 	bl	8011ff8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <SystemApp_Init+0x58>)
 8001db6:	f010 f939 	bl	801202c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <SystemApp_Init+0x5c>)
 8001dbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dc0:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f010 f938 	bl	8012038 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001dc8:	f7ff fb80 	bl	80014cc <SYS_InitMeasurement>
  EnvSensors_Init();
 8001dcc:	f000 f918 	bl	8002000 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001dd0:	f010 fa42 	bl	8012258 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f010 fa5e 	bl	8012298 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001ddc:	4621      	mov	r1, r4
 8001dde:	4620      	mov	r0, r4
 8001de0:	f010 fa44 	bl	801226c <UTIL_LPM_SetStopMode>
}
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	bf00      	nop
 8001de8:	200003ac 	.word	0x200003ac
 8001dec:	08001d65 	.word	0x08001d65
 8001df0:	58004000 	.word	0x58004000

08001df4 <UTIL_SEQ_Idle>:
{
 8001df4:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001df6:	f010 fa65 	bl	80122c4 <UTIL_LPM_EnterLowPower>
}
 8001dfa:	bd08      	pop	{r3, pc}

08001dfc <GetBatteryLevel>:
{
 8001dfc:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001dfe:	f7ff fb6d 	bl	80014dc <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001e02:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e06:	4298      	cmp	r0, r3
 8001e08:	d80d      	bhi.n	8001e26 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001e0a:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001e0e:	d30c      	bcc.n	8001e2a <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001e10:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001e14:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001e18:	0040      	lsls	r0, r0, #1
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <GetBatteryLevel+0x34>)
 8001e1c:	fba3 3000 	umull	r3, r0, r3, r0
 8001e20:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001e24:	e000      	b.n	8001e28 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001e26:	20fe      	movs	r0, #254	; 0xfe
}
 8001e28:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	e7fc      	b.n	8001e28 <GetBatteryLevel+0x2c>
 8001e2e:	bf00      	nop
 8001e30:	1b4e81b5 	.word	0x1b4e81b5

08001e34 <GetTemperatureLevel>:
{
 8001e34:	b500      	push	{lr}
 8001e36:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001e38:	4668      	mov	r0, sp
 8001e3a:	f000 f8c5 	bl	8001fc8 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001e3e:	9801      	ldr	r0, [sp, #4]
 8001e40:	f7ff f8bc 	bl	8000fbc <__aeabi_f2iz>
}
 8001e44:	b200      	sxth	r0, r0
 8001e46:	b007      	add	sp, #28
 8001e48:	f85d fb04 	ldr.w	pc, [sp], #4

08001e4c <GetUniqueId>:
{
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <GetUniqueId+0x68>)
 8001e52:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5a:	d013      	beq.n	8001e84 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001e5c:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001e5e:	0a1a      	lsrs	r2, r3, #8
 8001e60:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001e62:	0c1a      	lsrs	r2, r3, #16
 8001e64:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001e66:	0e1b      	lsrs	r3, r3, #24
 8001e68:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <GetUniqueId+0x68>)
 8001e6c:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001e70:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001e72:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001e76:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001e78:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001e7a:	0c1a      	lsrs	r2, r3, #16
 8001e7c:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001e7e:	0e1b      	lsrs	r3, r3, #24
 8001e80:	7003      	strb	r3, [r0, #0]
}
 8001e82:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001e84:	f001 fb90 	bl	80035a8 <HAL_GetUIDw0>
 8001e88:	4605      	mov	r5, r0
 8001e8a:	f001 fb99 	bl	80035c0 <HAL_GetUIDw2>
 8001e8e:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001e90:	f001 fb90 	bl	80035b4 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001e94:	0e2b      	lsrs	r3, r5, #24
 8001e96:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001e98:	0c2b      	lsrs	r3, r5, #16
 8001e9a:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001e9c:	0a2b      	lsrs	r3, r5, #8
 8001e9e:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001ea0:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001ea2:	0e03      	lsrs	r3, r0, #24
 8001ea4:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001ea6:	0c03      	lsrs	r3, r0, #16
 8001ea8:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001eaa:	0a03      	lsrs	r3, r0, #8
 8001eac:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001eae:	7020      	strb	r0, [r4, #0]
 8001eb0:	e7e7      	b.n	8001e82 <GetUniqueId+0x36>
 8001eb2:	bf00      	nop
 8001eb4:	1fff7000 	.word	0x1fff7000

08001eb8 <GetDevAddr>:
{
 8001eb8:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <GetDevAddr+0x2c>)
 8001ebc:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001ec0:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec6:	d000      	beq.n	8001eca <GetDevAddr+0x12>
}
 8001ec8:	bd38      	pop	{r3, r4, r5, pc}
 8001eca:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001ecc:	f001 fb6c 	bl	80035a8 <HAL_GetUIDw0>
 8001ed0:	4605      	mov	r5, r0
 8001ed2:	f001 fb6f 	bl	80035b4 <HAL_GetUIDw1>
 8001ed6:	4045      	eors	r5, r0
 8001ed8:	f001 fb72 	bl	80035c0 <HAL_GetUIDw2>
 8001edc:	4045      	eors	r5, r0
 8001ede:	6025      	str	r5, [r4, #0]
}
 8001ee0:	e7f2      	b.n	8001ec8 <GetDevAddr+0x10>
 8001ee2:	bf00      	nop
 8001ee4:	1fff7000 	.word	0x1fff7000

08001ee8 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001ee8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001eea:	2101      	movs	r1, #1
 8001eec:	2002      	movs	r0, #2
 8001eee:	f010 f9bd 	bl	801226c <UTIL_LPM_SetStopMode>
}
 8001ef2:	bd08      	pop	{r3, pc}

08001ef4 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001ef4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f010 f9b7 	bl	801226c <UTIL_LPM_SetStopMode>
}
 8001efe:	bd08      	pop	{r3, pc}

08001f00 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001f00:	2000      	movs	r0, #0
 8001f02:	4770      	bx	lr

08001f04 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001f04:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_GetTick+0x14>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b90b      	cbnz	r3, 8001f10 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001f0c:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001f0e:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001f10:	f000 f900 	bl	8002114 <TIMER_IF_GetTimerValue>
 8001f14:	e7fb      	b.n	8001f0e <HAL_GetTick+0xa>
 8001f16:	bf00      	nop
 8001f18:	200003ac 	.word	0x200003ac

08001f1c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001f1c:	b500      	push	{lr}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001f22:	9801      	ldr	r0, [sp, #4]
 8001f24:	f000 f9dc 	bl	80022e0 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001f28:	b003      	add	sp, #12
 8001f2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001f30 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f32:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <DBG_Init+0x90>)
 8001f36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001f42:	f001 fb43 	bl	80035cc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001f46:	f001 fb49 	bl	80035dc <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001f4a:	f001 fb4f 	bl	80035ec <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001f4e:	2400      	movs	r4, #0
 8001f50:	9403      	str	r4, [sp, #12]
 8001f52:	9404      	str	r4, [sp, #16]
 8001f54:	9405      	str	r4, [sp, #20]
 8001f56:	9406      	str	r4, [sp, #24]
 8001f58:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f68:	f042 0202 	orr.w	r2, r2, #2
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f70:	f002 0202 	and.w	r2, r2, #2
 8001f74:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001f76:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f7a:	f042 0202 	orr.w	r2, r2, #2
 8001f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001f88:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001f8a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001f8e:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001f90:	4d0c      	ldr	r5, [pc, #48]	; (8001fc4 <DBG_Init+0x94>)
 8001f92:	a903      	add	r1, sp, #12
 8001f94:	4628      	mov	r0, r5
 8001f96:	f002 fc49 	bl	800482c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001f9a:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001f9e:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001fa0:	a903      	add	r1, sp, #12
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	f002 fc42 	bl	800482c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001fa8:	4622      	mov	r2, r4
 8001faa:	4639      	mov	r1, r7
 8001fac:	4628      	mov	r0, r5
 8001fae:	f002 fd8d 	bl	8004acc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	4631      	mov	r1, r6
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	f002 fd88 	bl	8004acc <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001fbc:	b009      	add	sp, #36	; 0x24
 8001fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc0:	58000800 	.word	0x58000800
 8001fc4:	48000400 	.word	0x48000400

08001fc8 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001fcc:	f7ff faa8 	bl	8001520 <SYS_GetTemperatureLevel>
 8001fd0:	f340 200f 	sbfx	r0, r0, #8, #16
 8001fd4:	f7fe ff9e 	bl	8000f14 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <EnvSensors_Read+0x28>)
 8001fda:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001fdc:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <EnvSensors_Read+0x2c>)
 8001fe0:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <EnvSensors_Read+0x30>)
 8001fe4:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001fe6:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <EnvSensors_Read+0x34>)
 8001fe8:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001fea:	2000      	movs	r0, #0
 8001fec:	bd10      	pop	{r4, pc}
 8001fee:	bf00      	nop
 8001ff0:	42480000 	.word	0x42480000
 8001ff4:	447a0000 	.word	0x447a0000
 8001ff8:	003e090d 	.word	0x003e090d
 8001ffc:	000503ab 	.word	0x000503ab

08002000 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002000:	2000      	movs	r0, #0
 8002002:	4770      	bx	lr

08002004 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002004:	2001      	movs	r0, #1
 8002006:	4770      	bx	lr

08002008 <_kill>:

int _kill(int pid, int sig)
{
 8002008:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800200a:	f010 fe1d 	bl	8012c48 <__errno>
 800200e:	2316      	movs	r3, #22
 8002010:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002012:	f04f 30ff 	mov.w	r0, #4294967295
 8002016:	bd08      	pop	{r3, pc}

08002018 <_exit>:

void _exit (int status)
{
 8002018:	b508      	push	{r3, lr}
  _kill(status, -1);
 800201a:	f04f 31ff 	mov.w	r1, #4294967295
 800201e:	f7ff fff3 	bl	8002008 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002022:	e7fe      	b.n	8002022 <_exit+0xa>

08002024 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	460c      	mov	r4, r1
 8002028:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	2500      	movs	r5, #0
 800202c:	e006      	b.n	800203c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800202e:	f3af 8000 	nop.w
 8002032:	4621      	mov	r1, r4
 8002034:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800203a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203c:	42b5      	cmp	r5, r6
 800203e:	dbf6      	blt.n	800202e <_read+0xa>
  }

  return len;
}
 8002040:	4630      	mov	r0, r6
 8002042:	bd70      	pop	{r4, r5, r6, pc}

08002044 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002044:	b570      	push	{r4, r5, r6, lr}
 8002046:	460c      	mov	r4, r1
 8002048:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204a:	2500      	movs	r5, #0
 800204c:	e004      	b.n	8002058 <_write+0x14>
  {
    __io_putchar(*ptr++);
 800204e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002052:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	3501      	adds	r5, #1
 8002058:	42b5      	cmp	r5, r6
 800205a:	dbf8      	blt.n	800204e <_write+0xa>
  }
  return len;
}
 800205c:	4630      	mov	r0, r6
 800205e:	bd70      	pop	{r4, r5, r6, pc}

08002060 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	4770      	bx	lr

08002066 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800206c:	2000      	movs	r0, #0
 800206e:	4770      	bx	lr

08002070 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002070:	2001      	movs	r0, #1
 8002072:	4770      	bx	lr

08002074 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002074:	2000      	movs	r0, #0
 8002076:	4770      	bx	lr

08002078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002078:	b510      	push	{r4, lr}
 800207a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <_sbrk+0x38>)
 800207e:	490d      	ldr	r1, [pc, #52]	; (80020b4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <_sbrk+0x40>)
 8002082:	6800      	ldr	r0, [r0, #0]
 8002084:	b140      	cbz	r0, 8002098 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002086:	480c      	ldr	r0, [pc, #48]	; (80020b8 <_sbrk+0x40>)
 8002088:	6800      	ldr	r0, [r0, #0]
 800208a:	4403      	add	r3, r0
 800208c:	1a52      	subs	r2, r2, r1
 800208e:	4293      	cmp	r3, r2
 8002090:	d806      	bhi.n	80020a0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <_sbrk+0x40>)
 8002094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002096:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002098:	4807      	ldr	r0, [pc, #28]	; (80020b8 <_sbrk+0x40>)
 800209a:	4c08      	ldr	r4, [pc, #32]	; (80020bc <_sbrk+0x44>)
 800209c:	6004      	str	r4, [r0, #0]
 800209e:	e7f2      	b.n	8002086 <_sbrk+0xe>
    errno = ENOMEM;
 80020a0:	f010 fdd2 	bl	8012c48 <__errno>
 80020a4:	230c      	movs	r3, #12
 80020a6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	e7f3      	b.n	8002096 <_sbrk+0x1e>
 80020ae:	bf00      	nop
 80020b0:	20008000 	.word	0x20008000
 80020b4:	00000800 	.word	0x00000800
 80020b8:	200003b0 	.word	0x200003b0
 80020bc:	200019a8 	.word	0x200019a8

080020c0 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <TIMER_IF_SetTimerContext+0x1c>)
 80020c2:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020c4:	e001      	b.n	80020ca <TIMER_IF_SetTimerContext+0xa>
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <TIMER_IF_SetTimerContext+0x1c>)
 80020c8:	6898      	ldr	r0, [r3, #8]
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <TIMER_IF_SetTimerContext+0x1c>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4283      	cmp	r3, r0
 80020d0:	d1f9      	bne.n	80020c6 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 80020d2:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 80020d4:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <TIMER_IF_SetTimerContext+0x20>)
 80020d6:	6018      	str	r0, [r3, #0]
}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40002800 	.word	0x40002800
 80020e0:	200003b8 	.word	0x200003b8

080020e4 <TIMER_IF_GetTimerContext>:
}
 80020e4:	4b01      	ldr	r3, [pc, #4]	; (80020ec <TIMER_IF_GetTimerContext+0x8>)
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	200003b8 	.word	0x200003b8

080020f0 <TIMER_IF_GetTimerElapsedTime>:
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80020f2:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020f4:	e001      	b.n	80020fa <TIMER_IF_GetTimerElapsedTime+0xa>
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80020f8:	6898      	ldr	r0, [r3, #8]
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4283      	cmp	r3, r0
 8002100:	d1f9      	bne.n	80020f6 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8002102:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	1ac0      	subs	r0, r0, r3
 800210a:	4770      	bx	lr
 800210c:	40002800 	.word	0x40002800
 8002110:	200003b8 	.word	0x200003b8

08002114 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <TIMER_IF_GetTimerValue+0x20>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b153      	cbz	r3, 8002130 <TIMER_IF_GetTimerValue+0x1c>
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <TIMER_IF_GetTimerValue+0x24>)
 800211c:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800211e:	e001      	b.n	8002124 <TIMER_IF_GetTimerValue+0x10>
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <TIMER_IF_GetTimerValue+0x24>)
 8002122:	6898      	ldr	r0, [r3, #8]
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <TIMER_IF_GetTimerValue+0x24>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4283      	cmp	r3, r0
 800212a:	d1f9      	bne.n	8002120 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 800212c:	43c0      	mvns	r0, r0
 800212e:	4770      	bx	lr
  uint32_t ret = 0;
 8002130:	2000      	movs	r0, #0
}
 8002132:	4770      	bx	lr
 8002134:	200003b4 	.word	0x200003b4
 8002138:	40002800 	.word	0x40002800

0800213c <TIMER_IF_GetMinimumTimeout>:
}
 800213c:	2003      	movs	r0, #3
 800213e:	4770      	bx	lr

08002140 <TIMER_IF_Convert_ms2Tick>:
{
 8002140:	b508      	push	{r3, lr}
 8002142:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002148:	2300      	movs	r3, #0
 800214a:	0280      	lsls	r0, r0, #10
 800214c:	0d89      	lsrs	r1, r1, #22
 800214e:	f7fe ff7b 	bl	8001048 <__aeabi_uldivmod>
}
 8002152:	bd08      	pop	{r3, pc}

08002154 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002154:	0ec2      	lsrs	r2, r0, #27
 8002156:	0143      	lsls	r3, r0, #5
 8002158:	1a1b      	subs	r3, r3, r0
 800215a:	f162 0200 	sbc.w	r2, r2, #0
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	181b      	adds	r3, r3, r0
 8002168:	f142 0000 	adc.w	r0, r2, #0
 800216c:	00c0      	lsls	r0, r0, #3
 800216e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002172:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8002176:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 800217a:	4770      	bx	lr

0800217c <TIMER_IF_StopTimer>:
{
 800217c:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <TIMER_IF_StopTimer+0x20>)
 8002180:	2201      	movs	r2, #1
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002184:	4c06      	ldr	r4, [pc, #24]	; (80021a0 <TIMER_IF_StopTimer+0x24>)
 8002186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800218a:	4620      	mov	r0, r4
 800218c:	f003 fc24 	bl	80059d8 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
 8002194:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002196:	2000      	movs	r0, #0
 8002198:	bd10      	pop	{r4, pc}
 800219a:	bf00      	nop
 800219c:	40002800 	.word	0x40002800
 80021a0:	20000368 	.word	0x20000368

080021a4 <TIMER_IF_BkUp_Write_MSBticks>:
{
 80021a4:	b508      	push	{r3, lr}
 80021a6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80021a8:	2102      	movs	r1, #2
 80021aa:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 80021ac:	f003 fe5f 	bl	8005e6e <HAL_RTCEx_BKUPWrite>
}
 80021b0:	bd08      	pop	{r3, pc}
 80021b2:	bf00      	nop
 80021b4:	20000368 	.word	0x20000368

080021b8 <TIMER_IF_Init>:
{
 80021b8:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <TIMER_IF_Init+0x40>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b10b      	cbz	r3, 80021c4 <TIMER_IF_Init+0xc>
}
 80021c0:	2000      	movs	r0, #0
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80021c4:	4c0d      	ldr	r4, [pc, #52]	; (80021fc <TIMER_IF_Init+0x44>)
 80021c6:	f04f 35ff 	mov.w	r5, #4294967295
 80021ca:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 80021cc:	f7ff fcae 	bl	8001b2c <MX_RTC_Init>
    TIMER_IF_StopTimer();
 80021d0:	f7ff ffd4 	bl	800217c <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80021d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d8:	4620      	mov	r0, r4
 80021da:	f003 fbfd 	bl	80059d8 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80021de:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80021e0:	4620      	mov	r0, r4
 80021e2:	f003 fde3 	bl	8005dac <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff ffdc 	bl	80021a4 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 80021ec:	f7ff ff68 	bl	80020c0 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 80021f0:	4b01      	ldr	r3, [pc, #4]	; (80021f8 <TIMER_IF_Init+0x40>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e7e3      	b.n	80021c0 <TIMER_IF_Init+0x8>
 80021f8:	200003b4 	.word	0x200003b4
 80021fc:	20000368 	.word	0x20000368

08002200 <TIMER_IF_BkUp_Write_Seconds>:
{
 8002200:	b508      	push	{r3, lr}
 8002202:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002204:	2100      	movs	r1, #0
 8002206:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8002208:	f003 fe31 	bl	8005e6e <HAL_RTCEx_BKUPWrite>
}
 800220c:	bd08      	pop	{r3, pc}
 800220e:	bf00      	nop
 8002210:	20000368 	.word	0x20000368

08002214 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8002214:	b508      	push	{r3, lr}
 8002216:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002218:	2101      	movs	r1, #1
 800221a:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 800221c:	f003 fe27 	bl	8005e6e <HAL_RTCEx_BKUPWrite>
}
 8002220:	bd08      	pop	{r3, pc}
 8002222:	bf00      	nop
 8002224:	20000368 	.word	0x20000368

08002228 <TIMER_IF_StartTimer>:
{
 8002228:	b510      	push	{r4, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 800222e:	222c      	movs	r2, #44	; 0x2c
 8002230:	2100      	movs	r1, #0
 8002232:	a801      	add	r0, sp, #4
 8002234:	f010 fd32 	bl	8012c9c <memset>
  TIMER_IF_StopTimer();
 8002238:	f7ff ffa0 	bl	800217c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <TIMER_IF_StartTimer+0x48>)
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002242:	2300      	movs	r3, #0
 8002244:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002246:	43e4      	mvns	r4, r4
 8002248:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800224a:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800224c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002250:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002256:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002258:	2201      	movs	r2, #1
 800225a:	a901      	add	r1, sp, #4
 800225c:	4805      	ldr	r0, [pc, #20]	; (8002274 <TIMER_IF_StartTimer+0x4c>)
 800225e:	f003 fce9 	bl	8005c34 <HAL_RTC_SetAlarm_IT>
 8002262:	b910      	cbnz	r0, 800226a <TIMER_IF_StartTimer+0x42>
}
 8002264:	2000      	movs	r0, #0
 8002266:	b00c      	add	sp, #48	; 0x30
 8002268:	bd10      	pop	{r4, pc}
    Error_Handler();
 800226a:	f7ff fbf3 	bl	8001a54 <Error_Handler>
 800226e:	e7f9      	b.n	8002264 <TIMER_IF_StartTimer+0x3c>
 8002270:	200003b8 	.word	0x200003b8
 8002274:	20000368 	.word	0x20000368

08002278 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002278:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800227a:	2102      	movs	r1, #2
 800227c:	4801      	ldr	r0, [pc, #4]	; (8002284 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800227e:	f003 fdfd 	bl	8005e7c <HAL_RTCEx_BKUPRead>
}
 8002282:	bd08      	pop	{r3, pc}
 8002284:	20000368 	.word	0x20000368

08002288 <TIMER_IF_GetTime>:
{
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	4605      	mov	r5, r0
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <TIMER_IF_GetTime+0x34>)
 800228e:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002290:	e001      	b.n	8002296 <TIMER_IF_GetTime+0xe>
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <TIMER_IF_GetTime+0x34>)
 8002294:	689c      	ldr	r4, [r3, #8]
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <TIMER_IF_GetTime+0x34>)
 8002298:	6892      	ldr	r2, [r2, #8]
 800229a:	42a2      	cmp	r2, r4
 800229c:	d1f9      	bne.n	8002292 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 800229e:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80022a0:	f7ff ffea 	bl	8002278 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80022a4:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80022a6:	0aa4      	lsrs	r4, r4, #10
 80022a8:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80022ac:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80022b0:	f7ff ff50 	bl	8002154 <TIMER_IF_Convert_Tick2ms>
 80022b4:	8028      	strh	r0, [r5, #0]
}
 80022b6:	4620      	mov	r0, r4
 80022b8:	bd38      	pop	{r3, r4, r5, pc}
 80022ba:	bf00      	nop
 80022bc:	40002800 	.word	0x40002800

080022c0 <TIMER_IF_BkUp_Read_Seconds>:
{
 80022c0:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80022c2:	2100      	movs	r1, #0
 80022c4:	4801      	ldr	r0, [pc, #4]	; (80022cc <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80022c6:	f003 fdd9 	bl	8005e7c <HAL_RTCEx_BKUPRead>
}
 80022ca:	bd08      	pop	{r3, pc}
 80022cc:	20000368 	.word	0x20000368

080022d0 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80022d0:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80022d2:	2101      	movs	r1, #1
 80022d4:	4801      	ldr	r0, [pc, #4]	; (80022dc <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80022d6:	f003 fdd1 	bl	8005e7c <HAL_RTCEx_BKUPRead>
}
 80022da:	bd08      	pop	{r3, pc}
 80022dc:	20000368 	.word	0x20000368

080022e0 <TIMER_IF_DelayMs>:
{
 80022e0:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80022e2:	f7ff ff2d 	bl	8002140 <TIMER_IF_Convert_ms2Tick>
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <TIMER_IF_DelayMs+0x3c>)
 80022e8:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022ea:	e001      	b.n	80022f0 <TIMER_IF_DelayMs+0x10>
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <TIMER_IF_DelayMs+0x3c>)
 80022ee:	6899      	ldr	r1, [r3, #8]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <TIMER_IF_DelayMs+0x3c>)
 80022f2:	6892      	ldr	r2, [r2, #8]
 80022f4:	428a      	cmp	r2, r1
 80022f6:	d1f9      	bne.n	80022ec <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 80022f8:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80022fa:	e00a      	b.n	8002312 <TIMER_IF_DelayMs+0x32>
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <TIMER_IF_DelayMs+0x3c>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <TIMER_IF_DelayMs+0x3c>)
 8002302:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002304:	429a      	cmp	r2, r3
 8002306:	d1f9      	bne.n	80022fc <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8002308:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800230a:	1a5b      	subs	r3, r3, r1
 800230c:	4283      	cmp	r3, r0
 800230e:	d203      	bcs.n	8002318 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8002310:	bf00      	nop
 8002312:	4b02      	ldr	r3, [pc, #8]	; (800231c <TIMER_IF_DelayMs+0x3c>)
 8002314:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002316:	e7f3      	b.n	8002300 <TIMER_IF_DelayMs+0x20>
}
 8002318:	bd08      	pop	{r3, pc}
 800231a:	bf00      	nop
 800231c:	40002800 	.word	0x40002800

08002320 <HAL_RTC_AlarmAEventCallback>:
{
 8002320:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002322:	f010 faeb 	bl	80128fc <UTIL_TIMER_IRQ_Handler>
}
 8002326:	bd08      	pop	{r3, pc}

08002328 <HAL_RTCEx_SSRUEventCallback>:
{
 8002328:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800232a:	f7ff ffa5 	bl	8002278 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800232e:	3001      	adds	r0, #1
 8002330:	f7ff ff38 	bl	80021a4 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002334:	bd08      	pop	{r3, pc}
	...

08002338 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002338:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800233a:	4817      	ldr	r0, [pc, #92]	; (8002398 <MX_USART1_UART_Init+0x60>)
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <MX_USART1_UART_Init+0x64>)
 800233e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002340:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002344:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002346:	2300      	movs	r3, #0
 8002348:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800234a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800234c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800234e:	220c      	movs	r2, #12
 8002350:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002352:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002358:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800235c:	f005 f94e 	bl	80075fc <HAL_UART_Init>
 8002360:	b970      	cbnz	r0, 8002380 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002362:	2100      	movs	r1, #0
 8002364:	480c      	ldr	r0, [pc, #48]	; (8002398 <MX_USART1_UART_Init+0x60>)
 8002366:	f005 fb1d 	bl	80079a4 <HAL_UARTEx_SetTxFifoThreshold>
 800236a:	b960      	cbnz	r0, 8002386 <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800236c:	2100      	movs	r1, #0
 800236e:	480a      	ldr	r0, [pc, #40]	; (8002398 <MX_USART1_UART_Init+0x60>)
 8002370:	f005 fb3d 	bl	80079ee <HAL_UARTEx_SetRxFifoThreshold>
 8002374:	b950      	cbnz	r0, 800238c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002376:	4808      	ldr	r0, [pc, #32]	; (8002398 <MX_USART1_UART_Init+0x60>)
 8002378:	f005 faf5 	bl	8007966 <HAL_UARTEx_DisableFifoMode>
 800237c:	b948      	cbnz	r0, 8002392 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800237e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002380:	f7ff fb68 	bl	8001a54 <Error_Handler>
 8002384:	e7ed      	b.n	8002362 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8002386:	f7ff fb65 	bl	8001a54 <Error_Handler>
 800238a:	e7ef      	b.n	800236c <MX_USART1_UART_Init+0x34>
    Error_Handler();
 800238c:	f7ff fb62 	bl	8001a54 <Error_Handler>
 8002390:	e7f1      	b.n	8002376 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8002392:	f7ff fb5f 	bl	8001a54 <Error_Handler>
}
 8002396:	e7f2      	b.n	800237e <MX_USART1_UART_Init+0x46>
 8002398:	2000041c 	.word	0x2000041c
 800239c:	40013800 	.word	0x40013800

080023a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023a0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023a2:	4817      	ldr	r0, [pc, #92]	; (8002400 <MX_USART2_UART_Init+0x60>)
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <MX_USART2_UART_Init+0x64>)
 80023a6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80023a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80023ac:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ae:	2300      	movs	r3, #0
 80023b0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023b2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023b4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023b6:	220c      	movs	r2, #12
 80023b8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ba:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023be:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023c0:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023c4:	f005 f91a 	bl	80075fc <HAL_UART_Init>
 80023c8:	b970      	cbnz	r0, 80023e8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ca:	2100      	movs	r1, #0
 80023cc:	480c      	ldr	r0, [pc, #48]	; (8002400 <MX_USART2_UART_Init+0x60>)
 80023ce:	f005 fae9 	bl	80079a4 <HAL_UARTEx_SetTxFifoThreshold>
 80023d2:	b960      	cbnz	r0, 80023ee <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023d4:	2100      	movs	r1, #0
 80023d6:	480a      	ldr	r0, [pc, #40]	; (8002400 <MX_USART2_UART_Init+0x60>)
 80023d8:	f005 fb09 	bl	80079ee <HAL_UARTEx_SetRxFifoThreshold>
 80023dc:	b950      	cbnz	r0, 80023f4 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80023de:	4808      	ldr	r0, [pc, #32]	; (8002400 <MX_USART2_UART_Init+0x60>)
 80023e0:	f005 fa9d 	bl	800791e <HAL_UARTEx_EnableFifoMode>
 80023e4:	b948      	cbnz	r0, 80023fa <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023e6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80023e8:	f7ff fb34 	bl	8001a54 <Error_Handler>
 80023ec:	e7ed      	b.n	80023ca <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80023ee:	f7ff fb31 	bl	8001a54 <Error_Handler>
 80023f2:	e7ef      	b.n	80023d4 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80023f4:	f7ff fb2e 	bl	8001a54 <Error_Handler>
 80023f8:	e7f1      	b.n	80023de <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80023fa:	f7ff fb2b 	bl	8001a54 <Error_Handler>
}
 80023fe:	e7f2      	b.n	80023e6 <MX_USART2_UART_Init+0x46>
 8002400:	200004b0 	.word	0x200004b0
 8002404:	40004400 	.word	0x40004400

08002408 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002408:	b530      	push	{r4, r5, lr}
 800240a:	b099      	sub	sp, #100	; 0x64
 800240c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240e:	2100      	movs	r1, #0
 8002410:	9113      	str	r1, [sp, #76]	; 0x4c
 8002412:	9114      	str	r1, [sp, #80]	; 0x50
 8002414:	9115      	str	r1, [sp, #84]	; 0x54
 8002416:	9116      	str	r1, [sp, #88]	; 0x58
 8002418:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800241a:	2238      	movs	r2, #56	; 0x38
 800241c:	a805      	add	r0, sp, #20
 800241e:	f010 fc3d 	bl	8012c9c <memset>
  if(uartHandle->Instance==USART1)
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	4a4a      	ldr	r2, [pc, #296]	; (8002550 <HAL_UART_MspInit+0x148>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d004      	beq.n	8002434 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 800242a:	4a4a      	ldr	r2, [pc, #296]	; (8002554 <HAL_UART_MspInit+0x14c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d037      	beq.n	80024a0 <HAL_UART_MspInit+0x98>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002430:	b019      	add	sp, #100	; 0x64
 8002432:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002434:	2301      	movs	r3, #1
 8002436:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002438:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800243c:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243e:	a805      	add	r0, sp, #20
 8002440:	f003 f980 	bl	8005744 <HAL_RCCEx_PeriphCLKConfig>
 8002444:	bb48      	cbnz	r0, 800249a <HAL_UART_MspInit+0x92>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800244c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002450:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002452:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002454:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002458:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800245a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800245c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800245e:	f042 0202 	orr.w	r2, r2, #2
 8002462:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800246c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800246e:	23c0      	movs	r3, #192	; 0xc0
 8002470:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2400      	movs	r4, #0
 8002478:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800247c:	2307      	movs	r3, #7
 800247e:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	a913      	add	r1, sp, #76	; 0x4c
 8002482:	4835      	ldr	r0, [pc, #212]	; (8002558 <HAL_UART_MspInit+0x150>)
 8002484:	f002 f9d2 	bl	800482c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002488:	4622      	mov	r2, r4
 800248a:	4621      	mov	r1, r4
 800248c:	2024      	movs	r0, #36	; 0x24
 800248e:	f001 fda1 	bl	8003fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002492:	2024      	movs	r0, #36	; 0x24
 8002494:	f001 fdd6 	bl	8004044 <HAL_NVIC_EnableIRQ>
 8002498:	e7ca      	b.n	8002430 <HAL_UART_MspInit+0x28>
      Error_Handler();
 800249a:	f7ff fadb 	bl	8001a54 <Error_Handler>
 800249e:	e7d2      	b.n	8002446 <HAL_UART_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024a0:	2302      	movs	r3, #2
 80024a2:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_UART_MspInit+0x154>)
 80024a6:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a8:	a805      	add	r0, sp, #20
 80024aa:	f003 f94b 	bl	8005744 <HAL_RCCEx_PeriphCLKConfig>
 80024ae:	2800      	cmp	r0, #0
 80024b0:	d144      	bne.n	800253c <HAL_UART_MspInit+0x134>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024bc:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80024c4:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80024c6:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80024d8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80024da:	230c      	movs	r3, #12
 80024dc:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2500      	movs	r5, #0
 80024e4:	9515      	str	r5, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ea:	2307      	movs	r3, #7
 80024ec:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	a913      	add	r1, sp, #76	; 0x4c
 80024f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f4:	f002 f99a 	bl	800482c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80024f8:	4819      	ldr	r0, [pc, #100]	; (8002560 <HAL_UART_MspInit+0x158>)
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_UART_MspInit+0x15c>)
 80024fc:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80024fe:	2314      	movs	r3, #20
 8002500:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002502:	2310      	movs	r3, #16
 8002504:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002506:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800250c:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800250e:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002510:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002512:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002514:	f001 fe26 	bl	8004164 <HAL_DMA_Init>
 8002518:	b998      	cbnz	r0, 8002542 <HAL_UART_MspInit+0x13a>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800251a:	2110      	movs	r1, #16
 800251c:	4810      	ldr	r0, [pc, #64]	; (8002560 <HAL_UART_MspInit+0x158>)
 800251e:	f002 f823 	bl	8004568 <HAL_DMA_ConfigChannelAttributes>
 8002522:	b988      	cbnz	r0, 8002548 <HAL_UART_MspInit+0x140>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_UART_MspInit+0x158>)
 8002526:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002528:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2102      	movs	r1, #2
 800252e:	2025      	movs	r0, #37	; 0x25
 8002530:	f001 fd50 	bl	8003fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002534:	2025      	movs	r0, #37	; 0x25
 8002536:	f001 fd85 	bl	8004044 <HAL_NVIC_EnableIRQ>
}
 800253a:	e779      	b.n	8002430 <HAL_UART_MspInit+0x28>
      Error_Handler();
 800253c:	f7ff fa8a 	bl	8001a54 <Error_Handler>
 8002540:	e7b7      	b.n	80024b2 <HAL_UART_MspInit+0xaa>
      Error_Handler();
 8002542:	f7ff fa87 	bl	8001a54 <Error_Handler>
 8002546:	e7e8      	b.n	800251a <HAL_UART_MspInit+0x112>
      Error_Handler();
 8002548:	f7ff fa84 	bl	8001a54 <Error_Handler>
 800254c:	e7ea      	b.n	8002524 <HAL_UART_MspInit+0x11c>
 800254e:	bf00      	nop
 8002550:	40013800 	.word	0x40013800
 8002554:	40004400 	.word	0x40004400
 8002558:	48000400 	.word	0x48000400
 800255c:	000c0004 	.word	0x000c0004
 8002560:	200003bc 	.word	0x200003bc
 8002564:	40020058 	.word	0x40020058

08002568 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002568:	b510      	push	{r4, lr}

  if(uartHandle->Instance==USART1)
 800256a:	6803      	ldr	r3, [r0, #0]
 800256c:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_UART_MspDeInit+0x54>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d004      	beq.n	800257c <HAL_UART_MspDeInit+0x14>
 8002572:	4604      	mov	r4, r0
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002574:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <HAL_UART_MspDeInit+0x58>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00e      	beq.n	8002598 <HAL_UART_MspDeInit+0x30>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800257a:	bd10      	pop	{r4, pc}
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800257c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002580:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002586:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8002588:	21c0      	movs	r1, #192	; 0xc0
 800258a:	480e      	ldr	r0, [pc, #56]	; (80025c4 <HAL_UART_MspDeInit+0x5c>)
 800258c:	f002 fa20 	bl	80049d0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002590:	2024      	movs	r0, #36	; 0x24
 8002592:	f001 fd65 	bl	8004060 <HAL_NVIC_DisableIRQ>
 8002596:	e7f0      	b.n	800257a <HAL_UART_MspDeInit+0x12>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800259c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800259e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80025a2:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80025a4:	210c      	movs	r1, #12
 80025a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025aa:	f002 fa11 	bl	80049d0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80025ae:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80025b0:	f001 fe4a 	bl	8004248 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80025b4:	2025      	movs	r0, #37	; 0x25
 80025b6:	f001 fd53 	bl	8004060 <HAL_NVIC_DisableIRQ>
}
 80025ba:	e7de      	b.n	800257a <HAL_UART_MspDeInit+0x12>
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40004400 	.word	0x40004400
 80025c4:	48000400 	.word	0x48000400

080025c8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80025c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <vcom_Init+0x20>)
 80025cc:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80025ce:	f7fe fffd 	bl	80015cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80025d2:	f7ff fee5 	bl	80023a0 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <vcom_Init+0x24>)
 80025d8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80025dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80025e4:	2000      	movs	r0, #0
 80025e6:	bd08      	pop	{r3, pc}
 80025e8:	20000548 	.word	0x20000548
 80025ec:	58000800 	.word	0x58000800

080025f0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80025f0:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80025fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002600:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002604:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002606:	4804      	ldr	r0, [pc, #16]	; (8002618 <vcom_DeInit+0x28>)
 8002608:	f7ff ffae 	bl	8002568 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800260c:	200f      	movs	r0, #15
 800260e:	f001 fd27 	bl	8004060 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002612:	2000      	movs	r0, #0
 8002614:	bd08      	pop	{r3, pc}
 8002616:	bf00      	nop
 8002618:	200004b0 	.word	0x200004b0

0800261c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800261c:	b508      	push	{r3, lr}
 800261e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002620:	4601      	mov	r1, r0
 8002622:	4802      	ldr	r0, [pc, #8]	; (800262c <vcom_Trace_DMA+0x10>)
 8002624:	f004 f808 	bl	8006638 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002628:	2000      	movs	r0, #0
 800262a:	bd08      	pop	{r3, pc}
 800262c:	200004b0 	.word	0x200004b0

08002630 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002630:	b510      	push	{r4, lr}
 8002632:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <vcom_ReceiveInit+0x50>)
 8002636:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002638:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800263c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800263e:	ab02      	add	r3, sp, #8
 8002640:	e913 0006 	ldmdb	r3, {r1, r2}
 8002644:	480f      	ldr	r0, [pc, #60]	; (8002684 <vcom_ReceiveInit+0x54>)
 8002646:	f005 f912 	bl	800786e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <vcom_ReceiveInit+0x54>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002654:	d1f9      	bne.n	800264a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800265c:	d0fb      	beq.n	8002656 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002664:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002666:	4c07      	ldr	r4, [pc, #28]	; (8002684 <vcom_ReceiveInit+0x54>)
 8002668:	4620      	mov	r0, r4
 800266a:	f005 f941 	bl	80078f0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800266e:	2201      	movs	r2, #1
 8002670:	4905      	ldr	r1, [pc, #20]	; (8002688 <vcom_ReceiveInit+0x58>)
 8002672:	4620      	mov	r0, r4
 8002674:	f005 f894 	bl	80077a0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002678:	2000      	movs	r0, #0
 800267a:	b002      	add	sp, #8
 800267c:	bd10      	pop	{r4, pc}
 800267e:	bf00      	nop
 8002680:	20000544 	.word	0x20000544
 8002684:	200004b0 	.word	0x200004b0
 8002688:	2000054c 	.word	0x2000054c

0800268c <enqueue>:
void enqueue(CommandData data) {
 800268c:	b500      	push	{lr}
 800268e:	b083      	sub	sp, #12
 8002690:	466a      	mov	r2, sp
 8002692:	e882 0003 	stmia.w	r2, {r0, r1}
    commandQueue.buffer[commandQueue.head] = data;  // Store data in the queue
 8002696:	4919      	ldr	r1, [pc, #100]	; (80026fc <enqueue+0x70>)
 8002698:	f891 3078 	ldrb.w	r3, [r1, #120]	; 0x78
 800269c:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 80026a0:	ea4f 0c4e 	mov.w	ip, lr, lsl #1
 80026a4:	eb01 0e0c 	add.w	lr, r1, ip
 80026a8:	f841 000c 	str.w	r0, [r1, ip]
 80026ac:	8892      	ldrh	r2, [r2, #4]
 80026ae:	f8ae 2004 	strh.w	r2, [lr, #4]
    commandQueue.head = (commandQueue.head + 1) % QUEUE_SIZE;
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <enqueue+0x74>)
 80026b6:	fb83 0302 	smull	r0, r3, r3, r2
 80026ba:	10db      	asrs	r3, r3, #3
 80026bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026c0:	0098      	lsls	r0, r3, #2
 80026c2:	1a13      	subs	r3, r2, r0
 80026c4:	f881 3078 	strb.w	r3, [r1, #120]	; 0x78
    if (commandQueue.count == QUEUE_SIZE) {
 80026c8:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
 80026cc:	2b14      	cmp	r3, #20
 80026ce:	d006      	beq.n	80026de <enqueue+0x52>
        commandQueue.count++;  // Increment the count until the queue is full
 80026d0:	3301      	adds	r3, #1
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <enqueue+0x70>)
 80026d4:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
}
 80026d8:	b003      	add	sp, #12
 80026da:	f85d fb04 	ldr.w	pc, [sp], #4
        commandQueue.tail = (commandQueue.tail + 1) % QUEUE_SIZE;
 80026de:	f891 2079 	ldrb.w	r2, [r1, #121]	; 0x79
 80026e2:	3201      	adds	r2, #1
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <enqueue+0x74>)
 80026e6:	fb83 0302 	smull	r0, r3, r3, r2
 80026ea:	10db      	asrs	r3, r3, #3
 80026ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026f0:	0098      	lsls	r0, r3, #2
 80026f2:	1a13      	subs	r3, r2, r0
 80026f4:	f881 3079 	strb.w	r3, [r1, #121]	; 0x79
 80026f8:	e7ee      	b.n	80026d8 <enqueue+0x4c>
 80026fa:	bf00      	nop
 80026fc:	20000550 	.word	0x20000550
 8002700:	66666667 	.word	0x66666667

08002704 <dequeue>:
CommandData dequeue() {
 8002704:	b500      	push	{lr}
    CommandData data = commandQueue.buffer[commandQueue.tail];  // Get the oldest element
 8002706:	4a10      	ldr	r2, [pc, #64]	; (8002748 <dequeue+0x44>)
 8002708:	f892 3079 	ldrb.w	r3, [r2, #121]	; 0x79
 800270c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8002710:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8002714:	f852 c01c 	ldr.w	ip, [r2, ip, lsl #1]
 8002718:	f8c0 c000 	str.w	ip, [r0]
 800271c:	f8be c004 	ldrh.w	ip, [lr, #4]
 8002720:	f8a0 c004 	strh.w	ip, [r0, #4]
    commandQueue.tail = (commandQueue.tail + 1) % QUEUE_SIZE;   // Move the tail to the next element
 8002724:	1c59      	adds	r1, r3, #1
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <dequeue+0x48>)
 8002728:	fb83 c301 	smull	ip, r3, r3, r1
 800272c:	10db      	asrs	r3, r3, #3
 800272e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002732:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
 8002736:	f882 3079 	strb.w	r3, [r2, #121]	; 0x79
    commandQueue.count--;  // Decrement the count
 800273a:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 800273e:	3b01      	subs	r3, #1
 8002740:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
}
 8002744:	f85d fb04 	ldr.w	pc, [sp], #4
 8002748:	20000550 	.word	0x20000550
 800274c:	66666667 	.word	0x66666667

08002750 <printQueue>:
void printQueue() {
 8002750:	b530      	push	{r4, r5, lr}
 8002752:	b085      	sub	sp, #20
	APP_LOG(TS_OFF, VLEVEL_M, "Queue contents (latest 5):\n");
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <printQueue+0x74>)
 8002756:	2200      	movs	r2, #0
 8002758:	4611      	mov	r1, r2
 800275a:	2002      	movs	r0, #2
 800275c:	f00f fcc0 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
    for (uint8_t i = 0; i < commandQueue.count; i++) {
 8002760:	2400      	movs	r4, #0
 8002762:	e021      	b.n	80027a8 <printQueue+0x58>
        uint8_t index = (commandQueue.tail + i) % QUEUE_SIZE;
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <printQueue+0x78>)
 8002766:	f892 1079 	ldrb.w	r1, [r2, #121]	; 0x79
 800276a:	4421      	add	r1, r4
 800276c:	4817      	ldr	r0, [pc, #92]	; (80027cc <printQueue+0x7c>)
 800276e:	fb80 3001 	smull	r3, r0, r0, r1
 8002772:	17cb      	asrs	r3, r1, #31
 8002774:	ebc3 03e0 	rsb	r3, r3, r0, asr #3
 8002778:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800277c:	0098      	lsls	r0, r3, #2
 800277e:	1a0b      	subs	r3, r1, r0
        APP_LOG(TS_OFF, VLEVEL_M, "Water Level: %u, Battery Voltage: %u, System State: %u\n",
 8002780:	b2db      	uxtb	r3, r3
 8002782:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8002786:	0041      	lsls	r1, r0, #1
 8002788:	1855      	adds	r5, r2, r1
 800278a:	5a50      	ldrh	r0, [r2, r1]
 800278c:	886d      	ldrh	r5, [r5, #2]
 800278e:	440a      	add	r2, r1
 8002790:	7913      	ldrb	r3, [r2, #4]
 8002792:	9302      	str	r3, [sp, #8]
 8002794:	9501      	str	r5, [sp, #4]
 8002796:	9000      	str	r0, [sp, #0]
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <printQueue+0x80>)
 800279a:	2200      	movs	r2, #0
 800279c:	4611      	mov	r1, r2
 800279e:	2002      	movs	r0, #2
 80027a0:	f00f fc9e 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
    for (uint8_t i = 0; i < commandQueue.count; i++) {
 80027a4:	3401      	adds	r4, #1
 80027a6:	b2e4      	uxtb	r4, r4
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <printQueue+0x78>)
 80027aa:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80027ae:	42a3      	cmp	r3, r4
 80027b0:	d8d8      	bhi.n	8002764 <printQueue+0x14>
    APP_LOG(TS_OFF, VLEVEL_M, "\n");
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <printQueue+0x84>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	4611      	mov	r1, r2
 80027b8:	2002      	movs	r0, #2
 80027ba:	f00f fc91 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 80027be:	b005      	add	sp, #20
 80027c0:	bd30      	pop	{r4, r5, pc}
 80027c2:	bf00      	nop
 80027c4:	08018020 	.word	0x08018020
 80027c8:	20000550 	.word	0x20000550
 80027cc:	66666667 	.word	0x66666667
 80027d0:	0801803c 	.word	0x0801803c
 80027d4:	080184f4 	.word	0x080184f4

080027d8 <parseCommand>:
bool parseCommand(const char *input, CommandData *data) {
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	b09e      	sub	sp, #120	; 0x78
 80027dc:	4604      	mov	r4, r0
 80027de:	460e      	mov	r6, r1
    const char *start = strchr(input, '<');
 80027e0:	213c      	movs	r1, #60	; 0x3c
 80027e2:	f011 f992 	bl	8013b0a <strchr>
 80027e6:	4605      	mov	r5, r0
    const char *end = strchr(input, '>');
 80027e8:	213e      	movs	r1, #62	; 0x3e
 80027ea:	4620      	mov	r0, r4
 80027ec:	f011 f98d 	bl	8013b0a <strchr>
    if (start == NULL || end == NULL || start >= end) {
 80027f0:	2d00      	cmp	r5, #0
 80027f2:	d039      	beq.n	8002868 <parseCommand+0x90>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d039      	beq.n	800286c <parseCommand+0x94>
 80027f8:	4285      	cmp	r5, r0
 80027fa:	d302      	bcc.n	8002802 <parseCommand+0x2a>
        return false;
 80027fc:	2000      	movs	r0, #0
}
 80027fe:	b01e      	add	sp, #120	; 0x78
 8002800:	bd70      	pop	{r4, r5, r6, pc}
    strncpy(buffer, start + 1, end - start - 1);  // Copy content inside '<' and '>'
 8002802:	1b44      	subs	r4, r0, r5
 8002804:	3c01      	subs	r4, #1
 8002806:	4622      	mov	r2, r4
 8002808:	1c69      	adds	r1, r5, #1
 800280a:	a805      	add	r0, sp, #20
 800280c:	f011 f98a 	bl	8013b24 <strncpy>
    buffer[end - start - 1] = '\0';               // Null-terminate the string
 8002810:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8002814:	eb0d 0403 	add.w	r4, sp, r3
 8002818:	2300      	movs	r3, #0
 800281a:	f804 3c64 	strb.w	r3, [r4, #-100]
    if (sscanf(buffer, "%f,%f,%d", &waterLevel, &batteryVoltage, &systemState) != 3) {
 800281e:	ab02      	add	r3, sp, #8
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	ab03      	add	r3, sp, #12
 8002824:	aa04      	add	r2, sp, #16
 8002826:	4912      	ldr	r1, [pc, #72]	; (8002870 <parseCommand+0x98>)
 8002828:	a805      	add	r0, sp, #20
 800282a:	f011 f8ff 	bl	8013a2c <siscanf>
 800282e:	2803      	cmp	r0, #3
 8002830:	d001      	beq.n	8002836 <parseCommand+0x5e>
        return false;
 8002832:	2000      	movs	r0, #0
 8002834:	e7e3      	b.n	80027fe <parseCommand+0x26>
    data->waterLevel = (uint16_t)(waterLevel * 100);
 8002836:	490f      	ldr	r1, [pc, #60]	; (8002874 <parseCommand+0x9c>)
 8002838:	9804      	ldr	r0, [sp, #16]
 800283a:	f7fd fcf9 	bl	8000230 <__aeabi_fmul>
 800283e:	f7fe fbe3 	bl	8001008 <__aeabi_f2uiz>
 8002842:	8030      	strh	r0, [r6, #0]
    data->batteryVoltage = (uint16_t)(batteryVoltage * 100);
 8002844:	490b      	ldr	r1, [pc, #44]	; (8002874 <parseCommand+0x9c>)
 8002846:	9803      	ldr	r0, [sp, #12]
 8002848:	f7fd fcf2 	bl	8000230 <__aeabi_fmul>
 800284c:	f7fe fbdc 	bl	8001008 <__aeabi_f2uiz>
 8002850:	8070      	strh	r0, [r6, #2]
    data->systemState = (uint8_t)systemState;
 8002852:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002856:	7133      	strb	r3, [r6, #4]
    enqueue(*data);
 8002858:	6830      	ldr	r0, [r6, #0]
 800285a:	88b1      	ldrh	r1, [r6, #4]
 800285c:	f7ff ff16 	bl	800268c <enqueue>
    printQueue();
 8002860:	f7ff ff76 	bl	8002750 <printQueue>
    return true;
 8002864:	2001      	movs	r0, #1
 8002866:	e7ca      	b.n	80027fe <parseCommand+0x26>
        return false;
 8002868:	2000      	movs	r0, #0
 800286a:	e7c8      	b.n	80027fe <parseCommand+0x26>
 800286c:	2000      	movs	r0, #0
 800286e:	e7c6      	b.n	80027fe <parseCommand+0x26>
 8002870:	08018074 	.word	0x08018074
 8002874:	42c80000 	.word	0x42c80000

08002878 <vcom_Resume>:

void vcom_Resume(void)
{
 8002878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800287a:	4807      	ldr	r0, [pc, #28]	; (8002898 <vcom_Resume+0x20>)
 800287c:	f004 febe 	bl	80075fc <HAL_UART_Init>
 8002880:	b920      	cbnz	r0, 800288c <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002882:	4806      	ldr	r0, [pc, #24]	; (800289c <vcom_Resume+0x24>)
 8002884:	f001 fc6e 	bl	8004164 <HAL_DMA_Init>
 8002888:	b918      	cbnz	r0, 8002892 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800288a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800288c:	f7ff f8e2 	bl	8001a54 <Error_Handler>
 8002890:	e7f7      	b.n	8002882 <vcom_Resume+0xa>
    Error_Handler();
 8002892:	f7ff f8df 	bl	8001a54 <Error_Handler>
}
 8002896:	e7f8      	b.n	800288a <vcom_Resume+0x12>
 8002898:	200004b0 	.word	0x200004b0
 800289c:	200003bc 	.word	0x200003bc

080028a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80028a2:	6802      	ldr	r2, [r0, #0]
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <HAL_UART_TxCpltCallback+0x18>)
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d000      	beq.n	80028ac <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80028aa:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_UART_TxCpltCallback+0x1c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2000      	movs	r0, #0
 80028b2:	4798      	blx	r3
}
 80028b4:	e7f9      	b.n	80028aa <HAL_UART_TxCpltCallback+0xa>
 80028b6:	bf00      	nop
 80028b8:	40004400 	.word	0x40004400
 80028bc:	20000548 	.word	0x20000548

080028c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028c0:	b530      	push	{r4, r5, lr}
 80028c2:	b085      	sub	sp, #20
 80028c4:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80028c6:	6802      	ldr	r2, [r0, #0]
 80028c8:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <HAL_UART_RxCpltCallback+0x140>)
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d005      	beq.n	80028da <HAL_UART_RxCpltCallback+0x1a>
//      RxCpltCallback(&charRx, 1, 0);
//    }
//    HAL_UART_Receive_IT(huart, &charRx, 1);
//  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */
  if (huart->Instance == USART1)
 80028ce:	6822      	ldr	r2, [r4, #0]
 80028d0:	4b4c      	ldr	r3, [pc, #304]	; (8002a04 <HAL_UART_RxCpltCallback+0x144>)
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d010      	beq.n	80028f8 <HAL_UART_RxCpltCallback+0x38>
		 //APP_LOG(TS_OFF, VLEVEL_M, "%c", charRx);
		 HAL_UART_Receive_IT(huart, &charRx, 1);
	   }

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80028d6:	b005      	add	sp, #20
 80028d8:	bd30      	pop	{r4, r5, pc}
	if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80028da:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <HAL_UART_RxCpltCallback+0x148>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b12b      	cbz	r3, 80028ec <HAL_UART_RxCpltCallback+0x2c>
 80028e0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80028e4:	b912      	cbnz	r2, 80028ec <HAL_UART_RxCpltCallback+0x2c>
	  RxCpltCallback(&charRx, 1, 0);
 80028e6:	2101      	movs	r1, #1
 80028e8:	4848      	ldr	r0, [pc, #288]	; (8002a0c <HAL_UART_RxCpltCallback+0x14c>)
 80028ea:	4798      	blx	r3
	HAL_UART_Receive_IT(huart, &charRx, 1);
 80028ec:	2201      	movs	r2, #1
 80028ee:	4947      	ldr	r1, [pc, #284]	; (8002a0c <HAL_UART_RxCpltCallback+0x14c>)
 80028f0:	4620      	mov	r0, r4
 80028f2:	f004 ff55 	bl	80077a0 <HAL_UART_Receive_IT>
 80028f6:	e7ea      	b.n	80028ce <HAL_UART_RxCpltCallback+0xe>
		if (charRx != '\n')
 80028f8:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <HAL_UART_RxCpltCallback+0x14c>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b0a      	cmp	r3, #10
 80028fe:	d00e      	beq.n	800291e <HAL_UART_RxCpltCallback+0x5e>
		  if (rxIndex < RX_BUFFER_SIZE - 1)  // Ensure buffer doesn't overflow
 8002900:	4a43      	ldr	r2, [pc, #268]	; (8002a10 <HAL_UART_RxCpltCallback+0x150>)
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	2a62      	cmp	r2, #98	; 0x62
 8002906:	d804      	bhi.n	8002912 <HAL_UART_RxCpltCallback+0x52>
			rxBuffer[rxIndex++] = charRx;
 8002908:	1c50      	adds	r0, r2, #1
 800290a:	4941      	ldr	r1, [pc, #260]	; (8002a10 <HAL_UART_RxCpltCallback+0x150>)
 800290c:	7008      	strb	r0, [r1, #0]
 800290e:	4941      	ldr	r1, [pc, #260]	; (8002a14 <HAL_UART_RxCpltCallback+0x154>)
 8002910:	548b      	strb	r3, [r1, r2]
		 HAL_UART_Receive_IT(huart, &charRx, 1);
 8002912:	2201      	movs	r2, #1
 8002914:	493d      	ldr	r1, [pc, #244]	; (8002a0c <HAL_UART_RxCpltCallback+0x14c>)
 8002916:	4620      	mov	r0, r4
 8002918:	f004 ff42 	bl	80077a0 <HAL_UART_Receive_IT>
}
 800291c:	e7db      	b.n	80028d6 <HAL_UART_RxCpltCallback+0x16>
		  rxBuffer[rxIndex] = '\0';  // Null-terminate the string
 800291e:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <HAL_UART_RxCpltCallback+0x150>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4d3c      	ldr	r5, [pc, #240]	; (8002a14 <HAL_UART_RxCpltCallback+0x154>)
 8002924:	2100      	movs	r1, #0
 8002926:	54e9      	strb	r1, [r5, r3]
		  APP_LOG(TS_OFF, VLEVEL_M, "Received message: %s\r\n", rxBuffer);
 8002928:	9500      	str	r5, [sp, #0]
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_UART_RxCpltCallback+0x158>)
 800292c:	460a      	mov	r2, r1
 800292e:	2002      	movs	r0, #2
 8002930:	f00f fbd6 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
		  if (strstr(rxBuffer, "send") != NULL) {
 8002934:	4939      	ldr	r1, [pc, #228]	; (8002a1c <HAL_UART_RxCpltCallback+0x15c>)
 8002936:	4628      	mov	r0, r5
 8002938:	f011 f907 	bl	8013b4a <strstr>
 800293c:	b390      	cbz	r0, 80029a4 <HAL_UART_RxCpltCallback+0xe4>
			  if (commandQueue.count > 0) {
 800293e:	4b38      	ldr	r3, [pc, #224]	; (8002a20 <HAL_UART_RxCpltCallback+0x160>)
 8002940:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002944:	b33b      	cbz	r3, 8002996 <HAL_UART_RxCpltCallback+0xd6>
				  CommandData dequeuedData = dequeue();
 8002946:	a802      	add	r0, sp, #8
 8002948:	f7ff fedc 	bl	8002704 <dequeue>
				  APP_LOG(TS_OFF, VLEVEL_M, "Dequeued Data:\n");
 800294c:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <HAL_UART_RxCpltCallback+0x164>)
 800294e:	2200      	movs	r2, #0
 8002950:	4611      	mov	r1, r2
 8002952:	2002      	movs	r0, #2
 8002954:	f00f fbc4 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
				  APP_LOG(TS_OFF, VLEVEL_M, "Water Level (x100): %d\n", dequeuedData.waterLevel);
 8002958:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_UART_RxCpltCallback+0x168>)
 8002960:	2200      	movs	r2, #0
 8002962:	4611      	mov	r1, r2
 8002964:	2002      	movs	r0, #2
 8002966:	f00f fbbb 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
				  APP_LOG(TS_OFF, VLEVEL_M, "Battery Voltage (x100): %d\n", dequeuedData.batteryVoltage);
 800296a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <HAL_UART_RxCpltCallback+0x16c>)
 8002972:	2200      	movs	r2, #0
 8002974:	4611      	mov	r1, r2
 8002976:	2002      	movs	r0, #2
 8002978:	f00f fbb2 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
				  APP_LOG(TS_OFF, VLEVEL_M, "System State: %u\n", dequeuedData.systemState);
 800297c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_UART_RxCpltCallback+0x170>)
 8002984:	2200      	movs	r2, #0
 8002986:	4611      	mov	r1, r2
 8002988:	2002      	movs	r0, #2
 800298a:	f00f fba9 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
		  rxIndex = 0;  // Reset the index for the next message
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_UART_RxCpltCallback+0x150>)
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	e7bd      	b.n	8002912 <HAL_UART_RxCpltCallback+0x52>
				  APP_LOG(TS_OFF, VLEVEL_M, "Queue is empty!\n");
 8002996:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <HAL_UART_RxCpltCallback+0x174>)
 8002998:	2200      	movs	r2, #0
 800299a:	4611      	mov	r1, r2
 800299c:	2002      	movs	r0, #2
 800299e:	f00f fb9f 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
 80029a2:	e7f4      	b.n	800298e <HAL_UART_RxCpltCallback+0xce>
			  if (parseCommand(rxBuffer, &data)) {
 80029a4:	a902      	add	r1, sp, #8
 80029a6:	481b      	ldr	r0, [pc, #108]	; (8002a14 <HAL_UART_RxCpltCallback+0x154>)
 80029a8:	f7ff ff16 	bl	80027d8 <parseCommand>
 80029ac:	b308      	cbz	r0, 80029f2 <HAL_UART_RxCpltCallback+0x132>
				  APP_LOG(TS_OFF, VLEVEL_M, "Command parsed successfully:\n");
 80029ae:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <HAL_UART_RxCpltCallback+0x178>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	4611      	mov	r1, r2
 80029b4:	2002      	movs	r0, #2
 80029b6:	f00f fb93 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
				  APP_LOG(TS_OFF, VLEVEL_M, "Water Level (x100): %d\n", data.waterLevel);
 80029ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_UART_RxCpltCallback+0x168>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	4611      	mov	r1, r2
 80029c6:	2002      	movs	r0, #2
 80029c8:	f00f fb8a 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
				  APP_LOG(TS_OFF, VLEVEL_M, "Battery Voltage (x100): %d\n", data.batteryVoltage);
 80029cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_UART_RxCpltCallback+0x16c>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	4611      	mov	r1, r2
 80029d8:	2002      	movs	r0, #2
 80029da:	f00f fb81 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
				  APP_LOG(TS_OFF, VLEVEL_M, "System State: %u\n", data.systemState);
 80029de:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_UART_RxCpltCallback+0x170>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	4611      	mov	r1, r2
 80029ea:	2002      	movs	r0, #2
 80029ec:	f00f fb78 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
 80029f0:	e7cd      	b.n	800298e <HAL_UART_RxCpltCallback+0xce>
				  APP_LOG(TS_OFF, VLEVEL_M, "Invalid command format!\n");
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_UART_RxCpltCallback+0x17c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	4611      	mov	r1, r2
 80029f8:	2002      	movs	r0, #2
 80029fa:	f00f fb71 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
 80029fe:	e7c6      	b.n	800298e <HAL_UART_RxCpltCallback+0xce>
 8002a00:	40004400 	.word	0x40004400
 8002a04:	40013800 	.word	0x40013800
 8002a08:	20000544 	.word	0x20000544
 8002a0c:	2000054c 	.word	0x2000054c
 8002a10:	20000630 	.word	0x20000630
 8002a14:	200005cc 	.word	0x200005cc
 8002a18:	08018080 	.word	0x08018080
 8002a1c:	08018098 	.word	0x08018098
 8002a20:	20000550 	.word	0x20000550
 8002a24:	080180a0 	.word	0x080180a0
 8002a28:	080180b0 	.word	0x080180b0
 8002a2c:	080180c8 	.word	0x080180c8
 8002a30:	080180e4 	.word	0x080180e4
 8002a34:	080180f8 	.word	0x080180f8
 8002a38:	0801810c 	.word	0x0801810c
 8002a3c:	0801812c 	.word	0x0801812c

08002a40 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002a40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002a42:	f7ff f9a7 	bl	8001d94 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002a46:	f000 fbb1 	bl	80031ac <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002a4a:	bd08      	pop	{r3, pc}

08002a4c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002a4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a52:	f00f fca3 	bl	801239c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002a56:	bd08      	pop	{r3, pc}

08002a58 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void) {
	/* USER CODE BEGIN OnSysTimeUpdate_1 */

	/* USER CODE END OnSysTimeUpdate_1 */
}
 8002a58:	4770      	bx	lr
	...

08002a5c <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed) {
	/* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

	/* USER CODE END OnTxFrameCtrlChanged_1 */
	LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002a5c:	4b01      	ldr	r3, [pc, #4]	; (8002a64 <OnTxFrameCtrlChanged+0x8>)
 8002a5e:	70d8      	strb	r0, [r3, #3]
	/* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

	/* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000058 	.word	0x20000058

08002a68 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity) {
	/* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

	/* USER CODE END OnPingSlotPeriodicityChanged_1 */
	LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002a68:	4b01      	ldr	r3, [pc, #4]	; (8002a70 <OnPingSlotPeriodicityChanged+0x8>)
 8002a6a:	7418      	strb	r0, [r3, #16]
	/* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

	/* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000058 	.word	0x20000058

08002a74 <OnBeaconStatusChange>:
	if (params != NULL) {
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d03f      	beq.n	8002af8 <OnBeaconStatusChange+0x84>
static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params) {
 8002a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a7c:	b08c      	sub	sp, #48	; 0x30
 8002a7e:	4603      	mov	r3, r0
		switch (params->State) {
 8002a80:	7842      	ldrb	r2, [r0, #1]
 8002a82:	2a02      	cmp	r2, #2
 8002a84:	d00a      	beq.n	8002a9c <OnBeaconStatusChange+0x28>
 8002a86:	2a03      	cmp	r2, #3
 8002a88:	d02f      	beq.n	8002aea <OnBeaconStatusChange+0x76>
			APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002a8a:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <OnBeaconStatusChange+0x88>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	4611      	mov	r1, r2
 8002a90:	2002      	movs	r0, #2
 8002a92:	f00f fb25 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002a96:	b00c      	add	sp, #48	; 0x30
 8002a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			APP_LOG(TS_OFF, VLEVEL_M,
 8002a9c:	7c02      	ldrb	r2, [r0, #16]
 8002a9e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8002aa2:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002aa6:	7d9c      	ldrb	r4, [r3, #22]
 8002aa8:	7ddd      	ldrb	r5, [r3, #23]
 8002aaa:	7e1e      	ldrb	r6, [r3, #24]
 8002aac:	7e5f      	ldrb	r7, [r3, #25]
 8002aae:	f893 c01a 	ldrb.w	ip, [r3, #26]
 8002ab2:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002ab6:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002aba:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002abe:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002ac2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002ac6:	9708      	str	r7, [sp, #32]
 8002ac8:	9607      	str	r6, [sp, #28]
 8002aca:	9506      	str	r5, [sp, #24]
 8002acc:	9405      	str	r4, [sp, #20]
 8002ace:	685c      	ldr	r4, [r3, #4]
 8002ad0:	9404      	str	r4, [sp, #16]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	9303      	str	r3, [sp, #12]
 8002ad6:	9002      	str	r0, [sp, #8]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	9200      	str	r2, [sp, #0]
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <OnBeaconStatusChange+0x8c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	2002      	movs	r0, #2
 8002ae4:	f00f fafc 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
			break;
 8002ae8:	e7d5      	b.n	8002a96 <OnBeaconStatusChange+0x22>
			APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <OnBeaconStatusChange+0x90>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	4611      	mov	r1, r2
 8002af0:	2002      	movs	r0, #2
 8002af2:	f00f faf5 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002af6:	e7ce      	b.n	8002a96 <OnBeaconStatusChange+0x22>
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	08018158 	.word	0x08018158
 8002b00:	08018170 	.word	0x08018170
 8002b04:	080181e4 	.word	0x080181e4

08002b08 <OnClassChange>:
static void OnClassChange(DeviceClass_t deviceClass) {
 8002b08:	b500      	push	{lr}
 8002b0a:	b083      	sub	sp, #12
	APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <OnClassChange+0x1c>)
 8002b0e:	5c1b      	ldrb	r3, [r3, r0]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <OnClassChange+0x20>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	4611      	mov	r1, r2
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f00f fae1 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002b1e:	b003      	add	sp, #12
 8002b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b24:	08018220 	.word	0x08018220
 8002b28:	08018204 	.word	0x08018204

08002b2c <OnNvmDataChange>:
	/* USER CODE BEGIN StoreContext_Last */

	/* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state) {
 8002b2c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN OnNvmDataChange_1 */

	/* USER CODE END OnNvmDataChange_1 */
	if (state == LORAMAC_HANDLER_NVM_STORE) {
 8002b2e:	2801      	cmp	r0, #1
 8002b30:	d006      	beq.n	8002b40 <OnNvmDataChange+0x14>
		APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
	} else {
		APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <OnNvmDataChange+0x24>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	4611      	mov	r1, r2
 8002b38:	2002      	movs	r0, #2
 8002b3a:	f00f fad1 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
	}
	/* USER CODE BEGIN OnNvmDataChange_Last */

	/* USER CODE END OnNvmDataChange_Last */
}
 8002b3e:	bd08      	pop	{r3, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <OnNvmDataChange+0x28>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	4611      	mov	r1, r2
 8002b46:	2002      	movs	r0, #2
 8002b48:	f00f faca 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
 8002b4c:	e7f7      	b.n	8002b3e <OnNvmDataChange+0x12>
 8002b4e:	bf00      	nop
 8002b50:	08018238 	.word	0x08018238
 8002b54:	08018224 	.word	0x08018224

08002b58 <OnTxTimerEvent>:
static void OnTxTimerEvent(void *context) {
 8002b58:	b508      	push	{r3, lr}
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent),
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f00f fbe9 	bl	8012334 <UTIL_SEQ_SetTask>
	UTIL_TIMER_Start(&TxTimer);
 8002b62:	4802      	ldr	r0, [pc, #8]	; (8002b6c <OnTxTimerEvent+0x14>)
 8002b64:	f00f fe6a 	bl	801283c <UTIL_TIMER_Start>
}
 8002b68:	bd08      	pop	{r3, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000788 	.word	0x20000788

08002b70 <OnMacProcessNotify>:
static void OnMacProcessNotify(void) {
 8002b70:	b508      	push	{r3, lr}
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002b72:	2100      	movs	r1, #0
 8002b74:	2001      	movs	r0, #1
 8002b76:	f00f fbdd 	bl	8012334 <UTIL_SEQ_SetTask>
}
 8002b7a:	bd08      	pop	{r3, pc}

08002b7c <OnSystemReset>:
static void OnSystemReset(void) {
 8002b7c:	b508      	push	{r3, lr}
	if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt())
 8002b7e:	f005 fc13 	bl	80083a8 <LmHandlerHalt>
 8002b82:	b100      	cbz	r0, 8002b86 <OnSystemReset+0xa>
}
 8002b84:	bd08      	pop	{r3, pc}
			&& (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET)) {
 8002b86:	f005 f8cd 	bl	8007d24 <LmHandlerJoinStatus>
 8002b8a:	2801      	cmp	r0, #1
 8002b8c:	d1fa      	bne.n	8002b84 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b8e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b92:	4905      	ldr	r1, [pc, #20]	; (8002ba8 <OnSystemReset+0x2c>)
 8002b94:	68ca      	ldr	r2, [r1, #12]
 8002b96:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b9a:	4b04      	ldr	r3, [pc, #16]	; (8002bac <OnSystemReset+0x30>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60cb      	str	r3, [r1, #12]
 8002ba0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002ba4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002ba6:	e7fd      	b.n	8002ba4 <OnSystemReset+0x28>
 8002ba8:	e000ed00 	.word	0xe000ed00
 8002bac:	05fa0004 	.word	0x05fa0004

08002bb0 <OnTxPeriodicityChanged>:
static void OnTxPeriodicityChanged(uint32_t periodicity) {
 8002bb0:	b510      	push	{r4, lr}
	TxPeriodicity = periodicity;
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <OnTxPeriodicityChanged+0x28>)
 8002bb4:	6018      	str	r0, [r3, #0]
	if (TxPeriodicity == 0) {
 8002bb6:	b910      	cbnz	r0, 8002bbe <OnTxPeriodicityChanged+0xe>
		TxPeriodicity = APP_TX_DUTYCYCLE;
 8002bb8:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bbc:	601a      	str	r2, [r3, #0]
	UTIL_TIMER_Stop(&TxTimer);
 8002bbe:	4c07      	ldr	r4, [pc, #28]	; (8002bdc <OnTxPeriodicityChanged+0x2c>)
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f00f fde1 	bl	8012788 <UTIL_TIMER_Stop>
	UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <OnTxPeriodicityChanged+0x28>)
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f00f fe7c 	bl	80128c8 <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Start(&TxTimer);
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f00f fe33 	bl	801283c <UTIL_TIMER_Start>
}
 8002bd6:	bd10      	pop	{r4, pc}
 8002bd8:	20000070 	.word	0x20000070
 8002bdc:	20000788 	.word	0x20000788

08002be0 <OnTxData>:
	if ((params != NULL)) {
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d042      	beq.n	8002c6a <OnTxData+0x8a>
static void OnTxData(LmHandlerTxParams_t *params) {
 8002be4:	b510      	push	{r4, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	4604      	mov	r4, r0
		if (params->IsMcpsConfirm != 0) {
 8002bea:	7803      	ldrb	r3, [r0, #0]
 8002bec:	b90b      	cbnz	r3, 8002bf2 <OnTxData+0x12>
}
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf8:	481c      	ldr	r0, [pc, #112]	; (8002c6c <OnTxData+0x8c>)
 8002bfa:	f001 ff67 	bl	8004acc <HAL_GPIO_WritePin>
			UTIL_TIMER_Start(&TxLedTimer);
 8002bfe:	481c      	ldr	r0, [pc, #112]	; (8002c70 <OnTxData+0x90>)
 8002c00:	f00f fe1c 	bl	801283c <UTIL_TIMER_Start>
			APP_LOG(TS_OFF, VLEVEL_M,
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <OnTxData+0x94>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	4611      	mov	r1, r2
 8002c0a:	2002      	movs	r0, #2
 8002c0c:	f00f fa68 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF, VLEVEL_H,
 8002c10:	7c23      	ldrb	r3, [r4, #16]
 8002c12:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8002c16:	f994 1018 	ldrsb.w	r1, [r4, #24]
 8002c1a:	9103      	str	r1, [sp, #12]
 8002c1c:	9202      	str	r2, [sp, #8]
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	68e3      	ldr	r3, [r4, #12]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <OnTxData+0x98>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	4611      	mov	r1, r2
 8002c2a:	2003      	movs	r0, #3
 8002c2c:	f00f fa58 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <OnTxData+0x9c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	4611      	mov	r1, r2
 8002c36:	2003      	movs	r0, #3
 8002c38:	f00f fa52 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
			if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) {
 8002c3c:	7a23      	ldrb	r3, [r4, #8]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d10c      	bne.n	8002c5c <OnTxData+0x7c>
				APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n",
 8002c42:	7a63      	ldrb	r3, [r4, #9]
 8002c44:	b143      	cbz	r3, 8002c58 <OnTxData+0x78>
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <OnTxData+0xa0>)
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <OnTxData+0xa4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4611      	mov	r1, r2
 8002c50:	2003      	movs	r0, #3
 8002c52:	f00f fa45 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
						(params->AckReceived != 0) ? "ACK" : "NACK");
 8002c56:	e7ca      	b.n	8002bee <OnTxData+0xe>
				APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n",
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <OnTxData+0xa8>)
 8002c5a:	e7f5      	b.n	8002c48 <OnTxData+0x68>
				APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <OnTxData+0xac>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4611      	mov	r1, r2
 8002c62:	2003      	movs	r0, #3
 8002c64:	f00f fa3c 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002c68:	e7c1      	b.n	8002bee <OnTxData+0xe>
 8002c6a:	4770      	bx	lr
 8002c6c:	48000400 	.word	0x48000400
 8002c70:	20000770 	.word	0x20000770
 8002c74:	08018258 	.word	0x08018258
 8002c78:	0801828c 	.word	0x0801828c
 8002c7c:	080182c0 	.word	0x080182c0
 8002c80:	08018254 	.word	0x08018254
 8002c84:	080182d0 	.word	0x080182d0
 8002c88:	0801824c 	.word	0x0801824c
 8002c8c:	080182e4 	.word	0x080182e4

08002c90 <OnJoinRequest>:
	if (joinParams != NULL) {
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d039      	beq.n	8002d08 <OnJoinRequest+0x78>
static void OnJoinRequest(LmHandlerJoinParams_t *joinParams) {
 8002c94:	b510      	push	{r4, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	4604      	mov	r4, r0
		if (joinParams->Status == LORAMAC_HANDLER_SUCCESS) {
 8002c9a:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8002c9e:	b9fb      	cbnz	r3, 8002ce0 <OnJoinRequest+0x50>
			UTIL_TIMER_Stop(&JoinLedTimer);
 8002ca0:	481a      	ldr	r0, [pc, #104]	; (8002d0c <OnJoinRequest+0x7c>)
 8002ca2:	f00f fd71 	bl	8012788 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cac:	4818      	ldr	r0, [pc, #96]	; (8002d10 <OnJoinRequest+0x80>)
 8002cae:	f001 ff0d 	bl	8004acc <HAL_GPIO_WritePin>
			APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002cb2:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <OnJoinRequest+0x84>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f00f fa11 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
			if (joinParams->Mode == ACTIVATION_TYPE_ABP) {
 8002cbe:	79e3      	ldrb	r3, [r4, #7]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d006      	beq.n	8002cd2 <OnJoinRequest+0x42>
				APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002cc4:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <OnJoinRequest+0x88>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	4611      	mov	r1, r2
 8002cca:	2002      	movs	r0, #2
 8002ccc:	f00f fa08 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
 8002cd0:	e00c      	b.n	8002cec <OnJoinRequest+0x5c>
				APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <OnJoinRequest+0x8c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	2002      	movs	r0, #2
 8002cda:	f00f fa01 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
 8002cde:	e005      	b.n	8002cec <OnJoinRequest+0x5c>
			APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <OnJoinRequest+0x90>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	2002      	movs	r0, #2
 8002ce8:	f00f f9fa 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
		APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n",
 8002cec:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002cf0:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002cf4:	9201      	str	r2, [sp, #4]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <OnJoinRequest+0x94>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	2003      	movs	r0, #3
 8002d00:	f00f f9ee 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002d04:	b002      	add	sp, #8
 8002d06:	bd10      	pop	{r4, pc}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000728 	.word	0x20000728
 8002d10:	48000400 	.word	0x48000400
 8002d14:	080182f4 	.word	0x080182f4
 8002d18:	0801832c 	.word	0x0801832c
 8002d1c:	0801830c 	.word	0x0801830c
 8002d20:	0801834c 	.word	0x0801834c
 8002d24:	08018368 	.word	0x08018368

08002d28 <OnStopJoinTimerEvent>:
static void OnStopJoinTimerEvent(void *context) {
 8002d28:	b510      	push	{r4, lr}
	if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE) {
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <OnStopJoinTimerEvent+0x3c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d013      	beq.n	8002d5a <OnStopJoinTimerEvent+0x32>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002d32:	4c0d      	ldr	r4, [pc, #52]	; (8002d68 <OnStopJoinTimerEvent+0x40>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	f001 fec6 	bl	8004acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002d40:	2200      	movs	r2, #0
 8002d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d46:	4620      	mov	r0, r4
 8002d48:	f001 fec0 	bl	8004acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d52:	4620      	mov	r0, r4
 8002d54:	f001 feba 	bl	8004acc <HAL_GPIO_WritePin>
}
 8002d58:	bd10      	pop	{r4, pc}
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	2008      	movs	r0, #8
 8002d5e:	f00f fae9 	bl	8012334 <UTIL_SEQ_SetTask>
 8002d62:	e7e6      	b.n	8002d32 <OnStopJoinTimerEvent+0xa>
 8002d64:	20000000 	.word	0x20000000
 8002d68:	48000400 	.word	0x48000400

08002d6c <OnRxTimerLedEvent>:
static void OnRxTimerLedEvent(void *context) {
 8002d6c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d74:	4801      	ldr	r0, [pc, #4]	; (8002d7c <OnRxTimerLedEvent+0x10>)
 8002d76:	f001 fea9 	bl	8004acc <HAL_GPIO_WritePin>
}
 8002d7a:	bd08      	pop	{r3, pc}
 8002d7c:	48000400 	.word	0x48000400

08002d80 <OnTxTimerLedEvent>:
static void OnTxTimerLedEvent(void *context) {
 8002d80:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002d82:	2200      	movs	r2, #0
 8002d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d88:	4801      	ldr	r0, [pc, #4]	; (8002d90 <OnTxTimerLedEvent+0x10>)
 8002d8a:	f001 fe9f 	bl	8004acc <HAL_GPIO_WritePin>
}
 8002d8e:	bd08      	pop	{r3, pc}
 8002d90:	48000400 	.word	0x48000400

08002d94 <OnRxData>:
	if (params != NULL) {
 8002d94:	2900      	cmp	r1, #0
 8002d96:	f000 80b2 	beq.w	8002efe <OnRxData+0x16a>
static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params) {
 8002d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9c:	b08b      	sub	sp, #44	; 0x2c
 8002d9e:	4604      	mov	r4, r0
 8002da0:	460e      	mov	r6, r1
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002da2:	2201      	movs	r2, #1
 8002da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002da8:	4855      	ldr	r0, [pc, #340]	; (8002f00 <OnRxData+0x16c>)
 8002daa:	f001 fe8f 	bl	8004acc <HAL_GPIO_WritePin>
		UTIL_TIMER_Start(&RxLedTimer);
 8002dae:	4855      	ldr	r0, [pc, #340]	; (8002f04 <OnRxData+0x170>)
 8002db0:	f00f fd44 	bl	801283c <UTIL_TIMER_Start>
		if (params->IsMcpsIndication) {
 8002db4:	7837      	ldrb	r7, [r6, #0]
 8002db6:	2f00      	cmp	r7, #0
 8002db8:	f000 8085 	beq.w	8002ec6 <OnRxData+0x132>
			if (appData != NULL) {
 8002dbc:	2c00      	cmp	r4, #0
 8002dbe:	f000 8081 	beq.w	8002ec4 <OnRxData+0x130>
				RxPort = appData->Port;
 8002dc2:	7827      	ldrb	r7, [r4, #0]
				if (appData->Buffer != NULL) {
 8002dc4:	6863      	ldr	r3, [r4, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d07d      	beq.n	8002ec6 <OnRxData+0x132>
					APP_LOG(TS_OFF, VLEVEL_M, "Payload received on PORT %d: ",
 8002dca:	9700      	str	r7, [sp, #0]
 8002dcc:	4b4e      	ldr	r3, [pc, #312]	; (8002f08 <OnRxData+0x174>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f00f f984 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
					for (uint8_t i = 0; i < appData->BufferSize; i++) {
 8002dd8:	2500      	movs	r5, #0
 8002dda:	e00a      	b.n	8002df2 <OnRxData+0x5e>
						APP_LOG(TS_OFF, VLEVEL_M, "%02X ", appData->Buffer[i]);
 8002ddc:	6863      	ldr	r3, [r4, #4]
 8002dde:	5d5b      	ldrb	r3, [r3, r5]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <OnRxData+0x178>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	4611      	mov	r1, r2
 8002de8:	2002      	movs	r0, #2
 8002dea:	f00f f979 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
					for (uint8_t i = 0; i < appData->BufferSize; i++) {
 8002dee:	3501      	adds	r5, #1
 8002df0:	b2ed      	uxtb	r5, r5
 8002df2:	7863      	ldrb	r3, [r4, #1]
 8002df4:	42ab      	cmp	r3, r5
 8002df6:	d8f1      	bhi.n	8002ddc <OnRxData+0x48>
					APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 8002df8:	4b45      	ldr	r3, [pc, #276]	; (8002f10 <OnRxData+0x17c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	2002      	movs	r0, #2
 8002e00:	f00f f96e 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
					switch (appData->Port) {
 8002e04:	7823      	ldrb	r3, [r4, #0]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d038      	beq.n	8002e7c <OnRxData+0xe8>
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d020      	beq.n	8002e50 <OnRxData+0xbc>
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d159      	bne.n	8002ec6 <OnRxData+0x132>
						APP_LOG(TS_OFF, VLEVEL_M, "Signal Command Received: %d \r\n", appData->Buffer[0]);
 8002e12:	6863      	ldr	r3, [r4, #4]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <OnRxData+0x180>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	2002      	movs	r0, #2
 8002e20:	f00f f95e 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
						if (appData->Buffer[0] >= 1 && appData->Buffer[0] <= 3) {
 8002e24:	6863      	ldr	r3, [r4, #4]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	1e5a      	subs	r2, r3, #1
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	2a02      	cmp	r2, #2
 8002e2e:	d84a      	bhi.n	8002ec6 <OnRxData+0x132>
						    snprintf(message, sizeof(message), "<%d> \r\n", appData->Buffer[0]);
 8002e30:	4a39      	ldr	r2, [pc, #228]	; (8002f18 <OnRxData+0x184>)
 8002e32:	210a      	movs	r1, #10
 8002e34:	a807      	add	r0, sp, #28
 8002e36:	f010 fda5 	bl	8013984 <sniprintf>
						    HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8002e3a:	a807      	add	r0, sp, #28
 8002e3c:	f7fd f9a0 	bl	8000180 <strlen>
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295
 8002e44:	b282      	uxth	r2, r0
 8002e46:	a907      	add	r1, sp, #28
 8002e48:	4834      	ldr	r0, [pc, #208]	; (8002f1c <OnRxData+0x188>)
 8002e4a:	f004 fb3a 	bl	80074c2 <HAL_UART_Transmit>
 8002e4e:	e03a      	b.n	8002ec6 <OnRxData+0x132>
						if (appData->BufferSize == 1) {
 8002e50:	7863      	ldrb	r3, [r4, #1]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d137      	bne.n	8002ec6 <OnRxData+0x132>
							switch (appData->Buffer[0]) {
 8002e56:	6863      	ldr	r3, [r4, #4]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d006      	beq.n	8002e6c <OnRxData+0xd8>
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d008      	beq.n	8002e74 <OnRxData+0xe0>
 8002e62:	bb83      	cbnz	r3, 8002ec6 <OnRxData+0x132>
								LmHandlerRequestClass(CLASS_A);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f005 f82f 	bl	8007ec8 <LmHandlerRequestClass>
								break;
 8002e6a:	e02c      	b.n	8002ec6 <OnRxData+0x132>
								LmHandlerRequestClass(CLASS_B);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f005 f82b 	bl	8007ec8 <LmHandlerRequestClass>
								break;
 8002e72:	e028      	b.n	8002ec6 <OnRxData+0x132>
								LmHandlerRequestClass(CLASS_C);
 8002e74:	2002      	movs	r0, #2
 8002e76:	f005 f827 	bl	8007ec8 <LmHandlerRequestClass>
								break;
 8002e7a:	e024      	b.n	8002ec6 <OnRxData+0x132>
						if (appData->BufferSize == 1) {
 8002e7c:	7863      	ldrb	r3, [r4, #1]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d121      	bne.n	8002ec6 <OnRxData+0x132>
							AppLedStateOn = appData->Buffer[0] & 0x01;
 8002e82:	6863      	ldr	r3, [r4, #4]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <OnRxData+0x18c>)
 8002e8c:	7013      	strb	r3, [r2, #0]
							if (AppLedStateOn == RESET) {
 8002e8e:	b963      	cbnz	r3, 8002eaa <OnRxData+0x116>
								APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <OnRxData+0x190>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	4611      	mov	r1, r2
 8002e96:	2003      	movs	r0, #3
 8002e98:	f00f f922 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
								HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ea2:	4817      	ldr	r0, [pc, #92]	; (8002f00 <OnRxData+0x16c>)
 8002ea4:	f001 fe12 	bl	8004acc <HAL_GPIO_WritePin>
 8002ea8:	e00d      	b.n	8002ec6 <OnRxData+0x132>
								APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002eaa:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <OnRxData+0x194>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	4611      	mov	r1, r2
 8002eb0:	2003      	movs	r0, #3
 8002eb2:	f00f f915 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
								HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ebc:	4810      	ldr	r0, [pc, #64]	; (8002f00 <OnRxData+0x16c>)
 8002ebe:	f001 fe05 	bl	8004acc <HAL_GPIO_WritePin>
 8002ec2:	e000      	b.n	8002ec6 <OnRxData+0x132>
	uint8_t RxPort = 0;
 8002ec4:	2700      	movs	r7, #0
		if (params->RxSlot < RX_SLOT_NONE) {
 8002ec6:	7c33      	ldrb	r3, [r6, #16]
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d901      	bls.n	8002ed0 <OnRxData+0x13c>
}
 8002ecc:	b00b      	add	sp, #44	; 0x2c
 8002ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
			APP_LOG(TS_OFF, VLEVEL_H,
 8002ed0:	f996 2008 	ldrsb.w	r2, [r6, #8]
 8002ed4:	f996 1009 	ldrsb.w	r1, [r6, #9]
 8002ed8:	f996 000a 	ldrsb.w	r0, [r6, #10]
 8002edc:	9005      	str	r0, [sp, #20]
 8002ede:	9104      	str	r1, [sp, #16]
 8002ee0:	4912      	ldr	r1, [pc, #72]	; (8002f2c <OnRxData+0x198>)
 8002ee2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	9202      	str	r2, [sp, #8]
 8002eea:	9701      	str	r7, [sp, #4]
 8002eec:	68f3      	ldr	r3, [r6, #12]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <OnRxData+0x19c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	2003      	movs	r0, #3
 8002ef8:	f00f f8f2 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002efc:	e7e6      	b.n	8002ecc <OnRxData+0x138>
 8002efe:	4770      	bx	lr
 8002f00:	48000400 	.word	0x48000400
 8002f04:	20000740 	.word	0x20000740
 8002f08:	08018394 	.word	0x08018394
 8002f0c:	080183b4 	.word	0x080183b4
 8002f10:	080183f0 	.word	0x080183f0
 8002f14:	080183d4 	.word	0x080183d4
 8002f18:	080183f4 	.word	0x080183f4
 8002f1c:	2000041c 	.word	0x2000041c
 8002f20:	20000726 	.word	0x20000726
 8002f24:	080183bc 	.word	0x080183bc
 8002f28:	080183c8 	.word	0x080183c8
 8002f2c:	080185f0 	.word	0x080185f0
 8002f30:	080183fc 	.word	0x080183fc

08002f34 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size) {
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	4604      	mov	r4, r0
 8002f38:	460d      	mov	r5, r1
	/* USER CODE BEGIN OnStoreContextRequest_1 */

	/* USER CODE END OnStoreContextRequest_1 */
	/* store nvm in flash */
	if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE)
 8002f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f3e:	4805      	ldr	r0, [pc, #20]	; (8002f54 <OnStoreContextRequest+0x20>)
 8002f40:	f7fe fcf4 	bl	800192c <FLASH_IF_Erase>
 8002f44:	b100      	cbz	r0, 8002f48 <OnStoreContextRequest+0x14>
		FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void*) nvm, nvm_size);
	}
	/* USER CODE BEGIN OnStoreContextRequest_Last */

	/* USER CODE END OnStoreContextRequest_Last */
}
 8002f46:	bd38      	pop	{r3, r4, r5, pc}
		FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void*) nvm, nvm_size);
 8002f48:	462a      	mov	r2, r5
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	4801      	ldr	r0, [pc, #4]	; (8002f54 <OnStoreContextRequest+0x20>)
 8002f4e:	f7fe fcb5 	bl	80018bc <FLASH_IF_Write>
}
 8002f52:	e7f8      	b.n	8002f46 <OnStoreContextRequest+0x12>
 8002f54:	0803f000 	.word	0x0803f000

08002f58 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size) {
 8002f58:	b508      	push	{r3, lr}
 8002f5a:	460a      	mov	r2, r1
	/* USER CODE BEGIN OnRestoreContextRequest_1 */

	/* USER CODE END OnRestoreContextRequest_1 */
	FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002f5c:	4901      	ldr	r1, [pc, #4]	; (8002f64 <OnRestoreContextRequest+0xc>)
 8002f5e:	f7fe fcc9 	bl	80018f4 <FLASH_IF_Read>
	/* USER CODE BEGIN OnRestoreContextRequest_Last */

	/* USER CODE END OnRestoreContextRequest_Last */
}
 8002f62:	bd08      	pop	{r3, pc}
 8002f64:	0803f000 	.word	0x0803f000

08002f68 <StopJoin>:
static void StopJoin(void) {
 8002f68:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002f6a:	4c1e      	ldr	r4, [pc, #120]	; (8002fe4 <StopJoin+0x7c>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f72:	4620      	mov	r0, r4
 8002f74:	f001 fdaa 	bl	8004acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f001 fda4 	bl	8004acc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002f84:	2201      	movs	r2, #1
 8002f86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f001 fd9e 	bl	8004acc <HAL_GPIO_WritePin>
	UTIL_TIMER_Stop(&TxTimer);
 8002f90:	4815      	ldr	r0, [pc, #84]	; (8002fe8 <StopJoin+0x80>)
 8002f92:	f00f fbf9 	bl	8012788 <UTIL_TIMER_Stop>
	if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop()) {
 8002f96:	f005 f9ff 	bl	8008398 <LmHandlerStop>
 8002f9a:	b148      	cbz	r0, 8002fb0 <StopJoin+0x48>
		APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <StopJoin+0x84>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f00f f89c 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_TIMER_Start(&StopJoinTimer);
 8002fa8:	4811      	ldr	r0, [pc, #68]	; (8002ff0 <StopJoin+0x88>)
 8002faa:	f00f fc47 	bl	801283c <UTIL_TIMER_Start>
}
 8002fae:	bd38      	pop	{r3, r4, r5, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002fb0:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <StopJoin+0x8c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	2002      	movs	r0, #2
 8002fb8:	f00f f892 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
			ActivationType = ACTIVATION_TYPE_ABP;
 8002fbc:	4c0e      	ldr	r4, [pc, #56]	; (8002ff8 <StopJoin+0x90>)
 8002fbe:	2501      	movs	r5, #1
 8002fc0:	7025      	strb	r5, [r4, #0]
			APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <StopJoin+0x94>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	2002      	movs	r0, #2
 8002fca:	f00f f889 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
		LmHandlerConfigure(&LmHandlerParams);
 8002fce:	480c      	ldr	r0, [pc, #48]	; (8003000 <StopJoin+0x98>)
 8002fd0:	f005 f85a 	bl	8008088 <LmHandlerConfigure>
		LmHandlerJoin(ActivationType, true);
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	7820      	ldrb	r0, [r4, #0]
 8002fd8:	f004 fe12 	bl	8007c00 <LmHandlerJoin>
		UTIL_TIMER_Start(&TxTimer);
 8002fdc:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <StopJoin+0x80>)
 8002fde:	f00f fc2d 	bl	801283c <UTIL_TIMER_Start>
 8002fe2:	e7e1      	b.n	8002fa8 <StopJoin+0x40>
 8002fe4:	48000400 	.word	0x48000400
 8002fe8:	20000788 	.word	0x20000788
 8002fec:	08018444 	.word	0x08018444
 8002ff0:	20000758 	.word	0x20000758
 8002ff4:	08018464 	.word	0x08018464
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	08018478 	.word	0x08018478
 8003000:	20000058 	.word	0x20000058

08003004 <StoreContext>:
static void StoreContext(void) {
 8003004:	b508      	push	{r3, lr}
	status = LmHandlerNvmDataStore();
 8003006:	f005 fa59 	bl	80084bc <LmHandlerNvmDataStore>
	if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE) {
 800300a:	f110 0f08 	cmn.w	r0, #8
 800300e:	d003      	beq.n	8003018 <StoreContext+0x14>
	} else if (status == LORAMAC_HANDLER_ERROR) {
 8003010:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003014:	d007      	beq.n	8003026 <StoreContext+0x22>
}
 8003016:	bd08      	pop	{r3, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <StoreContext+0x30>)
 800301a:	2200      	movs	r2, #0
 800301c:	4611      	mov	r1, r2
 800301e:	2002      	movs	r0, #2
 8003020:	f00f f85e 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
 8003024:	e7f7      	b.n	8003016 <StoreContext+0x12>
		APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <StoreContext+0x34>)
 8003028:	2200      	movs	r2, #0
 800302a:	4611      	mov	r1, r2
 800302c:	2002      	movs	r0, #2
 800302e:	f00f f857 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 8003032:	e7f0      	b.n	8003016 <StoreContext+0x12>
 8003034:	08018498 	.word	0x08018498
 8003038:	080184b0 	.word	0x080184b0

0800303c <SendTxData>:
static void SendTxData(void) {
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	b084      	sub	sp, #16
	if (LmHandlerIsBusy() == false) {
 8003040:	f004 fe82 	bl	8007d48 <LmHandlerIsBusy>
 8003044:	2800      	cmp	r0, #0
 8003046:	d177      	bne.n	8003138 <SendTxData+0xfc>
		AppData.Port = LORAWAN_USER_APP_PORT;
 8003048:	4b44      	ldr	r3, [pc, #272]	; (800315c <SendTxData+0x120>)
 800304a:	2202      	movs	r2, #2
 800304c:	701a      	strb	r2, [r3, #0]
		if (commandQueue.count > 0) {
 800304e:	4b44      	ldr	r3, [pc, #272]	; (8003160 <SendTxData+0x124>)
 8003050:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003054:	2b00      	cmp	r3, #0
 8003056:	d067      	beq.n	8003128 <SendTxData+0xec>
			CommandData dequeuedData = dequeue();
 8003058:	a802      	add	r0, sp, #8
 800305a:	f7ff fb53 	bl	8002704 <dequeue>
			APP_LOG(TS_OFF, VLEVEL_M, "Dequeued Data:\n");
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <SendTxData+0x128>)
 8003060:	2200      	movs	r2, #0
 8003062:	4611      	mov	r1, r2
 8003064:	2002      	movs	r0, #2
 8003066:	f00f f83b 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF, VLEVEL_M, "Water Level (x100): %d\n",
 800306a:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800306e:	9400      	str	r4, [sp, #0]
 8003070:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <SendTxData+0x12c>)
 8003072:	2200      	movs	r2, #0
 8003074:	4611      	mov	r1, r2
 8003076:	2002      	movs	r0, #2
 8003078:	f00f f832 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF, VLEVEL_M, "Battery Voltage (x100): %d\n",
 800307c:	f8bd 500a 	ldrh.w	r5, [sp, #10]
 8003080:	9500      	str	r5, [sp, #0]
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <SendTxData+0x130>)
 8003084:	2200      	movs	r2, #0
 8003086:	4611      	mov	r1, r2
 8003088:	2002      	movs	r0, #2
 800308a:	f00f f829 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG(TS_OFF, VLEVEL_M, "System State: %u\n",
 800308e:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8003092:	9600      	str	r6, [sp, #0]
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <SendTxData+0x134>)
 8003096:	2200      	movs	r2, #0
 8003098:	4611      	mov	r1, r2
 800309a:	2002      	movs	r0, #2
 800309c:	f00f f820 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
			AppData.Buffer[i++] = (uint8_t) ((batteryLevel >> 8) & 0xFF);
 80030a0:	4b2e      	ldr	r3, [pc, #184]	; (800315c <SendTxData+0x120>)
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	0a29      	lsrs	r1, r5, #8
 80030a6:	7011      	strb	r1, [r2, #0]
			AppData.Buffer[i++] = (uint8_t) (batteryLevel & 0xFF);
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	7055      	strb	r5, [r2, #1]
			AppData.Buffer[i++] = (uint8_t) ((waterLevel >> 8) & 0xFF);
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	0a21      	lsrs	r1, r4, #8
 80030b0:	7091      	strb	r1, [r2, #2]
			AppData.Buffer[i++] = (uint8_t) (waterLevel & 0xFF);
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	70d4      	strb	r4, [r2, #3]
			AppData.Buffer[i++] = systemStatus;
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	7116      	strb	r6, [r2, #4]
			AppData.BufferSize = i;
 80030ba:	2205      	movs	r2, #5
 80030bc:	705a      	strb	r2, [r3, #1]
			if ((JoinLedTimer.IsRunning)
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <SendTxData+0x138>)
 80030c0:	7a5b      	ldrb	r3, [r3, #9]
 80030c2:	b95b      	cbnz	r3, 80030dc <SendTxData+0xa0>
			status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed,
 80030c4:	2200      	movs	r2, #0
 80030c6:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <SendTxData+0x13c>)
 80030c8:	78d9      	ldrb	r1, [r3, #3]
 80030ca:	4824      	ldr	r0, [pc, #144]	; (800315c <SendTxData+0x120>)
 80030cc:	f004 fe52 	bl	8007d74 <LmHandlerSend>
			if (LORAMAC_HANDLER_SUCCESS == status) {
 80030d0:	b190      	cbz	r0, 80030f8 <SendTxData+0xbc>
			} else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status) {
 80030d2:	f110 0f06 	cmn.w	r0, #6
 80030d6:	d017      	beq.n	8003108 <SendTxData+0xcc>
	UTIL_TIMER_Time_t nextTxIn = 0;
 80030d8:	2500      	movs	r5, #0
							(nextTxIn / 1000));
 80030da:	e02e      	b.n	800313a <SendTxData+0xfe>
					&& (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET)) {
 80030dc:	f004 fe22 	bl	8007d24 <LmHandlerJoinStatus>
 80030e0:	2801      	cmp	r0, #1
 80030e2:	d1ef      	bne.n	80030c4 <SendTxData+0x88>
				UTIL_TIMER_Stop(&JoinLedTimer);
 80030e4:	4823      	ldr	r0, [pc, #140]	; (8003174 <SendTxData+0x138>)
 80030e6:	f00f fb4f 	bl	8012788 <UTIL_TIMER_Stop>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80030ea:	2200      	movs	r2, #0
 80030ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030f0:	4822      	ldr	r0, [pc, #136]	; (800317c <SendTxData+0x140>)
 80030f2:	f001 fceb 	bl	8004acc <HAL_GPIO_WritePin>
 80030f6:	e7e5      	b.n	80030c4 <SendTxData+0x88>
				APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 80030f8:	4b21      	ldr	r3, [pc, #132]	; (8003180 <SendTxData+0x144>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	2100      	movs	r1, #0
 80030fe:	4610      	mov	r0, r2
 8003100:	f00e ffee 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_TIMER_Time_t nextTxIn = 0;
 8003104:	2500      	movs	r5, #0
 8003106:	e018      	b.n	800313a <SendTxData+0xfe>
				nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8003108:	f004 fe06 	bl	8007d18 <LmHandlerGetDutyCycleWaitTime>
				if (nextTxIn > 0) {
 800310c:	4605      	mov	r5, r0
 800310e:	b1a0      	cbz	r0, 800313a <SendTxData+0xfe>
					APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n",
 8003110:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <SendTxData+0x148>)
 8003112:	fba3 2300 	umull	r2, r3, r3, r0
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <SendTxData+0x14c>)
 800311c:	2201      	movs	r2, #1
 800311e:	2100      	movs	r1, #0
 8003120:	4610      	mov	r0, r2
 8003122:	f00e ffdd 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
 8003126:	e008      	b.n	800313a <SendTxData+0xfe>
			APP_LOG(TS_OFF, VLEVEL_M, "Queue is empty! Nothing to Send\n");
 8003128:	4b18      	ldr	r3, [pc, #96]	; (800318c <SendTxData+0x150>)
 800312a:	2200      	movs	r2, #0
 800312c:	4611      	mov	r1, r2
 800312e:	2002      	movs	r0, #2
 8003130:	f00e ffd6 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_TIMER_Time_t nextTxIn = 0;
 8003134:	2500      	movs	r5, #0
 8003136:	e000      	b.n	800313a <SendTxData+0xfe>
 8003138:	2500      	movs	r5, #0
		UTIL_TIMER_Stop(&TxTimer);
 800313a:	4c15      	ldr	r4, [pc, #84]	; (8003190 <SendTxData+0x154>)
 800313c:	4620      	mov	r0, r4
 800313e:	f00f fb23 	bl	8012788 <UTIL_TIMER_Stop>
		UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <SendTxData+0x158>)
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	42a9      	cmp	r1, r5
 8003148:	bf38      	it	cc
 800314a:	4629      	movcc	r1, r5
 800314c:	4620      	mov	r0, r4
 800314e:	f00f fbbb 	bl	80128c8 <UTIL_TIMER_SetPeriod>
		UTIL_TIMER_Start(&TxTimer);
 8003152:	4620      	mov	r0, r4
 8003154:	f00f fb72 	bl	801283c <UTIL_TIMER_Start>
}
 8003158:	b004      	add	sp, #16
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	20000004 	.word	0x20000004
 8003160:	20000550 	.word	0x20000550
 8003164:	080180a0 	.word	0x080180a0
 8003168:	080180b0 	.word	0x080180b0
 800316c:	080180c8 	.word	0x080180c8
 8003170:	080180e4 	.word	0x080180e4
 8003174:	20000728 	.word	0x20000728
 8003178:	20000058 	.word	0x20000058
 800317c:	48000400 	.word	0x48000400
 8003180:	080184c8 	.word	0x080184c8
 8003184:	10624dd3 	.word	0x10624dd3
 8003188:	080184d8 	.word	0x080184d8
 800318c:	080184f8 	.word	0x080184f8
 8003190:	20000788 	.word	0x20000788
 8003194:	20000070 	.word	0x20000070

08003198 <OnJoinTimerLedEvent>:
static void OnJoinTimerLedEvent(void *context) {
 8003198:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800319a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800319e:	4802      	ldr	r0, [pc, #8]	; (80031a8 <OnJoinTimerLedEvent+0x10>)
 80031a0:	f001 fc99 	bl	8004ad6 <HAL_GPIO_TogglePin>
}
 80031a4:	bd08      	pop	{r3, pc}
 80031a6:	bf00      	nop
 80031a8:	48000400 	.word	0x48000400

080031ac <LoRaWAN_Init>:
void LoRaWAN_Init(void) {
 80031ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ae:	b087      	sub	sp, #28
	uint32_t feature_version = 0UL;
 80031b0:	2400      	movs	r4, #0
 80031b2:	9405      	str	r4, [sp, #20]
	APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80031b4:	9402      	str	r4, [sp, #8]
 80031b6:	2703      	movs	r7, #3
 80031b8:	9701      	str	r7, [sp, #4]
 80031ba:	2601      	movs	r6, #1
 80031bc:	9600      	str	r6, [sp, #0]
 80031be:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <LoRaWAN_Init+0x150>)
 80031c0:	4622      	mov	r2, r4
 80031c2:	4621      	mov	r1, r4
 80031c4:	2002      	movs	r0, #2
 80031c6:	f00e ff8b 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80031ca:	9402      	str	r4, [sp, #8]
 80031cc:	2305      	movs	r3, #5
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	2502      	movs	r5, #2
 80031d2:	9500      	str	r5, [sp, #0]
 80031d4:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <LoRaWAN_Init+0x154>)
 80031d6:	4622      	mov	r2, r4
 80031d8:	4621      	mov	r1, r4
 80031da:	4628      	mov	r0, r5
 80031dc:	f00e ff80 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80031e0:	9402      	str	r4, [sp, #8]
 80031e2:	9701      	str	r7, [sp, #4]
 80031e4:	9600      	str	r6, [sp, #0]
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <LoRaWAN_Init+0x158>)
 80031e8:	4622      	mov	r2, r4
 80031ea:	4621      	mov	r1, r4
 80031ec:	4628      	mov	r0, r5
 80031ee:	f00e ff77 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
	LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 80031f2:	a905      	add	r1, sp, #20
 80031f4:	4620      	mov	r0, r4
 80031f6:	f005 f8b9 	bl	800836c <LmHandlerGetVersion>
	APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 80031fa:	9b05      	ldr	r3, [sp, #20]
 80031fc:	0e1a      	lsrs	r2, r3, #24
 80031fe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003202:	9102      	str	r1, [sp, #8]
 8003204:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	9200      	str	r2, [sp, #0]
 800320c:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <LoRaWAN_Init+0x15c>)
 800320e:	4622      	mov	r2, r4
 8003210:	4621      	mov	r1, r4
 8003212:	4628      	mov	r0, r5
 8003214:	f00e ff64 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
	LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8003218:	a905      	add	r1, sp, #20
 800321a:	4630      	mov	r0, r6
 800321c:	f005 f8a6 	bl	800836c <LmHandlerGetVersion>
	APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8003220:	9b05      	ldr	r3, [sp, #20]
 8003222:	0e1a      	lsrs	r2, r3, #24
 8003224:	b2d9      	uxtb	r1, r3
 8003226:	9103      	str	r1, [sp, #12]
 8003228:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800322c:	9102      	str	r1, [sp, #8]
 800322e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	9200      	str	r2, [sp, #0]
 8003236:	4b35      	ldr	r3, [pc, #212]	; (800330c <LoRaWAN_Init+0x160>)
 8003238:	4622      	mov	r2, r4
 800323a:	4621      	mov	r1, r4
 800323c:	4628      	mov	r0, r5
 800323e:	f00e ff4f 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
	UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT,
 8003242:	9400      	str	r4, [sp, #0]
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <LoRaWAN_Init+0x164>)
 8003246:	4622      	mov	r2, r4
 8003248:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800324c:	4831      	ldr	r0, [pc, #196]	; (8003314 <LoRaWAN_Init+0x168>)
 800324e:	f00f fa3d 	bl	80126cc <UTIL_TIMER_Create>
	UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT,
 8003252:	9400      	str	r4, [sp, #0]
 8003254:	4b30      	ldr	r3, [pc, #192]	; (8003318 <LoRaWAN_Init+0x16c>)
 8003256:	4622      	mov	r2, r4
 8003258:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800325c:	482f      	ldr	r0, [pc, #188]	; (800331c <LoRaWAN_Init+0x170>)
 800325e:	f00f fa35 	bl	80126cc <UTIL_TIMER_Create>
	UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC,
 8003262:	9400      	str	r4, [sp, #0]
 8003264:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <LoRaWAN_Init+0x174>)
 8003266:	4632      	mov	r2, r6
 8003268:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800326c:	482d      	ldr	r0, [pc, #180]	; (8003324 <LoRaWAN_Init+0x178>)
 800326e:	f00f fa2d 	bl	80126cc <UTIL_TIMER_Create>
	if (FLASH_IF_Init(NULL) != FLASH_IF_OK) {
 8003272:	4620      	mov	r0, r4
 8003274:	f7fe fb1c 	bl	80018b0 <FLASH_IF_Init>
 8003278:	2800      	cmp	r0, #0
 800327a:	d13b      	bne.n	80032f4 <LoRaWAN_Init+0x148>
	UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT,
 800327c:	2400      	movs	r4, #0
 800327e:	9400      	str	r4, [sp, #0]
 8003280:	4b29      	ldr	r3, [pc, #164]	; (8003328 <LoRaWAN_Init+0x17c>)
 8003282:	4622      	mov	r2, r4
 8003284:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003288:	4828      	ldr	r0, [pc, #160]	; (800332c <LoRaWAN_Init+0x180>)
 800328a:	f00f fa1f 	bl	80126cc <UTIL_TIMER_Create>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU,
 800328e:	4a28      	ldr	r2, [pc, #160]	; (8003330 <LoRaWAN_Init+0x184>)
 8003290:	4621      	mov	r1, r4
 8003292:	2001      	movs	r0, #1
 8003294:	f00f f91a 	bl	80124cc <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent),
 8003298:	4a26      	ldr	r2, [pc, #152]	; (8003334 <LoRaWAN_Init+0x188>)
 800329a:	4621      	mov	r1, r4
 800329c:	2002      	movs	r0, #2
 800329e:	f00f f915 	bl	80124cc <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU,
 80032a2:	4a25      	ldr	r2, [pc, #148]	; (8003338 <LoRaWAN_Init+0x18c>)
 80032a4:	4621      	mov	r1, r4
 80032a6:	2004      	movs	r0, #4
 80032a8:	f00f f910 	bl	80124cc <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU,
 80032ac:	4a23      	ldr	r2, [pc, #140]	; (800333c <LoRaWAN_Init+0x190>)
 80032ae:	4621      	mov	r1, r4
 80032b0:	2008      	movs	r0, #8
 80032b2:	f00f f90b 	bl	80124cc <UTIL_SEQ_RegTask>
	LoraInfo_Init();
 80032b6:	f000 f861 	bl	800337c <LoraInfo_Init>
	LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80032ba:	4921      	ldr	r1, [pc, #132]	; (8003340 <LoRaWAN_Init+0x194>)
 80032bc:	4821      	ldr	r0, [pc, #132]	; (8003344 <LoRaWAN_Init+0x198>)
 80032be:	f005 f809 	bl	80082d4 <LmHandlerInit>
	LmHandlerConfigure(&LmHandlerParams);
 80032c2:	4821      	ldr	r0, [pc, #132]	; (8003348 <LoRaWAN_Init+0x19c>)
 80032c4:	f004 fee0 	bl	8008088 <LmHandlerConfigure>
	UTIL_TIMER_Start(&JoinLedTimer);
 80032c8:	4816      	ldr	r0, [pc, #88]	; (8003324 <LoRaWAN_Init+0x178>)
 80032ca:	f00f fab7 	bl	801283c <UTIL_TIMER_Start>
	LmHandlerJoin(ActivationType, ForceRejoin);
 80032ce:	4621      	mov	r1, r4
 80032d0:	4b1e      	ldr	r3, [pc, #120]	; (800334c <LoRaWAN_Init+0x1a0>)
 80032d2:	7818      	ldrb	r0, [r3, #0]
 80032d4:	f004 fc94 	bl	8007c00 <LmHandlerJoin>
		UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT,
 80032d8:	4d1d      	ldr	r5, [pc, #116]	; (8003350 <LoRaWAN_Init+0x1a4>)
 80032da:	9400      	str	r4, [sp, #0]
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <LoRaWAN_Init+0x1a8>)
 80032de:	4622      	mov	r2, r4
 80032e0:	491d      	ldr	r1, [pc, #116]	; (8003358 <LoRaWAN_Init+0x1ac>)
 80032e2:	6809      	ldr	r1, [r1, #0]
 80032e4:	4628      	mov	r0, r5
 80032e6:	f00f f9f1 	bl	80126cc <UTIL_TIMER_Create>
		UTIL_TIMER_Start(&TxTimer);
 80032ea:	4628      	mov	r0, r5
 80032ec:	f00f faa6 	bl	801283c <UTIL_TIMER_Start>
}
 80032f0:	b007      	add	sp, #28
 80032f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Error_Handler();
 80032f4:	f7fe fbae 	bl	8001a54 <Error_Handler>
 80032f8:	e7c0      	b.n	800327c <LoRaWAN_Init+0xd0>
 80032fa:	bf00      	nop
 80032fc:	0801851c 	.word	0x0801851c
 8003300:	08018540 	.word	0x08018540
 8003304:	08018564 	.word	0x08018564
 8003308:	08018588 	.word	0x08018588
 800330c:	080185ac 	.word	0x080185ac
 8003310:	08002d81 	.word	0x08002d81
 8003314:	20000770 	.word	0x20000770
 8003318:	08002d6d 	.word	0x08002d6d
 800331c:	20000740 	.word	0x20000740
 8003320:	08003199 	.word	0x08003199
 8003324:	20000728 	.word	0x20000728
 8003328:	08002d29 	.word	0x08002d29
 800332c:	20000758 	.word	0x20000758
 8003330:	08007e81 	.word	0x08007e81
 8003334:	0800303d 	.word	0x0800303d
 8003338:	08003005 	.word	0x08003005
 800333c:	08002f69 	.word	0x08002f69
 8003340:	01030000 	.word	0x01030000
 8003344:	2000000c 	.word	0x2000000c
 8003348:	20000058 	.word	0x20000058
 800334c:	20000000 	.word	0x20000000
 8003350:	20000788 	.word	0x20000788
 8003354:	08002b59 	.word	0x08002b59
 8003358:	20000070 	.word	0x20000070

0800335c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800335c:	b508      	push	{r3, lr}
	switch (GPIO_Pin) {
 800335e:	2802      	cmp	r0, #2
 8003360:	d002      	beq.n	8003368 <HAL_GPIO_EXTI_Callback+0xc>
 8003362:	2840      	cmp	r0, #64	; 0x40
 8003364:	d005      	beq.n	8003372 <HAL_GPIO_EXTI_Callback+0x16>
}
 8003366:	bd08      	pop	{r3, pc}
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8003368:	2100      	movs	r1, #0
 800336a:	2008      	movs	r0, #8
 800336c:	f00e ffe2 	bl	8012334 <UTIL_SEQ_SetTask>
		break;
 8003370:	e7f9      	b.n	8003366 <HAL_GPIO_EXTI_Callback+0xa>
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent),
 8003372:	2100      	movs	r1, #0
 8003374:	2004      	movs	r0, #4
 8003376:	f00e ffdd 	bl	8012334 <UTIL_SEQ_SetTask>
}
 800337a:	e7f4      	b.n	8003366 <HAL_GPIO_EXTI_Callback+0xa>

0800337c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <LoraInfo_Init+0x1c>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8003382:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003384:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8003386:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8003388:	2220      	movs	r2, #32
 800338a:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800338c:	f44f 7290 	mov.w	r2, #288	; 0x120
 8003390:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8003396:	4770      	bx	lr
 8003398:	200007a0 	.word	0x200007a0

0800339c <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 800339c:	4800      	ldr	r0, [pc, #0]	; (80033a0 <LoraInfo_GetPtr+0x4>)
 800339e:	4770      	bx	lr
 80033a0:	200007a0 	.word	0x200007a0

080033a4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80033a4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80033a6:	f000 f83f 	bl	8003428 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80033aa:	bd08      	pop	{r3, pc}

080033ac <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80033ac:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80033ae:	f000 f87d 	bl	80034ac <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80033b2:	bd08      	pop	{r3, pc}

080033b4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80033b4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80033b6:	f000 f8c7 	bl	8003548 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80033ba:	bd08      	pop	{r3, pc}

080033bc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80033bc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80033be:	f000 f8c5 	bl	800354c <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80033c2:	bd08      	pop	{r3, pc}

080033c4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80033c4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80033c6:	f000 f8c3 	bl	8003550 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80033ca:	bd08      	pop	{r3, pc}

080033cc <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80033cc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80033ce:	f000 f8c1 	bl	8003554 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80033d2:	bd08      	pop	{r3, pc}

080033d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033d4:	480d      	ldr	r0, [pc, #52]	; (800340c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033d8:	f000 f8c1 	bl	800355e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033dc:	480c      	ldr	r0, [pc, #48]	; (8003410 <LoopForever+0x6>)
  ldr r1, =_edata
 80033de:	490d      	ldr	r1, [pc, #52]	; (8003414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033e0:	4a0d      	ldr	r2, [pc, #52]	; (8003418 <LoopForever+0xe>)
  movs r3, #0
 80033e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e4:	e002      	b.n	80033ec <LoopCopyDataInit>

080033e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ea:	3304      	adds	r3, #4

080033ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f0:	d3f9      	bcc.n	80033e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <LoopForever+0x12>)
  ldr r4, =_ebss
 80033f4:	4c0a      	ldr	r4, [pc, #40]	; (8003420 <LoopForever+0x16>)
  movs r3, #0
 80033f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f8:	e001      	b.n	80033fe <LoopFillZerobss>

080033fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033fc:	3204      	adds	r2, #4

080033fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003400:	d3fb      	bcc.n	80033fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003402:	f00f fc27 	bl	8012c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003406:	f7fe fb6f 	bl	8001ae8 <main>

0800340a <LoopForever>:

LoopForever:
    b LoopForever
 800340a:	e7fe      	b.n	800340a <LoopForever>
  ldr   r0, =_estack
 800340c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003414:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8003418:	080194b0 	.word	0x080194b0
  ldr r2, =_sbss
 800341c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8003420:	200019a8 	.word	0x200019a8

08003424 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003424:	e7fe      	b.n	8003424 <ADC_IRQHandler>
	...

08003428 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800342c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800342e:	2400      	movs	r4, #0
 8003430:	9401      	str	r4, [sp, #4]
 8003432:	9402      	str	r4, [sp, #8]
 8003434:	9403      	str	r4, [sp, #12]
 8003436:	9404      	str	r4, [sp, #16]
 8003438:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800343a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003440:	f042 0204 	orr.w	r2, r2, #4
 8003444:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800344e:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003450:	2710      	movs	r7, #16
 8003452:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003454:	2301      	movs	r3, #1
 8003456:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003458:	2303      	movs	r3, #3
 800345a:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800345c:	4d12      	ldr	r5, [pc, #72]	; (80034a8 <BSP_RADIO_Init+0x80>)
 800345e:	a901      	add	r1, sp, #4
 8003460:	4628      	mov	r0, r5
 8003462:	f001 f9e3 	bl	800482c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003466:	f04f 0820 	mov.w	r8, #32
 800346a:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800346e:	a901      	add	r1, sp, #4
 8003470:	4628      	mov	r0, r5
 8003472:	f001 f9db 	bl	800482c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8003476:	2608      	movs	r6, #8
 8003478:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800347a:	a901      	add	r1, sp, #4
 800347c:	4628      	mov	r0, r5
 800347e:	f001 f9d5 	bl	800482c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003482:	4622      	mov	r2, r4
 8003484:	4641      	mov	r1, r8
 8003486:	4628      	mov	r0, r5
 8003488:	f001 fb20 	bl	8004acc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800348c:	4622      	mov	r2, r4
 800348e:	4639      	mov	r1, r7
 8003490:	4628      	mov	r0, r5
 8003492:	f001 fb1b 	bl	8004acc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8003496:	4622      	mov	r2, r4
 8003498:	4631      	mov	r1, r6
 800349a:	4628      	mov	r0, r5
 800349c:	f001 fb16 	bl	8004acc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80034a0:	4620      	mov	r0, r4
 80034a2:	b006      	add	sp, #24
 80034a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034a8:	48000800 	.word	0x48000800

080034ac <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80034ac:	b510      	push	{r4, lr}
  switch (Config)
 80034ae:	2803      	cmp	r0, #3
 80034b0:	d813      	bhi.n	80034da <BSP_RADIO_ConfigRFSwitch+0x2e>
 80034b2:	e8df f000 	tbb	[pc, r0]
 80034b6:	1402      	.short	0x1402
 80034b8:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80034ba:	4c22      	ldr	r4, [pc, #136]	; (8003544 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80034bc:	2200      	movs	r2, #0
 80034be:	2108      	movs	r1, #8
 80034c0:	4620      	mov	r0, r4
 80034c2:	f001 fb03 	bl	8004acc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2110      	movs	r1, #16
 80034ca:	4620      	mov	r0, r4
 80034cc:	f001 fafe 	bl	8004acc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80034d0:	2200      	movs	r2, #0
 80034d2:	2120      	movs	r1, #32
 80034d4:	4620      	mov	r0, r4
 80034d6:	f001 faf9 	bl	8004acc <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 80034da:	2000      	movs	r0, #0
 80034dc:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80034de:	4c19      	ldr	r4, [pc, #100]	; (8003544 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	2108      	movs	r1, #8
 80034e4:	4620      	mov	r0, r4
 80034e6:	f001 faf1 	bl	8004acc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80034ea:	2201      	movs	r2, #1
 80034ec:	2110      	movs	r1, #16
 80034ee:	4620      	mov	r0, r4
 80034f0:	f001 faec 	bl	8004acc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80034f4:	2200      	movs	r2, #0
 80034f6:	2120      	movs	r1, #32
 80034f8:	4620      	mov	r0, r4
 80034fa:	f001 fae7 	bl	8004acc <HAL_GPIO_WritePin>
      break;
 80034fe:	e7ec      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003500:	4c10      	ldr	r4, [pc, #64]	; (8003544 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003502:	2201      	movs	r2, #1
 8003504:	2108      	movs	r1, #8
 8003506:	4620      	mov	r0, r4
 8003508:	f001 fae0 	bl	8004acc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800350c:	2201      	movs	r2, #1
 800350e:	2110      	movs	r1, #16
 8003510:	4620      	mov	r0, r4
 8003512:	f001 fadb 	bl	8004acc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003516:	2201      	movs	r2, #1
 8003518:	2120      	movs	r1, #32
 800351a:	4620      	mov	r0, r4
 800351c:	f001 fad6 	bl	8004acc <HAL_GPIO_WritePin>
      break;
 8003520:	e7db      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003522:	4c08      	ldr	r4, [pc, #32]	; (8003544 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003524:	2201      	movs	r2, #1
 8003526:	2108      	movs	r1, #8
 8003528:	4620      	mov	r0, r4
 800352a:	f001 facf 	bl	8004acc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800352e:	2200      	movs	r2, #0
 8003530:	2110      	movs	r1, #16
 8003532:	4620      	mov	r0, r4
 8003534:	f001 faca 	bl	8004acc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003538:	2201      	movs	r2, #1
 800353a:	2120      	movs	r1, #32
 800353c:	4620      	mov	r0, r4
 800353e:	f001 fac5 	bl	8004acc <HAL_GPIO_WritePin>
      break;
 8003542:	e7ca      	b.n	80034da <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003544:	48000800 	.word	0x48000800

08003548 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8003548:	2000      	movs	r0, #0
 800354a:	4770      	bx	lr

0800354c <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 800354c:	2001      	movs	r0, #1
 800354e:	4770      	bx	lr

08003550 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003550:	2001      	movs	r0, #1
 8003552:	4770      	bx	lr

08003554 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003554:	b908      	cbnz	r0, 800355a <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003556:	200f      	movs	r0, #15
 8003558:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800355a:	2016      	movs	r0, #22
  }

  return ret;
}
 800355c:	4770      	bx	lr

0800355e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800355e:	4770      	bx	lr

08003560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003560:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003562:	2003      	movs	r0, #3
 8003564:	f000 fd24 	bl	8003fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003568:	f001 fc56 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_Init+0x28>)
 800356e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003570:	200f      	movs	r0, #15
 8003572:	f7fe fcc5 	bl	8001f00 <HAL_InitTick>
 8003576:	b110      	cbz	r0, 800357e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003578:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800357a:	4620      	mov	r0, r4
 800357c:	bd10      	pop	{r4, pc}
 800357e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003580:	f7fe fb72 	bl	8001c68 <HAL_MspInit>
 8003584:	e7f9      	b.n	800357a <HAL_Init+0x1a>
 8003586:	bf00      	nop
 8003588:	20000074 	.word	0x20000074

0800358c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800358c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003590:	6913      	ldr	r3, [r2, #16]
 8003592:	f023 0302 	bic.w	r3, r3, #2
 8003596:	6113      	str	r3, [r2, #16]
}
 8003598:	4770      	bx	lr

0800359a <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800359a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800359e:	6913      	ldr	r3, [r2, #16]
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	6113      	str	r3, [r2, #16]
}
 80035a6:	4770      	bx	lr

080035a8 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 80035a8:	4b01      	ldr	r3, [pc, #4]	; (80035b0 <HAL_GetUIDw0+0x8>)
 80035aa:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 80035ae:	4770      	bx	lr
 80035b0:	1fff7000 	.word	0x1fff7000

080035b4 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 80035b4:	4b01      	ldr	r3, [pc, #4]	; (80035bc <HAL_GetUIDw1+0x8>)
 80035b6:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 80035ba:	4770      	bx	lr
 80035bc:	1fff7000 	.word	0x1fff7000

080035c0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <HAL_GetUIDw2+0x8>)
 80035c2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80035c6:	4770      	bx	lr
 80035c8:	1fff7000 	.word	0x1fff7000

080035cc <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80035cc:	4a02      	ldr	r2, [pc, #8]	; (80035d8 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80035ce:	6853      	ldr	r3, [r2, #4]
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 80035d6:	4770      	bx	lr
 80035d8:	e0042000 	.word	0xe0042000

080035dc <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80035dc:	4a02      	ldr	r2, [pc, #8]	; (80035e8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80035de:	6853      	ldr	r3, [r2, #4]
 80035e0:	f043 0302 	orr.w	r3, r3, #2
 80035e4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 80035e6:	4770      	bx	lr
 80035e8:	e0042000 	.word	0xe0042000

080035ec <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80035ec:	4a02      	ldr	r2, [pc, #8]	; (80035f8 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80035ee:	6853      	ldr	r3, [r2, #4]
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 80035f6:	4770      	bx	lr
 80035f8:	e0042000 	.word	0xe0042000

080035fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035fc:	b530      	push	{r4, r5, lr}
 80035fe:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003600:	2300      	movs	r3, #0
 8003602:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003604:	2800      	cmp	r0, #0
 8003606:	f000 8106 	beq.w	8003816 <HAL_ADC_Init+0x21a>
 800360a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800360c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800360e:	b1bb      	cbz	r3, 8003640 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003610:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003612:	6893      	ldr	r3, [r2, #8]
 8003614:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003618:	d11f      	bne.n	800365a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 800361a:	6893      	ldr	r3, [r2, #8]
 800361c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003620:	f023 0317 	bic.w	r3, r3, #23
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800362a:	4b7c      	ldr	r3, [pc, #496]	; (800381c <HAL_ADC_Init+0x220>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	099b      	lsrs	r3, r3, #6
 8003630:	4a7b      	ldr	r2, [pc, #492]	; (8003820 <HAL_ADC_Init+0x224>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	3301      	adds	r3, #1
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800363e:	e009      	b.n	8003654 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003640:	f7fd fee8 	bl	8001414 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003644:	2300      	movs	r3, #0
 8003646:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003648:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800364c:	e7e0      	b.n	8003610 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800364e:	9b01      	ldr	r3, [sp, #4]
 8003650:	3b01      	subs	r3, #1
 8003652:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003654:	9b01      	ldr	r3, [sp, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f9      	bne.n	800364e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800365a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800365c:	6893      	ldr	r3, [r2, #8]
 800365e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003662:	f040 809a 	bne.w	800379a <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003668:	f043 0310 	orr.w	r3, r3, #16
 800366c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800366e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003676:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003678:	6893      	ldr	r3, [r2, #8]
 800367a:	f013 0304 	ands.w	r3, r3, #4
 800367e:	d000      	beq.n	8003682 <HAL_ADC_Init+0x86>
 8003680:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003682:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003684:	f011 0f10 	tst.w	r1, #16
 8003688:	f040 80be 	bne.w	8003808 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 80bb 	bne.w	8003808 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003694:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003698:	f043 0302 	orr.w	r3, r3, #2
 800369c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800369e:	6893      	ldr	r3, [r2, #8]
 80036a0:	f013 0f01 	tst.w	r3, #1
 80036a4:	d14f      	bne.n	8003746 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80036a6:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80036a8:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80036aa:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80036ae:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80036b0:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80036b4:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80036b6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80036ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80036bc:	b109      	cbz	r1, 80036c2 <HAL_ADC_Init+0xc6>
 80036be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80036c2:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 80036c4:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80036c6:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80036c8:	6921      	ldr	r1, [r4, #16]
 80036ca:	2900      	cmp	r1, #0
 80036cc:	db67      	blt.n	800379e <HAL_ADC_Init+0x1a2>
 80036ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80036d2:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80036d4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80036d8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036dc:	f894 1020 	ldrb.w	r1, [r4, #32]
 80036e0:	2901      	cmp	r1, #1
 80036e2:	d05f      	beq.n	80037a4 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80036e6:	b121      	cbz	r1, 80036f2 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036e8:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80036ec:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036ee:	4329      	orrs	r1, r5
 80036f0:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036f2:	68d1      	ldr	r1, [r2, #12]
 80036f4:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 80036f8:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 80036fc:	430b      	orrs	r3, r1
 80036fe:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003700:	6863      	ldr	r3, [r4, #4]
 8003702:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003706:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003708:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800370a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800370e:	2901      	cmp	r1, #1
 8003710:	d055      	beq.n	80037be <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003712:	6821      	ldr	r1, [r4, #0]
 8003714:	690d      	ldr	r5, [r1, #16]
 8003716:	4b43      	ldr	r3, [pc, #268]	; (8003824 <HAL_ADC_Init+0x228>)
 8003718:	402b      	ands	r3, r5
 800371a:	4313      	orrs	r3, r2
 800371c:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800371e:	6863      	ldr	r3, [r4, #4]
 8003720:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003724:	d00f      	beq.n	8003746 <HAL_ADC_Init+0x14a>
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372a:	d00c      	beq.n	8003746 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800372c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003730:	d009      	beq.n	8003746 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003732:	493d      	ldr	r1, [pc, #244]	; (8003828 <HAL_ADC_Init+0x22c>)
 8003734:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8003738:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 800373c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003746:	6821      	ldr	r1, [r4, #0]
 8003748:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 800374a:	694a      	ldr	r2, [r1, #20]
 800374c:	f022 0207 	bic.w	r2, r2, #7
 8003750:	4313      	orrs	r3, r2
 8003752:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003754:	6822      	ldr	r2, [r4, #0]
 8003756:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003758:	6953      	ldr	r3, [r2, #20]
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003762:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d133      	bne.n	80037d2 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800376e:	f063 030f 	orn	r3, r3, #15
 8003772:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003774:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 800377c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800377e:	429a      	cmp	r2, r3
 8003780:	d039      	beq.n	80037f6 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003784:	f023 0312 	bic.w	r3, r3, #18
 8003788:	f043 0310 	orr.w	r3, r3, #16
 800378c:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003796:	2001      	movs	r0, #1
 8003798:	e03b      	b.n	8003812 <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800379a:	2000      	movs	r0, #0
 800379c:	e76c      	b.n	8003678 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800379e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80037a2:	e796      	b.n	80036d2 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80037a4:	b915      	cbnz	r5, 80037ac <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80037a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037aa:	e79b      	b.n	80036e4 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ac:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80037ae:	f041 0120 	orr.w	r1, r1, #32
 80037b2:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80037b6:	f041 0101 	orr.w	r1, r1, #1
 80037ba:	65e1      	str	r1, [r4, #92]	; 0x5c
 80037bc:	e792      	b.n	80036e4 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 80037be:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80037c0:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 80037c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80037c4:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 80037c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80037c8:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	e79f      	b.n	8003712 <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037d6:	d1cd      	bne.n	8003774 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 80037d8:	6821      	ldr	r1, [r4, #0]
 80037da:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80037dc:	69e3      	ldr	r3, [r4, #28]
 80037de:	3b01      	subs	r3, #1
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	f003 031c 	and.w	r3, r3, #28
 80037e6:	f06f 020f 	mvn.w	r2, #15
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80037f0:	4313      	orrs	r3, r2
 80037f2:	628b      	str	r3, [r1, #40]	; 0x28
 80037f4:	e7be      	b.n	8003774 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 80037f6:	2300      	movs	r3, #0
 80037f8:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 80037fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037fc:	f023 0303 	bic.w	r3, r3, #3
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	65a3      	str	r3, [r4, #88]	; 0x58
 8003806:	e004      	b.n	8003812 <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800380a:	f043 0310 	orr.w	r3, r3, #16
 800380e:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003810:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003812:	b003      	add	sp, #12
 8003814:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003816:	2001      	movs	r0, #1
 8003818:	e7fb      	b.n	8003812 <HAL_ADC_Init+0x216>
 800381a:	bf00      	nop
 800381c:	20000074 	.word	0x20000074
 8003820:	053e2d63 	.word	0x053e2d63
 8003824:	1ffffc02 	.word	0x1ffffc02
 8003828:	40012000 	.word	0x40012000

0800382c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	4604      	mov	r4, r0
 8003830:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003832:	6946      	ldr	r6, [r0, #20]
 8003834:	2e08      	cmp	r6, #8
 8003836:	d005      	beq.n	8003844 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003838:	6803      	ldr	r3, [r0, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f013 0f01 	tst.w	r3, #1
 8003840:	d11e      	bne.n	8003880 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003842:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003844:	f7fe fb5e 	bl	8001f04 <HAL_GetTick>
 8003848:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	4232      	tst	r2, r6
 8003850:	d11c      	bne.n	800388c <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003856:	d0f8      	beq.n	800384a <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003858:	f7fe fb54 	bl	8001f04 <HAL_GetTick>
 800385c:	1bc3      	subs	r3, r0, r7
 800385e:	42ab      	cmp	r3, r5
 8003860:	d801      	bhi.n	8003866 <HAL_ADC_PollForConversion+0x3a>
 8003862:	2d00      	cmp	r5, #0
 8003864:	d1f1      	bne.n	800384a <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4233      	tst	r3, r6
 800386c:	d1ed      	bne.n	800384a <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800386e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003876:	2300      	movs	r3, #0
 8003878:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 800387c:	2003      	movs	r0, #3
 800387e:	e028      	b.n	80038d2 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003880:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003882:	f043 0320 	orr.w	r3, r3, #32
 8003886:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003888:	2001      	movs	r0, #1
 800388a:	e022      	b.n	80038d2 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800388c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800388e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003892:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800389a:	d115      	bne.n	80038c8 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800389c:	7ea2      	ldrb	r2, [r4, #26]
 800389e:	b99a      	cbnz	r2, 80038c8 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f012 0f08 	tst.w	r2, #8
 80038a6:	d00f      	beq.n	80038c8 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	f012 0f04 	tst.w	r2, #4
 80038ae:	d111      	bne.n	80038d4 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	f022 020c 	bic.w	r2, r2, #12
 80038b6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80038b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80038c8:	7e20      	ldrb	r0, [r4, #24]
 80038ca:	b960      	cbnz	r0, 80038e6 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	220c      	movs	r2, #12
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80038d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038d6:	f043 0320 	orr.w	r3, r3, #32
 80038da:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80038e4:	e7f0      	b.n	80038c8 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 80038e6:	2000      	movs	r0, #0
 80038e8:	e7f3      	b.n	80038d2 <HAL_ADC_PollForConversion+0xa6>

080038ea <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80038ea:	6803      	ldr	r3, [r0, #0]
 80038ec:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80038f0:	b470      	push	{r4, r5, r6}
 80038f2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80038f4:	2200      	movs	r2, #0
 80038f6:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80038f8:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80038fa:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80038fe:	2a01      	cmp	r2, #1
 8003900:	f000 8105 	beq.w	8003b0e <HAL_ADC_ConfigChannel+0x21e>
 8003904:	4603      	mov	r3, r0
 8003906:	2201      	movs	r2, #1
 8003908:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800390c:	6802      	ldr	r2, [r0, #0]
 800390e:	6890      	ldr	r0, [r2, #8]
 8003910:	f010 0f04 	tst.w	r0, #4
 8003914:	d00a      	beq.n	800392c <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003916:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003918:	f042 0220 	orr.w	r2, r2, #32
 800391c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800391e:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8003926:	b003      	add	sp, #12
 8003928:	bc70      	pop	{r4, r5, r6}
 800392a:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 800392c:	6848      	ldr	r0, [r1, #4]
 800392e:	2802      	cmp	r0, #2
 8003930:	f000 809e 	beq.w	8003a70 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003934:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003938:	d029      	beq.n	800398e <HAL_ADC_ConfigChannel+0x9e>
 800393a:	4d76      	ldr	r5, [pc, #472]	; (8003b14 <HAL_ADC_ConfigChannel+0x224>)
 800393c:	42ac      	cmp	r4, r5
 800393e:	d026      	beq.n	800398e <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003940:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003942:	f000 001f 	and.w	r0, r0, #31
 8003946:	250f      	movs	r5, #15
 8003948:	4085      	lsls	r5, r0
 800394a:	ea24 0505 	bic.w	r5, r4, r5
 800394e:	680c      	ldr	r4, [r1, #0]
 8003950:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8003954:	2e00      	cmp	r6, #0
 8003956:	d133      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0xd0>
 8003958:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800395c:	fa04 f000 	lsl.w	r0, r4, r0
 8003960:	4328      	orrs	r0, r5
 8003962:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003964:	684c      	ldr	r4, [r1, #4]
 8003966:	08a0      	lsrs	r0, r4, #2
 8003968:	3001      	adds	r0, #1
 800396a:	69dd      	ldr	r5, [r3, #28]
 800396c:	42a8      	cmp	r0, r5
 800396e:	d814      	bhi.n	800399a <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003970:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8003972:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003974:	f004 041f 	and.w	r4, r4, #31
 8003978:	260f      	movs	r6, #15
 800397a:	40a6      	lsls	r6, r4
 800397c:	ea20 0006 	bic.w	r0, r0, r6
 8003980:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8003984:	fa05 f404 	lsl.w	r4, r5, r4
 8003988:	4304      	orrs	r4, r0
 800398a:	6294      	str	r4, [r2, #40]	; 0x28
}
 800398c:	e005      	b.n	800399a <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800398e:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003990:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003992:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003996:	4320      	orrs	r0, r4
 8003998:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800399a:	681c      	ldr	r4, [r3, #0]
 800399c:	680d      	ldr	r5, [r1, #0]
 800399e:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80039a0:	6960      	ldr	r0, [r4, #20]
 80039a2:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 80039a6:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 80039aa:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 80039ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039b2:	4302      	orrs	r2, r0
 80039b4:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039b6:	680a      	ldr	r2, [r1, #0]
 80039b8:	2a00      	cmp	r2, #0
 80039ba:	db09      	blt.n	80039d0 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039bc:	2000      	movs	r0, #0
 80039be:	e7af      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039c4:	b114      	cbz	r4, 80039cc <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80039c6:	fab4 f484 	clz	r4, r4
 80039ca:	e7c7      	b.n	800395c <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80039cc:	2420      	movs	r4, #32
 80039ce:	e7c5      	b.n	800395c <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039d0:	4951      	ldr	r1, [pc, #324]	; (8003b18 <HAL_ADC_ConfigChannel+0x228>)
 80039d2:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 80039d6:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039da:	4c50      	ldr	r4, [pc, #320]	; (8003b1c <HAL_ADC_ConfigChannel+0x22c>)
 80039dc:	42a2      	cmp	r2, r4
 80039de:	d007      	beq.n	80039f0 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039e0:	4c4f      	ldr	r4, [pc, #316]	; (8003b20 <HAL_ADC_ConfigChannel+0x230>)
 80039e2:	42a2      	cmp	r2, r4
 80039e4:	d026      	beq.n	8003a34 <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80039e6:	4c4f      	ldr	r4, [pc, #316]	; (8003b24 <HAL_ADC_ConfigChannel+0x234>)
 80039e8:	42a2      	cmp	r2, r4
 80039ea:	d032      	beq.n	8003a52 <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ec:	2000      	movs	r0, #0
 80039ee:	e797      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039f0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80039f4:	d1f4      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039f6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039fa:	4847      	ldr	r0, [pc, #284]	; (8003b18 <HAL_ADC_ConfigChannel+0x228>)
 80039fc:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003a00:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003a04:	4311      	orrs	r1, r2
 8003a06:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a0a:	4a47      	ldr	r2, [pc, #284]	; (8003b28 <HAL_ADC_ConfigChannel+0x238>)
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	0992      	lsrs	r2, r2, #6
 8003a10:	4946      	ldr	r1, [pc, #280]	; (8003b2c <HAL_ADC_ConfigChannel+0x23c>)
 8003a12:	fba1 1202 	umull	r1, r2, r1, r2
 8003a16:	0992      	lsrs	r2, r2, #6
 8003a18:	3201      	adds	r2, #1
 8003a1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003a1e:	0092      	lsls	r2, r2, #2
 8003a20:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003a22:	e002      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 8003a24:	9a01      	ldr	r2, [sp, #4]
 8003a26:	3a01      	subs	r2, #1
 8003a28:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003a2a:	9a01      	ldr	r2, [sp, #4]
 8003a2c:	2a00      	cmp	r2, #0
 8003a2e:	d1f9      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a30:	2000      	movs	r0, #0
 8003a32:	e775      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a34:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003a38:	d1d5      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a3a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003a3e:	4836      	ldr	r0, [pc, #216]	; (8003b18 <HAL_ADC_ConfigChannel+0x228>)
 8003a40:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003a44:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003a48:	4311      	orrs	r1, r2
 8003a4a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a4e:	2000      	movs	r0, #0
}
 8003a50:	e766      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a52:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003a56:	d158      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a58:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a5c:	482e      	ldr	r0, [pc, #184]	; (8003b18 <HAL_ADC_ConfigChannel+0x228>)
 8003a5e:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003a62:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003a66:	430a      	orrs	r2, r1
 8003a68:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a6c:	2000      	movs	r0, #0
}
 8003a6e:	e757      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a70:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003a74:	d002      	beq.n	8003a7c <HAL_ADC_ConfigChannel+0x18c>
 8003a76:	4827      	ldr	r0, [pc, #156]	; (8003b14 <HAL_ADC_ConfigChannel+0x224>)
 8003a78:	4284      	cmp	r4, r0
 8003a7a:	d106      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003a7c:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a7e:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003a80:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003a84:	ea20 0004 	bic.w	r0, r0, r4
 8003a88:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a8a:	680a      	ldr	r2, [r1, #0]
 8003a8c:	2a00      	cmp	r2, #0
 8003a8e:	db01      	blt.n	8003a94 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a90:	2000      	movs	r0, #0
 8003a92:	e745      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a94:	4920      	ldr	r1, [pc, #128]	; (8003b18 <HAL_ADC_ConfigChannel+0x228>)
 8003a96:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a9a:	4820      	ldr	r0, [pc, #128]	; (8003b1c <HAL_ADC_ConfigChannel+0x22c>)
 8003a9c:	4282      	cmp	r2, r0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003aa0:	481f      	ldr	r0, [pc, #124]	; (8003b20 <HAL_ADC_ConfigChannel+0x230>)
 8003aa2:	4282      	cmp	r2, r0
 8003aa4:	d013      	beq.n	8003ace <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003aa6:	481f      	ldr	r0, [pc, #124]	; (8003b24 <HAL_ADC_ConfigChannel+0x234>)
 8003aa8:	4282      	cmp	r2, r0
 8003aaa:	d01f      	beq.n	8003aec <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aac:	2000      	movs	r0, #0
 8003aae:	e737      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ab0:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ab4:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003ab8:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8003abc:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003ac0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003ac4:	4311      	orrs	r1, r2
 8003ac6:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aca:	2000      	movs	r0, #0
}
 8003acc:	e728      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ace:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ad2:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8003ad6:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8003ada:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003ade:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae8:	2000      	movs	r0, #0
}
 8003aea:	e719      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aec:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003af0:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8003af4:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003af8:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003afc:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003b00:	430a      	orrs	r2, r1
 8003b02:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b06:	2000      	movs	r0, #0
}
 8003b08:	e70a      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	e708      	b.n	8003920 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003b0e:	2002      	movs	r0, #2
 8003b10:	e709      	b.n	8003926 <HAL_ADC_ConfigChannel+0x36>
 8003b12:	bf00      	nop
 8003b14:	80000004 	.word	0x80000004
 8003b18:	40012000 	.word	0x40012000
 8003b1c:	b0001000 	.word	0xb0001000
 8003b20:	b8004000 	.word	0xb8004000
 8003b24:	b4002000 	.word	0xb4002000
 8003b28:	20000074 	.word	0x20000074
 8003b2c:	053e2d63 	.word	0x053e2d63

08003b30 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003b30:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b32:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	f012 0f04 	tst.w	r2, #4
 8003b3a:	d02a      	beq.n	8003b92 <ADC_ConversionStop+0x62>
 8003b3c:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	f012 0f02 	tst.w	r2, #2
 8003b44:	d107      	bne.n	8003b56 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b4c:	f022 0217 	bic.w	r2, r2, #23
 8003b50:	f042 0210 	orr.w	r2, r2, #16
 8003b54:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b56:	f7fe f9d5 	bl	8001f04 <HAL_GetTick>
 8003b5a:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f013 0f04 	tst.w	r3, #4
 8003b64:	d013      	beq.n	8003b8e <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b66:	f7fe f9cd 	bl	8001f04 <HAL_GetTick>
 8003b6a:	1b43      	subs	r3, r0, r5
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d9f5      	bls.n	8003b5c <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f013 0f04 	tst.w	r3, #4
 8003b78:	d0f0      	beq.n	8003b5c <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b7c:	f043 0310 	orr.w	r3, r3, #16
 8003b80:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	e002      	b.n	8003b94 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e000      	b.n	8003b94 <ADC_ConversionStop+0x64>
 8003b92:	2000      	movs	r0, #0
}
 8003b94:	bd38      	pop	{r3, r4, r5, pc}
	...

08003b98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b98:	b530      	push	{r4, r5, lr}
 8003b9a:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	f012 0f01 	tst.w	r2, #1
 8003ba8:	d15b      	bne.n	8003c62 <ADC_Enable+0xca>
 8003baa:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003bac:	6899      	ldr	r1, [r3, #8]
 8003bae:	4a2e      	ldr	r2, [pc, #184]	; (8003c68 <ADC_Enable+0xd0>)
 8003bb0:	4211      	tst	r1, r2
 8003bb2:	d117      	bne.n	8003be4 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003bba:	f022 0217 	bic.w	r2, r2, #23
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bc4:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <ADC_Enable+0xd4>)
 8003bc6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003bca:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003bce:	d019      	beq.n	8003c04 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bd0:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <ADC_Enable+0xd8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	099b      	lsrs	r3, r3, #6
 8003bd6:	4a27      	ldr	r2, [pc, #156]	; (8003c74 <ADC_Enable+0xdc>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003be0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003be2:	e00c      	b.n	8003bfe <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003be6:	f043 0310 	orr.w	r3, r3, #16
 8003bea:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bec:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	e035      	b.n	8003c64 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003bf8:	9b01      	ldr	r3, [sp, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003bfe:	9b01      	ldr	r3, [sp, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f9      	bne.n	8003bf8 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003c04:	7e63      	ldrb	r3, [r4, #25]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	e02a      	b.n	8003c64 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8003c0e:	f7fe f979 	bl	8001f04 <HAL_GetTick>
 8003c12:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	f012 0f01 	tst.w	r2, #1
 8003c1c:	d11f      	bne.n	8003c5e <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	f012 0f01 	tst.w	r2, #1
 8003c24:	d107      	bne.n	8003c36 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c2c:	f022 0217 	bic.w	r2, r2, #23
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c36:	f7fe f965 	bl	8001f04 <HAL_GetTick>
 8003c3a:	1b40      	subs	r0, r0, r5
 8003c3c:	2802      	cmp	r0, #2
 8003c3e:	d9e9      	bls.n	8003c14 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f013 0f01 	tst.w	r3, #1
 8003c48:	d1e4      	bne.n	8003c14 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c4c:	f043 0310 	orr.w	r3, r3, #16
 8003c50:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	e002      	b.n	8003c64 <ADC_Enable+0xcc>
  return HAL_OK;
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e000      	b.n	8003c64 <ADC_Enable+0xcc>
 8003c62:	2000      	movs	r0, #0
}
 8003c64:	b003      	add	sp, #12
 8003c66:	bd30      	pop	{r4, r5, pc}
 8003c68:	80000017 	.word	0x80000017
 8003c6c:	40012000 	.word	0x40012000
 8003c70:	20000074 	.word	0x20000074
 8003c74:	053e2d63 	.word	0x053e2d63

08003c78 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c78:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f013 0f04 	tst.w	r3, #4
 8003c80:	d128      	bne.n	8003cd4 <HAL_ADC_Start+0x5c>
{
 8003c82:	b510      	push	{r4, lr}
 8003c84:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003c86:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d024      	beq.n	8003cd8 <HAL_ADC_Start+0x60>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003c94:	f7ff ff80 	bl	8003b98 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003c98:	b9c0      	cbnz	r0, 8003ccc <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003c9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca8:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003caa:	2300      	movs	r3, #0
 8003cac:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cae:	6822      	ldr	r2, [r4, #0]
 8003cb0:	211c      	movs	r1, #28
 8003cb2:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003cb4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003cb8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003cba:	6893      	ldr	r3, [r2, #8]
 8003cbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cc0:	f023 0317 	bic.w	r3, r3, #23
 8003cc4:	f043 0304 	orr.w	r3, r3, #4
 8003cc8:	6093      	str	r3, [r2, #8]
}
 8003cca:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003cd2:	e7fa      	b.n	8003cca <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003cd4:	2002      	movs	r0, #2
}
 8003cd6:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003cd8:	2002      	movs	r0, #2
 8003cda:	e7f6      	b.n	8003cca <HAL_ADC_Start+0x52>

08003cdc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ce0:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003ce2:	6893      	ldr	r3, [r2, #8]
 8003ce4:	f013 0302 	ands.w	r3, r3, #2
 8003ce8:	d000      	beq.n	8003cec <ADC_Disable+0x10>
 8003cea:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cec:	6891      	ldr	r1, [r2, #8]
 8003cee:	f011 0f01 	tst.w	r1, #1
 8003cf2:	d039      	beq.n	8003d68 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d139      	bne.n	8003d6c <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003cf8:	6893      	ldr	r3, [r2, #8]
 8003cfa:	f003 0305 	and.w	r3, r3, #5
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d009      	beq.n	8003d16 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d04:	f043 0310 	orr.w	r3, r3, #16
 8003d08:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8003d12:	2001      	movs	r0, #1
 8003d14:	e029      	b.n	8003d6a <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003d16:	6893      	ldr	r3, [r2, #8]
 8003d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d1c:	f023 0317 	bic.w	r3, r3, #23
 8003d20:	f043 0302 	orr.w	r3, r3, #2
 8003d24:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d2c:	f7fe f8ea 	bl	8001f04 <HAL_GetTick>
 8003d30:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f013 0f01 	tst.w	r3, #1
 8003d3a:	d013      	beq.n	8003d64 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d3c:	f7fe f8e2 	bl	8001f04 <HAL_GetTick>
 8003d40:	1b40      	subs	r0, r0, r5
 8003d42:	2802      	cmp	r0, #2
 8003d44:	d9f5      	bls.n	8003d32 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f013 0f01 	tst.w	r3, #1
 8003d4e:	d0f0      	beq.n	8003d32 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d52:	f043 0310 	orr.w	r3, r3, #16
 8003d56:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d58:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003d60:	2001      	movs	r0, #1
 8003d62:	e002      	b.n	8003d6a <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d64:	2000      	movs	r0, #0
 8003d66:	e000      	b.n	8003d6a <ADC_Disable+0x8e>
 8003d68:	2000      	movs	r0, #0
}
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	e7fc      	b.n	8003d6a <ADC_Disable+0x8e>

08003d70 <HAL_ADC_DeInit>:
{
 8003d70:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d056      	beq.n	8003e24 <HAL_ADC_DeInit+0xb4>
 8003d76:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003d78:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003d80:	f7ff fed6 	bl	8003b30 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003d84:	4606      	mov	r6, r0
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d03d      	beq.n	8003e06 <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	6853      	ldr	r3, [r2, #4]
 8003d8e:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	f240 329f 	movw	r2, #927	; 0x39f
 8003d9e:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003da0:	6822      	ldr	r2, [r4, #0]
 8003da2:	68d1      	ldr	r1, [r2, #12]
 8003da4:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_ADC_DeInit+0xb8>)
 8003da6:	400b      	ands	r3, r1
 8003da8:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003daa:	6822      	ldr	r2, [r4, #0]
 8003dac:	6913      	ldr	r3, [r2, #16]
 8003dae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003db2:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003db4:	6822      	ldr	r2, [r4, #0]
 8003db6:	6953      	ldr	r3, [r2, #20]
 8003db8:	f023 0307 	bic.w	r3, r3, #7
 8003dbc:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	6a13      	ldr	r3, [r2, #32]
 8003dc2:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003dc6:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003dcc:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003dd0:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003dd6:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003dda:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de0:	2500      	movs	r5, #0
 8003de2:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003de4:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <HAL_ADC_DeInit+0xbc>)
 8003de6:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8003dea:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003dee:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8003df2:	4620      	mov	r0, r4
 8003df4:	f7fd fb24 	bl	8001440 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003df8:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003dfa:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003dfc:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003dfe:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003e02:	4630      	mov	r0, r6
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7ff ff68 	bl	8003cdc <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	b908      	cbnz	r0, 8003e14 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 8003e10:	2301      	movs	r3, #1
 8003e12:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003e14:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003e16:	6893      	ldr	r3, [r2, #8]
 8003e18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e1c:	f023 0317 	bic.w	r3, r3, #23
 8003e20:	6093      	str	r3, [r2, #8]
}
 8003e22:	e7b2      	b.n	8003d8a <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003e24:	2601      	movs	r6, #1
 8003e26:	e7ec      	b.n	8003e02 <HAL_ADC_DeInit+0x92>
 8003e28:	833e0200 	.word	0x833e0200
 8003e2c:	40012000 	.word	0x40012000

08003e30 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003e30:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d019      	beq.n	8003e6c <HAL_ADC_Stop+0x3c>
{
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003e42:	f7ff fe75 	bl	8003b30 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003e46:	b118      	cbz	r0, 8003e50 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003e4e:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7ff ff43 	bl	8003cdc <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d1f6      	bne.n	8003e48 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e6a:	e7ed      	b.n	8003e48 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003e6c:	2002      	movs	r0, #2
}
 8003e6e:	4770      	bx	lr

08003e70 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003e78:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	f000 8094 	beq.w	8003faa <HAL_ADCEx_Calibration_Start+0x13a>
 8003e82:	4604      	mov	r4, r0
 8003e84:	2301      	movs	r3, #1
 8003e86:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e8a:	f7ff ff27 	bl	8003cdc <ADC_Disable>
 8003e8e:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e90:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	f012 0201 	ands.w	r2, r2, #1
 8003e98:	d009      	beq.n	8003eae <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e9c:	f043 0310 	orr.w	r3, r3, #16
 8003ea0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	b003      	add	sp, #12
 8003eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003eae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003eb0:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003eb4:	f041 0102 	orr.w	r1, r1, #2
 8003eb8:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003eba:	68de      	ldr	r6, [r3, #12]
 8003ebc:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003ec0:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003ec4:	0436      	lsls	r6, r6, #16
 8003ec6:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003ec8:	68d9      	ldr	r1, [r3, #12]
 8003eca:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003ece:	f021 0103 	bic.w	r1, r1, #3
 8003ed2:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003ed4:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003ed6:	e005      	b.n	8003ee4 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003ee0:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003ee2:	3201      	adds	r2, #1
 8003ee4:	2a07      	cmp	r2, #7
 8003ee6:	d81e      	bhi.n	8003f26 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003ee8:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003eea:	688b      	ldr	r3, [r1, #8]
 8003eec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ef0:	f023 0317 	bic.w	r3, r3, #23
 8003ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ef8:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003efa:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003efc:	6899      	ldr	r1, [r3, #8]
 8003efe:	2900      	cmp	r1, #0
 8003f00:	daea      	bge.n	8003ed8 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003f02:	9b01      	ldr	r3, [sp, #4]
 8003f04:	3301      	adds	r3, #1
 8003f06:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f08:	9b01      	ldr	r3, [sp, #4]
 8003f0a:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003f0e:	d3f4      	bcc.n	8003efa <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003f10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f12:	f023 0312 	bic.w	r3, r3, #18
 8003f16:	f043 0310 	orr.w	r3, r3, #16
 8003f1a:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003f22:	2501      	movs	r5, #1
 8003f24:	e7c0      	b.n	8003ea8 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8003f26:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003f2a:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003f2c:	688b      	ldr	r3, [r1, #8]
 8003f2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f32:	f023 0317 	bic.w	r3, r3, #23
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003f3c:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003f3e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8003f42:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8003f46:	4302      	orrs	r2, r0
 8003f48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003f4c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003f4e:	6893      	ldr	r3, [r2, #8]
 8003f50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f54:	f023 0317 	bic.w	r3, r3, #23
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003f5e:	f7fd ffd1 	bl	8001f04 <HAL_GetTick>
 8003f62:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f64:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	f012 0f01 	tst.w	r2, #1
 8003f6c:	d109      	bne.n	8003f82 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4316      	orrs	r6, r2
 8003f72:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003f74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f80:	e78f      	b.n	8003ea2 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f82:	f7fd ffbf 	bl	8001f04 <HAL_GetTick>
 8003f86:	1bc3      	subs	r3, r0, r7
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d9eb      	bls.n	8003f64 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f013 0f01 	tst.w	r3, #1
 8003f94:	d0e6      	beq.n	8003f64 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f98:	f043 0310 	orr.w	r3, r3, #16
 8003f9c:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003fa6:	2501      	movs	r5, #1
 8003fa8:	e77e      	b.n	8003ea8 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003faa:	2502      	movs	r5, #2
 8003fac:	e77c      	b.n	8003ea8 <HAL_ADCEx_Calibration_Start+0x38>
	...

08003fb0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fb0:	4a07      	ldr	r2, [pc, #28]	; (8003fd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003fb2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fb8:	041b      	lsls	r3, r3, #16
 8003fba:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fbc:	0200      	lsls	r0, r0, #8
 8003fbe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fc2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003fcc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003fce:	4770      	bx	lr
 8003fd0:	e000ed00 	.word	0xe000ed00

08003fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd6:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_NVIC_SetPriority+0x68>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fde:	f1c3 0c07 	rsb	ip, r3, #7
 8003fe2:	f1bc 0f04 	cmp.w	ip, #4
 8003fe6:	bf28      	it	cs
 8003fe8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fec:	f103 0e04 	add.w	lr, r3, #4
 8003ff0:	f1be 0f06 	cmp.w	lr, #6
 8003ff4:	d918      	bls.n	8004028 <HAL_NVIC_SetPriority+0x54>
 8003ff6:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff8:	f04f 3eff 	mov.w	lr, #4294967295
 8003ffc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004000:	ea21 010c 	bic.w	r1, r1, ip
 8004004:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004006:	fa0e f303 	lsl.w	r3, lr, r3
 800400a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800400e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004010:	2800      	cmp	r0, #0
 8004012:	db0b      	blt.n	800402c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004014:	0109      	lsls	r1, r1, #4
 8004016:	b2c9      	uxtb	r1, r1
 8004018:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800401c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004020:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004024:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004028:	2300      	movs	r3, #0
 800402a:	e7e5      	b.n	8003ff8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402c:	f000 000f 	and.w	r0, r0, #15
 8004030:	0109      	lsls	r1, r1, #4
 8004032:	b2c9      	uxtb	r1, r1
 8004034:	4b02      	ldr	r3, [pc, #8]	; (8004040 <HAL_NVIC_SetPriority+0x6c>)
 8004036:	5419      	strb	r1, [r3, r0]
 8004038:	e7f4      	b.n	8004024 <HAL_NVIC_SetPriority+0x50>
 800403a:	bf00      	nop
 800403c:	e000ed00 	.word	0xe000ed00
 8004040:	e000ed14 	.word	0xe000ed14

08004044 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004044:	2800      	cmp	r0, #0
 8004046:	db07      	blt.n	8004058 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004048:	f000 021f 	and.w	r2, r0, #31
 800404c:	0940      	lsrs	r0, r0, #5
 800404e:	2301      	movs	r3, #1
 8004050:	4093      	lsls	r3, r2
 8004052:	4a02      	ldr	r2, [pc, #8]	; (800405c <HAL_NVIC_EnableIRQ+0x18>)
 8004054:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	e000e100 	.word	0xe000e100

08004060 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004060:	2800      	cmp	r0, #0
 8004062:	db0c      	blt.n	800407e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004064:	f000 021f 	and.w	r2, r0, #31
 8004068:	0940      	lsrs	r0, r0, #5
 800406a:	2301      	movs	r3, #1
 800406c:	4093      	lsls	r3, r2
 800406e:	3020      	adds	r0, #32
 8004070:	4a03      	ldr	r2, [pc, #12]	; (8004080 <HAL_NVIC_DisableIRQ+0x20>)
 8004072:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004076:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800407a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800407e:	4770      	bx	lr
 8004080:	e000e100 	.word	0xe000e100

08004084 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004084:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004086:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8004088:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 800408c:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004090:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004092:	b124      	cbz	r4, 800409e <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004094:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8004096:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 800409a:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800409e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80040a0:	f004 0c1c 	and.w	ip, r4, #28
 80040a4:	2401      	movs	r4, #1
 80040a6:	fa04 f40c 	lsl.w	r4, r4, ip
 80040aa:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80040ae:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040b2:	6804      	ldr	r4, [r0, #0]
 80040b4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040b6:	6883      	ldr	r3, [r0, #8]
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d005      	beq.n	80040c8 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80040bc:	6803      	ldr	r3, [r0, #0]
 80040be:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80040c0:	6803      	ldr	r3, [r0, #0]
 80040c2:	60da      	str	r2, [r3, #12]
  }
}
 80040c4:	bc10      	pop	{r4}
 80040c6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80040c8:	6803      	ldr	r3, [r0, #0]
 80040ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80040cc:	6803      	ldr	r3, [r0, #0]
 80040ce:	60d9      	str	r1, [r3, #12]
 80040d0:	e7f8      	b.n	80040c4 <DMA_SetConfig+0x40>
	...

080040d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040d4:	6803      	ldr	r3, [r0, #0]
 80040d6:	4a14      	ldr	r2, [pc, #80]	; (8004128 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d816      	bhi.n	800410a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80040dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80040de:	f022 0203 	bic.w	r2, r2, #3
 80040e2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80040e6:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80040ea:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	3b08      	subs	r3, #8
 80040f0:	4a0e      	ldr	r2, [pc, #56]	; (800412c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040f8:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80040fa:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	2201      	movs	r2, #1
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004108:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800410a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800410c:	f022 0103 	bic.w	r1, r2, #3
 8004110:	4a08      	ldr	r2, [pc, #32]	; (8004134 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004112:	440a      	add	r2, r1
 8004114:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004116:	b2db      	uxtb	r3, r3
 8004118:	3b08      	subs	r3, #8
 800411a:	4a04      	ldr	r2, [pc, #16]	; (800412c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	3307      	adds	r3, #7
 8004124:	e7e8      	b.n	80040f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004126:	bf00      	nop
 8004128:	40020407 	.word	0x40020407
 800412c:	cccccccd 	.word	0xcccccccd
 8004130:	40020880 	.word	0x40020880
 8004134:	4002081c 	.word	0x4002081c

08004138 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004138:	6843      	ldr	r3, [r0, #4]
 800413a:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800413e:	4a07      	ldr	r2, [pc, #28]	; (800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004140:	441a      	add	r2, r3
 8004142:	0092      	lsls	r2, r2, #2
 8004144:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004146:	4a06      	ldr	r2, [pc, #24]	; (8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004148:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800414a:	3b01      	subs	r3, #1
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	2201      	movs	r2, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	1000823f 	.word	0x1000823f
 8004160:	40020940 	.word	0x40020940

08004164 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004164:	2800      	cmp	r0, #0
 8004166:	d060      	beq.n	800422a <HAL_DMA_Init+0xc6>
{
 8004168:	b510      	push	{r4, lr}
 800416a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800416c:	6802      	ldr	r2, [r0, #0]
 800416e:	4b30      	ldr	r3, [pc, #192]	; (8004230 <HAL_DMA_Init+0xcc>)
 8004170:	429a      	cmp	r2, r3
 8004172:	d842      	bhi.n	80041fa <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004174:	4b2f      	ldr	r3, [pc, #188]	; (8004234 <HAL_DMA_Init+0xd0>)
 8004176:	4413      	add	r3, r2
 8004178:	492f      	ldr	r1, [pc, #188]	; (8004238 <HAL_DMA_Init+0xd4>)
 800417a:	fba1 1303 	umull	r1, r3, r1, r3
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004184:	4b2d      	ldr	r3, [pc, #180]	; (800423c <HAL_DMA_Init+0xd8>)
 8004186:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004188:	2302      	movs	r3, #2
 800418a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800418e:	6813      	ldr	r3, [r2, #0]
 8004190:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800419a:	6821      	ldr	r1, [r4, #0]
 800419c:	680a      	ldr	r2, [r1, #0]
 800419e:	68a3      	ldr	r3, [r4, #8]
 80041a0:	68e0      	ldr	r0, [r4, #12]
 80041a2:	4303      	orrs	r3, r0
 80041a4:	6920      	ldr	r0, [r4, #16]
 80041a6:	4303      	orrs	r3, r0
 80041a8:	6960      	ldr	r0, [r4, #20]
 80041aa:	4303      	orrs	r3, r0
 80041ac:	69a0      	ldr	r0, [r4, #24]
 80041ae:	4303      	orrs	r3, r0
 80041b0:	69e0      	ldr	r0, [r4, #28]
 80041b2:	4303      	orrs	r3, r0
 80041b4:	6a20      	ldr	r0, [r4, #32]
 80041b6:	4303      	orrs	r3, r0
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041bc:	4620      	mov	r0, r4
 80041be:	f7ff ff89 	bl	80040d4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041c2:	68a3      	ldr	r3, [r4, #8]
 80041c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c8:	d022      	beq.n	8004210 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041ca:	6863      	ldr	r3, [r4, #4]
 80041cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80041ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041d6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80041d8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041da:	6863      	ldr	r3, [r4, #4]
 80041dc:	3b01      	subs	r3, #1
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d919      	bls.n	8004216 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80041e6:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041e8:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ea:	2000      	movs	r0, #0
 80041ec:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80041f4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80041f8:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <HAL_DMA_Init+0xdc>)
 80041fc:	4413      	add	r3, r2
 80041fe:	490e      	ldr	r1, [pc, #56]	; (8004238 <HAL_DMA_Init+0xd4>)
 8004200:	fba1 1303 	umull	r1, r3, r1, r3
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_DMA_Init+0xe0>)
 800420c:	6403      	str	r3, [r0, #64]	; 0x40
 800420e:	e7bb      	b.n	8004188 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004210:	2300      	movs	r3, #0
 8004212:	6063      	str	r3, [r4, #4]
 8004214:	e7d9      	b.n	80041ca <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004216:	4620      	mov	r0, r4
 8004218:	f7ff ff8e 	bl	8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800421c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004224:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	e7df      	b.n	80041ea <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800422a:	2001      	movs	r0, #1
}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40020407 	.word	0x40020407
 8004234:	bffdfff8 	.word	0xbffdfff8
 8004238:	cccccccd 	.word	0xcccccccd
 800423c:	40020000 	.word	0x40020000
 8004240:	bffdfbf8 	.word	0xbffdfbf8
 8004244:	40020400 	.word	0x40020400

08004248 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004248:	2800      	cmp	r0, #0
 800424a:	d04b      	beq.n	80042e4 <HAL_DMA_DeInit+0x9c>
{
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004250:	6802      	ldr	r2, [r0, #0]
 8004252:	6813      	ldr	r3, [r2, #0]
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800425a:	6802      	ldr	r2, [r0, #0]
 800425c:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <HAL_DMA_DeInit+0xa0>)
 800425e:	429a      	cmp	r2, r3
 8004260:	d82c      	bhi.n	80042bc <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004262:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_DMA_DeInit+0xa4>)
 8004264:	4413      	add	r3, r2
 8004266:	4922      	ldr	r1, [pc, #136]	; (80042f0 <HAL_DMA_DeInit+0xa8>)
 8004268:	fba1 1303 	umull	r1, r3, r1, r3
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004272:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <HAL_DMA_DeInit+0xac>)
 8004274:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8004276:	2500      	movs	r5, #0
 8004278:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800427a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800427c:	f003 021c 	and.w	r2, r3, #28
 8004280:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004282:	2301      	movs	r3, #1
 8004284:	4093      	lsls	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004288:	4620      	mov	r0, r4
 800428a:	f7ff ff23 	bl	80040d4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800428e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004290:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004292:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004294:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004296:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004298:	6863      	ldr	r3, [r4, #4]
 800429a:	3b01      	subs	r3, #1
 800429c:	2b03      	cmp	r3, #3
 800429e:	d918      	bls.n	80042d2 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 80042a0:	2000      	movs	r0, #0
 80042a2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80042a4:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80042a6:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80042a8:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80042aa:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80042ac:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80042ae:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80042b2:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80042b6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042bc:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <HAL_DMA_DeInit+0xb0>)
 80042be:	4413      	add	r3, r2
 80042c0:	490b      	ldr	r1, [pc, #44]	; (80042f0 <HAL_DMA_DeInit+0xa8>)
 80042c2:	fba1 1303 	umull	r1, r3, r1, r3
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_DMA_DeInit+0xb4>)
 80042ce:	6403      	str	r3, [r0, #64]	; 0x40
 80042d0:	e7d1      	b.n	8004276 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042d2:	4620      	mov	r0, r4
 80042d4:	f7ff ff30 	bl	8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042da:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	e7dd      	b.n	80042a0 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80042e4:	2001      	movs	r0, #1
}
 80042e6:	4770      	bx	lr
 80042e8:	40020407 	.word	0x40020407
 80042ec:	bffdfff8 	.word	0xbffdfff8
 80042f0:	cccccccd 	.word	0xcccccccd
 80042f4:	40020000 	.word	0x40020000
 80042f8:	bffdfbf8 	.word	0xbffdfbf8
 80042fc:	40020400 	.word	0x40020400

08004300 <HAL_DMA_Start_IT>:
{
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004304:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8004308:	2801      	cmp	r0, #1
 800430a:	d043      	beq.n	8004394 <HAL_DMA_Start_IT+0x94>
 800430c:	2001      	movs	r0, #1
 800430e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004312:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8004316:	b2c0      	uxtb	r0, r0
 8004318:	2801      	cmp	r0, #1
 800431a:	d006      	beq.n	800432a <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004320:	2300      	movs	r3, #0
 8004322:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8004326:	2001      	movs	r0, #1
}
 8004328:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800432a:	2002      	movs	r0, #2
 800432c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004330:	2000      	movs	r0, #0
 8004332:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004334:	6825      	ldr	r5, [r4, #0]
 8004336:	6828      	ldr	r0, [r5, #0]
 8004338:	f020 0001 	bic.w	r0, r0, #1
 800433c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800433e:	4620      	mov	r0, r4
 8004340:	f7ff fea0 	bl	8004084 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004344:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004346:	b1d3      	cbz	r3, 800437e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	6813      	ldr	r3, [r2, #0]
 800434c:	f043 030e 	orr.w	r3, r3, #14
 8004350:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004352:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800435a:	d003      	beq.n	8004364 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004362:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8004364:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004366:	b11b      	cbz	r3, 8004370 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800436e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004370:	6822      	ldr	r2, [r4, #0]
 8004372:	6813      	ldr	r3, [r2, #0]
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800437a:	2000      	movs	r0, #0
 800437c:	e7d4      	b.n	8004328 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	6813      	ldr	r3, [r2, #0]
 8004382:	f023 0304 	bic.w	r3, r3, #4
 8004386:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004388:	6822      	ldr	r2, [r4, #0]
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	f043 030a 	orr.w	r3, r3, #10
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e7de      	b.n	8004352 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004394:	2002      	movs	r0, #2
 8004396:	e7c7      	b.n	8004328 <HAL_DMA_Start_IT+0x28>

08004398 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004398:	4603      	mov	r3, r0
 800439a:	2800      	cmp	r0, #0
 800439c:	d034      	beq.n	8004408 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800439e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	2a02      	cmp	r2, #2
 80043a6:	d006      	beq.n	80043b6 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043a8:	2204      	movs	r2, #4
 80043aa:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80043ac:	2200      	movs	r2, #0
 80043ae:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80043b2:	2001      	movs	r0, #1
 80043b4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043b6:	6801      	ldr	r1, [r0, #0]
 80043b8:	680a      	ldr	r2, [r1, #0]
 80043ba:	f022 020e 	bic.w	r2, r2, #14
 80043be:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043c0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80043c2:	680a      	ldr	r2, [r1, #0]
 80043c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80043ca:	6801      	ldr	r1, [r0, #0]
 80043cc:	680a      	ldr	r2, [r1, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80043d6:	f002 011c 	and.w	r1, r2, #28
 80043da:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80043dc:	2201      	movs	r2, #1
 80043de:	408a      	lsls	r2, r1
 80043e0:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80043e6:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80043e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ea:	b132      	cbz	r2, 80043fa <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043ec:	6811      	ldr	r1, [r2, #0]
 80043ee:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80043f2:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80043f8:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004400:	2000      	movs	r0, #0
 8004402:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8004406:	4770      	bx	lr
    return HAL_ERROR;
 8004408:	2001      	movs	r0, #1
}
 800440a:	4770      	bx	lr

0800440c <HAL_DMA_Abort_IT>:
{
 800440c:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800440e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d003      	beq.n	8004420 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004418:	2304      	movs	r3, #4
 800441a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800441c:	2001      	movs	r0, #1
}
 800441e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004420:	6802      	ldr	r2, [r0, #0]
 8004422:	6813      	ldr	r3, [r2, #0]
 8004424:	f023 030e 	bic.w	r3, r3, #14
 8004428:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800442a:	6802      	ldr	r2, [r0, #0]
 800442c:	6813      	ldr	r3, [r2, #0]
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004434:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004436:	6813      	ldr	r3, [r2, #0]
 8004438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800443c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800443e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004440:	f003 021c 	and.w	r2, r3, #28
 8004444:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004446:	2301      	movs	r3, #1
 8004448:	4093      	lsls	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800444c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800444e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004450:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004452:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004454:	b133      	cbz	r3, 8004464 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800445c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800445e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004460:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004462:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004464:	2301      	movs	r3, #1
 8004466:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800446a:	2300      	movs	r3, #0
 800446c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004470:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004472:	b113      	cbz	r3, 800447a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004474:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2000      	movs	r0, #0
 8004478:	e7d1      	b.n	800441e <HAL_DMA_Abort_IT+0x12>
 800447a:	2000      	movs	r0, #0
 800447c:	e7cf      	b.n	800441e <HAL_DMA_Abort_IT+0x12>
	...

08004480 <HAL_DMA_IRQHandler>:
{
 8004480:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004482:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004484:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004486:	6804      	ldr	r4, [r0, #0]
 8004488:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800448a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800448c:	f003 031c 	and.w	r3, r3, #28
 8004490:	2204      	movs	r2, #4
 8004492:	409a      	lsls	r2, r3
 8004494:	420a      	tst	r2, r1
 8004496:	d015      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x44>
 8004498:	f015 0f04 	tst.w	r5, #4
 800449c:	d012      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	f013 0f20 	tst.w	r3, #32
 80044a4:	d103      	bne.n	80044ae <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80044ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80044b0:	f003 021c 	and.w	r2, r3, #28
 80044b4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80044b6:	2304      	movs	r3, #4
 80044b8:	4093      	lsls	r3, r2
 80044ba:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80044bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80044be:	b103      	cbz	r3, 80044c2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80044c0:	4798      	blx	r3
}
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80044c4:	2202      	movs	r2, #2
 80044c6:	409a      	lsls	r2, r3
 80044c8:	420a      	tst	r2, r1
 80044ca:	d028      	beq.n	800451e <HAL_DMA_IRQHandler+0x9e>
 80044cc:	f015 0f02 	tst.w	r5, #2
 80044d0:	d025      	beq.n	800451e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	f013 0f20 	tst.w	r3, #32
 80044d8:	d106      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	f023 030a 	bic.w	r3, r3, #10
 80044e0:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80044e8:	6802      	ldr	r2, [r0, #0]
 80044ea:	4b1c      	ldr	r3, [pc, #112]	; (800455c <HAL_DMA_IRQHandler+0xdc>)
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d90e      	bls.n	800450e <HAL_DMA_IRQHandler+0x8e>
 80044f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80044f2:	f003 021c 	and.w	r2, r3, #28
 80044f6:	2302      	movs	r3, #2
 80044f8:	4093      	lsls	r3, r2
 80044fa:	4a19      	ldr	r2, [pc, #100]	; (8004560 <HAL_DMA_IRQHandler+0xe0>)
 80044fc:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 80044fe:	2300      	movs	r3, #0
 8004500:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004504:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0db      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 800450a:	4798      	blx	r3
 800450c:	e7d9      	b.n	80044c2 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800450e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004510:	f003 021c 	and.w	r2, r3, #28
 8004514:	2302      	movs	r3, #2
 8004516:	4093      	lsls	r3, r2
 8004518:	4a12      	ldr	r2, [pc, #72]	; (8004564 <HAL_DMA_IRQHandler+0xe4>)
 800451a:	6053      	str	r3, [r2, #4]
 800451c:	e7ef      	b.n	80044fe <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800451e:	2208      	movs	r2, #8
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	420b      	tst	r3, r1
 8004526:	d0cc      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x42>
 8004528:	f015 0f08 	tst.w	r5, #8
 800452c:	d0c9      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	f023 030e 	bic.w	r3, r3, #14
 8004534:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004536:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004538:	f003 031c 	and.w	r3, r3, #28
 800453c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800453e:	2201      	movs	r2, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004546:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004548:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800454c:	2300      	movs	r3, #0
 800454e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004552:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0b4      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004558:	4798      	blx	r3
  return;
 800455a:	e7b2      	b.n	80044c2 <HAL_DMA_IRQHandler+0x42>
 800455c:	40020080 	.word	0x40020080
 8004560:	40020400 	.word	0x40020400
 8004564:	40020000 	.word	0x40020000

08004568 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004568:	b178      	cbz	r0, 800458a <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 800456a:	6803      	ldr	r3, [r0, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800456e:	f011 0f10 	tst.w	r1, #16
 8004572:	d004      	beq.n	800457e <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004578:	d004      	beq.n	8004584 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 800457a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 800457e:	601a      	str	r2, [r3, #0]
  return status;
 8004580:	2000      	movs	r0, #0
 8004582:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004584:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004588:	e7f9      	b.n	800457e <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 800458a:	2001      	movs	r0, #1
}
 800458c:	4770      	bx	lr
	...

08004590 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004590:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004592:	4c05      	ldr	r4, [pc, #20]	; (80045a8 <FLASH_Program_DoubleWord+0x18>)
 8004594:	6961      	ldr	r1, [r4, #20]
 8004596:	f041 0101 	orr.w	r1, r1, #1
 800459a:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800459c:	6002      	str	r2, [r0, #0]
 800459e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80045a2:	6043      	str	r3, [r0, #4]
}
 80045a4:	bc10      	pop	{r4}
 80045a6:	4770      	bx	lr
 80045a8:	58004000 	.word	0x58004000

080045ac <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80045ac:	4a0c      	ldr	r2, [pc, #48]	; (80045e0 <FLASH_Program_Fast+0x34>)
 80045ae:	6953      	ldr	r3, [r2, #20]
 80045b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80045ba:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80045bc:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80045be:	f851 2b04 	ldr.w	r2, [r1], #4
 80045c2:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 80045c6:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 80045c8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80045cc:	d1f7      	bne.n	80045be <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <FLASH_Program_Fast+0x34>)
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80045d6:	d1fa      	bne.n	80045ce <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d8:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	58004000 	.word	0x58004000

080045e4 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_FLASH_Unlock+0x28>)
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	db01      	blt.n	80045f0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80045ec:	2000      	movs	r0, #0
 80045ee:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_FLASH_Unlock+0x28>)
 80045f2:	4a07      	ldr	r2, [pc, #28]	; (8004610 <HAL_FLASH_Unlock+0x2c>)
 80045f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045f6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80045fa:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	db01      	blt.n	8004606 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004602:	2000      	movs	r0, #0
 8004604:	4770      	bx	lr
      status = HAL_ERROR;
 8004606:	2001      	movs	r0, #1
}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	58004000 	.word	0x58004000
 8004610:	45670123 	.word	0x45670123

08004614 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_FLASH_Lock+0x18>)
 8004616:	695a      	ldr	r2, [r3, #20]
 8004618:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800461c:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	db01      	blt.n	8004628 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004624:	2001      	movs	r0, #1
}
 8004626:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2000      	movs	r0, #0
 800462a:	4770      	bx	lr
 800462c:	58004000 	.word	0x58004000

08004630 <FLASH_WaitForLastOperation>:
{
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004634:	f7fd fc66 	bl	8001f04 <HAL_GetTick>
 8004638:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800463a:	4b16      	ldr	r3, [pc, #88]	; (8004694 <FLASH_WaitForLastOperation+0x64>)
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004642:	d006      	beq.n	8004652 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004644:	f7fd fc5e 	bl	8001f04 <HAL_GetTick>
 8004648:	1b00      	subs	r0, r0, r4
 800464a:	42a8      	cmp	r0, r5
 800464c:	d3f5      	bcc.n	800463a <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 800464e:	2003      	movs	r0, #3
}
 8004650:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <FLASH_WaitForLastOperation+0x64>)
 8004654:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004656:	f013 0f01 	tst.w	r3, #1
 800465a:	d002      	beq.n	8004662 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800465c:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <FLASH_WaitForLastOperation+0x64>)
 800465e:	2101      	movs	r1, #1
 8004660:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004662:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8004666:	4013      	ands	r3, r2
 8004668:	d001      	beq.n	800466e <FLASH_WaitForLastOperation+0x3e>
 800466a:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <FLASH_WaitForLastOperation+0x64>)
 800466c:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 800466e:	b95b      	cbnz	r3, 8004688 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004670:	4b08      	ldr	r3, [pc, #32]	; (8004694 <FLASH_WaitForLastOperation+0x64>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004678:	d00a      	beq.n	8004690 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800467a:	f7fd fc43 	bl	8001f04 <HAL_GetTick>
 800467e:	1b00      	subs	r0, r0, r4
 8004680:	42a8      	cmp	r0, r5
 8004682:	d3f5      	bcc.n	8004670 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004684:	2003      	movs	r0, #3
 8004686:	e7e3      	b.n	8004650 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8004688:	4a03      	ldr	r2, [pc, #12]	; (8004698 <FLASH_WaitForLastOperation+0x68>)
 800468a:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 800468c:	2001      	movs	r0, #1
 800468e:	e7df      	b.n	8004650 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004690:	2000      	movs	r0, #0
 8004692:	e7dd      	b.n	8004650 <FLASH_WaitForLastOperation+0x20>
 8004694:	58004000 	.word	0x58004000
 8004698:	200007b0 	.word	0x200007b0

0800469c <HAL_FLASH_Program>:
{
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80046a0:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <HAL_FLASH_Program+0x5c>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d025      	beq.n	80046f4 <HAL_FLASH_Program+0x58>
 80046a8:	4604      	mov	r4, r0
 80046aa:	460d      	mov	r5, r1
 80046ac:	4616      	mov	r6, r2
 80046ae:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <HAL_FLASH_Program+0x5c>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046b4:	2200      	movs	r2, #0
 80046b6:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046bc:	f7ff ffb8 	bl	8004630 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80046c0:	b970      	cbnz	r0, 80046e0 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80046c2:	2c01      	cmp	r4, #1
 80046c4:	d010      	beq.n	80046e8 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80046c6:	4631      	mov	r1, r6
 80046c8:	4628      	mov	r0, r5
 80046ca:	f7ff ff6f 	bl	80045ac <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046d2:	f7ff ffad 	bl	8004630 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <HAL_FLASH_Program+0x60>)
 80046d8:	6953      	ldr	r3, [r2, #20]
 80046da:	ea23 0404 	bic.w	r4, r3, r4
 80046de:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_FLASH_Program+0x5c>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	701a      	strb	r2, [r3, #0]
}
 80046e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80046e8:	4632      	mov	r2, r6
 80046ea:	463b      	mov	r3, r7
 80046ec:	4628      	mov	r0, r5
 80046ee:	f7ff ff4f 	bl	8004590 <FLASH_Program_DoubleWord>
 80046f2:	e7ec      	b.n	80046ce <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 80046f4:	2002      	movs	r0, #2
 80046f6:	e7f6      	b.n	80046e6 <HAL_FLASH_Program+0x4a>
 80046f8:	200007b0 	.word	0x200007b0
 80046fc:	58004000 	.word	0x58004000

08004700 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004700:	4a03      	ldr	r2, [pc, #12]	; (8004710 <FLASH_MassErase+0x10>)
 8004702:	6953      	ldr	r3, [r2, #20]
 8004704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	6153      	str	r3, [r2, #20]
#endif
}
 800470e:	4770      	bx	lr
 8004710:	58004000 	.word	0x58004000

08004714 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004714:	4b18      	ldr	r3, [pc, #96]	; (8004778 <FLASH_FlushCaches+0x64>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471c:	2b01      	cmp	r3, #1
 800471e:	d006      	beq.n	800472e <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004720:	4b15      	ldr	r3, [pc, #84]	; (8004778 <FLASH_FlushCaches+0x64>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004728:	2b01      	cmp	r3, #1
 800472a:	d012      	beq.n	8004752 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 800472c:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <FLASH_FlushCaches+0x64>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004736:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004746:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e7e6      	b.n	8004720 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004752:	4b09      	ldr	r3, [pc, #36]	; (8004778 <FLASH_FlushCaches+0x64>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800476a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004772:	601a      	str	r2, [r3, #0]
}
 8004774:	e7da      	b.n	800472c <FLASH_FlushCaches+0x18>
 8004776:	bf00      	nop
 8004778:	58004000 	.word	0x58004000

0800477c <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800477c:	4a03      	ldr	r2, [pc, #12]	; (800478c <FLASH_AcknowledgePageErase+0x10>)
 800477e:	6953      	ldr	r3, [r2, #20]
 8004780:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004784:	f023 0302 	bic.w	r3, r3, #2
 8004788:	6153      	str	r3, [r2, #20]
#endif
}
 800478a:	4770      	bx	lr
 800478c:	58004000 	.word	0x58004000

08004790 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004790:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <FLASH_PageErase+0x18>)
 8004792:	6953      	ldr	r3, [r2, #20]
 8004794:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004798:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 800479c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80047a0:	f040 0002 	orr.w	r0, r0, #2
 80047a4:	6150      	str	r0, [r2, #20]
}
 80047a6:	4770      	bx	lr
 80047a8:	58004000 	.word	0x58004000

080047ac <HAL_FLASHEx_Erase>:
{
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80047ae:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <HAL_FLASHEx_Erase+0x7c>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d035      	beq.n	8004822 <HAL_FLASHEx_Erase+0x76>
 80047b6:	4605      	mov	r5, r0
 80047b8:	460f      	mov	r7, r1
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <HAL_FLASHEx_Erase+0x7c>)
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047c8:	f7ff ff32 	bl	8004630 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80047cc:	4606      	mov	r6, r0
 80047ce:	bb18      	cbnz	r0, 8004818 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d013      	beq.n	80047fe <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 80047d6:	f04f 33ff 	mov.w	r3, #4294967295
 80047da:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80047dc:	686c      	ldr	r4, [r5, #4]
 80047de:	686b      	ldr	r3, [r5, #4]
 80047e0:	68aa      	ldr	r2, [r5, #8]
 80047e2:	4413      	add	r3, r2
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d913      	bls.n	8004810 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 80047e8:	4620      	mov	r0, r4
 80047ea:	f7ff ffd1 	bl	8004790 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047f2:	f7ff ff1d 	bl	8004630 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80047f6:	4606      	mov	r6, r0
 80047f8:	b948      	cbnz	r0, 800480e <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80047fa:	3401      	adds	r4, #1
 80047fc:	e7ef      	b.n	80047de <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 80047fe:	f7ff ff7f 	bl	8004700 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004806:	f7ff ff13 	bl	8004630 <FLASH_WaitForLastOperation>
 800480a:	4606      	mov	r6, r0
 800480c:	e002      	b.n	8004814 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 800480e:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004810:	f7ff ffb4 	bl	800477c <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004814:	f7ff ff7e 	bl	8004714 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_FLASHEx_Erase+0x7c>)
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]
}
 800481e:	4630      	mov	r0, r6
 8004820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004822:	2602      	movs	r6, #2
 8004824:	e7fb      	b.n	800481e <HAL_FLASHEx_Erase+0x72>
 8004826:	bf00      	nop
 8004828:	200007b0 	.word	0x200007b0

0800482c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800482c:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 800482e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004830:	e069      	b.n	8004906 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004832:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004834:	005e      	lsls	r6, r3, #1
 8004836:	2403      	movs	r4, #3
 8004838:	40b4      	lsls	r4, r6
 800483a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800483e:	68cc      	ldr	r4, [r1, #12]
 8004840:	40b4      	lsls	r4, r6
 8004842:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004844:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004846:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004848:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800484c:	684c      	ldr	r4, [r1, #4]
 800484e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004852:	409c      	lsls	r4, r3
 8004854:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004858:	6044      	str	r4, [r0, #4]
 800485a:	e065      	b.n	8004928 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800485c:	08dd      	lsrs	r5, r3, #3
 800485e:	3508      	adds	r5, #8
 8004860:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004864:	f003 0407 	and.w	r4, r3, #7
 8004868:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800486c:	240f      	movs	r4, #15
 800486e:	fa04 f40c 	lsl.w	r4, r4, ip
 8004872:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004876:	690c      	ldr	r4, [r1, #16]
 8004878:	fa04 f40c 	lsl.w	r4, r4, ip
 800487c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004880:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004884:	e067      	b.n	8004956 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004886:	2402      	movs	r4, #2
 8004888:	e000      	b.n	800488c <HAL_GPIO_Init+0x60>
 800488a:	2400      	movs	r4, #0
 800488c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004890:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004892:	f10c 0c02 	add.w	ip, ip, #2
 8004896:	4d4b      	ldr	r5, [pc, #300]	; (80049c4 <HAL_GPIO_Init+0x198>)
 8004898:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800489c:	4c4a      	ldr	r4, [pc, #296]	; (80049c8 <HAL_GPIO_Init+0x19c>)
 800489e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80048a0:	43d4      	mvns	r4, r2
 80048a2:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048a6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80048aa:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 80048ae:	d001      	beq.n	80048b4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80048b0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80048b4:	4d44      	ldr	r5, [pc, #272]	; (80049c8 <HAL_GPIO_Init+0x19c>)
 80048b6:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80048b8:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80048ba:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048be:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80048c2:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 80048c6:	d001      	beq.n	80048cc <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80048c8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80048cc:	4d3e      	ldr	r5, [pc, #248]	; (80049c8 <HAL_GPIO_Init+0x19c>)
 80048ce:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80048d0:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80048d4:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048d8:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80048dc:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 80048e0:	d001      	beq.n	80048e6 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80048e2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80048e6:	4d38      	ldr	r5, [pc, #224]	; (80049c8 <HAL_GPIO_Init+0x19c>)
 80048e8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80048ec:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80048f0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048f2:	684e      	ldr	r6, [r1, #4]
 80048f4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80048f8:	d001      	beq.n	80048fe <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80048fa:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80048fe:	4a32      	ldr	r2, [pc, #200]	; (80049c8 <HAL_GPIO_Init+0x19c>)
 8004900:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004904:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004906:	680a      	ldr	r2, [r1, #0]
 8004908:	fa32 f403 	lsrs.w	r4, r2, r3
 800490c:	d058      	beq.n	80049c0 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800490e:	f04f 0c01 	mov.w	ip, #1
 8004912:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004916:	ea1c 0202 	ands.w	r2, ip, r2
 800491a:	d0f3      	beq.n	8004904 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800491c:	684c      	ldr	r4, [r1, #4]
 800491e:	f004 0403 	and.w	r4, r4, #3
 8004922:	3c01      	subs	r4, #1
 8004924:	2c01      	cmp	r4, #1
 8004926:	d984      	bls.n	8004832 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004928:	684c      	ldr	r4, [r1, #4]
 800492a:	f004 0403 	and.w	r4, r4, #3
 800492e:	2c03      	cmp	r4, #3
 8004930:	d00c      	beq.n	800494c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004932:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004934:	005d      	lsls	r5, r3, #1
 8004936:	f04f 0c03 	mov.w	ip, #3
 800493a:	fa0c fc05 	lsl.w	ip, ip, r5
 800493e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004942:	688c      	ldr	r4, [r1, #8]
 8004944:	40ac      	lsls	r4, r5
 8004946:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800494a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800494c:	684c      	ldr	r4, [r1, #4]
 800494e:	f004 0403 	and.w	r4, r4, #3
 8004952:	2c02      	cmp	r4, #2
 8004954:	d082      	beq.n	800485c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8004956:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004958:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800495c:	f04f 0c03 	mov.w	ip, #3
 8004960:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004964:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004968:	684c      	ldr	r4, [r1, #4]
 800496a:	f004 0403 	and.w	r4, r4, #3
 800496e:	fa04 f40e 	lsl.w	r4, r4, lr
 8004972:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004976:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004978:	684c      	ldr	r4, [r1, #4]
 800497a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800497e:	d0c1      	beq.n	8004904 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004980:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004984:	f10c 0502 	add.w	r5, ip, #2
 8004988:	4c0e      	ldr	r4, [pc, #56]	; (80049c4 <HAL_GPIO_Init+0x198>)
 800498a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800498e:	f003 0403 	and.w	r4, r3, #3
 8004992:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004996:	2407      	movs	r4, #7
 8004998:	fa04 f40e 	lsl.w	r4, r4, lr
 800499c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049a0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80049a4:	f43f af71 	beq.w	800488a <HAL_GPIO_Init+0x5e>
 80049a8:	4c08      	ldr	r4, [pc, #32]	; (80049cc <HAL_GPIO_Init+0x1a0>)
 80049aa:	42a0      	cmp	r0, r4
 80049ac:	d006      	beq.n	80049bc <HAL_GPIO_Init+0x190>
 80049ae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049b2:	42a0      	cmp	r0, r4
 80049b4:	f43f af67 	beq.w	8004886 <HAL_GPIO_Init+0x5a>
 80049b8:	2407      	movs	r4, #7
 80049ba:	e767      	b.n	800488c <HAL_GPIO_Init+0x60>
 80049bc:	2401      	movs	r4, #1
 80049be:	e765      	b.n	800488c <HAL_GPIO_Init+0x60>
  }
}
 80049c0:	bd70      	pop	{r4, r5, r6, pc}
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	58000800 	.word	0x58000800
 80049cc:	48000400 	.word	0x48000400

080049d0 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80049d0:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80049d2:	fa31 f203 	lsrs.w	r2, r1, r3
 80049d6:	d071      	beq.n	8004abc <HAL_GPIO_DeInit+0xec>
{
 80049d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049da:	e02e      	b.n	8004a3a <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80049dc:	2502      	movs	r5, #2
 80049de:	e000      	b.n	80049e2 <HAL_GPIO_DeInit+0x12>
 80049e0:	2500      	movs	r5, #0
 80049e2:	fa05 fc0c 	lsl.w	ip, r5, ip
 80049e6:	45a4      	cmp	ip, r4
 80049e8:	d049      	beq.n	8004a7e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80049ea:	6804      	ldr	r4, [r0, #0]
 80049ec:	005d      	lsls	r5, r3, #1
 80049ee:	f04f 0c03 	mov.w	ip, #3
 80049f2:	fa0c fc05 	lsl.w	ip, ip, r5
 80049f6:	ea44 040c 	orr.w	r4, r4, ip
 80049fa:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80049fc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004a00:	f10e 0e08 	add.w	lr, lr, #8
 8004a04:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004a08:	f003 0507 	and.w	r5, r3, #7
 8004a0c:	00ae      	lsls	r6, r5, #2
 8004a0e:	250f      	movs	r5, #15
 8004a10:	40b5      	lsls	r5, r6
 8004a12:	ea24 0405 	bic.w	r4, r4, r5
 8004a16:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a1a:	6884      	ldr	r4, [r0, #8]
 8004a1c:	ea24 040c 	bic.w	r4, r4, ip
 8004a20:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a22:	6844      	ldr	r4, [r0, #4]
 8004a24:	ea24 0202 	bic.w	r2, r4, r2
 8004a28:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a2a:	68c2      	ldr	r2, [r0, #12]
 8004a2c:	ea22 020c 	bic.w	r2, r2, ip
 8004a30:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004a32:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004a34:	fa31 f203 	lsrs.w	r2, r1, r3
 8004a38:	d03f      	beq.n	8004aba <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8004a3e:	ea12 0701 	ands.w	r7, r2, r1
 8004a42:	d0f6      	beq.n	8004a32 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004a44:	089e      	lsrs	r6, r3, #2
 8004a46:	1cb5      	adds	r5, r6, #2
 8004a48:	4c1d      	ldr	r4, [pc, #116]	; (8004ac0 <HAL_GPIO_DeInit+0xf0>)
 8004a4a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004a4e:	f003 0c03 	and.w	ip, r3, #3
 8004a52:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004a56:	f04f 0e07 	mov.w	lr, #7
 8004a5a:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004a5e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004a62:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004a66:	d0bb      	beq.n	80049e0 <HAL_GPIO_DeInit+0x10>
 8004a68:	4d16      	ldr	r5, [pc, #88]	; (8004ac4 <HAL_GPIO_DeInit+0xf4>)
 8004a6a:	42a8      	cmp	r0, r5
 8004a6c:	d005      	beq.n	8004a7a <HAL_GPIO_DeInit+0xaa>
 8004a6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a72:	42a8      	cmp	r0, r5
 8004a74:	d0b2      	beq.n	80049dc <HAL_GPIO_DeInit+0xc>
 8004a76:	2507      	movs	r5, #7
 8004a78:	e7b3      	b.n	80049e2 <HAL_GPIO_DeInit+0x12>
 8004a7a:	2501      	movs	r5, #1
 8004a7c:	e7b1      	b.n	80049e2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8004a7e:	4c12      	ldr	r4, [pc, #72]	; (8004ac8 <HAL_GPIO_DeInit+0xf8>)
 8004a80:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004a84:	ea25 0507 	bic.w	r5, r5, r7
 8004a88:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004a8c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004a90:	ea25 0507 	bic.w	r5, r5, r7
 8004a94:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004a98:	6825      	ldr	r5, [r4, #0]
 8004a9a:	ea25 0507 	bic.w	r5, r5, r7
 8004a9e:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004aa0:	6865      	ldr	r5, [r4, #4]
 8004aa2:	ea25 0707 	bic.w	r7, r5, r7
 8004aa6:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004aa8:	4d05      	ldr	r5, [pc, #20]	; (8004ac0 <HAL_GPIO_DeInit+0xf0>)
 8004aaa:	3602      	adds	r6, #2
 8004aac:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004ab0:	ea24 040e 	bic.w	r4, r4, lr
 8004ab4:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004ab8:	e797      	b.n	80049ea <HAL_GPIO_DeInit+0x1a>
  }
}
 8004aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	48000400 	.word	0x48000400
 8004ac8:	58000800 	.word	0x58000800

08004acc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004acc:	b10a      	cbz	r2, 8004ad2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ace:	6181      	str	r1, [r0, #24]
 8004ad0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ad2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ad6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ad8:	ea01 0203 	and.w	r2, r1, r3
 8004adc:	ea21 0103 	bic.w	r1, r1, r3
 8004ae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ae4:	6181      	str	r1, [r0, #24]
}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ae8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	4203      	tst	r3, r0
 8004af0:	d100      	bne.n	8004af4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004af2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004af4:	4b02      	ldr	r3, [pc, #8]	; (8004b00 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004af6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004af8:	f7fe fc30 	bl	800335c <HAL_GPIO_EXTI_Callback>
}
 8004afc:	e7f9      	b.n	8004af2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004afe:	bf00      	nop
 8004b00:	58000800 	.word	0x58000800

08004b04 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b04:	4a02      	ldr	r2, [pc, #8]	; (8004b10 <HAL_PWR_EnableBkUpAccess+0xc>)
 8004b06:	6813      	ldr	r3, [r2, #0]
 8004b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0c:	6013      	str	r3, [r2, #0]
}
 8004b0e:	4770      	bx	lr
 8004b10:	58000400 	.word	0x58000400

08004b14 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004b14:	b510      	push	{r4, lr}
 8004b16:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004b18:	b9a0      	cbnz	r0, 8004b44 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004b22:	d10a      	bne.n	8004b3a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b24:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <HAL_PWR_EnterSLEEPMode+0x48>)
 8004b26:	6913      	ldr	r3, [r2, #16]
 8004b28:	f023 0304 	bic.w	r3, r3, #4
 8004b2c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004b2e:	2c01      	cmp	r4, #1
 8004b30:	d010      	beq.n	8004b54 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004b32:	bf40      	sev
    __WFE();
 8004b34:	bf20      	wfe
    __WFE();
 8004b36:	bf20      	wfe
  }
}
 8004b38:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004b3a:	f000 f821 	bl	8004b80 <HAL_PWREx_DisableLowPowerRunMode>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_PWR_EnterSLEEPMode+0x10>
 8004b42:	e7f9      	b.n	8004b38 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004b4c:	d1ea      	bne.n	8004b24 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8004b4e:	f000 f80f 	bl	8004b70 <HAL_PWREx_EnableLowPowerRunMode>
 8004b52:	e7e7      	b.n	8004b24 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004b54:	bf30      	wfi
 8004b56:	e7ef      	b.n	8004b38 <HAL_PWR_EnterSLEEPMode+0x24>
 8004b58:	58000400 	.word	0x58000400
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8004b60:	4b02      	ldr	r3, [pc, #8]	; (8004b6c <HAL_PWREx_GetVoltageRange+0xc>)
 8004b62:	6818      	ldr	r0, [r3, #0]
}
 8004b64:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	58000400 	.word	0x58000400

08004b70 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004b70:	4a02      	ldr	r2, [pc, #8]	; (8004b7c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8004b72:	6813      	ldr	r3, [r2, #0]
 8004b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b78:	6013      	str	r3, [r2, #0]
}
 8004b7a:	4770      	bx	lr
 8004b7c:	58000400 	.word	0x58000400

08004b80 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004b80:	4a0f      	ldr	r2, [pc, #60]	; (8004bc0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b88:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2232      	movs	r2, #50	; 0x32
 8004b90:	fb02 f303 	mul.w	r3, r2, r3
 8004b94:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004b9c:	e000      	b.n	8004ba0 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8004b9e:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004ba0:	4a07      	ldr	r2, [pc, #28]	; (8004bc0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004ba2:	6952      	ldr	r2, [r2, #20]
 8004ba4:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004ba8:	d001      	beq.n	8004bae <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f7      	bne.n	8004b9e <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004bae:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004bb6:	d101      	bne.n	8004bbc <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8004bb8:	2000      	movs	r0, #0
 8004bba:	4770      	bx	lr
    return HAL_TIMEOUT;
 8004bbc:	2003      	movs	r0, #3
}
 8004bbe:	4770      	bx	lr
 8004bc0:	58000400 	.word	0x58000400
 8004bc4:	20000074 	.word	0x20000074
 8004bc8:	431bde83 	.word	0x431bde83

08004bcc <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004bcc:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8004bce:	6813      	ldr	r3, [r2, #0]
 8004bd0:	f023 0307 	bic.w	r3, r3, #7
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004bda:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004bdc:	6913      	ldr	r3, [r2, #16]
 8004bde:	f043 0304 	orr.w	r3, r3, #4
 8004be2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004be4:	2801      	cmp	r0, #1
 8004be6:	d008      	beq.n	8004bfa <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004be8:	bf40      	sev
    __WFE();
 8004bea:	bf20      	wfe
    __WFE();
 8004bec:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8004bf0:	6913      	ldr	r3, [r2, #16]
 8004bf2:	f023 0304 	bic.w	r3, r3, #4
 8004bf6:	6113      	str	r3, [r2, #16]
}
 8004bf8:	4770      	bx	lr
    __WFI();
 8004bfa:	bf30      	wfi
 8004bfc:	e7f7      	b.n	8004bee <HAL_PWREx_EnterSTOP2Mode+0x22>
 8004bfe:	bf00      	nop
 8004c00:	58000400 	.word	0x58000400
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c08:	b530      	push	{r4, r5, lr}
 8004c0a:	b089      	sub	sp, #36	; 0x24
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004c10:	4b2a      	ldr	r3, [pc, #168]	; (8004cbc <RCC_SetFlashLatency+0xb4>)
 8004c12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c16:	9006      	str	r0, [sp, #24]
 8004c18:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004c1c:	f103 0208 	add.w	r2, r3, #8
 8004c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c24:	9004      	str	r0, [sp, #16]
 8004c26:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004c2a:	ad01      	add	r5, sp, #4
 8004c2c:	3310      	adds	r3, #16
 8004c2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c32:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c36:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8004c3a:	d007      	beq.n	8004c4c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e014      	b.n	8004c6a <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8004c40:	aa08      	add	r2, sp, #32
 8004c42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c46:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004c4a:	e01e      	b.n	8004c8a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d808      	bhi.n	8004c64 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c52:	aa08      	add	r2, sp, #32
 8004c54:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004c58:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004c5c:	42a2      	cmp	r2, r4
 8004c5e:	d2ef      	bcs.n	8004c40 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c60:	3301      	adds	r3, #1
 8004c62:	e7f4      	b.n	8004c4e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c64:	2500      	movs	r5, #0
 8004c66:	e010      	b.n	8004c8a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004c68:	3301      	adds	r3, #1
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d80c      	bhi.n	8004c88 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004c6e:	aa08      	add	r2, sp, #32
 8004c70:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004c74:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004c78:	42a2      	cmp	r2, r4
 8004c7a:	d3f5      	bcc.n	8004c68 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c7c:	aa08      	add	r2, sp, #32
 8004c7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c82:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004c86:	e000      	b.n	8004c8a <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c88:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c8a:	4a0d      	ldr	r2, [pc, #52]	; (8004cc0 <RCC_SetFlashLatency+0xb8>)
 8004c8c:	6813      	ldr	r3, [r2, #0]
 8004c8e:	f023 0307 	bic.w	r3, r3, #7
 8004c92:	432b      	orrs	r3, r5
 8004c94:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c96:	f7fd f935 	bl	8001f04 <HAL_GetTick>
 8004c9a:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004c9c:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <RCC_SetFlashLatency+0xb8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	42ab      	cmp	r3, r5
 8004ca6:	d006      	beq.n	8004cb6 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ca8:	f7fd f92c 	bl	8001f04 <HAL_GetTick>
 8004cac:	1b00      	subs	r0, r0, r4
 8004cae:	2802      	cmp	r0, #2
 8004cb0:	d9f4      	bls.n	8004c9c <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8004cb2:	2003      	movs	r0, #3
 8004cb4:	e000      	b.n	8004cb8 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8004cb6:	2000      	movs	r0, #0
}
 8004cb8:	b009      	add	sp, #36	; 0x24
 8004cba:	bd30      	pop	{r4, r5, pc}
 8004cbc:	08017f28 	.word	0x08017f28
 8004cc0:	58004000 	.word	0x58004000

08004cc4 <RCC_SetFlashLatencyFromMSIRange>:
{
 8004cc4:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004cc6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8004ccc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	4a08      	ldr	r2, [pc, #32]	; (8004d00 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8004cde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ce2:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004ce6:	f7ff ff3b 	bl	8004b60 <HAL_PWREx_GetVoltageRange>
 8004cea:	4601      	mov	r1, r0
 8004cec:	4805      	ldr	r0, [pc, #20]	; (8004d04 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8004cee:	fba0 3004 	umull	r3, r0, r0, r4
 8004cf2:	0c80      	lsrs	r0, r0, #18
 8004cf4:	f7ff ff88 	bl	8004c08 <RCC_SetFlashLatency>
}
 8004cf8:	bd10      	pop	{r4, pc}
 8004cfa:	bf00      	nop
 8004cfc:	08018668 	.word	0x08018668
 8004d00:	08018608 	.word	0x08018608
 8004d04:	431bde83 	.word	0x431bde83

08004d08 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0c:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d14:	f011 010c 	ands.w	r1, r1, #12
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCC_GetSysClockFreq+0x28>
 8004d1a:	290c      	cmp	r1, #12
 8004d1c:	d006      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d1e:	2904      	cmp	r1, #4
 8004d20:	d047      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d22:	2908      	cmp	r1, #8
 8004d24:	d03b      	beq.n	8004d9e <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8004d26:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8004d28:	4610      	mov	r0, r2
 8004d2a:	e026      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d1f6      	bne.n	8004d1e <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f013 0308 	ands.w	r3, r3, #8
 8004d3a:	d00d      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x50>
 8004d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f013 0308 	ands.w	r3, r3, #8
 8004d46:	d124      	bne.n	8004d92 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d4c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004d50:	4a2e      	ldr	r2, [pc, #184]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x104>)
 8004d52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d56:	e00e      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	f012 0f08 	tst.w	r2, #8
 8004d62:	d112      	bne.n	8004d8a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d6c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004d70:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x104>)
 8004d72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d76:	b1d1      	cbz	r1, 8004dae <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004d78:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d01a      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004d88:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	e7ee      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x68>
 8004d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d96:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004d98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d9c:	e7d8      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8004da8:	d106      	bne.n	8004db8 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8004daa:	4819      	ldr	r0, [pc, #100]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dac:	e7e5      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8004dae:	4610      	mov	r0, r2
 8004db0:	e7e3      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004db2:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004db4:	4817      	ldr	r0, [pc, #92]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004db6:	e7e0      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004db8:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8004dba:	4816      	ldr	r0, [pc, #88]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dbc:	e7dd      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d009      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0xd8>
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d108      	bne.n	8004de2 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004dda:	d115      	bne.n	8004e08 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004ddc:	4a0c      	ldr	r2, [pc, #48]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dde:	e000      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8004de0:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de6:	68d8      	ldr	r0, [r3, #12]
 8004de8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004dec:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004df0:	68d8      	ldr	r0, [r3, #12]
 8004df2:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8004df6:	3001      	adds	r0, #1
 8004df8:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004dfc:	68d8      	ldr	r0, [r3, #12]
 8004dfe:	0f40      	lsrs	r0, r0, #29
 8004e00:	3001      	adds	r0, #1
 8004e02:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8004e06:	e7bf      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8004e08:	4a02      	ldr	r2, [pc, #8]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e0a:	e7ea      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0xda>
 8004e0c:	08018668 	.word	0x08018668
 8004e10:	01e84800 	.word	0x01e84800
 8004e14:	00f42400 	.word	0x00f42400

08004e18 <HAL_RCC_GetHCLKFreq>:
{
 8004e18:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004e1a:	f7ff ff75 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e28:	4a02      	ldr	r2, [pc, #8]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x1c>)
 8004e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004e2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004e32:	bd08      	pop	{r3, pc}
 8004e34:	08018608 	.word	0x08018608

08004e38 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	f000 8311 	beq.w	8005460 <HAL_RCC_OscConfig+0x628>
{
 8004e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e40:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e46:	689d      	ldr	r5, [r3, #8]
 8004e48:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004e4c:	68de      	ldr	r6, [r3, #12]
 8004e4e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e52:	6803      	ldr	r3, [r0, #0]
 8004e54:	f013 0f20 	tst.w	r3, #32
 8004e58:	d02a      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	d065      	beq.n	8004f2a <HAL_RCC_OscConfig+0xf2>
 8004e5e:	2d0c      	cmp	r5, #12
 8004e60:	d061      	beq.n	8004f26 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e62:	6a23      	ldr	r3, [r4, #32]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80bf 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e76:	f7fd f845 	bl	8001f04 <HAL_GetTick>
 8004e7a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f013 0f02 	tst.w	r3, #2
 8004e86:	f000 80a7 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	f042 0208 	orr.w	r2, r2, #8
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004e9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ea2:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004eaa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004eae:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	f013 0f01 	tst.w	r3, #1
 8004eb6:	f000 80b5 	beq.w	8005024 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004eba:	2d08      	cmp	r5, #8
 8004ebc:	f000 80ae 	beq.w	800501c <HAL_RCC_OscConfig+0x1e4>
 8004ec0:	2d0c      	cmp	r5, #12
 8004ec2:	f000 80a8 	beq.w	8005016 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eca:	6813      	ldr	r3, [r2, #0]
 8004ecc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ed0:	68a1      	ldr	r1, [r4, #8]
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed6:	6863      	ldr	r3, [r4, #4]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004edc:	f000 80c4 	beq.w	8005068 <HAL_RCC_OscConfig+0x230>
 8004ee0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004ee4:	f000 80c5 	beq.w	8005072 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ef2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004efa:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004efc:	6863      	ldr	r3, [r4, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80c2 	beq.w	8005088 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8004f04:	f7fc fffe 	bl	8001f04 <HAL_GetTick>
 8004f08:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004f14:	f040 8086 	bne.w	8005024 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fc fff4 	bl	8001f04 <HAL_GetTick>
 8004f1c:	1bc0      	subs	r0, r0, r7
 8004f1e:	2864      	cmp	r0, #100	; 0x64
 8004f20:	d9f3      	bls.n	8004f0a <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8004f22:	2003      	movs	r0, #3
 8004f24:	e2a9      	b.n	800547a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f26:	2e01      	cmp	r6, #1
 8004f28:	d19b      	bne.n	8004e62 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f2a:	6a23      	ldr	r3, [r4, #32]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8299 	beq.w	8005464 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f013 0f08 	tst.w	r3, #8
 8004f3e:	d029      	beq.n	8004f94 <HAL_RCC_OscConfig+0x15c>
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4a:	4298      	cmp	r0, r3
 8004f4c:	d92a      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f4e:	f7ff feb9 	bl	8004cc4 <RCC_SetFlashLatencyFromMSIRange>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	f040 8288 	bne.w	8005468 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	f042 0208 	orr.w	r2, r2, #8
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004f6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f70:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004f78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004f7c:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f7e:	f7ff ff4b 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004f82:	4bba      	ldr	r3, [pc, #744]	; (800526c <HAL_RCC_OscConfig+0x434>)
 8004f84:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004f86:	4bba      	ldr	r3, [pc, #744]	; (8005270 <HAL_RCC_OscConfig+0x438>)
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	f7fc ffb9 	bl	8001f00 <HAL_InitTick>
        if (status != HAL_OK)
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d08e      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x78>
 8004f92:	e272      	b.n	800547a <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa2:	e7d2      	b.n	8004f4a <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	f042 0208 	orr.w	r2, r2, #8
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004fb6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004fc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004fc8:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004fcc:	f7ff fe7a 	bl	8004cc4 <RCC_SetFlashLatencyFromMSIRange>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d0d4      	beq.n	8004f7e <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	e250      	b.n	800547a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fd8:	f7fc ff94 	bl	8001f04 <HAL_GetTick>
 8004fdc:	1bc0      	subs	r0, r0, r7
 8004fde:	2802      	cmp	r0, #2
 8004fe0:	f67f af4c 	bls.w	8004e7c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004fe4:	2003      	movs	r0, #3
 8004fe6:	e248      	b.n	800547a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fec:	6813      	ldr	r3, [r2, #0]
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ff4:	f7fc ff86 	bl	8001f04 <HAL_GetTick>
 8004ff8:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f013 0f02 	tst.w	r3, #2
 8005004:	f43f af54 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005008:	f7fc ff7c 	bl	8001f04 <HAL_GetTick>
 800500c:	1bc0      	subs	r0, r0, r7
 800500e:	2802      	cmp	r0, #2
 8005010:	d9f3      	bls.n	8004ffa <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8005012:	2003      	movs	r0, #3
 8005014:	e231      	b.n	800547a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005016:	2e03      	cmp	r6, #3
 8005018:	f47f af55 	bne.w	8004ec6 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800501c:	6863      	ldr	r3, [r4, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8224 	beq.w	800546c <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	f013 0f02 	tst.w	r3, #2
 800502a:	d056      	beq.n	80050da <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800502c:	2d04      	cmp	r5, #4
 800502e:	d03d      	beq.n	80050ac <HAL_RCC_OscConfig+0x274>
 8005030:	2d0c      	cmp	r5, #12
 8005032:	d039      	beq.n	80050a8 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 808a 	beq.w	8005150 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800503c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005040:	6813      	ldr	r3, [r2, #0]
 8005042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005046:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005048:	f7fc ff5c 	bl	8001f04 <HAL_GetTick>
 800504c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005058:	d136      	bne.n	80050c8 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505a:	f7fc ff53 	bl	8001f04 <HAL_GetTick>
 800505e:	1b80      	subs	r0, r0, r6
 8005060:	2802      	cmp	r0, #2
 8005062:	d9f4      	bls.n	800504e <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8005064:	2003      	movs	r0, #3
 8005066:	e208      	b.n	800547a <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005068:	6813      	ldr	r3, [r2, #0]
 800506a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506e:	6013      	str	r3, [r2, #0]
}
 8005070:	e744      	b.n	8004efc <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800507c:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005084:	601a      	str	r2, [r3, #0]
}
 8005086:	e739      	b.n	8004efc <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005088:	f7fc ff3c 	bl	8001f04 <HAL_GetTick>
 800508c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800508e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005098:	d0c4      	beq.n	8005024 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800509a:	f7fc ff33 	bl	8001f04 <HAL_GetTick>
 800509e:	1bc0      	subs	r0, r0, r7
 80050a0:	2864      	cmp	r0, #100	; 0x64
 80050a2:	d9f4      	bls.n	800508e <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 80050a4:	2003      	movs	r0, #3
 80050a6:	e1e8      	b.n	800547a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050a8:	2e02      	cmp	r6, #2
 80050aa:	d1c3      	bne.n	8005034 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 81de 	beq.w	8005470 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80050b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ba:	6853      	ldr	r3, [r2, #4]
 80050bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80050c0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80050c4:	6053      	str	r3, [r2, #4]
}
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80050ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ce:	6853      	ldr	r3, [r2, #4]
 80050d0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80050d4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80050d8:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	f013 0f08 	tst.w	r3, #8
 80050e0:	d07e      	beq.n	80051e0 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050e2:	69a3      	ldr	r3, [r4, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d062      	beq.n	80051ae <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80050f0:	69e1      	ldr	r1, [r4, #28]
 80050f2:	f003 0210 	and.w	r2, r3, #16
 80050f6:	4291      	cmp	r1, r2
 80050f8:	d011      	beq.n	800511e <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80050fa:	f003 0203 	and.w	r2, r3, #3
 80050fe:	2a02      	cmp	r2, #2
 8005100:	f000 81b8 	beq.w	8005474 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005104:	f013 0f01 	tst.w	r3, #1
 8005108:	d138      	bne.n	800517c <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800510a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005112:	f023 0310 	bic.w	r3, r3, #16
 8005116:	69e1      	ldr	r1, [r4, #28]
 8005118:	430b      	orrs	r3, r1
 800511a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800511e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005122:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800512e:	f7fc fee9 	bl	8001f04 <HAL_GetTick>
 8005132:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513c:	f013 0f02 	tst.w	r3, #2
 8005140:	d14e      	bne.n	80051e0 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005142:	f7fc fedf 	bl	8001f04 <HAL_GetTick>
 8005146:	1b80      	subs	r0, r0, r6
 8005148:	2811      	cmp	r0, #17
 800514a:	d9f3      	bls.n	8005134 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 800514c:	2003      	movs	r0, #3
 800514e:	e194      	b.n	800547a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005154:	6813      	ldr	r3, [r2, #0]
 8005156:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800515a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800515c:	f7fc fed2 	bl	8001f04 <HAL_GetTick>
 8005160:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800516c:	d0b5      	beq.n	80050da <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800516e:	f7fc fec9 	bl	8001f04 <HAL_GetTick>
 8005172:	1b80      	subs	r0, r0, r6
 8005174:	2802      	cmp	r0, #2
 8005176:	d9f4      	bls.n	8005162 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005178:	2003      	movs	r0, #3
 800517a:	e17e      	b.n	800547a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800517c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005180:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 800518c:	f7fc feba 	bl	8001f04 <HAL_GetTick>
 8005190:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800519a:	f013 0f02 	tst.w	r3, #2
 800519e:	d0b4      	beq.n	800510a <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a0:	f7fc feb0 	bl	8001f04 <HAL_GetTick>
 80051a4:	1b80      	subs	r0, r0, r6
 80051a6:	2811      	cmp	r0, #17
 80051a8:	d9f3      	bls.n	8005192 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 80051aa:	2003      	movs	r0, #3
 80051ac:	e165      	b.n	800547a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80051ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80051be:	f7fc fea1 	bl	8001f04 <HAL_GetTick>
 80051c2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051cc:	f013 0f02 	tst.w	r3, #2
 80051d0:	d006      	beq.n	80051e0 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d2:	f7fc fe97 	bl	8001f04 <HAL_GetTick>
 80051d6:	1b80      	subs	r0, r0, r6
 80051d8:	2811      	cmp	r0, #17
 80051da:	d9f3      	bls.n	80051c4 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80051dc:	2003      	movs	r0, #3
 80051de:	e14c      	b.n	800547a <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	f013 0f04 	tst.w	r3, #4
 80051e6:	f000 80b8 	beq.w	800535a <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80051ea:	4b22      	ldr	r3, [pc, #136]	; (8005274 <HAL_RCC_OscConfig+0x43c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80051f2:	d110      	bne.n	8005216 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 80051f4:	f7ff fc86 	bl	8004b04 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80051f8:	f7fc fe84 	bl	8001f04 <HAL_GetTick>
 80051fc:	4606      	mov	r6, r0
 80051fe:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <HAL_RCC_OscConfig+0x43c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005206:	d106      	bne.n	8005216 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fc fe7c 	bl	8001f04 <HAL_GetTick>
 800520c:	1b80      	subs	r0, r0, r6
 800520e:	2802      	cmp	r0, #2
 8005210:	d9f5      	bls.n	80051fe <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8005212:	2003      	movs	r0, #3
 8005214:	e131      	b.n	800547a <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005216:	68e3      	ldr	r3, [r4, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d068      	beq.n	80052ee <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800521c:	2b85      	cmp	r3, #133	; 0x85
 800521e:	d001      	beq.n	8005224 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005220:	2b05      	cmp	r3, #5
 8005222:	d107      	bne.n	8005234 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005228:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005234:	f7fc fe66 	bl	8001f04 <HAL_GetTick>
 8005238:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800523a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800523e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800524a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005252:	f013 0f02 	tst.w	r3, #2
 8005256:	d10f      	bne.n	8005278 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005258:	f7fc fe54 	bl	8001f04 <HAL_GetTick>
 800525c:	1b80      	subs	r0, r0, r6
 800525e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005262:	4298      	cmp	r0, r3
 8005264:	d9f1      	bls.n	800524a <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8005266:	2003      	movs	r0, #3
 8005268:	e107      	b.n	800547a <HAL_RCC_OscConfig+0x642>
 800526a:	bf00      	nop
 800526c:	20000074 	.word	0x20000074
 8005270:	20000078 	.word	0x20000078
 8005274:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005278:	68e3      	ldr	r3, [r4, #12]
 800527a:	2b81      	cmp	r3, #129	; 0x81
 800527c:	d001      	beq.n	8005282 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800527e:	2b85      	cmp	r3, #133	; 0x85
 8005280:	d11a      	bne.n	80052b8 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8005282:	f7fc fe3f 	bl	8001f04 <HAL_GetTick>
 8005286:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800528c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80052a4:	d159      	bne.n	800535a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fc fe2d 	bl	8001f04 <HAL_GetTick>
 80052aa:	1b80      	subs	r0, r0, r6
 80052ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80052b0:	4298      	cmp	r0, r3
 80052b2:	d9f1      	bls.n	8005298 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80052b4:	2003      	movs	r0, #3
 80052b6:	e0e0      	b.n	800547a <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 80052b8:	f7fc fe24 	bl	8001f04 <HAL_GetTick>
 80052bc:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80052be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80052ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80052da:	d03e      	beq.n	800535a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052dc:	f7fc fe12 	bl	8001f04 <HAL_GetTick>
 80052e0:	1b80      	subs	r0, r0, r6
 80052e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80052e6:	4298      	cmp	r0, r3
 80052e8:	d9f1      	bls.n	80052ce <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 80052ea:	2003      	movs	r0, #3
 80052ec:	e0c5      	b.n	800547a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80052ee:	f7fc fe09 	bl	8001f04 <HAL_GetTick>
 80052f2:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80052f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005310:	d008      	beq.n	8005324 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005312:	f7fc fdf7 	bl	8001f04 <HAL_GetTick>
 8005316:	1b80      	subs	r0, r0, r6
 8005318:	f241 3388 	movw	r3, #5000	; 0x1388
 800531c:	4298      	cmp	r0, r3
 800531e:	d9f1      	bls.n	8005304 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8005320:	2003      	movs	r0, #3
 8005322:	e0aa      	b.n	800547a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8005324:	f7fc fdee 	bl	8001f04 <HAL_GetTick>
 8005328:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800532a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800532e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005332:	f023 0301 	bic.w	r3, r3, #1
 8005336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800533a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	f013 0f02 	tst.w	r3, #2
 8005346:	d008      	beq.n	800535a <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005348:	f7fc fddc 	bl	8001f04 <HAL_GetTick>
 800534c:	1b80      	subs	r0, r0, r6
 800534e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005352:	4298      	cmp	r0, r3
 8005354:	d9f1      	bls.n	800533a <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8005356:	2003      	movs	r0, #3
 8005358:	e08f      	b.n	800547a <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800535a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 808b 	beq.w	8005478 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005362:	2d0c      	cmp	r5, #12
 8005364:	d060      	beq.n	8005428 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005366:	2b02      	cmp	r3, #2
 8005368:	d016      	beq.n	8005398 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800536a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800536e:	6813      	ldr	r3, [r2, #0]
 8005370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005374:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005376:	f7fc fdc5 	bl	8001f04 <HAL_GetTick>
 800537a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800537c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005386:	d148      	bne.n	800541a <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800538c:	68d1      	ldr	r1, [r2, #12]
 800538e:	4b41      	ldr	r3, [pc, #260]	; (8005494 <HAL_RCC_OscConfig+0x65c>)
 8005390:	400b      	ands	r3, r1
 8005392:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005394:	2000      	movs	r0, #0
 8005396:	e070      	b.n	800547a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80053a4:	f7fc fdae 	bl	8001f04 <HAL_GetTick>
 80053a8:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80053b4:	d12a      	bne.n	800540c <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053ba:	68d3      	ldr	r3, [r2, #12]
 80053bc:	4936      	ldr	r1, [pc, #216]	; (8005498 <HAL_RCC_OscConfig+0x660>)
 80053be:	4019      	ands	r1, r3
 80053c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80053c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80053c4:	4303      	orrs	r3, r0
 80053c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80053c8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80053cc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80053ce:	4303      	orrs	r3, r0
 80053d0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80053d2:	4303      	orrs	r3, r0
 80053d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80053d6:	4303      	orrs	r3, r0
 80053d8:	430b      	orrs	r3, r1
 80053da:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80053dc:	6813      	ldr	r3, [r2, #0]
 80053de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053e2:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053e4:	68d3      	ldr	r3, [r2, #12]
 80053e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ea:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80053ec:	f7fc fd8a 	bl	8001f04 <HAL_GetTick>
 80053f0:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80053f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80053fc:	d13e      	bne.n	800547c <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fe:	f7fc fd81 	bl	8001f04 <HAL_GetTick>
 8005402:	1b00      	subs	r0, r0, r4
 8005404:	280a      	cmp	r0, #10
 8005406:	d9f4      	bls.n	80053f2 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8005408:	2003      	movs	r0, #3
 800540a:	e036      	b.n	800547a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800540c:	f7fc fd7a 	bl	8001f04 <HAL_GetTick>
 8005410:	1b40      	subs	r0, r0, r5
 8005412:	280a      	cmp	r0, #10
 8005414:	d9c9      	bls.n	80053aa <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8005416:	2003      	movs	r0, #3
 8005418:	e02f      	b.n	800547a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800541a:	f7fc fd73 	bl	8001f04 <HAL_GetTick>
 800541e:	1b00      	subs	r0, r0, r4
 8005420:	280a      	cmp	r0, #10
 8005422:	d9ab      	bls.n	800537c <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8005424:	2003      	movs	r0, #3
 8005426:	e028      	b.n	800547a <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005428:	2b01      	cmp	r3, #1
 800542a:	d029      	beq.n	8005480 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 800542c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005430:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005432:	f003 0103 	and.w	r1, r3, #3
 8005436:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005438:	4291      	cmp	r1, r2
 800543a:	d123      	bne.n	8005484 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800543c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005442:	428a      	cmp	r2, r1
 8005444:	d120      	bne.n	8005488 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005446:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800544a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800544c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005450:	d11c      	bne.n	800548c <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005452:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8005456:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005458:	4293      	cmp	r3, r2
 800545a:	d119      	bne.n	8005490 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 800545c:	2000      	movs	r0, #0
 800545e:	e00c      	b.n	800547a <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8005460:	2001      	movs	r0, #1
}
 8005462:	4770      	bx	lr
        return HAL_ERROR;
 8005464:	2001      	movs	r0, #1
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8005468:	2001      	movs	r0, #1
 800546a:	e006      	b.n	800547a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800546c:	2001      	movs	r0, #1
 800546e:	e004      	b.n	800547a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005470:	2001      	movs	r0, #1
 8005472:	e002      	b.n	800547a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005474:	2001      	movs	r0, #1
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8005478:	2000      	movs	r0, #0
}
 800547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800547c:	2000      	movs	r0, #0
 800547e:	e7fc      	b.n	800547a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005480:	2001      	movs	r0, #1
 8005482:	e7fa      	b.n	800547a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005484:	2001      	movs	r0, #1
 8005486:	e7f8      	b.n	800547a <HAL_RCC_OscConfig+0x642>
 8005488:	2001      	movs	r0, #1
 800548a:	e7f6      	b.n	800547a <HAL_RCC_OscConfig+0x642>
 800548c:	2001      	movs	r0, #1
 800548e:	e7f4      	b.n	800547a <HAL_RCC_OscConfig+0x642>
 8005490:	2001      	movs	r0, #1
 8005492:	e7f2      	b.n	800547a <HAL_RCC_OscConfig+0x642>
 8005494:	eefefffc 	.word	0xeefefffc
 8005498:	11c1808c 	.word	0x11c1808c

0800549c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800549c:	2800      	cmp	r0, #0
 800549e:	f000 8127 	beq.w	80056f0 <HAL_RCC_ClockConfig+0x254>
{
 80054a2:	b570      	push	{r4, r5, r6, lr}
 80054a4:	460c      	mov	r4, r1
 80054a6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054a8:	4b93      	ldr	r3, [pc, #588]	; (80056f8 <HAL_RCC_ClockConfig+0x25c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	428b      	cmp	r3, r1
 80054b2:	d32d      	bcc.n	8005510 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	f013 0f02 	tst.w	r3, #2
 80054ba:	d13f      	bne.n	800553c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	f013 0f20 	tst.w	r3, #32
 80054c2:	d153      	bne.n	800556c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054ca:	d16a      	bne.n	80055a2 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	f013 0f04 	tst.w	r3, #4
 80054d2:	f040 8083 	bne.w	80055dc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d6:	682b      	ldr	r3, [r5, #0]
 80054d8:	f013 0f08 	tst.w	r3, #8
 80054dc:	f040 8097 	bne.w	800560e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	f013 0f01 	tst.w	r3, #1
 80054e6:	f000 80de 	beq.w	80056a6 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ea:	686b      	ldr	r3, [r5, #4]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	f000 80a8 	beq.w	8005642 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	f000 80ad 	beq.w	8005652 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f040 80b2 	bne.w	8005662 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80054fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	f012 0f02 	tst.w	r2, #2
 8005508:	f040 80b1 	bne.w	800566e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800550c:	2001      	movs	r0, #1
 800550e:	e0ee      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005510:	4a79      	ldr	r2, [pc, #484]	; (80056f8 <HAL_RCC_ClockConfig+0x25c>)
 8005512:	6813      	ldr	r3, [r2, #0]
 8005514:	f023 0307 	bic.w	r3, r3, #7
 8005518:	430b      	orrs	r3, r1
 800551a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800551c:	f7fc fcf2 	bl	8001f04 <HAL_GetTick>
 8005520:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005522:	4b75      	ldr	r3, [pc, #468]	; (80056f8 <HAL_RCC_ClockConfig+0x25c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	42a3      	cmp	r3, r4
 800552c:	d0c2      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800552e:	f7fc fce9 	bl	8001f04 <HAL_GetTick>
 8005532:	1b80      	subs	r0, r0, r6
 8005534:	2802      	cmp	r0, #2
 8005536:	d9f4      	bls.n	8005522 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8005538:	2003      	movs	r0, #3
 800553a:	e0d8      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800553c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800553e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005542:	688a      	ldr	r2, [r1, #8]
 8005544:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005548:	4313      	orrs	r3, r2
 800554a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800554c:	f7fc fcda 	bl	8001f04 <HAL_GetTick>
 8005550:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800555c:	d1ae      	bne.n	80054bc <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800555e:	f7fc fcd1 	bl	8001f04 <HAL_GetTick>
 8005562:	1b80      	subs	r0, r0, r6
 8005564:	2802      	cmp	r0, #2
 8005566:	d9f4      	bls.n	8005552 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8005568:	2003      	movs	r0, #3
 800556a:	e0c0      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800556c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800556e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005572:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8005576:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005580:	f7fc fcc0 	bl	8001f04 <HAL_GetTick>
 8005584:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800558e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005592:	d197      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005594:	f7fc fcb6 	bl	8001f04 <HAL_GetTick>
 8005598:	1b80      	subs	r0, r0, r6
 800559a:	2802      	cmp	r0, #2
 800559c:	d9f3      	bls.n	8005586 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800559e:	2003      	movs	r0, #3
 80055a0:	e0a5      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80055a2:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80055a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055a8:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80055ac:	f023 030f 	bic.w	r3, r3, #15
 80055b0:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80055b4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80055b8:	f7fc fca4 	bl	8001f04 <HAL_GetTick>
 80055bc:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80055be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80055ca:	f47f af7f 	bne.w	80054cc <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80055ce:	f7fc fc99 	bl	8001f04 <HAL_GetTick>
 80055d2:	1b80      	subs	r0, r0, r6
 80055d4:	2802      	cmp	r0, #2
 80055d6:	d9f2      	bls.n	80055be <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80055d8:	2003      	movs	r0, #3
 80055da:	e088      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80055dc:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80055de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055e2:	688a      	ldr	r2, [r1, #8]
 80055e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055e8:	4313      	orrs	r3, r2
 80055ea:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80055ec:	f7fc fc8a 	bl	8001f04 <HAL_GetTick>
 80055f0:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80055f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80055fc:	f47f af6b 	bne.w	80054d6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005600:	f7fc fc80 	bl	8001f04 <HAL_GetTick>
 8005604:	1b80      	subs	r0, r0, r6
 8005606:	2802      	cmp	r0, #2
 8005608:	d9f3      	bls.n	80055f2 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800560a:	2003      	movs	r0, #3
 800560c:	e06f      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800560e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005614:	6893      	ldr	r3, [r2, #8]
 8005616:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800561a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800561e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005620:	f7fc fc70 	bl	8001f04 <HAL_GetTick>
 8005624:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005630:	f47f af56 	bne.w	80054e0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005634:	f7fc fc66 	bl	8001f04 <HAL_GetTick>
 8005638:	1b80      	subs	r0, r0, r6
 800563a:	2802      	cmp	r0, #2
 800563c:	d9f3      	bls.n	8005626 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800563e:	2003      	movs	r0, #3
 8005640:	e055      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800564c:	d10f      	bne.n	800566e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800564e:	2001      	movs	r0, #1
 8005650:	e04d      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800565c:	d107      	bne.n	800566e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800565e:	2001      	movs	r0, #1
 8005660:	e045      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800566c:	d042      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800566e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005672:	688a      	ldr	r2, [r1, #8]
 8005674:	f022 0203 	bic.w	r2, r2, #3
 8005678:	4313      	orrs	r3, r2
 800567a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800567c:	f7fc fc42 	bl	8001f04 <HAL_GetTick>
 8005680:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568c:	686a      	ldr	r2, [r5, #4]
 800568e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005692:	d008      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005694:	f7fc fc36 	bl	8001f04 <HAL_GetTick>
 8005698:	1b80      	subs	r0, r0, r6
 800569a:	f241 3388 	movw	r3, #5000	; 0x1388
 800569e:	4298      	cmp	r0, r3
 80056a0:	d9ef      	bls.n	8005682 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80056a2:	2003      	movs	r0, #3
 80056a4:	e023      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056a6:	4b14      	ldr	r3, [pc, #80]	; (80056f8 <HAL_RCC_ClockConfig+0x25c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	d915      	bls.n	80056de <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b2:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <HAL_RCC_ClockConfig+0x25c>)
 80056b4:	6813      	ldr	r3, [r2, #0]
 80056b6:	f023 0307 	bic.w	r3, r3, #7
 80056ba:	4323      	orrs	r3, r4
 80056bc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80056be:	f7fc fc21 	bl	8001f04 <HAL_GetTick>
 80056c2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c4:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <HAL_RCC_ClockConfig+0x25c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	d006      	beq.n	80056de <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80056d0:	f7fc fc18 	bl	8001f04 <HAL_GetTick>
 80056d4:	1b40      	subs	r0, r0, r5
 80056d6:	2802      	cmp	r0, #2
 80056d8:	d9f4      	bls.n	80056c4 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80056da:	2003      	movs	r0, #3
 80056dc:	e007      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80056de:	f7ff fb9b 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_RCC_ClockConfig+0x260>)
 80056e4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80056e6:	4b06      	ldr	r3, [pc, #24]	; (8005700 <HAL_RCC_ClockConfig+0x264>)
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	f7fc fc09 	bl	8001f00 <HAL_InitTick>
}
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80056f0:	2001      	movs	r0, #1
}
 80056f2:	4770      	bx	lr
        return HAL_ERROR;
 80056f4:	2001      	movs	r0, #1
 80056f6:	e7fa      	b.n	80056ee <HAL_RCC_ClockConfig+0x252>
 80056f8:	58004000 	.word	0x58004000
 80056fc:	20000074 	.word	0x20000074
 8005700:	20000078 	.word	0x20000078

08005704 <HAL_RCC_GetPCLK1Freq>:
{
 8005704:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005706:	f7ff fb87 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800570a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005714:	4a02      	ldr	r2, [pc, #8]	; (8005720 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800571a:	40d8      	lsrs	r0, r3
 800571c:	bd08      	pop	{r3, pc}
 800571e:	bf00      	nop
 8005720:	08018648 	.word	0x08018648

08005724 <HAL_RCC_GetPCLK2Freq>:
{
 8005724:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005726:	f7ff fb77 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800572a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005734:	4a02      	ldr	r2, [pc, #8]	; (8005740 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800573a:	40d8      	lsrs	r0, r3
 800573c:	bd08      	pop	{r3, pc}
 800573e:	bf00      	nop
 8005740:	08018648 	.word	0x08018648

08005744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005748:	6803      	ldr	r3, [r0, #0]
 800574a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800574e:	f040 80ab 	bne.w	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005752:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	f013 0f01 	tst.w	r3, #1
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800575c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800575e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005762:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005766:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800576a:	b292      	uxth	r2, r2
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	f013 0f02 	tst.w	r3, #2
 8005778:	d00a      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800577a:	68a2      	ldr	r2, [r4, #8]
 800577c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005780:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005784:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005788:	b292      	uxth	r2, r2
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	f013 0f20 	tst.w	r3, #32
 8005796:	d009      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005798:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800579a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800579e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80057a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 80057b2:	d00c      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057b4:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80057b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80057be:	0c02      	lsrs	r2, r0, #16
 80057c0:	0412      	lsls	r2, r2, #16
 80057c2:	ea23 0302 	bic.w	r3, r3, r2
 80057c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80057ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80057d4:	d00c      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80057d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80057e0:	0c02      	lsrs	r2, r0, #16
 80057e2:	0412      	lsls	r2, r2, #16
 80057e4:	ea23 0302 	bic.w	r3, r3, r2
 80057e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80057ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80057f6:	d00c      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80057f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80057fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005802:	0c02      	lsrs	r2, r0, #16
 8005804:	0412      	lsls	r2, r2, #16
 8005806:	ea23 0302 	bic.w	r3, r3, r2
 800580a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800580e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005818:	f040 809e 	bne.w	8005958 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005822:	f040 80aa 	bne.w	800597a <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	f413 7f80 	tst.w	r3, #256	; 0x100
 800582c:	f040 80b6 	bne.w	800599c <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	f013 0f10 	tst.w	r3, #16
 8005836:	d00e      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005838:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800583a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800583e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005842:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800584c:	68e3      	ldr	r3, [r4, #12]
 800584e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005852:	f000 80b4 	beq.w	80059be <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800585c:	d00f      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800585e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005864:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005868:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005872:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005874:	b91b      	cbnz	r3, 800587e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005876:	68cb      	ldr	r3, [r1, #12]
 8005878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005884:	d00e      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005886:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800588c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800589a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800589c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a0:	f000 8092 	beq.w	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80058a4:	4628      	mov	r0, r5
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80058a8:	f7ff f92c 	bl	8004b04 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80058ac:	f7fc fb2a 	bl	8001f04 <HAL_GetTick>
 80058b0:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80058b2:	4b48      	ldr	r3, [pc, #288]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80058ba:	d106      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058bc:	f7fc fb22 	bl	8001f04 <HAL_GetTick>
 80058c0:	1b40      	subs	r0, r0, r5
 80058c2:	2802      	cmp	r0, #2
 80058c4:	d9f5      	bls.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 80058c6:	2503      	movs	r5, #3
 80058c8:	e000      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80058ca:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80058cc:	2d00      	cmp	r5, #0
 80058ce:	f47f af41 	bne.w	8005754 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80058d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058da:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80058de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d024      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80058ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80058f0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80058f4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80058f8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80058fc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005900:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005904:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800590c:	f012 0f02 	tst.w	r2, #2
 8005910:	d10f      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8005912:	2d00      	cmp	r5, #0
 8005914:	f47f af1e 	bne.w	8005754 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005918:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800591a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800591e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005922:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800592c:	e712      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800592e:	2200      	movs	r2, #0
 8005930:	e7ec      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8005932:	f7fc fae7 	bl	8001f04 <HAL_GetTick>
 8005936:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005940:	f013 0f02 	tst.w	r3, #2
 8005944:	d1e5      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005946:	f7fc fadd 	bl	8001f04 <HAL_GetTick>
 800594a:	1b80      	subs	r0, r0, r6
 800594c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005950:	4298      	cmp	r0, r3
 8005952:	d9f1      	bls.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8005954:	2503      	movs	r5, #3
 8005956:	e7dc      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005958:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800595a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800595e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005962:	0919      	lsrs	r1, r3, #4
 8005964:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005968:	ea22 0201 	bic.w	r2, r2, r1
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005978:	e750      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800597a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800597c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005980:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005984:	0919      	lsrs	r1, r3, #4
 8005986:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800598a:	ea22 0201 	bic.w	r2, r2, r1
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800599a:	e744      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800599c:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800599e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80059a2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80059a6:	0919      	lsrs	r1, r3, #4
 80059a8:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80059ac:	ea22 0201 	bic.w	r2, r2, r1
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80059bc:	e738      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80059be:	68cb      	ldr	r3, [r1, #12]
 80059c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059c4:	60cb      	str	r3, [r1, #12]
 80059c6:	e746      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059c8:	68cb      	ldr	r3, [r1, #12]
 80059ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ce:	60cb      	str	r3, [r1, #12]
 80059d0:	e768      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80059d2:	bf00      	nop
 80059d4:	58000400 	.word	0x58000400

080059d8 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059d8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d036      	beq.n	8005a4e <HAL_RTC_DeactivateAlarm+0x76>
 80059e0:	2301      	movs	r3, #1
 80059e2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059e6:	2302      	movs	r3, #2
 80059e8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <HAL_RTC_DeactivateAlarm+0x7c>)
 80059ee:	22ca      	movs	r2, #202	; 0xca
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24
 80059f2:	2253      	movs	r2, #83	; 0x53
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80059f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80059fa:	d019      	beq.n	8005a30 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80059fc:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <HAL_RTC_DeactivateAlarm+0x7c>)
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8005a04:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005a0e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005a10:	f022 0202 	bic.w	r2, r2, #2
 8005a14:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005a16:	2202      	movs	r2, #2
 8005a18:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1a:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <HAL_RTC_DeactivateAlarm+0x7c>)
 8005a1c:	22ff      	movs	r2, #255	; 0xff
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005a20:	2301      	movs	r3, #1
 8005a22:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a26:	2300      	movs	r3, #0
 8005a28:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005a36:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a3e:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005a40:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005a48:	2201      	movs	r2, #1
 8005a4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a4c:	e7e5      	b.n	8005a1a <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8005a4e:	2002      	movs	r0, #2
}
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40002800 	.word	0x40002800

08005a58 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005a5c:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005a5e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8005a60:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005a62:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005a64:	f015 0f01 	tst.w	r5, #1
 8005a68:	d106      	bne.n	8005a78 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005a6a:	f015 0f02 	tst.w	r5, #2
 8005a6e:	d109      	bne.n	8005a84 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005a7e:	f7fc fc4f 	bl	8002320 <HAL_RTC_AlarmAEventCallback>
 8005a82:	e7f2      	b.n	8005a6a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005a84:	4b03      	ldr	r3, [pc, #12]	; (8005a94 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005a86:	2202      	movs	r2, #2
 8005a88:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 f9ee 	bl	8005e6c <HAL_RTCEx_AlarmBEventCallback>
 8005a90:	e7ee      	b.n	8005a70 <HAL_RTC_AlarmIRQHandler+0x18>
 8005a92:	bf00      	nop
 8005a94:	40002800 	.word	0x40002800

08005a98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a98:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005a9a:	4a0b      	ldr	r2, [pc, #44]	; (8005ac8 <HAL_RTC_WaitForSynchro+0x30>)
 8005a9c:	68d3      	ldr	r3, [r2, #12]
 8005a9e:	f023 0320 	bic.w	r3, r3, #32
 8005aa2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005aa4:	f7fc fa2e 	bl	8001f04 <HAL_GetTick>
 8005aa8:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <HAL_RTC_WaitForSynchro+0x30>)
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f013 0f20 	tst.w	r3, #32
 8005ab2:	d107      	bne.n	8005ac4 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ab4:	f7fc fa26 	bl	8001f04 <HAL_GetTick>
 8005ab8:	1b00      	subs	r0, r0, r4
 8005aba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005abe:	d9f4      	bls.n	8005aaa <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8005ac0:	2003      	movs	r0, #3
 8005ac2:	e000      	b.n	8005ac6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005ac4:	2000      	movs	r0, #0
}
 8005ac6:	bd10      	pop	{r4, pc}
 8005ac8:	40002800 	.word	0x40002800

08005acc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005acc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005ace:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <RTC_EnterInitMode+0x48>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ad6:	d002      	beq.n	8005ade <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8005ad8:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8005ada:	4620      	mov	r0, r4
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005ae0:	4a0c      	ldr	r2, [pc, #48]	; (8005b14 <RTC_EnterInitMode+0x48>)
 8005ae2:	68d3      	ldr	r3, [r2, #12]
 8005ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8005aea:	f7fc fa0b 	bl	8001f04 <HAL_GetTick>
 8005aee:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005af0:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005af2:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <RTC_EnterInitMode+0x48>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005afa:	d1ee      	bne.n	8005ada <RTC_EnterInitMode+0xe>
 8005afc:	2c03      	cmp	r4, #3
 8005afe:	d0ec      	beq.n	8005ada <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b00:	f7fc fa00 	bl	8001f04 <HAL_GetTick>
 8005b04:	1b43      	subs	r3, r0, r5
 8005b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b0a:	d9f2      	bls.n	8005af2 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b0c:	2403      	movs	r4, #3
 8005b0e:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8005b12:	e7ee      	b.n	8005af2 <RTC_EnterInitMode+0x26>
 8005b14:	40002800 	.word	0x40002800

08005b18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005b1c:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <RTC_ExitInitMode+0x4c>)
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b24:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f013 0f20 	tst.w	r3, #32
 8005b2c:	d107      	bne.n	8005b3e <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b2e:	f7ff ffb3 	bl	8005a98 <HAL_RTC_WaitForSynchro>
 8005b32:	4603      	mov	r3, r0
 8005b34:	b1a0      	cbz	r0, 8005b60 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005b3c:	e010      	b.n	8005b60 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b3e:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <RTC_ExitInitMode+0x4c>)
 8005b40:	6993      	ldr	r3, [r2, #24]
 8005b42:	f023 0320 	bic.w	r3, r3, #32
 8005b46:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b48:	f7ff ffa6 	bl	8005a98 <HAL_RTC_WaitForSynchro>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	b110      	cbz	r0, 8005b56 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b56:	4903      	ldr	r1, [pc, #12]	; (8005b64 <RTC_ExitInitMode+0x4c>)
 8005b58:	698a      	ldr	r2, [r1, #24]
 8005b5a:	f042 0220 	orr.w	r2, r2, #32
 8005b5e:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd10      	pop	{r4, pc}
 8005b64:	40002800 	.word	0x40002800

08005b68 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d052      	beq.n	8005c12 <HAL_RTC_Init+0xaa>
{
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b70:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005b74:	b163      	cbz	r3, 8005b90 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b76:	2302      	movs	r3, #2
 8005b78:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b7c:	4b26      	ldr	r3, [pc, #152]	; (8005c18 <HAL_RTC_Init+0xb0>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f013 0f10 	tst.w	r3, #16
 8005b84:	d009      	beq.n	8005b9a <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8005b86:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8005b90:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8005b94:	f7fc f808 	bl	8001ba8 <HAL_RTC_MspInit>
 8005b98:	e7ed      	b.n	8005b76 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b9a:	4b1f      	ldr	r3, [pc, #124]	; (8005c18 <HAL_RTC_Init+0xb0>)
 8005b9c:	22ca      	movs	r2, #202	; 0xca
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24
 8005ba0:	2253      	movs	r2, #83	; 0x53
 8005ba2:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f7ff ff91 	bl	8005acc <RTC_EnterInitMode>
      if (status == HAL_OK)
 8005baa:	b128      	cbz	r0, 8005bb8 <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bac:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <HAL_RTC_Init+0xb0>)
 8005bae:	22ff      	movs	r2, #255	; 0xff
 8005bb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d1eb      	bne.n	8005b8e <HAL_RTC_Init+0x26>
 8005bb6:	e7e7      	b.n	8005b88 <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005bb8:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <HAL_RTC_Init+0xb0>)
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8005bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc4:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005bc6:	6999      	ldr	r1, [r3, #24]
 8005bc8:	6862      	ldr	r2, [r4, #4]
 8005bca:	6920      	ldr	r0, [r4, #16]
 8005bcc:	4302      	orrs	r2, r0
 8005bce:	69a0      	ldr	r0, [r4, #24]
 8005bd0:	4302      	orrs	r2, r0
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005bd6:	68e2      	ldr	r2, [r4, #12]
 8005bd8:	68a1      	ldr	r1, [r4, #8]
 8005bda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005bde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005be6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005be8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005bea:	4301      	orrs	r1, r0
 8005bec:	430a      	orrs	r2, r1
 8005bee:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f7ff ff91 	bl	8005b18 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d1d8      	bne.n	8005bac <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 8005bfa:	4907      	ldr	r1, [pc, #28]	; (8005c18 <HAL_RTC_Init+0xb0>)
 8005bfc:	698b      	ldr	r3, [r1, #24]
 8005bfe:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005c02:	6a22      	ldr	r2, [r4, #32]
 8005c04:	69e5      	ldr	r5, [r4, #28]
 8005c06:	432a      	orrs	r2, r5
 8005c08:	6965      	ldr	r5, [r4, #20]
 8005c0a:	432a      	orrs	r2, r5
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	618b      	str	r3, [r1, #24]
 8005c10:	e7cc      	b.n	8005bac <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c12:	2001      	movs	r0, #1
}
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40002800 	.word	0x40002800

08005c1c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005c1c:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8005c1e:	e002      	b.n	8005c26 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005c20:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8005c22:	380a      	subs	r0, #10
 8005c24:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8005c26:	2809      	cmp	r0, #9
 8005c28:	d8fa      	bhi.n	8005c20 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	b2db      	uxtb	r3, r3
}
 8005c2e:	4318      	orrs	r0, r3
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005c34:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	f000 80b0 	beq.w	8005d9e <HAL_RTC_SetAlarm_IT+0x16a>
{
 8005c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	4605      	mov	r5, r0
 8005c44:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8005c46:	2301      	movs	r3, #1
 8005c48:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005c52:	4b54      	ldr	r3, [pc, #336]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005c54:	68de      	ldr	r6, [r3, #12]
 8005c56:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8005c5a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005c5e:	d043      	beq.n	8005ce8 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005c60:	bb12      	cbnz	r2, 8005ca8 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c68:	d101      	bne.n	8005c6e <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005c6e:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c72:	7820      	ldrb	r0, [r4, #0]
 8005c74:	f7ff ffd2 	bl	8005c1c <RTC_ByteToBcd2>
 8005c78:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c7a:	7860      	ldrb	r0, [r4, #1]
 8005c7c:	f7ff ffce 	bl	8005c1c <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c80:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c84:	78a0      	ldrb	r0, [r4, #2]
 8005c86:	f7ff ffc9 	bl	8005c1c <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c8a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c8c:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c8e:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c92:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8005c96:	f7ff ffc1 	bl	8005c1c <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c9a:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005c9e:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ca0:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ca2:	ea48 0000 	orr.w	r0, r8, r0
 8005ca6:	e020      	b.n	8005cea <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005ca8:	6948      	ldr	r0, [r1, #20]
 8005caa:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8005cae:	d009      	beq.n	8005cc4 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005cb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005cb4:	d006      	beq.n	8005cc4 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005cb6:	4b3b      	ldr	r3, [pc, #236]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005cc4:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005cc6:	7863      	ldrb	r3, [r4, #1]
 8005cc8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005cce:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005cd0:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005cd2:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005cd4:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005cd8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005cdc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ce0:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ce2:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ce4:	4318      	orrs	r0, r3
 8005ce6:	e000      	b.n	8005cea <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8005ce8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cea:	4b2e      	ldr	r3, [pc, #184]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005cec:	22ca      	movs	r2, #202	; 0xca
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24
 8005cf0:	2253      	movs	r2, #83	; 0x53
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005cf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cfa:	d02a      	beq.n	8005d52 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005cfc:	4b29      	ldr	r3, [pc, #164]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8005d04:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005d06:	2202      	movs	r2, #2
 8005d08:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005d0a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005d0e:	d040      	beq.n	8005d92 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005d10:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005d12:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005d14:	69a2      	ldr	r2, [r4, #24]
 8005d16:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005d18:	6862      	ldr	r2, [r4, #4]
 8005d1a:	4b22      	ldr	r3, [pc, #136]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005d1c:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005d1e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005d20:	f042 0202 	orr.w	r2, r2, #2
 8005d24:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005d26:	699a      	ldr	r2, [r3, #24]
 8005d28:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8005d2c:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005d2e:	4a1e      	ldr	r2, [pc, #120]	; (8005da8 <HAL_RTC_SetAlarm_IT+0x174>)
 8005d30:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d3c:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005d3e:	22ff      	movs	r2, #255	; 0xff
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8005d48:	2000      	movs	r0, #0
 8005d4a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8005d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005d52:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005d54:	699a      	ldr	r2, [r3, #24]
 8005d56:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005d5a:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005d60:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005d64:	d00f      	beq.n	8005d86 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005d66:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005d68:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005d6a:	69a2      	ldr	r2, [r4, #24]
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005d6e:	6862      	ldr	r2, [r4, #4]
 8005d70:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005d72:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005d74:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005d82:	619a      	str	r2, [r3, #24]
 8005d84:	e7d3      	b.n	8005d2e <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005d86:	69a3      	ldr	r3, [r4, #24]
 8005d88:	69e2      	ldr	r2, [r4, #28]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	4a05      	ldr	r2, [pc, #20]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8005d90:	e7ed      	b.n	8005d6e <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005d92:	69a3      	ldr	r3, [r4, #24]
 8005d94:	69e2      	ldr	r2, [r4, #28]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	4a02      	ldr	r2, [pc, #8]	; (8005da4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d9c:	e7bc      	b.n	8005d18 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8005d9e:	2002      	movs	r0, #2
}
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40002800 	.word	0x40002800
 8005da8:	58000800 	.word	0x58000800

08005dac <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d017      	beq.n	8005de4 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005db4:	2101      	movs	r1, #1
 8005db6:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dc0:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005dc2:	22ca      	movs	r2, #202	; 0xca
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24
 8005dc6:	2253      	movs	r2, #83	; 0x53
 8005dc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005dca:	699a      	ldr	r2, [r3, #24]
 8005dcc:	f042 0220 	orr.w	r2, r2, #32
 8005dd0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dd2:	22ff      	movs	r2, #255	; 0xff
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005dd6:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005de0:	4618      	mov	r0, r3
 8005de2:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005de4:	2002      	movs	r0, #2
}
 8005de6:	4770      	bx	lr
 8005de8:	40002800 	.word	0x40002800

08005dec <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dec:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d020      	beq.n	8005e36 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8005df4:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8005df6:	2101      	movs	r1, #1
 8005df8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e02:	4b0e      	ldr	r3, [pc, #56]	; (8005e3c <HAL_RTCEx_SetSSRU_IT+0x50>)
 8005e04:	22ca      	movs	r2, #202	; 0xca
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24
 8005e08:	2253      	movs	r2, #83	; 0x53
 8005e0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e12:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005e14:	4c0a      	ldr	r4, [pc, #40]	; (8005e40 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8005e16:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005e1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005e1e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e22:	22ff      	movs	r2, #255	; 0xff
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e26:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005e30:	4618      	mov	r0, r3
}
 8005e32:	bc10      	pop	{r4}
 8005e34:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005e36:	2002      	movs	r0, #2
}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40002800 	.word	0x40002800
 8005e40:	58000800 	.word	0x58000800

08005e44 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005e44:	b510      	push	{r4, lr}
 8005e46:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e50:	d103      	bne.n	8005e5a <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005e58:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8005e5a:	4b03      	ldr	r3, [pc, #12]	; (8005e68 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005e5c:	2240      	movs	r2, #64	; 0x40
 8005e5e:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005e60:	f7fc fa62 	bl	8002328 <HAL_RTCEx_SSRUEventCallback>
 8005e64:	e7f5      	b.n	8005e52 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8005e66:	bf00      	nop
 8005e68:	40002800 	.word	0x40002800

08005e6c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005e6c:	4770      	bx	lr

08005e6e <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005e6e:	0089      	lsls	r1, r1, #2
 8005e70:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005e74:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005e78:	600a      	str	r2, [r1, #0]
}
 8005e7a:	4770      	bx	lr

08005e7c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005e7c:	0089      	lsls	r1, r1, #2
 8005e7e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005e82:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005e86:	6808      	ldr	r0, [r1, #0]
}
 8005e88:	4770      	bx	lr
	...

08005e8c <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <SUBGHZSPI_Init+0x20>)
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e94:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005e96:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8005e9a:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005e9c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005ea0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea8:	601a      	str	r2, [r3, #0]
}
 8005eaa:	4770      	bx	lr
 8005eac:	58010000 	.word	0x58010000

08005eb0 <HAL_SUBGHZ_Init>:
{
 8005eb0:	b530      	push	{r4, r5, lr}
 8005eb2:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d058      	beq.n	8005f6a <HAL_SUBGHZ_Init+0xba>
 8005eb8:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8005eba:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005ebc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8005ec0:	b10b      	cbz	r3, 8005ec6 <HAL_SUBGHZ_Init+0x16>
 8005ec2:	2d03      	cmp	r5, #3
 8005ec4:	d10b      	bne.n	8005ede <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7fb ff24 	bl	8001d18 <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005ed0:	4a27      	ldr	r2, [pc, #156]	; (8005f70 <HAL_SUBGHZ_Init+0xc0>)
 8005ed2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ed6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005ede:	b185      	cbz	r5, 8005f02 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005ee0:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <HAL_SUBGHZ_Init+0xc4>)
 8005ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee6:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8005ee8:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005eea:	6820      	ldr	r0, [r4, #0]
 8005eec:	f7ff ffce 	bl	8005e8c <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	71a3      	strb	r3, [r4, #6]
}
 8005efc:	4628      	mov	r0, r5
 8005efe:	b003      	add	sp, #12
 8005f00:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005f02:	2302      	movs	r3, #2
 8005f04:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005f0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f16:	4b18      	ldr	r3, [pc, #96]	; (8005f78 <HAL_SUBGHZ_Init+0xc8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005f1e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005f22:	2264      	movs	r2, #100	; 0x64
 8005f24:	fb02 f303 	mul.w	r3, r2, r3
 8005f28:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 8005f2a:	9b01      	ldr	r3, [sp, #4]
 8005f2c:	b1d3      	cbz	r3, 8005f64 <HAL_SUBGHZ_Init+0xb4>
      count--;
 8005f2e:	9b01      	ldr	r3, [sp, #4]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f3c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005f40:	d1f3      	bne.n	8005f2a <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <HAL_SUBGHZ_Init+0xc4>)
 8005f44:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f56:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5c:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	d1ca      	bne.n	8005ef8 <HAL_SUBGHZ_Init+0x48>
 8005f62:	e7c2      	b.n	8005eea <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005f64:	2501      	movs	r5, #1
 8005f66:	60a5      	str	r5, [r4, #8]
        break;
 8005f68:	e7eb      	b.n	8005f42 <HAL_SUBGHZ_Init+0x92>
    return status;
 8005f6a:	2501      	movs	r5, #1
 8005f6c:	e7c6      	b.n	8005efc <HAL_SUBGHZ_Init+0x4c>
 8005f6e:	bf00      	nop
 8005f70:	58000800 	.word	0x58000800
 8005f74:	58000400 	.word	0x58000400
 8005f78:	20000074 	.word	0x20000074

08005f7c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f80:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <SUBGHZSPI_Transmit+0x70>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005f88:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005f8c:	2064      	movs	r0, #100	; 0x64
 8005f8e:	fb00 f303 	mul.w	r3, r0, r3
 8005f92:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005f94:	9b01      	ldr	r3, [sp, #4]
 8005f96:	b14b      	cbz	r3, 8005fac <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005f98:	9b01      	ldr	r3, [sp, #4]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005f9e:	4b14      	ldr	r3, [pc, #80]	; (8005ff0 <SUBGHZSPI_Transmit+0x74>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f013 0f02 	tst.w	r3, #2
 8005fa6:	d0f5      	beq.n	8005f94 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005fa8:	2000      	movs	r0, #0
 8005faa:	e001      	b.n	8005fb0 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005fac:	2001      	movs	r0, #1
 8005fae:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005fb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ff0 <SUBGHZSPI_Transmit+0x74>)
 8005fb2:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <SUBGHZSPI_Transmit+0x70>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005fbc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005fc0:	2164      	movs	r1, #100	; 0x64
 8005fc2:	fb01 f303 	mul.w	r3, r1, r3
 8005fc6:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005fc8:	9b01      	ldr	r3, [sp, #4]
 8005fca:	b143      	cbz	r3, 8005fde <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005fcc:	9b01      	ldr	r3, [sp, #4]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <SUBGHZSPI_Transmit+0x74>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f013 0f01 	tst.w	r3, #1
 8005fda:	d0f5      	beq.n	8005fc8 <SUBGHZSPI_Transmit+0x4c>
 8005fdc:	e001      	b.n	8005fe2 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005fde:	2001      	movs	r0, #1
 8005fe0:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005fe2:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <SUBGHZSPI_Transmit+0x74>)
 8005fe4:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8005fe6:	b002      	add	sp, #8
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000074 	.word	0x20000074
 8005ff0:	58010000 	.word	0x58010000

08005ff4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005ff8:	4b1c      	ldr	r3, [pc, #112]	; (800606c <SUBGHZSPI_Receive+0x78>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006000:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006004:	2064      	movs	r0, #100	; 0x64
 8006006:	fb00 f303 	mul.w	r3, r0, r3
 800600a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800600c:	9b01      	ldr	r3, [sp, #4]
 800600e:	b14b      	cbz	r3, 8006024 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006010:	9b01      	ldr	r3, [sp, #4]
 8006012:	3b01      	subs	r3, #1
 8006014:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006016:	4b16      	ldr	r3, [pc, #88]	; (8006070 <SUBGHZSPI_Receive+0x7c>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f013 0f02 	tst.w	r3, #2
 800601e:	d0f5      	beq.n	800600c <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006020:	2000      	movs	r0, #0
 8006022:	e001      	b.n	8006028 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006024:	2001      	movs	r0, #1
 8006026:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006028:	4b11      	ldr	r3, [pc, #68]	; (8006070 <SUBGHZSPI_Receive+0x7c>)
 800602a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800602e:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <SUBGHZSPI_Receive+0x78>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800603a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800603e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006042:	fb0c f303 	mul.w	r3, ip, r3
 8006046:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006048:	9b01      	ldr	r3, [sp, #4]
 800604a:	b143      	cbz	r3, 800605e <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800604c:	9b01      	ldr	r3, [sp, #4]
 800604e:	3b01      	subs	r3, #1
 8006050:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <SUBGHZSPI_Receive+0x7c>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f013 0f01 	tst.w	r3, #1
 800605a:	d0f5      	beq.n	8006048 <SUBGHZSPI_Receive+0x54>
 800605c:	e001      	b.n	8006062 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800605e:	2001      	movs	r0, #1
 8006060:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006062:	4b03      	ldr	r3, [pc, #12]	; (8006070 <SUBGHZSPI_Receive+0x7c>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006068:	b002      	add	sp, #8
 800606a:	4770      	bx	lr
 800606c:	20000074 	.word	0x20000074
 8006070:	58010000 	.word	0x58010000

08006074 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006074:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006076:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <SUBGHZ_WaitOnBusy+0x50>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800607e:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006082:	2264      	movs	r2, #100	; 0x64
 8006084:	fb02 f303 	mul.w	r3, r2, r3
 8006088:	9301      	str	r3, [sp, #4]
 800608a:	e006      	b.n	800609a <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800608c:	2302      	movs	r3, #2
 800608e:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006090:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006092:	b002      	add	sp, #8
 8006094:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006096:	4213      	tst	r3, r2
 8006098:	d012      	beq.n	80060c0 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800609a:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <SUBGHZ_WaitOnBusy+0x54>)
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	f013 0304 	ands.w	r3, r3, #4
 80060a2:	d000      	beq.n	80060a6 <SUBGHZ_WaitOnBusy+0x32>
 80060a4:	2301      	movs	r3, #1
    if (count == 0U)
 80060a6:	9a01      	ldr	r2, [sp, #4]
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d0ef      	beq.n	800608c <SUBGHZ_WaitOnBusy+0x18>
    count--;
 80060ac:	9a01      	ldr	r2, [sp, #4]
 80060ae:	3a01      	subs	r2, #1
 80060b0:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80060b2:	4a05      	ldr	r2, [pc, #20]	; (80060c8 <SUBGHZ_WaitOnBusy+0x54>)
 80060b4:	6952      	ldr	r2, [r2, #20]
 80060b6:	f012 0202 	ands.w	r2, r2, #2
 80060ba:	d0ec      	beq.n	8006096 <SUBGHZ_WaitOnBusy+0x22>
 80060bc:	2201      	movs	r2, #1
 80060be:	e7ea      	b.n	8006096 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 80060c0:	2000      	movs	r0, #0
 80060c2:	e7e6      	b.n	8006092 <SUBGHZ_WaitOnBusy+0x1e>
 80060c4:	20000074 	.word	0x20000074
 80060c8:	58000400 	.word	0x58000400

080060cc <SUBGHZ_CheckDeviceReady>:
{
 80060cc:	b500      	push	{lr}
 80060ce:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80060d0:	7903      	ldrb	r3, [r0, #4]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d004      	beq.n	80060e0 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80060d6:	f7ff ffcd 	bl	8006074 <SUBGHZ_WaitOnBusy>
}
 80060da:	b003      	add	sp, #12
 80060dc:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80060e0:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <SUBGHZ_CheckDeviceReady+0x4c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80060e8:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80060ec:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80060ee:	4a0b      	ldr	r2, [pc, #44]	; (800611c <SUBGHZ_CheckDeviceReady+0x50>)
 80060f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80060f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 80060fc:	9b01      	ldr	r3, [sp, #4]
 80060fe:	3b01      	subs	r3, #1
 8006100:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006102:	9b01      	ldr	r3, [sp, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1f9      	bne.n	80060fc <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006108:	4a04      	ldr	r2, [pc, #16]	; (800611c <SUBGHZ_CheckDeviceReady+0x50>)
 800610a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800610e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006116:	e7de      	b.n	80060d6 <SUBGHZ_CheckDeviceReady+0xa>
 8006118:	20000074 	.word	0x20000074
 800611c:	58000400 	.word	0x58000400

08006120 <HAL_SUBGHZ_WriteRegisters>:
{
 8006120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006124:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006126:	7980      	ldrb	r0, [r0, #6]
 8006128:	fa5f f880 	uxtb.w	r8, r0
 800612c:	f1b8 0f01 	cmp.w	r8, #1
 8006130:	d13e      	bne.n	80061b0 <HAL_SUBGHZ_WriteRegisters+0x90>
 8006132:	460c      	mov	r4, r1
 8006134:	4617      	mov	r7, r2
 8006136:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006138:	796b      	ldrb	r3, [r5, #5]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d03b      	beq.n	80061b6 <HAL_SUBGHZ_WriteRegisters+0x96>
 800613e:	2301      	movs	r3, #1
 8006140:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006142:	2302      	movs	r3, #2
 8006144:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006146:	4628      	mov	r0, r5
 8006148:	f7ff ffc0 	bl	80060cc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800614c:	4a1b      	ldr	r2, [pc, #108]	; (80061bc <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800614e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006152:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800615a:	210d      	movs	r1, #13
 800615c:	4628      	mov	r0, r5
 800615e:	f7ff ff0d 	bl	8005f7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006162:	0a21      	lsrs	r1, r4, #8
 8006164:	4628      	mov	r0, r5
 8006166:	f7ff ff09 	bl	8005f7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800616a:	b2e1      	uxtb	r1, r4
 800616c:	4628      	mov	r0, r5
 800616e:	f7ff ff05 	bl	8005f7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006172:	2400      	movs	r4, #0
 8006174:	e005      	b.n	8006182 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006176:	5d39      	ldrb	r1, [r7, r4]
 8006178:	4628      	mov	r0, r5
 800617a:	f7ff feff 	bl	8005f7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800617e:	3401      	adds	r4, #1
 8006180:	b2a4      	uxth	r4, r4
 8006182:	42b4      	cmp	r4, r6
 8006184:	d3f7      	bcc.n	8006176 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006186:	4a0d      	ldr	r2, [pc, #52]	; (80061bc <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006188:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800618c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006194:	4628      	mov	r0, r5
 8006196:	f7ff ff6d 	bl	8006074 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800619a:	68ab      	ldr	r3, [r5, #8]
 800619c:	b90b      	cbnz	r3, 80061a2 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800619e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80061a2:	2301      	movs	r3, #1
 80061a4:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80061a6:	2300      	movs	r3, #0
 80061a8:	716b      	strb	r3, [r5, #5]
}
 80061aa:	4640      	mov	r0, r8
 80061ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80061b0:	f04f 0802 	mov.w	r8, #2
 80061b4:	e7f9      	b.n	80061aa <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 80061b6:	f04f 0802 	mov.w	r8, #2
 80061ba:	e7f6      	b.n	80061aa <HAL_SUBGHZ_WriteRegisters+0x8a>
 80061bc:	58000400 	.word	0x58000400

080061c0 <HAL_SUBGHZ_ReadRegisters>:
{
 80061c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80061c6:	7980      	ldrb	r0, [r0, #6]
 80061c8:	fa5f f880 	uxtb.w	r8, r0
 80061cc:	f1b8 0f01 	cmp.w	r8, #1
 80061d0:	d141      	bne.n	8006256 <HAL_SUBGHZ_ReadRegisters+0x96>
 80061d2:	460c      	mov	r4, r1
 80061d4:	4615      	mov	r5, r2
 80061d6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80061d8:	7973      	ldrb	r3, [r6, #5]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d03e      	beq.n	800625c <HAL_SUBGHZ_ReadRegisters+0x9c>
 80061de:	2301      	movs	r3, #1
 80061e0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80061e2:	4630      	mov	r0, r6
 80061e4:	f7ff ff72 	bl	80060cc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80061e8:	4a1e      	ldr	r2, [pc, #120]	; (8006264 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80061ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80061ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80061f6:	211d      	movs	r1, #29
 80061f8:	4630      	mov	r0, r6
 80061fa:	f7ff febf 	bl	8005f7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80061fe:	0a21      	lsrs	r1, r4, #8
 8006200:	4630      	mov	r0, r6
 8006202:	f7ff febb 	bl	8005f7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006206:	b2e1      	uxtb	r1, r4
 8006208:	4630      	mov	r0, r6
 800620a:	f7ff feb7 	bl	8005f7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800620e:	2100      	movs	r1, #0
 8006210:	4630      	mov	r0, r6
 8006212:	f7ff feb3 	bl	8005f7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006216:	2400      	movs	r4, #0
 8006218:	e006      	b.n	8006228 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800621a:	4629      	mov	r1, r5
 800621c:	4630      	mov	r0, r6
 800621e:	f7ff fee9 	bl	8005ff4 <SUBGHZSPI_Receive>
      pData++;
 8006222:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006224:	3401      	adds	r4, #1
 8006226:	b2a4      	uxth	r4, r4
 8006228:	42bc      	cmp	r4, r7
 800622a:	d3f6      	bcc.n	800621a <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800622c:	4a0d      	ldr	r2, [pc, #52]	; (8006264 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800622e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800623a:	4630      	mov	r0, r6
 800623c:	f7ff ff1a 	bl	8006074 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006240:	68b3      	ldr	r3, [r6, #8]
 8006242:	b90b      	cbnz	r3, 8006248 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8006244:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006248:	2301      	movs	r3, #1
 800624a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800624c:	2300      	movs	r3, #0
 800624e:	7173      	strb	r3, [r6, #5]
}
 8006250:	4640      	mov	r0, r8
 8006252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006256:	f04f 0802 	mov.w	r8, #2
 800625a:	e7f9      	b.n	8006250 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 800625c:	f04f 0802 	mov.w	r8, #2
 8006260:	e7f6      	b.n	8006250 <HAL_SUBGHZ_ReadRegisters+0x90>
 8006262:	bf00      	nop
 8006264:	58000400 	.word	0x58000400

08006268 <HAL_SUBGHZ_ExecSetCmd>:
{
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800626e:	7980      	ldrb	r0, [r0, #6]
 8006270:	fa5f f980 	uxtb.w	r9, r0
 8006274:	f1b9 0f01 	cmp.w	r9, #1
 8006278:	d143      	bne.n	8006302 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800627a:	4688      	mov	r8, r1
 800627c:	4617      	mov	r7, r2
 800627e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006280:	796b      	ldrb	r3, [r5, #5]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d040      	beq.n	8006308 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8006286:	2301      	movs	r3, #1
 8006288:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800628a:	4628      	mov	r0, r5
 800628c:	f7ff ff1e 	bl	80060cc <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006290:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8006294:	d005      	beq.n	80062a2 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8006296:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 800629a:	d002      	beq.n	80062a2 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800629c:	2300      	movs	r3, #0
 800629e:	712b      	strb	r3, [r5, #4]
 80062a0:	e001      	b.n	80062a6 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80062a2:	2301      	movs	r3, #1
 80062a4:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80062a6:	4a1a      	ldr	r2, [pc, #104]	; (8006310 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80062a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80062ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80062b4:	4641      	mov	r1, r8
 80062b6:	4628      	mov	r0, r5
 80062b8:	f7ff fe60 	bl	8005f7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80062bc:	2400      	movs	r4, #0
 80062be:	e005      	b.n	80062cc <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80062c0:	5d39      	ldrb	r1, [r7, r4]
 80062c2:	4628      	mov	r0, r5
 80062c4:	f7ff fe5a 	bl	8005f7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80062c8:	3401      	adds	r4, #1
 80062ca:	b2a4      	uxth	r4, r4
 80062cc:	42b4      	cmp	r4, r6
 80062ce:	d3f7      	bcc.n	80062c0 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80062d0:	4a0f      	ldr	r2, [pc, #60]	; (8006310 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80062d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 80062de:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80062e2:	d10a      	bne.n	80062fa <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80062e4:	68ab      	ldr	r3, [r5, #8]
 80062e6:	b90b      	cbnz	r3, 80062ec <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80062e8:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80062ec:	2301      	movs	r3, #1
 80062ee:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80062f0:	2300      	movs	r3, #0
 80062f2:	716b      	strb	r3, [r5, #5]
}
 80062f4:	4648      	mov	r0, r9
 80062f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80062fa:	4628      	mov	r0, r5
 80062fc:	f7ff feba 	bl	8006074 <SUBGHZ_WaitOnBusy>
 8006300:	e7f0      	b.n	80062e4 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8006302:	f04f 0902 	mov.w	r9, #2
 8006306:	e7f5      	b.n	80062f4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8006308:	f04f 0902 	mov.w	r9, #2
 800630c:	e7f2      	b.n	80062f4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 800630e:	bf00      	nop
 8006310:	58000400 	.word	0x58000400

08006314 <HAL_SUBGHZ_ExecGetCmd>:
{
 8006314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006318:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800631a:	7980      	ldrb	r0, [r0, #6]
 800631c:	fa5f f880 	uxtb.w	r8, r0
 8006320:	f1b8 0f01 	cmp.w	r8, #1
 8006324:	d139      	bne.n	800639a <HAL_SUBGHZ_ExecGetCmd+0x86>
 8006326:	460c      	mov	r4, r1
 8006328:	4615      	mov	r5, r2
 800632a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800632c:	7973      	ldrb	r3, [r6, #5]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d036      	beq.n	80063a0 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8006332:	2301      	movs	r3, #1
 8006334:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006336:	4630      	mov	r0, r6
 8006338:	f7ff fec8 	bl	80060cc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800633c:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800633e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006342:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800634a:	4621      	mov	r1, r4
 800634c:	4630      	mov	r0, r6
 800634e:	f7ff fe15 	bl	8005f7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006352:	2100      	movs	r1, #0
 8006354:	4630      	mov	r0, r6
 8006356:	f7ff fe11 	bl	8005f7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800635a:	2400      	movs	r4, #0
 800635c:	e006      	b.n	800636c <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800635e:	4629      	mov	r1, r5
 8006360:	4630      	mov	r0, r6
 8006362:	f7ff fe47 	bl	8005ff4 <SUBGHZSPI_Receive>
      pData++;
 8006366:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006368:	3401      	adds	r4, #1
 800636a:	b2a4      	uxth	r4, r4
 800636c:	42bc      	cmp	r4, r7
 800636e:	d3f6      	bcc.n	800635e <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006370:	4a0d      	ldr	r2, [pc, #52]	; (80063a8 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006372:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800637e:	4630      	mov	r0, r6
 8006380:	f7ff fe78 	bl	8006074 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006384:	68b3      	ldr	r3, [r6, #8]
 8006386:	b90b      	cbnz	r3, 800638c <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8006388:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800638c:	2301      	movs	r3, #1
 800638e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006390:	2300      	movs	r3, #0
 8006392:	7173      	strb	r3, [r6, #5]
}
 8006394:	4640      	mov	r0, r8
 8006396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800639a:	f04f 0802 	mov.w	r8, #2
 800639e:	e7f9      	b.n	8006394 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 80063a0:	f04f 0802 	mov.w	r8, #2
 80063a4:	e7f6      	b.n	8006394 <HAL_SUBGHZ_ExecGetCmd+0x80>
 80063a6:	bf00      	nop
 80063a8:	58000400 	.word	0x58000400

080063ac <HAL_SUBGHZ_IRQHandler>:
{
 80063ac:	b530      	push	{r4, r5, lr}
 80063ae:	b083      	sub	sp, #12
 80063b0:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 80063b2:	2300      	movs	r3, #0
 80063b4:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80063b8:	2302      	movs	r3, #2
 80063ba:	aa01      	add	r2, sp, #4
 80063bc:	2112      	movs	r1, #18
 80063be:	f7ff ffa9 	bl	8006314 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80063c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 80063c6:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80063ca:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80063ce:	2302      	movs	r3, #2
 80063d0:	aa01      	add	r2, sp, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	4628      	mov	r0, r5
 80063d6:	f7ff ff47 	bl	8006268 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80063da:	f014 0f01 	tst.w	r4, #1
 80063de:	d123      	bne.n	8006428 <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80063e0:	f014 0f02 	tst.w	r4, #2
 80063e4:	d124      	bne.n	8006430 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80063e6:	f014 0f04 	tst.w	r4, #4
 80063ea:	d125      	bne.n	8006438 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80063ec:	f014 0f08 	tst.w	r4, #8
 80063f0:	d126      	bne.n	8006440 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80063f2:	f014 0f10 	tst.w	r4, #16
 80063f6:	d127      	bne.n	8006448 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80063f8:	f014 0f20 	tst.w	r4, #32
 80063fc:	d128      	bne.n	8006450 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80063fe:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006402:	d129      	bne.n	8006458 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006404:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006408:	d006      	beq.n	8006418 <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800640a:	f414 7f80 	tst.w	r4, #256	; 0x100
 800640e:	d027      	beq.n	8006460 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006410:	2101      	movs	r1, #1
 8006412:	4628      	mov	r0, r5
 8006414:	f00b fcd4 	bl	8011dc0 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006418:	f414 7f00 	tst.w	r4, #512	; 0x200
 800641c:	d125      	bne.n	800646a <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800641e:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8006422:	d126      	bne.n	8006472 <HAL_SUBGHZ_IRQHandler+0xc6>
}
 8006424:	b003      	add	sp, #12
 8006426:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006428:	4628      	mov	r0, r5
 800642a:	f00b fcb1 	bl	8011d90 <HAL_SUBGHZ_TxCpltCallback>
 800642e:	e7d7      	b.n	80063e0 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006430:	4628      	mov	r0, r5
 8006432:	f00b fcb5 	bl	8011da0 <HAL_SUBGHZ_RxCpltCallback>
 8006436:	e7d6      	b.n	80063e6 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006438:	4628      	mov	r0, r5
 800643a:	f00b fce5 	bl	8011e08 <HAL_SUBGHZ_PreambleDetectedCallback>
 800643e:	e7d5      	b.n	80063ec <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006440:	4628      	mov	r0, r5
 8006442:	f00b fce9 	bl	8011e18 <HAL_SUBGHZ_SyncWordValidCallback>
 8006446:	e7d4      	b.n	80063f2 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006448:	4628      	mov	r0, r5
 800644a:	f00b fced 	bl	8011e28 <HAL_SUBGHZ_HeaderValidCallback>
 800644e:	e7d3      	b.n	80063f8 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006450:	4628      	mov	r0, r5
 8006452:	f00b fcd1 	bl	8011df8 <HAL_SUBGHZ_HeaderErrorCallback>
 8006456:	e7d2      	b.n	80063fe <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006458:	4628      	mov	r0, r5
 800645a:	f00b fca9 	bl	8011db0 <HAL_SUBGHZ_CRCErrorCallback>
 800645e:	e7d1      	b.n	8006404 <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006460:	2100      	movs	r1, #0
 8006462:	4628      	mov	r0, r5
 8006464:	f00b fcac 	bl	8011dc0 <HAL_SUBGHZ_CADStatusCallback>
 8006468:	e7d6      	b.n	8006418 <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800646a:	4628      	mov	r0, r5
 800646c:	f00b fcba 	bl	8011de4 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8006470:	e7d5      	b.n	800641e <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006472:	4628      	mov	r0, r5
 8006474:	f00b fce0 	bl	8011e38 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8006478:	e7d4      	b.n	8006424 <HAL_SUBGHZ_IRQHandler+0x78>
	...

0800647c <HAL_SUBGHZ_WriteBuffer>:
{
 800647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006480:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006482:	7980      	ldrb	r0, [r0, #6]
 8006484:	fa5f f880 	uxtb.w	r8, r0
 8006488:	f1b8 0f01 	cmp.w	r8, #1
 800648c:	d138      	bne.n	8006500 <HAL_SUBGHZ_WriteBuffer+0x84>
 800648e:	460c      	mov	r4, r1
 8006490:	4617      	mov	r7, r2
 8006492:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006494:	796b      	ldrb	r3, [r5, #5]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d035      	beq.n	8006506 <HAL_SUBGHZ_WriteBuffer+0x8a>
 800649a:	2301      	movs	r3, #1
 800649c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800649e:	4628      	mov	r0, r5
 80064a0:	f7ff fe14 	bl	80060cc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80064a4:	4a19      	ldr	r2, [pc, #100]	; (800650c <HAL_SUBGHZ_WriteBuffer+0x90>)
 80064a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80064aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80064b2:	210e      	movs	r1, #14
 80064b4:	4628      	mov	r0, r5
 80064b6:	f7ff fd61 	bl	8005f7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80064ba:	4621      	mov	r1, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	f7ff fd5d 	bl	8005f7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80064c2:	2400      	movs	r4, #0
 80064c4:	e005      	b.n	80064d2 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80064c6:	5d39      	ldrb	r1, [r7, r4]
 80064c8:	4628      	mov	r0, r5
 80064ca:	f7ff fd57 	bl	8005f7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80064ce:	3401      	adds	r4, #1
 80064d0:	b2a4      	uxth	r4, r4
 80064d2:	42b4      	cmp	r4, r6
 80064d4:	d3f7      	bcc.n	80064c6 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80064d6:	4a0d      	ldr	r2, [pc, #52]	; (800650c <HAL_SUBGHZ_WriteBuffer+0x90>)
 80064d8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80064dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80064e4:	4628      	mov	r0, r5
 80064e6:	f7ff fdc5 	bl	8006074 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80064ea:	68ab      	ldr	r3, [r5, #8]
 80064ec:	b90b      	cbnz	r3, 80064f2 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80064ee:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80064f2:	2301      	movs	r3, #1
 80064f4:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80064f6:	2300      	movs	r3, #0
 80064f8:	716b      	strb	r3, [r5, #5]
}
 80064fa:	4640      	mov	r0, r8
 80064fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006500:	f04f 0802 	mov.w	r8, #2
 8006504:	e7f9      	b.n	80064fa <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8006506:	f04f 0802 	mov.w	r8, #2
 800650a:	e7f6      	b.n	80064fa <HAL_SUBGHZ_WriteBuffer+0x7e>
 800650c:	58000400 	.word	0x58000400

08006510 <HAL_SUBGHZ_ReadBuffer>:
{
 8006510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006514:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006516:	7980      	ldrb	r0, [r0, #6]
 8006518:	fa5f f880 	uxtb.w	r8, r0
 800651c:	f1b8 0f01 	cmp.w	r8, #1
 8006520:	d13d      	bne.n	800659e <HAL_SUBGHZ_ReadBuffer+0x8e>
 8006522:	460c      	mov	r4, r1
 8006524:	4615      	mov	r5, r2
 8006526:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006528:	7973      	ldrb	r3, [r6, #5]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d03a      	beq.n	80065a4 <HAL_SUBGHZ_ReadBuffer+0x94>
 800652e:	2301      	movs	r3, #1
 8006530:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006532:	4630      	mov	r0, r6
 8006534:	f7ff fdca 	bl	80060cc <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006538:	4a1c      	ldr	r2, [pc, #112]	; (80065ac <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800653a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800653e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006546:	211e      	movs	r1, #30
 8006548:	4630      	mov	r0, r6
 800654a:	f7ff fd17 	bl	8005f7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800654e:	4621      	mov	r1, r4
 8006550:	4630      	mov	r0, r6
 8006552:	f7ff fd13 	bl	8005f7c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006556:	2100      	movs	r1, #0
 8006558:	4630      	mov	r0, r6
 800655a:	f7ff fd0f 	bl	8005f7c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800655e:	2400      	movs	r4, #0
 8006560:	e006      	b.n	8006570 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006562:	4629      	mov	r1, r5
 8006564:	4630      	mov	r0, r6
 8006566:	f7ff fd45 	bl	8005ff4 <SUBGHZSPI_Receive>
      pData++;
 800656a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800656c:	3401      	adds	r4, #1
 800656e:	b2a4      	uxth	r4, r4
 8006570:	42bc      	cmp	r4, r7
 8006572:	d3f6      	bcc.n	8006562 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006574:	4a0d      	ldr	r2, [pc, #52]	; (80065ac <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006576:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800657a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006582:	4630      	mov	r0, r6
 8006584:	f7ff fd76 	bl	8006074 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006588:	68b3      	ldr	r3, [r6, #8]
 800658a:	b90b      	cbnz	r3, 8006590 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 800658c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006590:	2301      	movs	r3, #1
 8006592:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006594:	2300      	movs	r3, #0
 8006596:	7173      	strb	r3, [r6, #5]
}
 8006598:	4640      	mov	r0, r8
 800659a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800659e:	f04f 0802 	mov.w	r8, #2
 80065a2:	e7f9      	b.n	8006598 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80065a4:	f04f 0802 	mov.w	r8, #2
 80065a8:	e7f6      	b.n	8006598 <HAL_SUBGHZ_ReadBuffer+0x88>
 80065aa:	bf00      	nop
 80065ac:	58000400 	.word	0x58000400

080065b0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80065b0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	e852 3f00 	ldrex	r3, [r2]
 80065b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	e842 3100 	strex	r1, r3, [r2]
 80065be:	2900      	cmp	r1, #0
 80065c0:	d1f6      	bne.n	80065b0 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80065c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	f102 0308 	add.w	r3, r2, #8
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	3208      	adds	r2, #8
 80065d2:	e842 3100 	strex	r1, r3, [r2]
 80065d6:	2900      	cmp	r1, #0
 80065d8:	d1f3      	bne.n	80065c2 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065da:	2320      	movs	r3, #32
 80065dc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80065e0:	4770      	bx	lr

080065e2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	e852 3f00 	ldrex	r3, [r2]
 80065e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	e842 3100 	strex	r1, r3, [r2]
 80065f0:	2900      	cmp	r1, #0
 80065f2:	d1f6      	bne.n	80065e2 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065f4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	f102 0308 	add.w	r3, r2, #8
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006602:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	3208      	adds	r2, #8
 8006608:	e842 3100 	strex	r1, r3, [r2]
 800660c:	2900      	cmp	r1, #0
 800660e:	d1f1      	bne.n	80065f4 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006610:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006612:	2b01      	cmp	r3, #1
 8006614:	d006      	beq.n	8006624 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006616:	2320      	movs	r3, #32
 8006618:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661c:	2300      	movs	r3, #0
 800661e:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006620:	6743      	str	r3, [r0, #116]	; 0x74
}
 8006622:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006624:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	e852 3f00 	ldrex	r3, [r2]
 800662a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	e842 3100 	strex	r1, r3, [r2]
 8006632:	2900      	cmp	r1, #0
 8006634:	d1f6      	bne.n	8006624 <UART_EndRxTransfer+0x42>
 8006636:	e7ee      	b.n	8006616 <UART_EndRxTransfer+0x34>

08006638 <HAL_UART_Transmit_DMA>:
{
 8006638:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800663a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800663e:	2a20      	cmp	r2, #32
 8006640:	d13d      	bne.n	80066be <HAL_UART_Transmit_DMA+0x86>
{
 8006642:	b510      	push	{r4, lr}
 8006644:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8006646:	2900      	cmp	r1, #0
 8006648:	d03b      	beq.n	80066c2 <HAL_UART_Transmit_DMA+0x8a>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d03b      	beq.n	80066c6 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 800664e:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006650:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8006654:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006658:	2200      	movs	r2, #0
 800665a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800665e:	2221      	movs	r2, #33	; 0x21
 8006660:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8006664:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006666:	b1ca      	cbz	r2, 800669c <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006668:	4918      	ldr	r1, [pc, #96]	; (80066cc <HAL_UART_Transmit_DMA+0x94>)
 800666a:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800666c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800666e:	4918      	ldr	r1, [pc, #96]	; (80066d0 <HAL_UART_Transmit_DMA+0x98>)
 8006670:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006672:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006674:	4917      	ldr	r1, [pc, #92]	; (80066d4 <HAL_UART_Transmit_DMA+0x9c>)
 8006676:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006678:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800667a:	2100      	movs	r1, #0
 800667c:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800667e:	6802      	ldr	r2, [r0, #0]
 8006680:	3228      	adds	r2, #40	; 0x28
 8006682:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006684:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8006686:	f7fd fe3b 	bl	8004300 <HAL_DMA_Start_IT>
 800668a:	b138      	cbz	r0, 800669c <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800668c:	2310      	movs	r3, #16
 800668e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8006692:	2320      	movs	r3, #32
 8006694:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 8006698:	2001      	movs	r0, #1
 800669a:	e00f      	b.n	80066bc <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	2240      	movs	r2, #64	; 0x40
 80066a0:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	f102 0308 	add.w	r3, r2, #8
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	3208      	adds	r2, #8
 80066b2:	e842 3100 	strex	r1, r3, [r2]
 80066b6:	2900      	cmp	r1, #0
 80066b8:	d1f3      	bne.n	80066a2 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80066ba:	2000      	movs	r0, #0
}
 80066bc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80066be:	2002      	movs	r0, #2
}
 80066c0:	4770      	bx	lr
      return HAL_ERROR;
 80066c2:	2001      	movs	r0, #1
 80066c4:	e7fa      	b.n	80066bc <HAL_UART_Transmit_DMA+0x84>
 80066c6:	2001      	movs	r0, #1
 80066c8:	e7f8      	b.n	80066bc <HAL_UART_Transmit_DMA+0x84>
 80066ca:	bf00      	nop
 80066cc:	080066d9 	.word	0x080066d9
 80066d0:	08006747 	.word	0x08006747
 80066d4:	08006753 	.word	0x08006753

080066d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066d8:	b508      	push	{r3, lr}
 80066da:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066dc:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f013 0f20 	tst.w	r3, #32
 80066e6:	d118      	bne.n	800671a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	f102 0308 	add.w	r3, r2, #8
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	3208      	adds	r2, #8
 80066fe:	e842 3100 	strex	r1, r3, [r2]
 8006702:	2900      	cmp	r1, #0
 8006704:	d1f3      	bne.n	80066ee <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006706:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	e852 3f00 	ldrex	r3, [r2]
 800670c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	e842 3100 	strex	r1, r3, [r2]
 8006714:	2900      	cmp	r1, #0
 8006716:	d1f6      	bne.n	8006706 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006718:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800671a:	f7fc f8c1 	bl	80028a0 <HAL_UART_TxCpltCallback>
}
 800671e:	e7fb      	b.n	8006718 <UART_DMATransmitCplt+0x40>

08006720 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006720:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006722:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	e852 3f00 	ldrex	r3, [r2]
 8006728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	e842 3100 	strex	r1, r3, [r2]
 8006730:	2900      	cmp	r1, #0
 8006732:	d1f6      	bne.n	8006722 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006734:	2320      	movs	r3, #32
 8006736:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800673e:	f7fc f8af 	bl	80028a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006742:	bd08      	pop	{r3, pc}

08006744 <HAL_UART_TxHalfCpltCallback>:
}
 8006744:	4770      	bx	lr

08006746 <UART_DMATxHalfCplt>:
{
 8006746:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006748:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800674a:	f7ff fffb 	bl	8006744 <HAL_UART_TxHalfCpltCallback>
}
 800674e:	bd08      	pop	{r3, pc}

08006750 <HAL_UART_ErrorCallback>:
}
 8006750:	4770      	bx	lr

08006752 <UART_DMAError>:
{
 8006752:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006754:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006756:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800675a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006766:	d001      	beq.n	800676c <UART_DMAError+0x1a>
 8006768:	2a21      	cmp	r2, #33	; 0x21
 800676a:	d010      	beq.n	800678e <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006774:	d001      	beq.n	800677a <UART_DMAError+0x28>
 8006776:	2d22      	cmp	r5, #34	; 0x22
 8006778:	d010      	beq.n	800679c <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800677a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800677e:	f043 0310 	orr.w	r3, r3, #16
 8006782:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 8006786:	4620      	mov	r0, r4
 8006788:	f7ff ffe2 	bl	8006750 <HAL_UART_ErrorCallback>
}
 800678c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006794:	4620      	mov	r0, r4
 8006796:	f7ff ff0b 	bl	80065b0 <UART_EndTxTransfer>
 800679a:	e7e7      	b.n	800676c <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7ff ff1d 	bl	80065e2 <UART_EndRxTransfer>
 80067a8:	e7e7      	b.n	800677a <UART_DMAError+0x28>

080067aa <UART_DMAAbortOnError>:
{
 80067aa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80067b4:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80067b8:	f7ff ffca 	bl	8006750 <HAL_UART_ErrorCallback>
}
 80067bc:	bd08      	pop	{r3, pc}

080067be <HAL_UARTEx_RxEventCallback>:
}
 80067be:	4770      	bx	lr

080067c0 <HAL_UART_IRQHandler>:
{
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067c4:	6801      	ldr	r1, [r0, #0]
 80067c6:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067c8:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067ca:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067cc:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80067d0:	401a      	ands	r2, r3
 80067d2:	d108      	bne.n	80067e6 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067d4:	f013 0f20 	tst.w	r3, #32
 80067d8:	d005      	beq.n	80067e6 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067da:	f010 0f20 	tst.w	r0, #32
 80067de:	d134      	bne.n	800684a <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067e0:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80067e4:	d131      	bne.n	800684a <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80067e6:	b12a      	cbz	r2, 80067f4 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80067e8:	4a99      	ldr	r2, [pc, #612]	; (8006a50 <HAL_UART_IRQHandler+0x290>)
 80067ea:	402a      	ands	r2, r5
 80067ec:	d133      	bne.n	8006856 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80067ee:	4e99      	ldr	r6, [pc, #612]	; (8006a54 <HAL_UART_IRQHandler+0x294>)
 80067f0:	4230      	tst	r0, r6
 80067f2:	d130      	bne.n	8006856 <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80067f6:	2a01      	cmp	r2, #1
 80067f8:	f000 80c6 	beq.w	8006988 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006800:	d003      	beq.n	800680a <HAL_UART_IRQHandler+0x4a>
 8006802:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006806:	f040 8165 	bne.w	8006ad4 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800680a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800680e:	d007      	beq.n	8006820 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006810:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006814:	f040 8165 	bne.w	8006ae2 <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006818:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 800681c:	f040 8161 	bne.w	8006ae2 <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006820:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006824:	d003      	beq.n	800682e <HAL_UART_IRQHandler+0x6e>
 8006826:	f010 0f40 	tst.w	r0, #64	; 0x40
 800682a:	f040 8161 	bne.w	8006af0 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800682e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006832:	d003      	beq.n	800683c <HAL_UART_IRQHandler+0x7c>
 8006834:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006838:	f040 815e 	bne.w	8006af8 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800683c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006840:	d002      	beq.n	8006848 <HAL_UART_IRQHandler+0x88>
 8006842:	2800      	cmp	r0, #0
 8006844:	f2c0 815c 	blt.w	8006b00 <HAL_UART_IRQHandler+0x340>
}
 8006848:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800684a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0fb      	beq.n	8006848 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8006850:	4620      	mov	r0, r4
 8006852:	4798      	blx	r3
      return;
 8006854:	e7f8      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006856:	f013 0f01 	tst.w	r3, #1
 800685a:	d009      	beq.n	8006870 <HAL_UART_IRQHandler+0xb0>
 800685c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006860:	d006      	beq.n	8006870 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006862:	2601      	movs	r6, #1
 8006864:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006866:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800686a:	4331      	orrs	r1, r6
 800686c:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006870:	f013 0f02 	tst.w	r3, #2
 8006874:	d00b      	beq.n	800688e <HAL_UART_IRQHandler+0xce>
 8006876:	f015 0f01 	tst.w	r5, #1
 800687a:	d008      	beq.n	800688e <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800687c:	6821      	ldr	r1, [r4, #0]
 800687e:	2602      	movs	r6, #2
 8006880:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006882:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006886:	f041 0104 	orr.w	r1, r1, #4
 800688a:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800688e:	f013 0f04 	tst.w	r3, #4
 8006892:	d00b      	beq.n	80068ac <HAL_UART_IRQHandler+0xec>
 8006894:	f015 0f01 	tst.w	r5, #1
 8006898:	d008      	beq.n	80068ac <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800689a:	6821      	ldr	r1, [r4, #0]
 800689c:	2604      	movs	r6, #4
 800689e:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068a0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80068a4:	f041 0102 	orr.w	r1, r1, #2
 80068a8:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068ac:	f013 0f08 	tst.w	r3, #8
 80068b0:	d00b      	beq.n	80068ca <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068b2:	f010 0f20 	tst.w	r0, #32
 80068b6:	d100      	bne.n	80068ba <HAL_UART_IRQHandler+0xfa>
 80068b8:	b13a      	cbz	r2, 80068ca <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068ba:	6822      	ldr	r2, [r4, #0]
 80068bc:	2108      	movs	r1, #8
 80068be:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80068c4:	430a      	orrs	r2, r1
 80068c6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068ca:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80068ce:	d00c      	beq.n	80068ea <HAL_UART_IRQHandler+0x12a>
 80068d0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80068d4:	d009      	beq.n	80068ea <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068d6:	6822      	ldr	r2, [r4, #0]
 80068d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068dc:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068de:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80068e2:	f042 0220 	orr.w	r2, r2, #32
 80068e6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068ea:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80068ee:	2a00      	cmp	r2, #0
 80068f0:	d0aa      	beq.n	8006848 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068f2:	f013 0f20 	tst.w	r3, #32
 80068f6:	d009      	beq.n	800690c <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068f8:	f010 0f20 	tst.w	r0, #32
 80068fc:	d102      	bne.n	8006904 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068fe:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006902:	d003      	beq.n	800690c <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8006904:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006906:	b10b      	cbz	r3, 800690c <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8006908:	4620      	mov	r0, r4
 800690a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800690c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006918:	d102      	bne.n	8006920 <HAL_UART_IRQHandler+0x160>
 800691a:	f012 0f28 	tst.w	r2, #40	; 0x28
 800691e:	d02c      	beq.n	800697a <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8006920:	4620      	mov	r0, r4
 8006922:	f7ff fe5e 	bl	80065e2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800692e:	d020      	beq.n	8006972 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006930:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	f102 0308 	add.w	r3, r2, #8
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	3208      	adds	r2, #8
 8006940:	e842 3100 	strex	r1, r3, [r2]
 8006944:	2900      	cmp	r1, #0
 8006946:	d1f3      	bne.n	8006930 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8006948:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800694c:	b16b      	cbz	r3, 800696a <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800694e:	4a42      	ldr	r2, [pc, #264]	; (8006a58 <HAL_UART_IRQHandler+0x298>)
 8006950:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006952:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006956:	f7fd fd59 	bl	800440c <HAL_DMA_Abort_IT>
 800695a:	2800      	cmp	r0, #0
 800695c:	f43f af74 	beq.w	8006848 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006960:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006964:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006966:	4798      	blx	r3
 8006968:	e76e      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800696a:	4620      	mov	r0, r4
 800696c:	f7ff fef0 	bl	8006750 <HAL_UART_ErrorCallback>
 8006970:	e76a      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8006972:	4620      	mov	r0, r4
 8006974:	f7ff feec 	bl	8006750 <HAL_UART_ErrorCallback>
 8006978:	e766      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800697a:	4620      	mov	r0, r4
 800697c:	f7ff fee8 	bl	8006750 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006980:	2300      	movs	r3, #0
 8006982:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 8006986:	e75f      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006988:	f013 0f10 	tst.w	r3, #16
 800698c:	f43f af36 	beq.w	80067fc <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006990:	f010 0f10 	tst.w	r0, #16
 8006994:	f43f af32 	beq.w	80067fc <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006998:	2310      	movs	r3, #16
 800699a:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069a4:	d05a      	beq.n	8006a5c <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069a6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f43f af49 	beq.w	8006848 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069b6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80069ba:	4299      	cmp	r1, r3
 80069bc:	f67f af44 	bls.w	8006848 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 80069c0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069c4:	6813      	ldr	r3, [r2, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f013 0f20 	tst.w	r3, #32
 80069cc:	d132      	bne.n	8006a34 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	e852 3f00 	ldrex	r3, [r2]
 80069d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	e842 3100 	strex	r1, r3, [r2]
 80069dc:	2900      	cmp	r1, #0
 80069de:	d1f6      	bne.n	80069ce <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	f102 0308 	add.w	r3, r2, #8
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	3208      	adds	r2, #8
 80069f0:	e842 3100 	strex	r1, r3, [r2]
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d1f3      	bne.n	80069e0 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	f102 0308 	add.w	r3, r2, #8
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	3208      	adds	r2, #8
 8006a08:	e842 3100 	strex	r1, r3, [r2]
 8006a0c:	2900      	cmp	r1, #0
 8006a0e:	d1f3      	bne.n	80069f8 <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8006a10:	2320      	movs	r3, #32
 8006a12:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a16:	2300      	movs	r3, #0
 8006a18:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1c:	e852 3f00 	ldrex	r3, [r2]
 8006a20:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	e842 3100 	strex	r1, r3, [r2]
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	d1f6      	bne.n	8006a1a <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a2c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006a30:	f7fd fcb2 	bl	8004398 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a34:	2302      	movs	r3, #2
 8006a36:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a38:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006a3c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	1ac9      	subs	r1, r1, r3
 8006a44:	b289      	uxth	r1, r1
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7ff feb9 	bl	80067be <HAL_UARTEx_RxEventCallback>
      return;
 8006a4c:	e6fc      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
 8006a4e:	bf00      	nop
 8006a50:	10000001 	.word	0x10000001
 8006a54:	04000120 	.word	0x04000120
 8006a58:	080067ab 	.word	0x080067ab
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a5c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006a60:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	1ac9      	subs	r1, r1, r3
 8006a68:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8006a6a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f43f aee9 	beq.w	8006848 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8006a76:	2900      	cmp	r1, #0
 8006a78:	f43f aee6 	beq.w	8006848 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	e852 3f00 	ldrex	r3, [r2]
 8006a82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	e842 3000 	strex	r0, r3, [r2]
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d1f6      	bne.n	8006a7c <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a8e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	f102 0308 	add.w	r3, r2, #8
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	3208      	adds	r2, #8
 8006aa2:	e842 3000 	strex	r0, r3, [r2]
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d1f1      	bne.n	8006a8e <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	2320      	movs	r3, #32
 8006aac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8006ab4:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	e852 3f00 	ldrex	r3, [r2]
 8006abc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	e842 3000 	strex	r0, r3, [r2]
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d1f6      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7ff fe76 	bl	80067be <HAL_UARTEx_RxEventCallback>
      return;
 8006ad2:	e6b9      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ad4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ad8:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 fec4 	bl	8007868 <HAL_UARTEx_WakeupCallback>
    return;
 8006ae0:	e6b2      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8006ae2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f43f aeaf 	beq.w	8006848 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8006aea:	4620      	mov	r0, r4
 8006aec:	4798      	blx	r3
    return;
 8006aee:	e6ab      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8006af0:	4620      	mov	r0, r4
 8006af2:	f7ff fe15 	bl	8006720 <UART_EndTransmit_IT>
    return;
 8006af6:	e6a7      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 feb7 	bl	800786c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8006afe:	e6a3      	b.n	8006848 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 feb2 	bl	800786a <HAL_UARTEx_RxFifoFullCallback>
    return;
 8006b06:	e69f      	b.n	8006848 <HAL_UART_IRQHandler+0x88>

08006b08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006b08:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8006b0a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b0e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8006b12:	2a22      	cmp	r2, #34	; 0x22
 8006b14:	d005      	beq.n	8006b22 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b16:	6802      	ldr	r2, [r0, #0]
 8006b18:	6993      	ldr	r3, [r2, #24]
 8006b1a:	f043 0308 	orr.w	r3, r3, #8
 8006b1e:	6193      	str	r3, [r2, #24]
  }
}
 8006b20:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b22:	6802      	ldr	r2, [r0, #0]
 8006b24:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006b2a:	400b      	ands	r3, r1
 8006b2c:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8006b2e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006b30:	3301      	adds	r3, #1
 8006b32:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006b34:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8006b42:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e9      	bne.n	8006b20 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	e852 3f00 	ldrex	r3, [r2]
 8006b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	e842 3100 	strex	r1, r3, [r2]
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	d1f6      	bne.n	8006b4c <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	f102 0308 	add.w	r3, r2, #8
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	3208      	adds	r2, #8
 8006b6e:	e842 3100 	strex	r1, r3, [r2]
 8006b72:	2900      	cmp	r1, #0
 8006b74:	d1f3      	bne.n	8006b5e <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8006b76:	2320      	movs	r3, #32
 8006b78:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b80:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b82:	6803      	ldr	r3, [r0, #0]
 8006b84:	4a16      	ldr	r2, [pc, #88]	; (8006be0 <UART_RxISR_8BIT+0xd8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00c      	beq.n	8006ba4 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006b90:	d008      	beq.n	8006ba4 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b92:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	e852 3f00 	ldrex	r3, [r2]
 8006b98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	e842 3100 	strex	r1, r3, [r2]
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d1f6      	bne.n	8006b92 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d116      	bne.n	8006bd8 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	2300      	movs	r3, #0
 8006bac:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	e852 3f00 	ldrex	r3, [r2]
 8006bb4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	e842 3100 	strex	r1, r3, [r2]
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	d1f6      	bne.n	8006bae <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bc0:	6803      	ldr	r3, [r0, #0]
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	f012 0f10 	tst.w	r2, #16
 8006bc8:	d001      	beq.n	8006bce <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bca:	2210      	movs	r2, #16
 8006bcc:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bce:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006bd2:	f7ff fdf4 	bl	80067be <HAL_UARTEx_RxEventCallback>
 8006bd6:	e7a3      	b.n	8006b20 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006bd8:	f7fb fe72 	bl	80028c0 <HAL_UART_RxCpltCallback>
 8006bdc:	e7a0      	b.n	8006b20 <UART_RxISR_8BIT+0x18>
 8006bde:	bf00      	nop
 8006be0:	40008000 	.word	0x40008000

08006be4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006be4:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006be6:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bea:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8006bee:	2b22      	cmp	r3, #34	; 0x22
 8006bf0:	d005      	beq.n	8006bfe <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bf2:	6802      	ldr	r2, [r0, #0]
 8006bf4:	6993      	ldr	r3, [r2, #24]
 8006bf6:	f043 0308 	orr.w	r3, r3, #8
 8006bfa:	6193      	str	r3, [r2, #24]
  }
}
 8006bfc:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bfe:	6803      	ldr	r3, [r0, #0]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c02:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c04:	4013      	ands	r3, r2
 8006c06:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8006c08:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006c0e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8006c1c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1ea      	bne.n	8006bfc <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c26:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	e852 3f00 	ldrex	r3, [r2]
 8006c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	e842 3100 	strex	r1, r3, [r2]
 8006c34:	2900      	cmp	r1, #0
 8006c36:	d1f6      	bne.n	8006c26 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c38:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	f102 0308 	add.w	r3, r2, #8
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c46:	3208      	adds	r2, #8
 8006c48:	e842 3100 	strex	r1, r3, [r2]
 8006c4c:	2900      	cmp	r1, #0
 8006c4e:	d1f3      	bne.n	8006c38 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8006c50:	2320      	movs	r3, #32
 8006c52:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c5a:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c5c:	6803      	ldr	r3, [r0, #0]
 8006c5e:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <UART_RxISR_16BIT+0xd4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00c      	beq.n	8006c7e <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006c6a:	d008      	beq.n	8006c7e <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	e852 3f00 	ldrex	r3, [r2]
 8006c72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	e842 3100 	strex	r1, r3, [r2]
 8006c7a:	2900      	cmp	r1, #0
 8006c7c:	d1f6      	bne.n	8006c6c <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d116      	bne.n	8006cb2 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c84:	2300      	movs	r3, #0
 8006c86:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c88:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	e852 3f00 	ldrex	r3, [r2]
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	e842 3100 	strex	r1, r3, [r2]
 8006c96:	2900      	cmp	r1, #0
 8006c98:	d1f6      	bne.n	8006c88 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c9a:	6803      	ldr	r3, [r0, #0]
 8006c9c:	69da      	ldr	r2, [r3, #28]
 8006c9e:	f012 0f10 	tst.w	r2, #16
 8006ca2:	d001      	beq.n	8006ca8 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ca8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006cac:	f7ff fd87 	bl	80067be <HAL_UARTEx_RxEventCallback>
 8006cb0:	e7a4      	b.n	8006bfc <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006cb2:	f7fb fe05 	bl	80028c0 <HAL_UART_RxCpltCallback>
 8006cb6:	e7a1      	b.n	8006bfc <UART_RxISR_16BIT+0x18>
 8006cb8:	40008000 	.word	0x40008000

08006cbc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8006cc0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006cc4:	6803      	ldr	r3, [r0, #0]
 8006cc6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006cc8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ccc:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cd0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8006cd4:	2a22      	cmp	r2, #34	; 0x22
 8006cd6:	d005      	beq.n	8006ce4 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	f042 0208 	orr.w	r2, r2, #8
 8006cde:	619a      	str	r2, [r3, #24]
  }
}
 8006ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006ce6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cea:	e008      	b.n	8006cfe <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d14c      	bne.n	8006d8e <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8006cf4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d04e      	beq.n	8006d9c <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cfe:	2f00      	cmp	r7, #0
 8006d00:	f000 809a 	beq.w	8006e38 <UART_RxISR_8BIT_FIFOEN+0x17c>
 8006d04:	f015 0f20 	tst.w	r5, #32
 8006d08:	f000 8096 	beq.w	8006e38 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d10:	b2f3      	uxtb	r3, r6
 8006d12:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006d14:	400b      	ands	r3, r1
 8006d16:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006d18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006d1e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d30:	f015 0f07 	tst.w	r5, #7
 8006d34:	d0de      	beq.n	8006cf4 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d36:	f015 0f01 	tst.w	r5, #1
 8006d3a:	d009      	beq.n	8006d50 <UART_RxISR_8BIT_FIFOEN+0x94>
 8006d3c:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006d40:	d006      	beq.n	8006d50 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d42:	2201      	movs	r2, #1
 8006d44:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d46:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d50:	f015 0f02 	tst.w	r5, #2
 8006d54:	d00b      	beq.n	8006d6e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006d56:	f018 0f01 	tst.w	r8, #1
 8006d5a:	d008      	beq.n	8006d6e <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d62:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006d66:	f043 0304 	orr.w	r3, r3, #4
 8006d6a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d6e:	f015 0f04 	tst.w	r5, #4
 8006d72:	d0bb      	beq.n	8006cec <UART_RxISR_8BIT_FIFOEN+0x30>
 8006d74:	f018 0f01 	tst.w	r8, #1
 8006d78:	d0b8      	beq.n	8006cec <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d80:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006d84:	f043 0302 	orr.w	r3, r3, #2
 8006d88:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006d8c:	e7ae      	b.n	8006cec <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f7ff fcde 	bl	8006750 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006d9a:	e7ab      	b.n	8006cf4 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d9c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	e852 3f00 	ldrex	r3, [r2]
 8006da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	e842 3100 	strex	r1, r3, [r2]
 8006daa:	2900      	cmp	r1, #0
 8006dac:	d1f6      	bne.n	8006d9c <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	f102 0308 	add.w	r3, r2, #8
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dbc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	3208      	adds	r2, #8
 8006dc2:	e842 3100 	strex	r1, r3, [r2]
 8006dc6:	2900      	cmp	r1, #0
 8006dc8:	d1f1      	bne.n	8006dae <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8006dca:	2320      	movs	r3, #32
 8006dcc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dd4:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	4a29      	ldr	r2, [pc, #164]	; (8006e80 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d003      	beq.n	8006de6 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006de4:	d106      	bne.n	8006df4 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d00d      	beq.n	8006e08 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8006dec:	4620      	mov	r0, r4
 8006dee:	f7fb fd67 	bl	80028c0 <HAL_UART_RxCpltCallback>
 8006df2:	e784      	b.n	8006cfe <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006df4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	e852 3f00 	ldrex	r3, [r2]
 8006dfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	e842 3100 	strex	r1, r3, [r2]
 8006e02:	2900      	cmp	r1, #0
 8006e04:	d1f6      	bne.n	8006df4 <UART_RxISR_8BIT_FIFOEN+0x138>
 8006e06:	e7ee      	b.n	8006de6 <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	e852 3f00 	ldrex	r3, [r2]
 8006e12:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	e842 3100 	strex	r1, r3, [r2]
 8006e1a:	2900      	cmp	r1, #0
 8006e1c:	d1f6      	bne.n	8006e0c <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	69da      	ldr	r2, [r3, #28]
 8006e22:	f012 0f10 	tst.w	r2, #16
 8006e26:	d001      	beq.n	8006e2c <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e28:	2210      	movs	r2, #16
 8006e2a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e2c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006e30:	4620      	mov	r0, r4
 8006e32:	f7ff fcc4 	bl	80067be <HAL_UARTEx_RxEventCallback>
 8006e36:	e762      	b.n	8006cfe <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006e38:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006e3c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f43f af4e 	beq.w	8006ce0 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006e44:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	f67f af49 	bls.w	8006ce0 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e4e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	f102 0308 	add.w	r3, r2, #8
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	3208      	adds	r2, #8
 8006e5e:	e842 3100 	strex	r1, r3, [r2]
 8006e62:	2900      	cmp	r1, #0
 8006e64:	d1f3      	bne.n	8006e4e <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 8006e66:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8006e68:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e6a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	e852 3f00 	ldrex	r3, [r2]
 8006e70:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	e842 3100 	strex	r1, r3, [r2]
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d1f6      	bne.n	8006e6a <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8006e7c:	e730      	b.n	8006ce0 <UART_RxISR_8BIT_FIFOEN+0x24>
 8006e7e:	bf00      	nop
 8006e80:	40008000 	.word	0x40008000
 8006e84:	08006b09 	.word	0x08006b09

08006e88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006e8c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e90:	6803      	ldr	r3, [r0, #0]
 8006e92:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e94:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e98:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e9c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8006ea0:	2a22      	cmp	r2, #34	; 0x22
 8006ea2:	d005      	beq.n	8006eb0 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	f042 0208 	orr.w	r2, r2, #8
 8006eaa:	619a      	str	r2, [r3, #24]
  }
}
 8006eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006eb2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006eb6:	e008      	b.n	8006eca <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eb8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d14b      	bne.n	8006f58 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8006ec0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d04d      	beq.n	8006f66 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006eca:	2f00      	cmp	r7, #0
 8006ecc:	f000 8099 	beq.w	8007002 <UART_RxISR_16BIT_FIFOEN+0x17a>
 8006ed0:	f015 0f20 	tst.w	r5, #32
 8006ed4:	f000 8095 	beq.w	8007002 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006edc:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ede:	4033      	ands	r3, r6
 8006ee0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006ee2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006ee8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006efa:	f015 0f07 	tst.w	r5, #7
 8006efe:	d0df      	beq.n	8006ec0 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f00:	f015 0f01 	tst.w	r5, #1
 8006f04:	d009      	beq.n	8006f1a <UART_RxISR_16BIT_FIFOEN+0x92>
 8006f06:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006f0a:	d006      	beq.n	8006f1a <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f10:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f1a:	f015 0f02 	tst.w	r5, #2
 8006f1e:	d00b      	beq.n	8006f38 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8006f20:	f018 0f01 	tst.w	r8, #1
 8006f24:	d008      	beq.n	8006f38 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f2c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006f30:	f043 0304 	orr.w	r3, r3, #4
 8006f34:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f38:	f015 0f04 	tst.w	r5, #4
 8006f3c:	d0bc      	beq.n	8006eb8 <UART_RxISR_16BIT_FIFOEN+0x30>
 8006f3e:	f018 0f01 	tst.w	r8, #1
 8006f42:	d0b9      	beq.n	8006eb8 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	2204      	movs	r2, #4
 8006f48:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f4a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006f4e:	f043 0302 	orr.w	r3, r3, #2
 8006f52:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006f56:	e7af      	b.n	8006eb8 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7ff fbf9 	bl	8006750 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006f64:	e7ac      	b.n	8006ec0 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f66:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	e852 3f00 	ldrex	r3, [r2]
 8006f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	e842 3100 	strex	r1, r3, [r2]
 8006f74:	2900      	cmp	r1, #0
 8006f76:	d1f6      	bne.n	8006f66 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7a:	f102 0308 	add.w	r3, r2, #8
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f86:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	3208      	adds	r2, #8
 8006f8c:	e842 3100 	strex	r1, r3, [r2]
 8006f90:	2900      	cmp	r1, #0
 8006f92:	d1f1      	bne.n	8006f78 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8006f94:	2320      	movs	r3, #32
 8006f96:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f9e:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	4a29      	ldr	r2, [pc, #164]	; (8007048 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006fae:	d106      	bne.n	8006fbe <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d00d      	beq.n	8006fd2 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f7fb fc82 	bl	80028c0 <HAL_UART_RxCpltCallback>
 8006fbc:	e785      	b.n	8006eca <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fbe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	e852 3f00 	ldrex	r3, [r2]
 8006fc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc8:	e842 3100 	strex	r1, r3, [r2]
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	d1f6      	bne.n	8006fbe <UART_RxISR_16BIT_FIFOEN+0x136>
 8006fd0:	e7ee      	b.n	8006fb0 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	e852 3f00 	ldrex	r3, [r2]
 8006fdc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	e842 3100 	strex	r1, r3, [r2]
 8006fe4:	2900      	cmp	r1, #0
 8006fe6:	d1f6      	bne.n	8006fd6 <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	f012 0f10 	tst.w	r2, #16
 8006ff0:	d001      	beq.n	8006ff6 <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ff2:	2210      	movs	r2, #16
 8006ff4:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ff6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff fbdf 	bl	80067be <HAL_UARTEx_RxEventCallback>
 8007000:	e763      	b.n	8006eca <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007002:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007006:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007008:	2b00      	cmp	r3, #0
 800700a:	f43f af4f 	beq.w	8006eac <UART_RxISR_16BIT_FIFOEN+0x24>
 800700e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007012:	429a      	cmp	r2, r3
 8007014:	f67f af4a 	bls.w	8006eac <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007018:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	f102 0308 	add.w	r3, r2, #8
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	3208      	adds	r2, #8
 8007028:	e842 3100 	strex	r1, r3, [r2]
 800702c:	2900      	cmp	r1, #0
 800702e:	d1f3      	bne.n	8007018 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8007030:	4b06      	ldr	r3, [pc, #24]	; (800704c <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8007032:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007034:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	e852 3f00 	ldrex	r3, [r2]
 800703a:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	e842 3100 	strex	r1, r3, [r2]
 8007042:	2900      	cmp	r1, #0
 8007044:	d1f6      	bne.n	8007034 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 8007046:	e731      	b.n	8006eac <UART_RxISR_16BIT_FIFOEN+0x24>
 8007048:	40008000 	.word	0x40008000
 800704c:	08006be5 	.word	0x08006be5

08007050 <UART_SetConfig>:
{
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007054:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007056:	6883      	ldr	r3, [r0, #8]
 8007058:	6902      	ldr	r2, [r0, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	6942      	ldr	r2, [r0, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	69c2      	ldr	r2, [r0, #28]
 8007062:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	4a9d      	ldr	r2, [pc, #628]	; (80072dc <UART_SetConfig+0x28c>)
 8007068:	4002      	ands	r2, r0
 800706a:	4313      	orrs	r3, r2
 800706c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800706e:	6822      	ldr	r2, [r4, #0]
 8007070:	6853      	ldr	r3, [r2, #4]
 8007072:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007076:	68e1      	ldr	r1, [r4, #12]
 8007078:	430b      	orrs	r3, r1
 800707a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800707c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	4b97      	ldr	r3, [pc, #604]	; (80072e0 <UART_SetConfig+0x290>)
 8007082:	429a      	cmp	r2, r3
 8007084:	d001      	beq.n	800708a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8007086:	6a23      	ldr	r3, [r4, #32]
 8007088:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800708a:	6893      	ldr	r3, [r2, #8]
 800708c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007090:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007094:	430b      	orrs	r3, r1
 8007096:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007098:	6822      	ldr	r2, [r4, #0]
 800709a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800709c:	f023 030f 	bic.w	r3, r3, #15
 80070a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070a2:	430b      	orrs	r3, r1
 80070a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	4a8e      	ldr	r2, [pc, #568]	; (80072e4 <UART_SetConfig+0x294>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d01c      	beq.n	80070e8 <UART_SetConfig+0x98>
 80070ae:	4a8e      	ldr	r2, [pc, #568]	; (80072e8 <UART_SetConfig+0x298>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d031      	beq.n	8007118 <UART_SetConfig+0xc8>
 80070b4:	4a8a      	ldr	r2, [pc, #552]	; (80072e0 <UART_SetConfig+0x290>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d04b      	beq.n	8007152 <UART_SetConfig+0x102>
 80070ba:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80070bc:	4988      	ldr	r1, [pc, #544]	; (80072e0 <UART_SetConfig+0x290>)
 80070be:	428b      	cmp	r3, r1
 80070c0:	d068      	beq.n	8007194 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070c2:	69e0      	ldr	r0, [r4, #28]
 80070c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80070c8:	f000 80a5 	beq.w	8007216 <UART_SetConfig+0x1c6>
    switch (clocksource)
 80070cc:	2a08      	cmp	r2, #8
 80070ce:	f200 811f 	bhi.w	8007310 <UART_SetConfig+0x2c0>
 80070d2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80070d6:	00d3      	.short	0x00d3
 80070d8:	00d100f5 	.word	0x00d100f5
 80070dc:	00f8011d 	.word	0x00f8011d
 80070e0:	011d011d 	.word	0x011d011d
 80070e4:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80070e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070ec:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80070f0:	f002 0203 	and.w	r2, r2, #3
 80070f4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070f8:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 80070fc:	2a03      	cmp	r2, #3
 80070fe:	d809      	bhi.n	8007114 <UART_SetConfig+0xc4>
 8007100:	e8df f002 	tbb	[pc, r2]
 8007104:	063c0402 	.word	0x063c0402
 8007108:	2201      	movs	r2, #1
 800710a:	e7d7      	b.n	80070bc <UART_SetConfig+0x6c>
 800710c:	2204      	movs	r2, #4
 800710e:	e7d5      	b.n	80070bc <UART_SetConfig+0x6c>
 8007110:	2208      	movs	r2, #8
 8007112:	e7d3      	b.n	80070bc <UART_SetConfig+0x6c>
 8007114:	2210      	movs	r2, #16
 8007116:	e7d1      	b.n	80070bc <UART_SetConfig+0x6c>
 8007118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800711c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007120:	f002 020c 	and.w	r2, r2, #12
 8007124:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8007128:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 800712c:	2a0c      	cmp	r2, #12
 800712e:	d80e      	bhi.n	800714e <UART_SetConfig+0xfe>
 8007130:	e8df f002 	tbb	[pc, r2]
 8007134:	0d0d0d07 	.word	0x0d0d0d07
 8007138:	0d0d0d09 	.word	0x0d0d0d09
 800713c:	0d0d0d26 	.word	0x0d0d0d26
 8007140:	0b          	.byte	0x0b
 8007141:	00          	.byte	0x00
 8007142:	2200      	movs	r2, #0
 8007144:	e7ba      	b.n	80070bc <UART_SetConfig+0x6c>
 8007146:	2204      	movs	r2, #4
 8007148:	e7b8      	b.n	80070bc <UART_SetConfig+0x6c>
 800714a:	2208      	movs	r2, #8
 800714c:	e7b6      	b.n	80070bc <UART_SetConfig+0x6c>
 800714e:	2210      	movs	r2, #16
 8007150:	e7b4      	b.n	80070bc <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007156:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800715a:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800715e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007162:	d00f      	beq.n	8007184 <UART_SetConfig+0x134>
 8007164:	d805      	bhi.n	8007172 <UART_SetConfig+0x122>
 8007166:	b17a      	cbz	r2, 8007188 <UART_SetConfig+0x138>
 8007168:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800716c:	d10e      	bne.n	800718c <UART_SetConfig+0x13c>
 800716e:	2204      	movs	r2, #4
 8007170:	e7a4      	b.n	80070bc <UART_SetConfig+0x6c>
 8007172:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8007176:	d10b      	bne.n	8007190 <UART_SetConfig+0x140>
 8007178:	2208      	movs	r2, #8
 800717a:	e79f      	b.n	80070bc <UART_SetConfig+0x6c>
 800717c:	2202      	movs	r2, #2
 800717e:	e79d      	b.n	80070bc <UART_SetConfig+0x6c>
 8007180:	2202      	movs	r2, #2
 8007182:	e79b      	b.n	80070bc <UART_SetConfig+0x6c>
 8007184:	2202      	movs	r2, #2
 8007186:	e799      	b.n	80070bc <UART_SetConfig+0x6c>
 8007188:	2200      	movs	r2, #0
 800718a:	e797      	b.n	80070bc <UART_SetConfig+0x6c>
 800718c:	2210      	movs	r2, #16
 800718e:	e795      	b.n	80070bc <UART_SetConfig+0x6c>
 8007190:	2210      	movs	r2, #16
 8007192:	e793      	b.n	80070bc <UART_SetConfig+0x6c>
    switch (clocksource)
 8007194:	2a08      	cmp	r2, #8
 8007196:	f200 809c 	bhi.w	80072d2 <UART_SetConfig+0x282>
 800719a:	e8df f002 	tbb	[pc, r2]
 800719e:	9a08      	.short	0x9a08
 80071a0:	9a379a3a 	.word	0x9a379a3a
 80071a4:	9a9a      	.short	0x9a9a
 80071a6:	05          	.byte	0x05
 80071a7:	00          	.byte	0x00
 80071a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80071ac:	e004      	b.n	80071b8 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80071ae:	f7fe faa9 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80071b2:	2800      	cmp	r0, #0
 80071b4:	f000 808f 	beq.w	80072d6 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80071ba:	4b4c      	ldr	r3, [pc, #304]	; (80072ec <UART_SetConfig+0x29c>)
 80071bc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80071c0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071c4:	6865      	ldr	r5, [r4, #4]
 80071c6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80071ca:	4299      	cmp	r1, r3
 80071cc:	f200 8094 	bhi.w	80072f8 <UART_SetConfig+0x2a8>
 80071d0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80071d4:	f200 8092 	bhi.w	80072fc <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d8:	2600      	movs	r6, #0
 80071da:	4633      	mov	r3, r6
 80071dc:	4631      	mov	r1, r6
 80071de:	f7f9 ff33 	bl	8001048 <__aeabi_uldivmod>
 80071e2:	0209      	lsls	r1, r1, #8
 80071e4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80071e8:	0200      	lsls	r0, r0, #8
 80071ea:	086b      	lsrs	r3, r5, #1
 80071ec:	18c0      	adds	r0, r0, r3
 80071ee:	462a      	mov	r2, r5
 80071f0:	4633      	mov	r3, r6
 80071f2:	f141 0100 	adc.w	r1, r1, #0
 80071f6:	f7f9 ff27 	bl	8001048 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071fa:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80071fe:	4b3c      	ldr	r3, [pc, #240]	; (80072f0 <UART_SetConfig+0x2a0>)
 8007200:	429a      	cmp	r2, r3
 8007202:	d87d      	bhi.n	8007300 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	60d8      	str	r0, [r3, #12]
 8007208:	4630      	mov	r0, r6
 800720a:	e050      	b.n	80072ae <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 800720c:	f7fd fd7c 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
        break;
 8007210:	e7cf      	b.n	80071b2 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8007212:	4838      	ldr	r0, [pc, #224]	; (80072f4 <UART_SetConfig+0x2a4>)
 8007214:	e7d0      	b.n	80071b8 <UART_SetConfig+0x168>
    switch (clocksource)
 8007216:	2a08      	cmp	r2, #8
 8007218:	d874      	bhi.n	8007304 <UART_SetConfig+0x2b4>
 800721a:	e8df f002 	tbb	[pc, r2]
 800721e:	2707      	.short	0x2707
 8007220:	732a7305 	.word	0x732a7305
 8007224:	7373      	.short	0x7373
 8007226:	0b          	.byte	0x0b
 8007227:	00          	.byte	0x00
 8007228:	4832      	ldr	r0, [pc, #200]	; (80072f4 <UART_SetConfig+0x2a4>)
 800722a:	e003      	b.n	8007234 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800722c:	f7fe fa6a 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007230:	2800      	cmp	r0, #0
 8007232:	d069      	beq.n	8007308 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007234:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007236:	4b2d      	ldr	r3, [pc, #180]	; (80072ec <UART_SetConfig+0x29c>)
 8007238:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800723c:	fbb0 f0f3 	udiv	r0, r0, r3
 8007240:	6862      	ldr	r2, [r4, #4]
 8007242:	0853      	lsrs	r3, r2, #1
 8007244:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007248:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800724c:	f1a0 0210 	sub.w	r2, r0, #16
 8007250:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007254:	429a      	cmp	r2, r3
 8007256:	d859      	bhi.n	800730c <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007258:	b283      	uxth	r3, r0
 800725a:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800725e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8007262:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	60d8      	str	r0, [r3, #12]
 8007268:	2000      	movs	r0, #0
 800726a:	e020      	b.n	80072ae <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800726c:	f7fe fa5a 	bl	8005724 <HAL_RCC_GetPCLK2Freq>
        break;
 8007270:	e7de      	b.n	8007230 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8007272:	f7fd fd49 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
        break;
 8007276:	e7db      	b.n	8007230 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8007278:	481e      	ldr	r0, [pc, #120]	; (80072f4 <UART_SetConfig+0x2a4>)
 800727a:	e003      	b.n	8007284 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 800727c:	f7fe fa42 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007280:	2800      	cmp	r0, #0
 8007282:	d047      	beq.n	8007314 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007284:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007286:	4b19      	ldr	r3, [pc, #100]	; (80072ec <UART_SetConfig+0x29c>)
 8007288:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800728c:	fbb0 f0f3 	udiv	r0, r0, r3
 8007290:	6863      	ldr	r3, [r4, #4]
 8007292:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007296:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800729a:	f1a0 0210 	sub.w	r2, r0, #16
 800729e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d838      	bhi.n	8007318 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	b280      	uxth	r0, r0
 80072aa:	60d8      	str	r0, [r3, #12]
 80072ac:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80072b4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80072bc:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80072be:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80072c0:	f7fe fa30 	bl	8005724 <HAL_RCC_GetPCLK2Freq>
        break;
 80072c4:	e7dc      	b.n	8007280 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80072c6:	f7fd fd1f 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
        break;
 80072ca:	e7d9      	b.n	8007280 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80072cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80072d0:	e7d8      	b.n	8007284 <UART_SetConfig+0x234>
    switch (clocksource)
 80072d2:	2001      	movs	r0, #1
 80072d4:	e7eb      	b.n	80072ae <UART_SetConfig+0x25e>
 80072d6:	2000      	movs	r0, #0
 80072d8:	e7e9      	b.n	80072ae <UART_SetConfig+0x25e>
 80072da:	bf00      	nop
 80072dc:	cfff69f3 	.word	0xcfff69f3
 80072e0:	40008000 	.word	0x40008000
 80072e4:	40013800 	.word	0x40013800
 80072e8:	40004400 	.word	0x40004400
 80072ec:	080186a8 	.word	0x080186a8
 80072f0:	000ffcff 	.word	0x000ffcff
 80072f4:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 80072f8:	2001      	movs	r0, #1
 80072fa:	e7d8      	b.n	80072ae <UART_SetConfig+0x25e>
 80072fc:	2001      	movs	r0, #1
 80072fe:	e7d6      	b.n	80072ae <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8007300:	2001      	movs	r0, #1
 8007302:	e7d4      	b.n	80072ae <UART_SetConfig+0x25e>
    switch (clocksource)
 8007304:	2001      	movs	r0, #1
 8007306:	e7d2      	b.n	80072ae <UART_SetConfig+0x25e>
 8007308:	2000      	movs	r0, #0
 800730a:	e7d0      	b.n	80072ae <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800730c:	2001      	movs	r0, #1
 800730e:	e7ce      	b.n	80072ae <UART_SetConfig+0x25e>
    switch (clocksource)
 8007310:	2001      	movs	r0, #1
 8007312:	e7cc      	b.n	80072ae <UART_SetConfig+0x25e>
 8007314:	2000      	movs	r0, #0
 8007316:	e7ca      	b.n	80072ae <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007318:	2001      	movs	r0, #1
 800731a:	e7c8      	b.n	80072ae <UART_SetConfig+0x25e>

0800731c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800731c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800731e:	f013 0f01 	tst.w	r3, #1
 8007322:	d006      	beq.n	8007332 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007324:	6802      	ldr	r2, [r0, #0]
 8007326:	6853      	ldr	r3, [r2, #4]
 8007328:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800732c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800732e:	430b      	orrs	r3, r1
 8007330:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007332:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007334:	f013 0f02 	tst.w	r3, #2
 8007338:	d006      	beq.n	8007348 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800733a:	6802      	ldr	r2, [r0, #0]
 800733c:	6853      	ldr	r3, [r2, #4]
 800733e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007342:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007344:	430b      	orrs	r3, r1
 8007346:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007348:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800734a:	f013 0f04 	tst.w	r3, #4
 800734e:	d006      	beq.n	800735e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007350:	6802      	ldr	r2, [r0, #0]
 8007352:	6853      	ldr	r3, [r2, #4]
 8007354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007358:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800735a:	430b      	orrs	r3, r1
 800735c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800735e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007360:	f013 0f08 	tst.w	r3, #8
 8007364:	d006      	beq.n	8007374 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007366:	6802      	ldr	r2, [r0, #0]
 8007368:	6853      	ldr	r3, [r2, #4]
 800736a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800736e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007370:	430b      	orrs	r3, r1
 8007372:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007374:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007376:	f013 0f10 	tst.w	r3, #16
 800737a:	d006      	beq.n	800738a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800737c:	6802      	ldr	r2, [r0, #0]
 800737e:	6893      	ldr	r3, [r2, #8]
 8007380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007384:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007386:	430b      	orrs	r3, r1
 8007388:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800738a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800738c:	f013 0f20 	tst.w	r3, #32
 8007390:	d006      	beq.n	80073a0 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007392:	6802      	ldr	r2, [r0, #0]
 8007394:	6893      	ldr	r3, [r2, #8]
 8007396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800739a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800739c:	430b      	orrs	r3, r1
 800739e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80073a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80073a6:	d00a      	beq.n	80073be <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073a8:	6802      	ldr	r2, [r0, #0]
 80073aa:	6853      	ldr	r3, [r2, #4]
 80073ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073b0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80073b2:	430b      	orrs	r3, r1
 80073b4:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80073b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073bc:	d00b      	beq.n	80073d6 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80073c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80073c4:	d006      	beq.n	80073d4 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073c6:	6802      	ldr	r2, [r0, #0]
 80073c8:	6853      	ldr	r3, [r2, #4]
 80073ca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80073ce:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6053      	str	r3, [r2, #4]
}
 80073d4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073d6:	6802      	ldr	r2, [r0, #0]
 80073d8:	6853      	ldr	r3, [r2, #4]
 80073da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80073de:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6053      	str	r3, [r2, #4]
 80073e4:	e7eb      	b.n	80073be <UART_AdvFeatureConfig+0xa2>

080073e6 <UART_WaitOnFlagUntilTimeout>:
{
 80073e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ea:	4605      	mov	r5, r0
 80073ec:	460f      	mov	r7, r1
 80073ee:	4616      	mov	r6, r2
 80073f0:	4699      	mov	r9, r3
 80073f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f6:	682c      	ldr	r4, [r5, #0]
 80073f8:	69e4      	ldr	r4, [r4, #28]
 80073fa:	ea37 0304 	bics.w	r3, r7, r4
 80073fe:	bf0c      	ite	eq
 8007400:	f04f 0c01 	moveq.w	ip, #1
 8007404:	f04f 0c00 	movne.w	ip, #0
 8007408:	45b4      	cmp	ip, r6
 800740a:	d157      	bne.n	80074bc <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 800740c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007410:	d0f1      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007412:	f7fa fd77 	bl	8001f04 <HAL_GetTick>
 8007416:	eba0 0009 	sub.w	r0, r0, r9
 800741a:	4540      	cmp	r0, r8
 800741c:	d82f      	bhi.n	800747e <UART_WaitOnFlagUntilTimeout+0x98>
 800741e:	f1b8 0f00 	cmp.w	r8, #0
 8007422:	d02c      	beq.n	800747e <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	f012 0f04 	tst.w	r2, #4
 800742c:	d0e3      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007434:	d0df      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007436:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800743a:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800743c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	e852 3f00 	ldrex	r3, [r2]
 8007442:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	e842 3100 	strex	r1, r3, [r2]
 800744a:	2900      	cmp	r1, #0
 800744c:	d1f6      	bne.n	800743c <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	f102 0308 	add.w	r3, r2, #8
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	3208      	adds	r2, #8
 800745e:	e842 3100 	strex	r1, r3, [r2]
 8007462:	2900      	cmp	r1, #0
 8007464:	d1f3      	bne.n	800744e <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8007466:	2320      	movs	r3, #32
 8007468:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800746c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007470:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8007474:	2300      	movs	r3, #0
 8007476:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800747a:	2003      	movs	r0, #3
 800747c:	e01f      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800747e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	e852 3f00 	ldrex	r3, [r2]
 8007484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	e842 3100 	strex	r1, r3, [r2]
 800748c:	2900      	cmp	r1, #0
 800748e:	d1f6      	bne.n	800747e <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007490:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	f102 0308 	add.w	r3, r2, #8
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	3208      	adds	r2, #8
 80074a0:	e842 3100 	strex	r1, r3, [r2]
 80074a4:	2900      	cmp	r1, #0
 80074a6:	d1f3      	bne.n	8007490 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80074a8:	2320      	movs	r3, #32
 80074aa:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80074ae:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80074b2:	2300      	movs	r3, #0
 80074b4:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 80074b8:	2003      	movs	r0, #3
 80074ba:	e000      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 80074bc:	2000      	movs	r0, #0
}
 80074be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080074c2 <HAL_UART_Transmit>:
{
 80074c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80074ca:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d14f      	bne.n	8007572 <HAL_UART_Transmit+0xb0>
 80074d2:	4604      	mov	r4, r0
 80074d4:	460d      	mov	r5, r1
 80074d6:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80074d8:	2900      	cmp	r1, #0
 80074da:	d04e      	beq.n	800757a <HAL_UART_Transmit+0xb8>
 80074dc:	b90a      	cbnz	r2, 80074e2 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 80074de:	2001      	movs	r0, #1
 80074e0:	e048      	b.n	8007574 <HAL_UART_Transmit+0xb2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074e8:	2321      	movs	r3, #33	; 0x21
 80074ea:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 80074ee:	f7fa fd09 	bl	8001f04 <HAL_GetTick>
 80074f2:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80074f4:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 80074f8:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074fc:	68a3      	ldr	r3, [r4, #8]
 80074fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007502:	d002      	beq.n	800750a <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8007504:	f04f 0800 	mov.w	r8, #0
 8007508:	e011      	b.n	800752e <HAL_UART_Transmit+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800750a:	6923      	ldr	r3, [r4, #16]
 800750c:	b313      	cbz	r3, 8007554 <HAL_UART_Transmit+0x92>
      pdata16bits = NULL;
 800750e:	f04f 0800 	mov.w	r8, #0
 8007512:	e00c      	b.n	800752e <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007514:	f838 3b02 	ldrh.w	r3, [r8], #2
 8007518:	6822      	ldr	r2, [r4, #0]
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8007520:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8007524:	b292      	uxth	r2, r2
 8007526:	3a01      	subs	r2, #1
 8007528:	b292      	uxth	r2, r2
 800752a:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800752e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8007532:	b29b      	uxth	r3, r3
 8007534:	b18b      	cbz	r3, 800755a <HAL_UART_Transmit+0x98>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007536:	9600      	str	r6, [sp, #0]
 8007538:	463b      	mov	r3, r7
 800753a:	2200      	movs	r2, #0
 800753c:	2180      	movs	r1, #128	; 0x80
 800753e:	4620      	mov	r0, r4
 8007540:	f7ff ff51 	bl	80073e6 <UART_WaitOnFlagUntilTimeout>
 8007544:	b9d8      	cbnz	r0, 800757e <HAL_UART_Transmit+0xbc>
      if (pdata8bits == NULL)
 8007546:	2d00      	cmp	r5, #0
 8007548:	d0e4      	beq.n	8007514 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800754a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007552:	e7e5      	b.n	8007520 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 8007554:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8007556:	2500      	movs	r5, #0
 8007558:	e7e9      	b.n	800752e <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800755a:	9600      	str	r6, [sp, #0]
 800755c:	463b      	mov	r3, r7
 800755e:	2200      	movs	r2, #0
 8007560:	2140      	movs	r1, #64	; 0x40
 8007562:	4620      	mov	r0, r4
 8007564:	f7ff ff3f 	bl	80073e6 <UART_WaitOnFlagUntilTimeout>
 8007568:	b958      	cbnz	r0, 8007582 <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 800756a:	2320      	movs	r3, #32
 800756c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 8007570:	e000      	b.n	8007574 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 8007572:	2002      	movs	r0, #2
}
 8007574:	b002      	add	sp, #8
 8007576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800757a:	2001      	movs	r0, #1
 800757c:	e7fa      	b.n	8007574 <HAL_UART_Transmit+0xb2>
        return HAL_TIMEOUT;
 800757e:	2003      	movs	r0, #3
 8007580:	e7f8      	b.n	8007574 <HAL_UART_Transmit+0xb2>
      return HAL_TIMEOUT;
 8007582:	2003      	movs	r0, #3
 8007584:	e7f6      	b.n	8007574 <HAL_UART_Transmit+0xb2>

08007586 <UART_CheckIdleState>:
{
 8007586:	b530      	push	{r4, r5, lr}
 8007588:	b083      	sub	sp, #12
 800758a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800758c:	2300      	movs	r3, #0
 800758e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8007592:	f7fa fcb7 	bl	8001f04 <HAL_GetTick>
 8007596:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007598:	6822      	ldr	r2, [r4, #0]
 800759a:	6812      	ldr	r2, [r2, #0]
 800759c:	f012 0f08 	tst.w	r2, #8
 80075a0:	d110      	bne.n	80075c4 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f013 0f04 	tst.w	r3, #4
 80075aa:	d119      	bne.n	80075e0 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80075ac:	2320      	movs	r3, #32
 80075ae:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b6:	2000      	movs	r0, #0
 80075b8:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ba:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80075bc:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80075c0:	b003      	add	sp, #12
 80075c2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	4603      	mov	r3, r0
 80075cc:	2200      	movs	r2, #0
 80075ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075d2:	4620      	mov	r0, r4
 80075d4:	f7ff ff07 	bl	80073e6 <UART_WaitOnFlagUntilTimeout>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d0e2      	beq.n	80075a2 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80075dc:	2003      	movs	r0, #3
 80075de:	e7ef      	b.n	80075c0 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	462b      	mov	r3, r5
 80075e8:	2200      	movs	r2, #0
 80075ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075ee:	4620      	mov	r0, r4
 80075f0:	f7ff fef9 	bl	80073e6 <UART_WaitOnFlagUntilTimeout>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d0d9      	beq.n	80075ac <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80075f8:	2003      	movs	r0, #3
 80075fa:	e7e1      	b.n	80075c0 <UART_CheckIdleState+0x3a>

080075fc <HAL_UART_Init>:
  if (huart == NULL)
 80075fc:	b378      	cbz	r0, 800765e <HAL_UART_Init+0x62>
{
 80075fe:	b510      	push	{r4, lr}
 8007600:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007602:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007606:	b30b      	cbz	r3, 800764c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007608:	2324      	movs	r3, #36	; 0x24
 800760a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800760e:	6822      	ldr	r2, [r4, #0]
 8007610:	6813      	ldr	r3, [r2, #0]
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007618:	4620      	mov	r0, r4
 800761a:	f7ff fd19 	bl	8007050 <UART_SetConfig>
 800761e:	2801      	cmp	r0, #1
 8007620:	d013      	beq.n	800764a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007624:	b9bb      	cbnz	r3, 8007656 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007626:	6822      	ldr	r2, [r4, #0]
 8007628:	6853      	ldr	r3, [r2, #4]
 800762a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800762e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	6893      	ldr	r3, [r2, #8]
 8007634:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007638:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800763a:	6822      	ldr	r2, [r4, #0]
 800763c:	6813      	ldr	r3, [r2, #0]
 800763e:	f043 0301 	orr.w	r3, r3, #1
 8007642:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007644:	4620      	mov	r0, r4
 8007646:	f7ff ff9e 	bl	8007586 <UART_CheckIdleState>
}
 800764a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800764c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8007650:	f7fa feda 	bl	8002408 <HAL_UART_MspInit>
 8007654:	e7d8      	b.n	8007608 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007656:	4620      	mov	r0, r4
 8007658:	f7ff fe60 	bl	800731c <UART_AdvFeatureConfig>
 800765c:	e7e3      	b.n	8007626 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800765e:	2001      	movs	r0, #1
}
 8007660:	4770      	bx	lr
	...

08007664 <UART_Start_Receive_IT>:
{
 8007664:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8007666:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007668:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800766c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007670:	2300      	movs	r3, #0
 8007672:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8007674:	6883      	ldr	r3, [r0, #8]
 8007676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800767a:	d006      	beq.n	800768a <UART_Start_Receive_IT+0x26>
 800767c:	b9a3      	cbnz	r3, 80076a8 <UART_Start_Receive_IT+0x44>
 800767e:	6903      	ldr	r3, [r0, #16]
 8007680:	b973      	cbnz	r3, 80076a0 <UART_Start_Receive_IT+0x3c>
 8007682:	23ff      	movs	r3, #255	; 0xff
 8007684:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007688:	e014      	b.n	80076b4 <UART_Start_Receive_IT+0x50>
 800768a:	6903      	ldr	r3, [r0, #16]
 800768c:	b923      	cbnz	r3, 8007698 <UART_Start_Receive_IT+0x34>
 800768e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007692:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007696:	e00d      	b.n	80076b4 <UART_Start_Receive_IT+0x50>
 8007698:	23ff      	movs	r3, #255	; 0xff
 800769a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800769e:	e009      	b.n	80076b4 <UART_Start_Receive_IT+0x50>
 80076a0:	237f      	movs	r3, #127	; 0x7f
 80076a2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80076a6:	e005      	b.n	80076b4 <UART_Start_Receive_IT+0x50>
 80076a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ac:	d02d      	beq.n	800770a <UART_Start_Receive_IT+0xa6>
 80076ae:	2300      	movs	r3, #0
 80076b0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b4:	2300      	movs	r3, #0
 80076b6:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076ba:	2322      	movs	r3, #34	; 0x22
 80076bc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c0:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	f101 0308 	add.w	r3, r1, #8
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	3108      	adds	r1, #8
 80076d0:	e841 3400 	strex	r4, r3, [r1]
 80076d4:	2c00      	cmp	r4, #0
 80076d6:	d1f3      	bne.n	80076c0 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076d8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80076da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076de:	d01e      	beq.n	800771e <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e0:	6883      	ldr	r3, [r0, #8]
 80076e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e6:	d042      	beq.n	800776e <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 80076e8:	4b29      	ldr	r3, [pc, #164]	; (8007790 <UART_Start_Receive_IT+0x12c>)
 80076ea:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076ec:	6903      	ldr	r3, [r0, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d043      	beq.n	800777a <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80076f2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	e852 3f00 	ldrex	r3, [r2]
 80076f8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	e842 3100 	strex	r1, r3, [r2]
 8007700:	2900      	cmp	r1, #0
 8007702:	d1f6      	bne.n	80076f2 <UART_Start_Receive_IT+0x8e>
}
 8007704:	2000      	movs	r0, #0
 8007706:	bc10      	pop	{r4}
 8007708:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800770a:	6903      	ldr	r3, [r0, #16]
 800770c:	b91b      	cbnz	r3, 8007716 <UART_Start_Receive_IT+0xb2>
 800770e:	237f      	movs	r3, #127	; 0x7f
 8007710:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007714:	e7ce      	b.n	80076b4 <UART_Start_Receive_IT+0x50>
 8007716:	233f      	movs	r3, #63	; 0x3f
 8007718:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800771c:	e7ca      	b.n	80076b4 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800771e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007722:	4293      	cmp	r3, r2
 8007724:	d8dc      	bhi.n	80076e0 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007726:	6883      	ldr	r3, [r0, #8]
 8007728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772c:	d019      	beq.n	8007762 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800772e:	4b19      	ldr	r3, [pc, #100]	; (8007794 <UART_Start_Receive_IT+0x130>)
 8007730:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007732:	6903      	ldr	r3, [r0, #16]
 8007734:	b143      	cbz	r3, 8007748 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007736:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	e852 3f00 	ldrex	r3, [r2]
 800773c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	e842 3100 	strex	r1, r3, [r2]
 8007744:	2900      	cmp	r1, #0
 8007746:	d1f6      	bne.n	8007736 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007748:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	f102 0308 	add.w	r3, r2, #8
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	3208      	adds	r2, #8
 8007758:	e842 3100 	strex	r1, r3, [r2]
 800775c:	2900      	cmp	r1, #0
 800775e:	d1f3      	bne.n	8007748 <UART_Start_Receive_IT+0xe4>
 8007760:	e7d0      	b.n	8007704 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007762:	6903      	ldr	r3, [r0, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e2      	bne.n	800772e <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007768:	4b0b      	ldr	r3, [pc, #44]	; (8007798 <UART_Start_Receive_IT+0x134>)
 800776a:	6743      	str	r3, [r0, #116]	; 0x74
 800776c:	e7e1      	b.n	8007732 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800776e:	6903      	ldr	r3, [r0, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1b9      	bne.n	80076e8 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8007774:	4b09      	ldr	r3, [pc, #36]	; (800779c <UART_Start_Receive_IT+0x138>)
 8007776:	6743      	str	r3, [r0, #116]	; 0x74
 8007778:	e7b8      	b.n	80076ec <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800777a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	e852 3f00 	ldrex	r3, [r2]
 8007780:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	e842 3100 	strex	r1, r3, [r2]
 8007788:	2900      	cmp	r1, #0
 800778a:	d1f6      	bne.n	800777a <UART_Start_Receive_IT+0x116>
 800778c:	e7ba      	b.n	8007704 <UART_Start_Receive_IT+0xa0>
 800778e:	bf00      	nop
 8007790:	08006b09 	.word	0x08006b09
 8007794:	08006cbd 	.word	0x08006cbd
 8007798:	08006e89 	.word	0x08006e89
 800779c:	08006be5 	.word	0x08006be5

080077a0 <HAL_UART_Receive_IT>:
{
 80077a0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80077a2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d117      	bne.n	80077da <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80077aa:	b1c1      	cbz	r1, 80077de <HAL_UART_Receive_IT+0x3e>
 80077ac:	b1ca      	cbz	r2, 80077e2 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	2300      	movs	r3, #0
 80077b0:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077b2:	6803      	ldr	r3, [r0, #0]
 80077b4:	4c0c      	ldr	r4, [pc, #48]	; (80077e8 <HAL_UART_Receive_IT+0x48>)
 80077b6:	42a3      	cmp	r3, r4
 80077b8:	d00c      	beq.n	80077d4 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80077c0:	d008      	beq.n	80077d4 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077c2:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	e854 3f00 	ldrex	r3, [r4]
 80077c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	e844 3500 	strex	r5, r3, [r4]
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	d1f6      	bne.n	80077c2 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80077d4:	f7ff ff46 	bl	8007664 <UART_Start_Receive_IT>
 80077d8:	e000      	b.n	80077dc <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 80077da:	2002      	movs	r0, #2
}
 80077dc:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80077de:	2001      	movs	r0, #1
 80077e0:	e7fc      	b.n	80077dc <HAL_UART_Receive_IT+0x3c>
 80077e2:	2001      	movs	r0, #1
 80077e4:	e7fa      	b.n	80077dc <HAL_UART_Receive_IT+0x3c>
 80077e6:	bf00      	nop
 80077e8:	40008000 	.word	0x40008000

080077ec <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80077ec:	b082      	sub	sp, #8
 80077ee:	ab02      	add	r3, sp, #8
 80077f0:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80077f4:	6802      	ldr	r2, [r0, #0]
 80077f6:	6853      	ldr	r3, [r2, #4]
 80077f8:	f023 0310 	bic.w	r3, r3, #16
 80077fc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8007800:	430b      	orrs	r3, r1
 8007802:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007804:	6802      	ldr	r2, [r0, #0]
 8007806:	6853      	ldr	r3, [r2, #4]
 8007808:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800780c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007810:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007814:	6053      	str	r3, [r2, #4]
}
 8007816:	b002      	add	sp, #8
 8007818:	4770      	bx	lr
	...

0800781c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800781c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800781e:	b92b      	cbnz	r3, 800782c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007820:	2301      	movs	r3, #1
 8007822:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007826:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800782a:	4770      	bx	lr
{
 800782c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800782e:	6803      	ldr	r3, [r0, #0]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007836:	6899      	ldr	r1, [r3, #8]
 8007838:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800783a:	4d09      	ldr	r5, [pc, #36]	; (8007860 <UARTEx_SetNbDataToProcess+0x44>)
 800783c:	5c6b      	ldrb	r3, [r5, r1]
 800783e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007840:	4c08      	ldr	r4, [pc, #32]	; (8007864 <UARTEx_SetNbDataToProcess+0x48>)
 8007842:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007844:	fb93 f3f1 	sdiv	r3, r3, r1
 8007848:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800784c:	5cab      	ldrb	r3, [r5, r2]
 800784e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007850:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007852:	fb93 f3f2 	sdiv	r3, r3, r2
 8007856:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800785a:	bc30      	pop	{r4, r5}
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	080186c8 	.word	0x080186c8
 8007864:	080186c0 	.word	0x080186c0

08007868 <HAL_UARTEx_WakeupCallback>:
}
 8007868:	4770      	bx	lr

0800786a <HAL_UARTEx_RxFifoFullCallback>:
}
 800786a:	4770      	bx	lr

0800786c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800786c:	4770      	bx	lr

0800786e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800786e:	b510      	push	{r4, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	ab04      	add	r3, sp, #16
 8007874:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8007878:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800787c:	2b01      	cmp	r3, #1
 800787e:	d035      	beq.n	80078ec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8007880:	4604      	mov	r4, r0
 8007882:	2301      	movs	r3, #1
 8007884:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007888:	2324      	movs	r3, #36	; 0x24
 800788a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800788e:	6802      	ldr	r2, [r0, #0]
 8007890:	6813      	ldr	r3, [r2, #0]
 8007892:	f023 0301 	bic.w	r3, r3, #1
 8007896:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007898:	6801      	ldr	r1, [r0, #0]
 800789a:	688b      	ldr	r3, [r1, #8]
 800789c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80078a0:	9a02      	ldr	r2, [sp, #8]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80078a6:	b1aa      	cbz	r2, 80078d4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 80078a8:	6822      	ldr	r2, [r4, #0]
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	f043 0301 	orr.w	r3, r3, #1
 80078b0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80078b2:	f7fa fb27 	bl	8001f04 <HAL_GetTick>
 80078b6:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078b8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80078bc:	9200      	str	r2, [sp, #0]
 80078be:	2200      	movs	r2, #0
 80078c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078c4:	4620      	mov	r0, r4
 80078c6:	f7ff fd8e 	bl	80073e6 <UART_WaitOnFlagUntilTimeout>
 80078ca:	b948      	cbnz	r0, 80078e0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 80078cc:	2320      	movs	r3, #32
 80078ce:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80078d2:	e006      	b.n	80078e2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80078d4:	ab04      	add	r3, sp, #16
 80078d6:	e913 0006 	ldmdb	r3, {r1, r2}
 80078da:	f7ff ff87 	bl	80077ec <UARTEx_Wakeup_AddressConfig>
 80078de:	e7e3      	b.n	80078a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 80078e0:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 80078e2:	2300      	movs	r3, #0
 80078e4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 80078e8:	b004      	add	sp, #16
 80078ea:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80078ec:	2002      	movs	r0, #2
 80078ee:	e7fb      	b.n	80078e8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

080078f0 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80078f0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d010      	beq.n	800791a <HAL_UARTEx_EnableStopMode+0x2a>
 80078f8:	2301      	movs	r3, #1
 80078fa:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80078fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	e852 3f00 	ldrex	r3, [r2]
 8007904:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	e842 3100 	strex	r1, r3, [r2]
 800790c:	2900      	cmp	r1, #0
 800790e:	d1f6      	bne.n	80078fe <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8007910:	2300      	movs	r3, #0
 8007912:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8007916:	4618      	mov	r0, r3
 8007918:	4770      	bx	lr
  __HAL_LOCK(huart);
 800791a:	2002      	movs	r0, #2
}
 800791c:	4770      	bx	lr

0800791e <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800791e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8007922:	2b01      	cmp	r3, #1
 8007924:	d01d      	beq.n	8007962 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8007926:	b510      	push	{r4, lr}
 8007928:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800792a:	2301      	movs	r3, #1
 800792c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007930:	2324      	movs	r3, #36	; 0x24
 8007932:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007936:	6802      	ldr	r2, [r0, #0]
 8007938:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800793a:	6811      	ldr	r1, [r2, #0]
 800793c:	f021 0101 	bic.w	r1, r1, #1
 8007940:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007942:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007946:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800794a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800794c:	6802      	ldr	r2, [r0, #0]
 800794e:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8007950:	f7ff ff64 	bl	800781c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8007954:	2320      	movs	r3, #32
 8007956:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800795a:	2000      	movs	r0, #0
 800795c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8007960:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007962:	2002      	movs	r0, #2
}
 8007964:	4770      	bx	lr

08007966 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8007966:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800796a:	2b01      	cmp	r3, #1
 800796c:	d018      	beq.n	80079a0 <HAL_UARTEx_DisableFifoMode+0x3a>
 800796e:	2301      	movs	r3, #1
 8007970:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007974:	2324      	movs	r3, #36	; 0x24
 8007976:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800797a:	6803      	ldr	r3, [r0, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800797e:	6819      	ldr	r1, [r3, #0]
 8007980:	f021 0101 	bic.w	r1, r1, #1
 8007984:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007986:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800798a:	2300      	movs	r3, #0
 800798c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800798e:	6801      	ldr	r1, [r0, #0]
 8007990:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007992:	2220      	movs	r2, #32
 8007994:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007998:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 800799c:	4618      	mov	r0, r3
 800799e:	4770      	bx	lr
  __HAL_LOCK(huart);
 80079a0:	2002      	movs	r0, #2
}
 80079a2:	4770      	bx	lr

080079a4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80079a4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80079a6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d01d      	beq.n	80079ea <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80079ae:	4604      	mov	r4, r0
 80079b0:	2301      	movs	r3, #1
 80079b2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80079b6:	2324      	movs	r3, #36	; 0x24
 80079b8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079bc:	6803      	ldr	r3, [r0, #0]
 80079be:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	f022 0201 	bic.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079c8:	6802      	ldr	r2, [r0, #0]
 80079ca:	6893      	ldr	r3, [r2, #8]
 80079cc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80079d0:	4319      	orrs	r1, r3
 80079d2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80079d4:	f7ff ff22 	bl	800781c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80079dc:	2320      	movs	r3, #32
 80079de:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80079e2:	2000      	movs	r0, #0
 80079e4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80079e8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80079ea:	2002      	movs	r0, #2
 80079ec:	e7fc      	b.n	80079e8 <HAL_UARTEx_SetTxFifoThreshold+0x44>

080079ee <HAL_UARTEx_SetRxFifoThreshold>:
{
 80079ee:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80079f0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d01d      	beq.n	8007a34 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80079f8:	4604      	mov	r4, r0
 80079fa:	2301      	movs	r3, #1
 80079fc:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007a00:	2324      	movs	r3, #36	; 0x24
 8007a02:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a06:	6803      	ldr	r3, [r0, #0]
 8007a08:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a12:	6802      	ldr	r2, [r0, #0]
 8007a14:	6893      	ldr	r3, [r2, #8]
 8007a16:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8007a1a:	4319      	orrs	r1, r3
 8007a1c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007a1e:	f7ff fefd 	bl	800781c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007a26:	2320      	movs	r3, #32
 8007a28:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007a34:	2002      	movs	r0, #2
 8007a36:	e7fc      	b.n	8007a32 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08007a38 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8007a38:	2804      	cmp	r0, #4
 8007a3a:	d807      	bhi.n	8007a4c <LmHandlerPackageIsInitialized+0x14>
{
 8007a3c:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8007a3e:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <LmHandlerPackageIsInitialized+0x1c>)
 8007a40:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	b11b      	cbz	r3, 8007a50 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8007a48:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8007a4a:	bd08      	pop	{r3, pc}
        return false;
 8007a4c:	2000      	movs	r0, #0
}
 8007a4e:	4770      	bx	lr
        return false;
 8007a50:	2000      	movs	r0, #0
 8007a52:	e7fa      	b.n	8007a4a <LmHandlerPackageIsInitialized+0x12>
 8007a54:	200008e4 	.word	0x200008e4

08007a58 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007a5e:	2400      	movs	r4, #0
 8007a60:	e005      	b.n	8007a6e <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	b10b      	cbz	r3, 8007a6a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8007a66:	4630      	mov	r0, r6
 8007a68:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007a6a:	3401      	adds	r4, #1
 8007a6c:	b264      	sxtb	r4, r4
 8007a6e:	2c04      	cmp	r4, #4
 8007a70:	dc24      	bgt.n	8007abc <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8007a72:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <LmHandlerPackagesNotify+0x68>)
 8007a74:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0f6      	beq.n	8007a6a <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8007a7c:	2d03      	cmp	r5, #3
 8007a7e:	d8f4      	bhi.n	8007a6a <LmHandlerPackagesNotify+0x12>
 8007a80:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <LmHandlerPackagesNotify+0x30>)
 8007a82:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8007a86:	bf00      	nop
 8007a88:	08007a63 	.word	0x08007a63
 8007a8c:	08007a99 	.word	0x08007a99
 8007a90:	08007aa5 	.word	0x08007aa5
 8007a94:	08007ab1 	.word	0x08007ab1
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0e5      	beq.n	8007a6a <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	4798      	blx	r3
 8007aa2:	e7e2      	b.n	8007a6a <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0df      	beq.n	8007a6a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8007aaa:	4630      	mov	r0, r6
 8007aac:	4798      	blx	r3
 8007aae:	e7dc      	b.n	8007a6a <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0d9      	beq.n	8007a6a <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4798      	blx	r3
 8007aba:	e7d6      	b.n	8007a6a <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 8007abc:	bd70      	pop	{r4, r5, r6, pc}
 8007abe:	bf00      	nop
 8007ac0:	200008e4 	.word	0x200008e4

08007ac4 <MlmeIndication>:
{
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8007ac8:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <MlmeIndication+0x4c>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8007ace:	7842      	ldrb	r2, [r0, #1]
 8007ad0:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8007ad2:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8007ad6:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007ad8:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007adc:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8007ade:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8007ae2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8007ae4:	78ca      	ldrb	r2, [r1, #3]
 8007ae6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8007ae8:	6842      	ldr	r2, [r0, #4]
 8007aea:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8007aec:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <MlmeIndication+0x50>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	b13b      	cbz	r3, 8007b04 <MlmeIndication+0x40>
 8007af4:	7802      	ldrb	r2, [r0, #0]
 8007af6:	2a0a      	cmp	r2, #10
 8007af8:	d004      	beq.n	8007b04 <MlmeIndication+0x40>
 8007afa:	2a0e      	cmp	r2, #14
 8007afc:	d002      	beq.n	8007b04 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8007afe:	4904      	ldr	r1, [pc, #16]	; (8007b10 <MlmeIndication+0x4c>)
 8007b00:	2000      	movs	r0, #0
 8007b02:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8007b04:	4621      	mov	r1, r4
 8007b06:	2003      	movs	r0, #3
 8007b08:	f7ff ffa6 	bl	8007a58 <LmHandlerPackagesNotify>
}
 8007b0c:	bd10      	pop	{r4, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000088 	.word	0x20000088
 8007b14:	200008e0 	.word	0x200008e0

08007b18 <McpsConfirm>:
{
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8007b1c:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <McpsConfirm+0x3c>)
 8007b1e:	2201      	movs	r2, #1
 8007b20:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8007b22:	7842      	ldrb	r2, [r0, #1]
 8007b24:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8007b26:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8007b2a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8007b2c:	68c2      	ldr	r2, [r0, #12]
 8007b2e:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8007b30:	f990 2003 	ldrsb.w	r2, [r0, #3]
 8007b34:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8007b36:	6902      	ldr	r2, [r0, #16]
 8007b38:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8007b3a:	7902      	ldrb	r2, [r0, #4]
 8007b3c:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8007b3e:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <McpsConfirm+0x40>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b44:	b10b      	cbz	r3, 8007b4a <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8007b46:	4803      	ldr	r0, [pc, #12]	; (8007b54 <McpsConfirm+0x3c>)
 8007b48:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	f7ff ff83 	bl	8007a58 <LmHandlerPackagesNotify>
}
 8007b52:	bd10      	pop	{r4, pc}
 8007b54:	2000009c 	.word	0x2000009c
 8007b58:	200008e0 	.word	0x200008e0

08007b5c <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8007b5c:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007b5e:	2400      	movs	r4, #0
 8007b60:	e001      	b.n	8007b66 <LmHandlerPackageIsTxPending+0xa>
 8007b62:	3401      	adds	r4, #1
 8007b64:	b264      	sxtb	r4, r4
 8007b66:	2c04      	cmp	r4, #4
 8007b68:	dc0a      	bgt.n	8007b80 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <LmHandlerPackageIsTxPending+0x2c>)
 8007b6c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0f6      	beq.n	8007b62 <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	4798      	blx	r3
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d0f1      	beq.n	8007b62 <LmHandlerPackageIsTxPending+0x6>
 8007b7e:	e000      	b.n	8007b82 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	bf00      	nop
 8007b88:	200008e4 	.word	0x200008e4

08007b8c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8007b8c:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007b8e:	2400      	movs	r4, #0
 8007b90:	e001      	b.n	8007b96 <LmHandlerPackagesProcess+0xa>
 8007b92:	3401      	adds	r4, #1
 8007b94:	b264      	sxtb	r4, r4
 8007b96:	2c04      	cmp	r4, #4
 8007b98:	dc12      	bgt.n	8007bc0 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <LmHandlerPackagesProcess+0x38>)
 8007b9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0f6      	beq.n	8007b92 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007ba4:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0f3      	beq.n	8007b92 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8007baa:	b2e0      	uxtb	r0, r4
 8007bac:	f7ff ff44 	bl	8007a38 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d0ee      	beq.n	8007b92 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8007bb4:	4b03      	ldr	r3, [pc, #12]	; (8007bc4 <LmHandlerPackagesProcess+0x38>)
 8007bb6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	4798      	blx	r3
 8007bbe:	e7e8      	b.n	8007b92 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8007bc0:	bd38      	pop	{r3, r4, r5, pc}
 8007bc2:	bf00      	nop
 8007bc4:	200008e4 	.word	0x200008e4

08007bc8 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 8007bc8:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8007bca:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <LmHandlerOnTxFrameCtrlChanged+0x14>)
 8007bcc:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 8007bce:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	b103      	cbz	r3, 8007bd8 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 8007bd6:	4798      	blx	r3
    }
}
 8007bd8:	bd08      	pop	{r3, pc}
 8007bda:	bf00      	nop
 8007bdc:	200008f8 	.word	0x200008f8
 8007be0:	200008e0 	.word	0x200008e0

08007be4 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 8007be4:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8007be6:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 8007be8:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 8007bea:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf0:	b103      	cbz	r3, 8007bf4 <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 8007bf2:	4798      	blx	r3
    }
}
 8007bf4:	bd08      	pop	{r3, pc}
 8007bf6:	bf00      	nop
 8007bf8:	200008f8 	.word	0x200008f8
 8007bfc:	200008e0 	.word	0x200008e0

08007c00 <LmHandlerJoin>:
{
 8007c00:	b530      	push	{r4, r5, lr}
 8007c02:	b091      	sub	sp, #68	; 0x44
 8007c04:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007c0c:	4b33      	ldr	r3, [pc, #204]	; (8007cdc <LmHandlerJoin+0xdc>)
 8007c0e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8007c12:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 8007c16:	f993 1005 	ldrsb.w	r1, [r3, #5]
 8007c1a:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 8007c1e:	2802      	cmp	r0, #2
 8007c20:	d022      	beq.n	8007c68 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007c22:	2001      	movs	r0, #1
 8007c24:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007c28:	4b2d      	ldr	r3, [pc, #180]	; (8007ce0 <LmHandlerJoin+0xe0>)
 8007c2a:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007c2c:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 8007c2e:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007c30:	2100      	movs	r1, #0
 8007c32:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8007c34:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 8007c36:	4b2b      	ldr	r3, [pc, #172]	; (8007ce4 <LmHandlerJoin+0xe4>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	b1f3      	cbz	r3, 8007c7a <LmHandlerJoin+0x7a>
        LoRaMacStart();
 8007c3c:	f003 fb0c 	bl	800b258 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007c40:	2301      	movs	r3, #1
 8007c42:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007c46:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007c4a:	a801      	add	r0, sp, #4
 8007c4c:	f003 fd42 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8007c50:	4b24      	ldr	r3, [pc, #144]	; (8007ce4 <LmHandlerJoin+0xe4>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	b103      	cbz	r3, 8007c58 <LmHandlerJoin+0x58>
 8007c56:	b114      	cbz	r4, 8007c5e <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 8007c58:	a80b      	add	r0, sp, #44	; 0x2c
 8007c5a:	f003 ffef 	bl	800bc3c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007c5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c60:	4b21      	ldr	r3, [pc, #132]	; (8007ce8 <LmHandlerJoin+0xe8>)
 8007c62:	601a      	str	r2, [r3, #0]
}
 8007c64:	b011      	add	sp, #68	; 0x44
 8007c66:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007c68:	2202      	movs	r2, #2
 8007c6a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007c6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ce0 <LmHandlerJoin+0xe0>)
 8007c70:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 8007c72:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 8007c74:	f003 faf0 	bl	800b258 <LoRaMacStart>
 8007c78:	e7ea      	b.n	8007c50 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8007c7a:	231f      	movs	r3, #31
 8007c7c:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8007c80:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007c84:	a801      	add	r0, sp, #4
 8007c86:	f003 fd25 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8007c8a:	2320      	movs	r3, #32
 8007c8c:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8007c90:	4d12      	ldr	r5, [pc, #72]	; (8007cdc <LmHandlerJoin+0xdc>)
 8007c92:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8007c96:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007c9a:	a801      	add	r0, sp, #4
 8007c9c:	f003 fd1a 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8007ca0:	2322      	movs	r3, #34	; 0x22
 8007ca2:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8007ca6:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8007caa:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007cae:	a801      	add	r0, sp, #4
 8007cb0:	f003 fd10 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8007cb4:	2321      	movs	r3, #33	; 0x21
 8007cb6:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8007cba:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8007cbe:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007cc2:	a801      	add	r0, sp, #4
 8007cc4:	f003 fd06 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8007cc8:	2329      	movs	r3, #41	; 0x29
 8007cca:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8007cce:	4b07      	ldr	r3, [pc, #28]	; (8007cec <LmHandlerJoin+0xec>)
 8007cd0:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007cd2:	a801      	add	r0, sp, #4
 8007cd4:	f003 fcfe 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
 8007cd8:	e7b0      	b.n	8007c3c <LmHandlerJoin+0x3c>
 8007cda:	bf00      	nop
 8007cdc:	200008f8 	.word	0x200008f8
 8007ce0:	2000007c 	.word	0x2000007c
 8007ce4:	200008d4 	.word	0x200008d4
 8007ce8:	200008d8 	.word	0x200008d8
 8007cec:	01000400 	.word	0x01000400

08007cf0 <LmHandlerDeviceTimeReq>:
{
 8007cf0:	b500      	push	{lr}
 8007cf2:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8007cf4:	2309      	movs	r3, #9
 8007cf6:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8007cfa:	a801      	add	r0, sp, #4
 8007cfc:	f003 ff9e 	bl	800bc3c <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007d00:	9a05      	ldr	r2, [sp, #20]
 8007d02:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <LmHandlerDeviceTimeReq+0x24>)
 8007d04:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 8007d06:	b910      	cbnz	r0, 8007d0e <LmHandlerDeviceTimeReq+0x1e>
}
 8007d08:	b007      	add	sp, #28
 8007d0a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d12:	e7f9      	b.n	8007d08 <LmHandlerDeviceTimeReq+0x18>
 8007d14:	200008d8 	.word	0x200008d8

08007d18 <LmHandlerGetDutyCycleWaitTime>:
}
 8007d18:	4b01      	ldr	r3, [pc, #4]	; (8007d20 <LmHandlerGetDutyCycleWaitTime+0x8>)
 8007d1a:	6818      	ldr	r0, [r3, #0]
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	200008d8 	.word	0x200008d8

08007d24 <LmHandlerJoinStatus>:
{
 8007d24:	b500      	push	{lr}
 8007d26:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8007d2e:	4668      	mov	r0, sp
 8007d30:	f003 fb5c 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8007d34:	b920      	cbnz	r0, 8007d40 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007d36:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8007d3a:	b110      	cbz	r0, 8007d42 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 8007d3c:	2001      	movs	r0, #1
 8007d3e:	e000      	b.n	8007d42 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8007d40:	2000      	movs	r0, #0
}
 8007d42:	b00b      	add	sp, #44	; 0x2c
 8007d44:	f85d fb04 	ldr.w	pc, [sp], #4

08007d48 <LmHandlerIsBusy>:
{
 8007d48:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 8007d4a:	f003 f833 	bl	800adb4 <LoRaMacIsBusy>
 8007d4e:	b100      	cbz	r0, 8007d52 <LmHandlerIsBusy+0xa>
}
 8007d50:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007d52:	f7ff ffe7 	bl	8007d24 <LmHandlerJoinStatus>
 8007d56:	2801      	cmp	r0, #1
 8007d58:	d006      	beq.n	8007d68 <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8007d5a:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <LmHandlerIsBusy+0x28>)
 8007d5c:	7a19      	ldrb	r1, [r3, #8]
 8007d5e:	79d8      	ldrb	r0, [r3, #7]
 8007d60:	f7ff ff4e 	bl	8007c00 <LmHandlerJoin>
        return true;
 8007d64:	2001      	movs	r0, #1
 8007d66:	e7f3      	b.n	8007d50 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007d68:	f7ff fef8 	bl	8007b5c <LmHandlerPackageIsTxPending>
 8007d6c:	e7f0      	b.n	8007d50 <LmHandlerIsBusy+0x8>
 8007d6e:	bf00      	nop
 8007d70:	2000007c 	.word	0x2000007c

08007d74 <LmHandlerSend>:
{
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	4604      	mov	r4, r0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 8007d7e:	f003 f819 	bl	800adb4 <LoRaMacIsBusy>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d168      	bne.n	8007e58 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 8007d86:	f003 f833 	bl	800adf0 <LoRaMacIsStopped>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d167      	bne.n	8007e5e <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007d8e:	f7ff ffc9 	bl	8007d24 <LmHandlerJoinStatus>
 8007d92:	2801      	cmp	r0, #1
 8007d94:	d137      	bne.n	8007e06 <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 8007d96:	4b35      	ldr	r3, [pc, #212]	; (8007e6c <LmHandlerSend+0xf8>)
 8007d98:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8007d9a:	3d00      	subs	r5, #0
 8007d9c:	bf18      	it	ne
 8007d9e:	2501      	movne	r5, #1
 8007da0:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007da4:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <LmHandlerSend+0xfc>)
 8007da6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007daa:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007dae:	4669      	mov	r1, sp
 8007db0:	7860      	ldrb	r0, [r4, #1]
 8007db2:	f003 fab1 	bl	800b318 <LoRaMacQueryTxPossible>
 8007db6:	b370      	cbz	r0, 8007e16 <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007db8:	2300      	movs	r3, #0
 8007dba:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007dbe:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8007dc0:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8007dc4:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8007dc8:	4b28      	ldr	r3, [pc, #160]	; (8007e6c <LmHandlerSend+0xf8>)
 8007dca:	f103 0c10 	add.w	ip, r3, #16
 8007dce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007dd2:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007dd6:	4a26      	ldr	r2, [pc, #152]	; (8007e70 <LmHandlerSend+0xfc>)
 8007dd8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007ddc:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8007dde:	4631      	mov	r1, r6
 8007de0:	a801      	add	r0, sp, #4
 8007de2:	f004 f82f 	bl	800be44 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8007de6:	9a05      	ldr	r2, [sp, #20]
 8007de8:	4b22      	ldr	r3, [pc, #136]	; (8007e74 <LmHandlerSend+0x100>)
 8007dea:	601a      	str	r2, [r3, #0]
    switch( status )
 8007dec:	2811      	cmp	r0, #17
 8007dee:	d830      	bhi.n	8007e52 <LmHandlerSend+0xde>
 8007df0:	e8df f000 	tbb	[pc, r0]
 8007df4:	2f2f1c21 	.word	0x2f2f1c21
 8007df8:	382f2f2f 	.word	0x382f2f2f
 8007dfc:	2c2f2f2f 	.word	0x2c2f2f2f
 8007e00:	1c1c2f2f 	.word	0x1c1c2f2f
 8007e04:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8007e06:	4b1c      	ldr	r3, [pc, #112]	; (8007e78 <LmHandlerSend+0x104>)
 8007e08:	7a19      	ldrb	r1, [r3, #8]
 8007e0a:	79d8      	ldrb	r0, [r3, #7]
 8007e0c:	f7ff fef8 	bl	8007c00 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007e10:	f06f 0502 	mvn.w	r5, #2
 8007e14:	e00c      	b.n	8007e30 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8007e16:	7823      	ldrb	r3, [r4, #0]
 8007e18:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8007e1c:	7863      	ldrb	r3, [r4, #1]
 8007e1e:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8007e22:	6863      	ldr	r3, [r4, #4]
 8007e24:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8007e26:	f04f 35ff 	mov.w	r5, #4294967295
 8007e2a:	e7cd      	b.n	8007dc8 <LmHandlerSend+0x54>
    switch( status )
 8007e2c:	f06f 0501 	mvn.w	r5, #1
}
 8007e30:	4628      	mov	r0, r5
 8007e32:	b006      	add	sp, #24
 8007e34:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 8007e36:	4b11      	ldr	r3, [pc, #68]	; (8007e7c <LmHandlerSend+0x108>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8007e3c:	f115 0f07 	cmn.w	r5, #7
 8007e40:	d0f6      	beq.n	8007e30 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8007e42:	2500      	movs	r5, #0
 8007e44:	e7f4      	b.n	8007e30 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8007e46:	f06f 0504 	mvn.w	r5, #4
            break;
 8007e4a:	e7f1      	b.n	8007e30 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8007e4c:	f06f 0505 	mvn.w	r5, #5
            break;
 8007e50:	e7ee      	b.n	8007e30 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007e52:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 8007e56:	e7eb      	b.n	8007e30 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007e58:	f06f 0501 	mvn.w	r5, #1
 8007e5c:	e7e8      	b.n	8007e30 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007e5e:	f06f 0502 	mvn.w	r5, #2
 8007e62:	e7e5      	b.n	8007e30 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007e64:	f06f 0502 	mvn.w	r5, #2
 8007e68:	e7e2      	b.n	8007e30 <LmHandlerSend+0xbc>
 8007e6a:	bf00      	nop
 8007e6c:	2000009c 	.word	0x2000009c
 8007e70:	200008f8 	.word	0x200008f8
 8007e74:	200008d8 	.word	0x200008d8
 8007e78:	2000007c 	.word	0x2000007c
 8007e7c:	200008dc 	.word	0x200008dc

08007e80 <LmHandlerProcess>:
{
 8007e80:	b500      	push	{lr}
 8007e82:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8007e84:	f002 ffc0 	bl	800ae08 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8007e88:	f7ff fe80 	bl	8007b8c <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007e8c:	f7ff fe66 	bl	8007b5c <LmHandlerPackageIsTxPending>
 8007e90:	b910      	cbnz	r0, 8007e98 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8007e92:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <LmHandlerProcess+0x40>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	b913      	cbnz	r3, 8007e9e <LmHandlerProcess+0x1e>
}
 8007e98:	b003      	add	sp, #12
 8007e9a:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f88d 2000 	strb.w	r2, [sp]
 8007ea4:	f88d 2001 	strb.w	r2, [sp, #1]
 8007ea8:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 8007eaa:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <LmHandlerProcess+0x44>)
 8007eac:	78d9      	ldrb	r1, [r3, #3]
 8007eae:	4668      	mov	r0, sp
 8007eb0:	f7ff ff60 	bl	8007d74 <LmHandlerSend>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d1ef      	bne.n	8007e98 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8007eb8:	4b01      	ldr	r3, [pc, #4]	; (8007ec0 <LmHandlerProcess+0x40>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	e7eb      	b.n	8007e98 <LmHandlerProcess+0x18>
 8007ec0:	200008dc 	.word	0x200008dc
 8007ec4:	200008f8 	.word	0x200008f8

08007ec8 <LmHandlerRequestClass>:
{
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	b08a      	sub	sp, #40	; 0x28
 8007ecc:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 8007ece:	f002 ff71 	bl	800adb4 <LoRaMacIsBusy>
 8007ed2:	bbb0      	cbnz	r0, 8007f42 <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8007ed4:	f7ff ff26 	bl	8007d24 <LmHandlerJoinStatus>
 8007ed8:	2801      	cmp	r0, #1
 8007eda:	d135      	bne.n	8007f48 <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 8007edc:	2300      	movs	r3, #0
 8007ede:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007ee2:	4668      	mov	r0, sp
 8007ee4:	f003 fa82 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
 8007ee8:	bb88      	cbnz	r0, 8007f4e <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 8007eea:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 8007eee:	42a3      	cmp	r3, r4
 8007ef0:	d030      	beq.n	8007f54 <LmHandlerRequestClass+0x8c>
        switch( newClass )
 8007ef2:	2c01      	cmp	r4, #1
 8007ef4:	d030      	beq.n	8007f58 <LmHandlerRequestClass+0x90>
 8007ef6:	2c02      	cmp	r4, #2
 8007ef8:	d014      	beq.n	8007f24 <LmHandlerRequestClass+0x5c>
 8007efa:	b114      	cbz	r4, 8007f02 <LmHandlerRequestClass+0x3a>
 8007efc:	2000      	movs	r0, #0
}
 8007efe:	b00a      	add	sp, #40	; 0x28
 8007f00:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 8007f02:	b90b      	cbnz	r3, 8007f08 <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007f04:	2000      	movs	r0, #0
 8007f06:	e7fa      	b.n	8007efe <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 8007f08:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007f0c:	4668      	mov	r0, sp
 8007f0e:	f003 fbe1 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
 8007f12:	bb20      	cbnz	r0, 8007f5e <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8007f14:	4b18      	ldr	r3, [pc, #96]	; (8007f78 <LmHandlerRequestClass+0xb0>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	b31b      	cbz	r3, 8007f64 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007f20:	2000      	movs	r0, #0
 8007f22:	e7ec      	b.n	8007efe <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 8007f24:	bb03      	cbnz	r3, 8007f68 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 8007f26:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007f2a:	4668      	mov	r0, sp
 8007f2c:	f003 fbd2 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
 8007f30:	b9e8      	cbnz	r0, 8007f6e <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8007f32:	4b11      	ldr	r3, [pc, #68]	; (8007f78 <LmHandlerRequestClass+0xb0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f38:	b1e3      	cbz	r3, 8007f74 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007f3e:	2000      	movs	r0, #0
 8007f40:	e7dd      	b.n	8007efe <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007f42:	f06f 0001 	mvn.w	r0, #1
 8007f46:	e7da      	b.n	8007efe <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007f48:	f06f 0002 	mvn.w	r0, #2
 8007f4c:	e7d7      	b.n	8007efe <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 8007f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f52:	e7d4      	b.n	8007efe <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007f54:	2000      	movs	r0, #0
 8007f56:	e7d2      	b.n	8007efe <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	e7cf      	b.n	8007efe <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f62:	e7cc      	b.n	8007efe <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007f64:	2000      	movs	r0, #0
 8007f66:	e7ca      	b.n	8007efe <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	e7c7      	b.n	8007efe <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8007f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f72:	e7c4      	b.n	8007efe <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007f74:	2000      	movs	r0, #0
 8007f76:	e7c2      	b.n	8007efe <LmHandlerRequestClass+0x36>
 8007f78:	200008e0 	.word	0x200008e0

08007f7c <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 8007f7c:	b170      	cbz	r0, 8007f9c <LmHandlerGetCurrentClass+0x20>
{
 8007f7e:	b510      	push	{r4, lr}
 8007f80:	b08a      	sub	sp, #40	; 0x28
 8007f82:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 8007f84:	2300      	movs	r3, #0
 8007f86:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007f8a:	4668      	mov	r0, sp
 8007f8c:	f003 fa2e 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
 8007f90:	b938      	cbnz	r0, 8007fa2 <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 8007f92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007f96:	7023      	strb	r3, [r4, #0]
}
 8007f98:	b00a      	add	sp, #40	; 0x28
 8007f9a:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007fa0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa6:	e7f7      	b.n	8007f98 <LmHandlerGetCurrentClass+0x1c>

08007fa8 <McpsIndication>:
{
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 8007fac:	2300      	movs	r3, #0
 8007fae:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 8007fb2:	4a1d      	ldr	r2, [pc, #116]	; (8008028 <McpsIndication+0x80>)
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8007fb8:	7843      	ldrb	r3, [r0, #1]
 8007fba:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d131      	bne.n	8008024 <McpsIndication+0x7c>
 8007fc0:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8007fc2:	f990 2004 	ldrsb.w	r2, [r0, #4]
 8007fc6:	4b18      	ldr	r3, [pc, #96]	; (8008028 <McpsIndication+0x80>)
 8007fc8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007fca:	f9b1 2000 	ldrsh.w	r2, [r1]
 8007fce:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8007fd0:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8007fd4:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8007fd6:	78ca      	ldrb	r2, [r1, #3]
 8007fd8:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007fda:	6902      	ldr	r2, [r0, #16]
 8007fdc:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 8007fde:	78c3      	ldrb	r3, [r0, #3]
 8007fe0:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8007fe4:	7b03      	ldrb	r3, [r0, #12]
 8007fe6:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8007fea:	6883      	ldr	r3, [r0, #8]
 8007fec:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 8007fee:	4b0f      	ldr	r3, [pc, #60]	; (800802c <McpsIndication+0x84>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	b113      	cbz	r3, 8007ffc <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8007ff6:	490c      	ldr	r1, [pc, #48]	; (8008028 <McpsIndication+0x80>)
 8007ff8:	a802      	add	r0, sp, #8
 8007ffa:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	; (800802c <McpsIndication+0x84>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	b113      	cbz	r3, 800800a <McpsIndication+0x62>
 8008004:	7e22      	ldrb	r2, [r4, #24]
 8008006:	b102      	cbz	r2, 800800a <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008008:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800800a:	4621      	mov	r1, r4
 800800c:	2001      	movs	r0, #1
 800800e:	f7ff fd23 	bl	8007a58 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8008012:	f10d 0007 	add.w	r0, sp, #7
 8008016:	f7ff ffb1 	bl	8007f7c <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800801a:	7963      	ldrb	r3, [r4, #5]
 800801c:	b113      	cbz	r3, 8008024 <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 800801e:	4b04      	ldr	r3, [pc, #16]	; (8008030 <McpsIndication+0x88>)
 8008020:	2201      	movs	r2, #1
 8008022:	701a      	strb	r2, [r3, #0]
}
 8008024:	b004      	add	sp, #16
 8008026:	bd10      	pop	{r4, pc}
 8008028:	20000088 	.word	0x20000088
 800802c:	200008e0 	.word	0x200008e0
 8008030:	200008dc 	.word	0x200008dc

08008034 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 8008034:	b180      	cbz	r0, 8008058 <LmHandlerGetTxDatarate+0x24>
{
 8008036:	b510      	push	{r4, lr}
 8008038:	b08a      	sub	sp, #40	; 0x28
 800803a:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800803c:	2320      	movs	r3, #32
 800803e:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8008042:	4668      	mov	r0, sp
 8008044:	f003 f9d2 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
 8008048:	b948      	cbnz	r0, 800805e <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800804a:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800804e:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008050:	4a04      	ldr	r2, [pc, #16]	; (8008064 <LmHandlerGetTxDatarate+0x30>)
 8008052:	7113      	strb	r3, [r2, #4]
}
 8008054:	b00a      	add	sp, #40	; 0x28
 8008056:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
}
 800805c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800805e:	f04f 30ff 	mov.w	r0, #4294967295
 8008062:	e7f7      	b.n	8008054 <LmHandlerGetTxDatarate+0x20>
 8008064:	200008f8 	.word	0x200008f8

08008068 <LmHandlerSetSystemMaxRxError>:
{
 8008068:	b500      	push	{lr}
 800806a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800806c:	2323      	movs	r3, #35	; 0x23
 800806e:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8008072:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008074:	4668      	mov	r0, sp
 8008076:	f003 fb2d 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
 800807a:	b910      	cbnz	r0, 8008082 <LmHandlerSetSystemMaxRxError+0x1a>
}
 800807c:	b00b      	add	sp, #44	; 0x2c
 800807e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008082:	f04f 30ff 	mov.w	r0, #4294967295
 8008086:	e7f9      	b.n	800807c <LmHandlerSetSystemMaxRxError+0x14>

08008088 <LmHandlerConfigure>:
{
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	b08e      	sub	sp, #56	; 0x38
 800808c:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800808e:	4c6d      	ldr	r4, [pc, #436]	; (8008244 <LmHandlerConfigure+0x1bc>)
 8008090:	2218      	movs	r2, #24
 8008092:	4620      	mov	r0, r4
 8008094:	f008 f945 	bl	8010322 <memcpy1>
    IsUplinkTxPending = false;
 8008098:	4b6b      	ldr	r3, [pc, #428]	; (8008248 <LmHandlerConfigure+0x1c0>)
 800809a:	2200      	movs	r2, #0
 800809c:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 800809e:	f7fb f97d 	bl	800339c <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 80080a2:	7822      	ldrb	r2, [r4, #0]
 80080a4:	2301      	movs	r3, #1
 80080a6:	4093      	lsls	r3, r2
 80080a8:	6841      	ldr	r1, [r0, #4]
 80080aa:	420b      	tst	r3, r1
 80080ac:	d106      	bne.n	80080bc <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 80080ae:	4b67      	ldr	r3, [pc, #412]	; (800824c <LmHandlerConfigure+0x1c4>)
 80080b0:	2201      	movs	r2, #1
 80080b2:	2100      	movs	r1, #0
 80080b4:	4608      	mov	r0, r1
 80080b6:	f00a f813 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 80080ba:	e7fe      	b.n	80080ba <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 80080bc:	4964      	ldr	r1, [pc, #400]	; (8008250 <LmHandlerConfigure+0x1c8>)
 80080be:	4865      	ldr	r0, [pc, #404]	; (8008254 <LmHandlerConfigure+0x1cc>)
 80080c0:	f002 feea 	bl	800ae98 <LoRaMacInitialization>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f040 80b7 	bne.w	8008238 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 80080ca:	2327      	movs	r3, #39	; 0x27
 80080cc:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80080d0:	a804      	add	r0, sp, #16
 80080d2:	f003 faff 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d17c      	bne.n	80081d4 <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 80080da:	4b5f      	ldr	r3, [pc, #380]	; (8008258 <LmHandlerConfigure+0x1d0>)
 80080dc:	2201      	movs	r2, #1
 80080de:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 80080e0:	4b5d      	ldr	r3, [pc, #372]	; (8008258 <LmHandlerConfigure+0x1d0>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 809e 	beq.w	8008226 <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80080ea:	4b5c      	ldr	r3, [pc, #368]	; (800825c <LmHandlerConfigure+0x1d4>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	b10b      	cbz	r3, 80080f6 <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 80080f2:	2000      	movs	r0, #0
 80080f4:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80080f6:	2327      	movs	r3, #39	; 0x27
 80080f8:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80080fc:	a804      	add	r0, sp, #16
 80080fe:	f003 f975 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 8008102:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 8008104:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 8008108:	4b4e      	ldr	r3, [pc, #312]	; (8008244 <LmHandlerConfigure+0x1bc>)
 800810a:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800810c:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 8008110:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 8008112:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 8008116:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 8008118:	4b4d      	ldr	r3, [pc, #308]	; (8008250 <LmHandlerConfigure+0x1c8>)
 800811a:	68d9      	ldr	r1, [r3, #12]
 800811c:	6898      	ldr	r0, [r3, #8]
 800811e:	f008 f813 	bl	8010148 <SecureElementInitMcuID>
 8008122:	2800      	cmp	r0, #0
 8008124:	f040 808b 	bne.w	800823e <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 8008128:	2306      	movs	r3, #6
 800812a:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800812e:	a804      	add	r0, sp, #16
 8008130:	f003 f95c 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008134:	4c4a      	ldr	r4, [pc, #296]	; (8008260 <LmHandlerConfigure+0x1d8>)
 8008136:	9b05      	ldr	r3, [sp, #20]
 8008138:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800813a:	a804      	add	r0, sp, #16
 800813c:	f003 faca 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 8008140:	2302      	movs	r3, #2
 8008142:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 8008146:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008148:	a804      	add	r0, sp, #16
 800814a:	f003 f94f 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 800814e:	2303      	movs	r3, #3
 8008150:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 8008154:	3408      	adds	r4, #8
 8008156:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008158:	a804      	add	r0, sp, #16
 800815a:	f003 f947 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 800815e:	f008 f88d 	bl	801027c <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8008162:	260f      	movs	r6, #15
 8008164:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008168:	2301      	movs	r3, #1
 800816a:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800816e:	a804      	add	r0, sp, #16
 8008170:	f003 fab0 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8008174:	2310      	movs	r3, #16
 8008176:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800817a:	2500      	movs	r5, #0
 800817c:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008180:	eb0d 0003 	add.w	r0, sp, r3
 8008184:	f003 faa6 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8008188:	2304      	movs	r3, #4
 800818a:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800818e:	4c2d      	ldr	r4, [pc, #180]	; (8008244 <LmHandlerConfigure+0x1bc>)
 8008190:	78a3      	ldrb	r3, [r4, #2]
 8008192:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008196:	a804      	add	r0, sp, #16
 8008198:	f003 fa9c 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800819c:	233a      	movs	r3, #58	; 0x3a
 800819e:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 80081a2:	6963      	ldr	r3, [r4, #20]
 80081a4:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80081a6:	a804      	add	r0, sp, #16
 80081a8:	f003 fa94 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80081ac:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80081b0:	a902      	add	r1, sp, #8
 80081b2:	7820      	ldrb	r0, [r4, #0]
 80081b4:	f004 ffee 	bl	800d194 <RegionGetPhyParam>
 80081b8:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 80081ba:	1b43      	subs	r3, r0, r5
 80081bc:	bf18      	it	ne
 80081be:	2301      	movne	r3, #1
 80081c0:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 80081c2:	2014      	movs	r0, #20
 80081c4:	f7ff ff50 	bl	8008068 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80081c8:	79e0      	ldrb	r0, [r4, #7]
 80081ca:	f003 ff29 	bl	800c020 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 80081ce:	4628      	mov	r0, r5
}
 80081d0:	b00e      	add	sp, #56	; 0x38
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 80081d4:	2328      	movs	r3, #40	; 0x28
 80081d6:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 80081da:	4b20      	ldr	r3, [pc, #128]	; (800825c <LmHandlerConfigure+0x1d4>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	b14b      	cbz	r3, 80081f6 <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 80081e2:	a804      	add	r0, sp, #16
 80081e4:	f003 f902 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 80081e8:	4b1c      	ldr	r3, [pc, #112]	; (800825c <LmHandlerConfigure+0x1d4>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f240 51cc 	movw	r1, #1484	; 0x5cc
 80081f2:	9805      	ldr	r0, [sp, #20]
 80081f4:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80081f6:	2327      	movs	r3, #39	; 0x27
 80081f8:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80081fc:	a804      	add	r0, sp, #16
 80081fe:	f003 fa69 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
 8008202:	2800      	cmp	r0, #0
 8008204:	f47f af6c 	bne.w	80080e0 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008208:	2301      	movs	r3, #1
 800820a:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800820e:	a804      	add	r0, sp, #16
 8008210:	f003 f8ec 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008214:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f43f af61 	beq.w	80080e0 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 800821e:	4b0e      	ldr	r3, [pc, #56]	; (8008258 <LmHandlerConfigure+0x1d0>)
 8008220:	2201      	movs	r2, #1
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	e75c      	b.n	80080e0 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 8008226:	2305      	movs	r3, #5
 8008228:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800822c:	2300      	movs	r3, #0
 800822e:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008230:	a804      	add	r0, sp, #16
 8008232:	f003 fa4f 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
 8008236:	e76f      	b.n	8008118 <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	e7c8      	b.n	80081d0 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 800823e:	f04f 30ff 	mov.w	r0, #4294967295
 8008242:	e7c5      	b.n	80081d0 <LmHandlerConfigure+0x148>
 8008244:	200008f8 	.word	0x200008f8
 8008248:	200008dc 	.word	0x200008dc
 800824c:	080186d0 	.word	0x080186d0
 8008250:	20000920 	.word	0x20000920
 8008254:	20000938 	.word	0x20000938
 8008258:	200008d4 	.word	0x200008d4
 800825c:	200008e0 	.word	0x200008e0
 8008260:	200008bc 	.word	0x200008bc

08008264 <LmHandlerPackageRegister>:
{
 8008264:	b530      	push	{r4, r5, lr}
 8008266:	b083      	sub	sp, #12
 8008268:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800826a:	2300      	movs	r3, #0
 800826c:	9301      	str	r3, [sp, #4]
    switch( id )
 800826e:	4604      	mov	r4, r0
 8008270:	b9d8      	cbnz	r0, 80082aa <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 8008272:	f000 fc1b 	bl	8008aac <LmhpCompliancePackageFactory>
 8008276:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 8008278:	9b01      	ldr	r3, [sp, #4]
 800827a:	b1f3      	cbz	r3, 80082ba <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 800827c:	4a10      	ldr	r2, [pc, #64]	; (80082c0 <LmHandlerPackageRegister+0x5c>)
 800827e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008282:	4a10      	ldr	r2, [pc, #64]	; (80082c4 <LmHandlerPackageRegister+0x60>)
 8008284:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8008286:	4a10      	ldr	r2, [pc, #64]	; (80082c8 <LmHandlerPackageRegister+0x64>)
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800828c:	6319      	str	r1, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800828e:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8008290:	6359      	str	r1, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008292:	490e      	ldr	r1, [pc, #56]	; (80082cc <LmHandlerPackageRegister+0x68>)
 8008294:	62d9      	str	r1, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008296:	6992      	ldr	r2, [r2, #24]
 8008298:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	22f2      	movs	r2, #242	; 0xf2
 800829e:	490c      	ldr	r1, [pc, #48]	; (80082d0 <LmHandlerPackageRegister+0x6c>)
 80082a0:	4628      	mov	r0, r5
 80082a2:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 80082a4:	2000      	movs	r0, #0
}
 80082a6:	b003      	add	sp, #12
 80082a8:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 80082aa:	a901      	add	r1, sp, #4
 80082ac:	f000 fc04 	bl	8008ab8 <LmhpPackagesRegister>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d0e1      	beq.n	8008278 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295
 80082b8:	e7f5      	b.n	80082a6 <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 80082ba:	f04f 30ff 	mov.w	r0, #4294967295
 80082be:	e7f2      	b.n	80082a6 <LmHandlerPackageRegister+0x42>
 80082c0:	200008e4 	.word	0x200008e4
 80082c4:	08007c01 	.word	0x08007c01
 80082c8:	200008e0 	.word	0x200008e0
 80082cc:	08007cf1 	.word	0x08007cf1
 80082d0:	200007c8 	.word	0x200007c8

080082d4 <LmHandlerInit>:
{
 80082d4:	b500      	push	{lr}
 80082d6:	b083      	sub	sp, #12
 80082d8:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 80082da:	4b19      	ldr	r3, [pc, #100]	; (8008340 <LmHandlerInit+0x6c>)
 80082dc:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80082de:	4b19      	ldr	r3, [pc, #100]	; (8008344 <LmHandlerInit+0x70>)
 80082e0:	4a19      	ldr	r2, [pc, #100]	; (8008348 <LmHandlerInit+0x74>)
 80082e2:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80082e4:	4a19      	ldr	r2, [pc, #100]	; (800834c <LmHandlerInit+0x78>)
 80082e6:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80082e8:	4a19      	ldr	r2, [pc, #100]	; (8008350 <LmHandlerInit+0x7c>)
 80082ea:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80082ec:	4a19      	ldr	r2, [pc, #100]	; (8008354 <LmHandlerInit+0x80>)
 80082ee:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80082f0:	6802      	ldr	r2, [r0, #0]
 80082f2:	4b19      	ldr	r3, [pc, #100]	; (8008358 <LmHandlerInit+0x84>)
 80082f4:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80082f6:	6842      	ldr	r2, [r0, #4]
 80082f8:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80082fa:	6882      	ldr	r2, [r0, #8]
 80082fc:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 80082fe:	68c2      	ldr	r2, [r0, #12]
 8008300:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8008302:	4a16      	ldr	r2, [pc, #88]	; (800835c <LmHandlerInit+0x88>)
 8008304:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8008306:	6982      	ldr	r2, [r0, #24]
 8008308:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800830a:	4b15      	ldr	r3, [pc, #84]	; (8008360 <LmHandlerInit+0x8c>)
 800830c:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800830e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008310:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 8008312:	4a14      	ldr	r2, [pc, #80]	; (8008364 <LmHandlerInit+0x90>)
 8008314:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 8008316:	4a14      	ldr	r2, [pc, #80]	; (8008368 <LmHandlerInit+0x94>)
 8008318:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800831a:	4619      	mov	r1, r3
 800831c:	2000      	movs	r0, #0
 800831e:	f7ff ffa1 	bl	8008264 <LmHandlerPackageRegister>
 8008322:	b930      	cbnz	r0, 8008332 <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8008324:	a801      	add	r0, sp, #4
 8008326:	f000 fbc5 	bl	8008ab4 <LmhpPackagesRegistrationInit>
 800832a:	b928      	cbnz	r0, 8008338 <LmHandlerInit+0x64>
}
 800832c:	b003      	add	sp, #12
 800832e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8008332:	f04f 30ff 	mov.w	r0, #4294967295
 8008336:	e7f9      	b.n	800832c <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
 800833c:	e7f6      	b.n	800832c <LmHandlerInit+0x58>
 800833e:	bf00      	nop
 8008340:	200008e0 	.word	0x200008e0
 8008344:	20000938 	.word	0x20000938
 8008348:	08007b19 	.word	0x08007b19
 800834c:	08007fa9 	.word	0x08007fa9
 8008350:	080083ed 	.word	0x080083ed
 8008354:	08007ac5 	.word	0x08007ac5
 8008358:	20000920 	.word	0x20000920
 800835c:	0800d13d 	.word	0x0800d13d
 8008360:	20000910 	.word	0x20000910
 8008364:	08007bc9 	.word	0x08007bc9
 8008368:	08007be5 	.word	0x08007be5

0800836c <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 800836c:	b161      	cbz	r1, 8008388 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800836e:	b118      	cbz	r0, 8008378 <LmHandlerGetVersion+0xc>
 8008370:	2801      	cmp	r0, #1
 8008372:	d005      	beq.n	8008380 <LmHandlerGetVersion+0x14>
 8008374:	2000      	movs	r0, #0
 8008376:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8008378:	4a05      	ldr	r2, [pc, #20]	; (8008390 <LmHandlerGetVersion+0x24>)
 800837a:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800837c:	2000      	movs	r0, #0
            break;
 800837e:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8008380:	4a04      	ldr	r2, [pc, #16]	; (8008394 <LmHandlerGetVersion+0x28>)
 8008382:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8008384:	2000      	movs	r0, #0
            break;
 8008386:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008388:	f04f 30ff 	mov.w	r0, #4294967295
}
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	01000400 	.word	0x01000400
 8008394:	02010001 	.word	0x02010001

08008398 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8008398:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800839a:	f003 fe5f 	bl	800c05c <LoRaMacDeInitialization>
 800839e:	b900      	cbnz	r0, 80083a2 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80083a0:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80083a2:	f06f 0001 	mvn.w	r0, #1
 80083a6:	e7fb      	b.n	80083a0 <LmHandlerStop+0x8>

080083a8 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 80083a8:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 80083aa:	f002 ff83 	bl	800b2b4 <LoRaMacHalt>
 80083ae:	b900      	cbnz	r0, 80083b2 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80083b0:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80083b2:	f06f 0001 	mvn.w	r0, #1
 80083b6:	e7fb      	b.n	80083b0 <LmHandlerHalt+0x8>

080083b8 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80083b8:	b180      	cbz	r0, 80083dc <LmHandlerGetTxPower+0x24>
{
 80083ba:	b510      	push	{r4, lr}
 80083bc:	b08a      	sub	sp, #40	; 0x28
 80083be:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80083c0:	2321      	movs	r3, #33	; 0x21
 80083c2:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80083c6:	4668      	mov	r0, sp
 80083c8:	f003 f810 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
 80083cc:	b948      	cbnz	r0, 80083e2 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80083ce:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80083d2:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 80083d4:	4a04      	ldr	r2, [pc, #16]	; (80083e8 <LmHandlerGetTxPower+0x30>)
 80083d6:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 80083d8:	b00a      	add	sp, #40	; 0x28
 80083da:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80083e0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80083e2:	f04f 30ff 	mov.w	r0, #4294967295
 80083e6:	e7f7      	b.n	80083d8 <LmHandlerGetTxPower+0x20>
 80083e8:	200008f8 	.word	0x200008f8

080083ec <MlmeConfirm>:
{
 80083ec:	b510      	push	{r4, lr}
 80083ee:	b08a      	sub	sp, #40	; 0x28
 80083f0:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80083f2:	4b2c      	ldr	r3, [pc, #176]	; (80084a4 <MlmeConfirm+0xb8>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 80083f8:	7842      	ldrb	r2, [r0, #1]
 80083fa:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80083fc:	4b2a      	ldr	r3, [pc, #168]	; (80084a8 <MlmeConfirm+0xbc>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	b10b      	cbz	r3, 8008408 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 8008404:	4827      	ldr	r0, [pc, #156]	; (80084a4 <MlmeConfirm+0xb8>)
 8008406:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8008408:	4621      	mov	r1, r4
 800840a:	2002      	movs	r0, #2
 800840c:	f7ff fb24 	bl	8007a58 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8008410:	7823      	ldrb	r3, [r4, #0]
 8008412:	2b05      	cmp	r3, #5
 8008414:	d037      	beq.n	8008486 <MlmeConfirm+0x9a>
 8008416:	2b0b      	cmp	r3, #11
 8008418:	d03d      	beq.n	8008496 <MlmeConfirm+0xaa>
 800841a:	2b01      	cmp	r3, #1
 800841c:	d001      	beq.n	8008422 <MlmeConfirm+0x36>
}
 800841e:	b00a      	add	sp, #40	; 0x28
 8008420:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 8008422:	2306      	movs	r3, #6
 8008424:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8008428:	4668      	mov	r0, sp
 800842a:	f002 ffdf 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800842e:	9901      	ldr	r1, [sp, #4]
 8008430:	4b1e      	ldr	r3, [pc, #120]	; (80084ac <MlmeConfirm+0xc0>)
 8008432:	79d8      	ldrb	r0, [r3, #7]
 8008434:	f007 fe66 	bl	8010104 <SecureElementSetDevAddr>
 8008438:	b910      	cbnz	r0, 8008440 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800843a:	9a01      	ldr	r2, [sp, #4]
 800843c:	4b1c      	ldr	r3, [pc, #112]	; (80084b0 <MlmeConfirm+0xc4>)
 800843e:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8008440:	4c1a      	ldr	r4, [pc, #104]	; (80084ac <MlmeConfirm+0xc0>)
 8008442:	1d20      	adds	r0, r4, #4
 8008444:	f7ff fdf6 	bl	8008034 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8008448:	1d60      	adds	r0, r4, #5
 800844a:	f7ff ffb5 	bl	80083b8 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800844e:	4b15      	ldr	r3, [pc, #84]	; (80084a4 <MlmeConfirm+0xb8>)
 8008450:	785b      	ldrb	r3, [r3, #1]
 8008452:	b18b      	cbz	r3, 8008478 <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008454:	4b15      	ldr	r3, [pc, #84]	; (80084ac <MlmeConfirm+0xc0>)
 8008456:	22ff      	movs	r2, #255	; 0xff
 8008458:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800845a:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <MlmeConfirm+0xbc>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	b10b      	cbz	r3, 8008466 <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008462:	4812      	ldr	r0, [pc, #72]	; (80084ac <MlmeConfirm+0xc0>)
 8008464:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008466:	4b0f      	ldr	r3, [pc, #60]	; (80084a4 <MlmeConfirm+0xb8>)
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1d7      	bne.n	800841e <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800846e:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <MlmeConfirm+0xc0>)
 8008470:	79d8      	ldrb	r0, [r3, #7]
 8008472:	f007 ff15 	bl	80102a0 <SecureElementPrintSessionKeys>
            break;
 8008476:	e7d2      	b.n	800841e <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008478:	2200      	movs	r2, #0
 800847a:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800847c:	4b0d      	ldr	r3, [pc, #52]	; (80084b4 <MlmeConfirm+0xc8>)
 800847e:	7858      	ldrb	r0, [r3, #1]
 8008480:	f7ff fd22 	bl	8007ec8 <LmHandlerRequestClass>
 8008484:	e7e9      	b.n	800845a <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 8008486:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <MlmeConfirm+0xcc>)
 8008488:	2201      	movs	r2, #1
 800848a:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800848c:	7a22      	ldrb	r2, [r4, #8]
 800848e:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8008490:	7a62      	ldrb	r2, [r4, #9]
 8008492:	74da      	strb	r2, [r3, #19]
            break;
 8008494:	e7c3      	b.n	800841e <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008496:	7863      	ldrb	r3, [r4, #1]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0c0      	beq.n	800841e <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 800849c:	f7ff fc28 	bl	8007cf0 <LmHandlerDeviceTimeReq>
}
 80084a0:	e7bd      	b.n	800841e <MlmeConfirm+0x32>
 80084a2:	bf00      	nop
 80084a4:	2000009c 	.word	0x2000009c
 80084a8:	200008e0 	.word	0x200008e0
 80084ac:	2000007c 	.word	0x2000007c
 80084b0:	200008bc 	.word	0x200008bc
 80084b4:	200008f8 	.word	0x200008f8
 80084b8:	20000088 	.word	0x20000088

080084bc <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80084bc:	b510      	push	{r4, lr}
 80084be:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 80084c0:	f7ff ff72 	bl	80083a8 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 80084c4:	4604      	mov	r4, r0
 80084c6:	b148      	cbz	r0, 80084dc <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 80084c8:	b92c      	cbnz	r4, 80084d6 <LmHandlerNvmDataStore+0x1a>
 80084ca:	4b18      	ldr	r3, [pc, #96]	; (800852c <LmHandlerNvmDataStore+0x70>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	b10b      	cbz	r3, 80084d6 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 80084d2:	2001      	movs	r0, #1
 80084d4:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80084d6:	4620      	mov	r0, r4
 80084d8:	b00a      	add	sp, #40	; 0x28
 80084da:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 80084dc:	f004 fe36 	bl	800d14c <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 80084e0:	f110 0f02 	cmn.w	r0, #2
 80084e4:	d012      	beq.n	800850c <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 80084e6:	b9d0      	cbnz	r0, 800851e <LmHandlerNvmDataStore+0x62>
 80084e8:	4b10      	ldr	r3, [pc, #64]	; (800852c <LmHandlerNvmDataStore+0x70>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	b1cb      	cbz	r3, 8008524 <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 80084f0:	2327      	movs	r3, #39	; 0x27
 80084f2:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80084f6:	4668      	mov	r0, sp
 80084f8:	f002 ff78 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 80084fc:	4b0b      	ldr	r3, [pc, #44]	; (800852c <LmHandlerNvmDataStore+0x70>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 8008506:	9801      	ldr	r0, [sp, #4]
 8008508:	4798      	blx	r3
 800850a:	e001      	b.n	8008510 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800850c:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8008510:	f004 fe2c 	bl	800d16c <NvmDataMgmtStoreEnd>
 8008514:	2800      	cmp	r0, #0
 8008516:	d0d7      	beq.n	80084c8 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008518:	f04f 34ff 	mov.w	r4, #4294967295
 800851c:	e7db      	b.n	80084d6 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800851e:	f04f 34ff 	mov.w	r4, #4294967295
 8008522:	e7f5      	b.n	8008510 <LmHandlerNvmDataStore+0x54>
 8008524:	f04f 34ff 	mov.w	r4, #4294967295
 8008528:	e7f2      	b.n	8008510 <LmHandlerNvmDataStore+0x54>
 800852a:	bf00      	nop
 800852c:	200008e0 	.word	0x200008e0

08008530 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8008530:	4b01      	ldr	r3, [pc, #4]	; (8008538 <LmhpComplianceIsInitialized+0x8>)
 8008532:	7818      	ldrb	r0, [r3, #0]
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	2000094c 	.word	0x2000094c

0800853c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800853c:	4b01      	ldr	r3, [pc, #4]	; (8008544 <LmhpComplianceIsTxPending+0x8>)
 800853e:	7858      	ldrb	r0, [r3, #1]
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	2000094c 	.word	0x2000094c

08008548 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8008548:	4770      	bx	lr

0800854a <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800854a:	4770      	bx	lr

0800854c <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800854c:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 800854e:	4b05      	ldr	r3, [pc, #20]	; (8008564 <OnProcessTimer+0x18>)
 8008550:	7a9b      	ldrb	r3, [r3, #10]
 8008552:	b113      	cbz	r3, 800855a <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 8008554:	4b03      	ldr	r3, [pc, #12]	; (8008564 <OnProcessTimer+0x18>)
 8008556:	2201      	movs	r2, #1
 8008558:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800855a:	4b03      	ldr	r3, [pc, #12]	; (8008568 <OnProcessTimer+0x1c>)
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	b103      	cbz	r3, 8008562 <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 8008560:	4798      	blx	r3
    }
}
 8008562:	bd08      	pop	{r3, pc}
 8008564:	2000094c 	.word	0x2000094c
 8008568:	200000b8 	.word	0x200000b8

0800856c <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800856c:	4b8c      	ldr	r3, [pc, #560]	; (80087a0 <LmhpComplianceOnMcpsIndication+0x234>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 8205 	beq.w	8008980 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8008576:	78c3      	ldrb	r3, [r0, #3]
 8008578:	b90b      	cbnz	r3, 800857e <LmhpComplianceOnMcpsIndication+0x12>
 800857a:	7b83      	ldrb	r3, [r0, #14]
 800857c:	b11b      	cbz	r3, 8008586 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800857e:	4a88      	ldr	r2, [pc, #544]	; (80087a0 <LmhpComplianceOnMcpsIndication+0x234>)
 8008580:	8a13      	ldrh	r3, [r2, #16]
 8008582:	3301      	adds	r3, #1
 8008584:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8008586:	7b43      	ldrb	r3, [r0, #13]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 81f9 	beq.w	8008980 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800858e:	78c3      	ldrb	r3, [r0, #3]
 8008590:	2be0      	cmp	r3, #224	; 0xe0
 8008592:	f040 81f5 	bne.w	8008980 <LmhpComplianceOnMcpsIndication+0x414>
{
 8008596:	b570      	push	{r4, r5, r6, lr}
 8008598:	b096      	sub	sp, #88	; 0x58
    ComplianceTestState.DataBufferSize = 0;
 800859a:	4b81      	ldr	r3, [pc, #516]	; (80087a0 <LmhpComplianceOnMcpsIndication+0x234>)
 800859c:	2200      	movs	r2, #0
 800859e:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 80085a0:	6884      	ldr	r4, [r0, #8]
 80085a2:	7823      	ldrb	r3, [r4, #0]
 80085a4:	2b7f      	cmp	r3, #127	; 0x7f
 80085a6:	f200 8093 	bhi.w	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
 80085aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80085ae:	0080      	.short	0x0080
 80085b0:	00a2009d 	.word	0x00a2009d
 80085b4:	00b200aa 	.word	0x00b200aa
 80085b8:	00c600bf 	.word	0x00c600bf
 80085bc:	00f000df 	.word	0x00f000df
 80085c0:	0131011d 	.word	0x0131011d
 80085c4:	00910091 	.word	0x00910091
 80085c8:	00910091 	.word	0x00910091
 80085cc:	00910091 	.word	0x00910091
 80085d0:	00910091 	.word	0x00910091
 80085d4:	00910091 	.word	0x00910091
 80085d8:	00910091 	.word	0x00910091
 80085dc:	00910091 	.word	0x00910091
 80085e0:	00910091 	.word	0x00910091
 80085e4:	00910091 	.word	0x00910091
 80085e8:	00910091 	.word	0x00910091
 80085ec:	01350091 	.word	0x01350091
 80085f0:	0140013c 	.word	0x0140013c
 80085f4:	00910091 	.word	0x00910091
 80085f8:	00910091 	.word	0x00910091
 80085fc:	00910091 	.word	0x00910091
 8008600:	00910091 	.word	0x00910091
 8008604:	00910091 	.word	0x00910091
 8008608:	00910091 	.word	0x00910091
 800860c:	00910091 	.word	0x00910091
 8008610:	00910091 	.word	0x00910091
 8008614:	00910091 	.word	0x00910091
 8008618:	00910091 	.word	0x00910091
 800861c:	00910091 	.word	0x00910091
 8008620:	00910091 	.word	0x00910091
 8008624:	00910091 	.word	0x00910091
 8008628:	00910091 	.word	0x00910091
 800862c:	00910091 	.word	0x00910091
 8008630:	00910091 	.word	0x00910091
 8008634:	00910091 	.word	0x00910091
 8008638:	00910091 	.word	0x00910091
 800863c:	00910091 	.word	0x00910091
 8008640:	00910091 	.word	0x00910091
 8008644:	00910091 	.word	0x00910091
 8008648:	00910091 	.word	0x00910091
 800864c:	00910091 	.word	0x00910091
 8008650:	00910091 	.word	0x00910091
 8008654:	00910091 	.word	0x00910091
 8008658:	00910091 	.word	0x00910091
 800865c:	00910091 	.word	0x00910091
 8008660:	00910091 	.word	0x00910091
 8008664:	00910091 	.word	0x00910091
 8008668:	00910091 	.word	0x00910091
 800866c:	00910091 	.word	0x00910091
 8008670:	00910091 	.word	0x00910091
 8008674:	00910091 	.word	0x00910091
 8008678:	00910091 	.word	0x00910091
 800867c:	00910091 	.word	0x00910091
 8008680:	00910091 	.word	0x00910091
 8008684:	00910091 	.word	0x00910091
 8008688:	00910091 	.word	0x00910091
 800868c:	00910091 	.word	0x00910091
 8008690:	00910091 	.word	0x00910091
 8008694:	00910091 	.word	0x00910091
 8008698:	00910091 	.word	0x00910091
 800869c:	00910091 	.word	0x00910091
 80086a0:	00910091 	.word	0x00910091
 80086a4:	00910091 	.word	0x00910091
 80086a8:	016c014b 	.word	0x016c014b
 80086ac:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 80086ae:	4b3c      	ldr	r3, [pc, #240]	; (80087a0 <LmhpComplianceOnMcpsIndication+0x234>)
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	2101      	movs	r1, #1
 80086b4:	7299      	strb	r1, [r3, #10]
 80086b6:	2000      	movs	r0, #0
 80086b8:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 80086ba:	68d8      	ldr	r0, [r3, #12]
 80086bc:	7a9a      	ldrb	r2, [r3, #10]
 80086be:	1854      	adds	r4, r2, r1
 80086c0:	729c      	strb	r4, [r3, #10]
 80086c2:	2406      	movs	r4, #6
 80086c4:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 80086c6:	68d8      	ldr	r0, [r3, #12]
 80086c8:	7a9a      	ldrb	r2, [r3, #10]
 80086ca:	1854      	adds	r4, r2, r1
 80086cc:	729c      	strb	r4, [r3, #10]
 80086ce:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 80086d0:	4b33      	ldr	r3, [pc, #204]	; (80087a0 <LmhpComplianceOnMcpsIndication+0x234>)
 80086d2:	7a9b      	ldrb	r3, [r3, #10]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 814c 	beq.w	8008972 <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 80086da:	4b32      	ldr	r3, [pc, #200]	; (80087a4 <LmhpComplianceOnMcpsIndication+0x238>)
 80086dc:	7a5b      	ldrb	r3, [r3, #9]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 813d 	beq.w	800895e <LmhpComplianceOnMcpsIndication+0x3f2>
}
 80086e4:	b016      	add	sp, #88	; 0x58
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 80086e8:	4b2d      	ldr	r3, [pc, #180]	; (80087a0 <LmhpComplianceOnMcpsIndication+0x234>)
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 80086f0:	e7ee      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 80086f2:	4b2d      	ldr	r3, [pc, #180]	; (80087a8 <LmhpComplianceOnMcpsIndication+0x23c>)
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0ea      	beq.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80086fa:	2101      	movs	r1, #1
 80086fc:	2002      	movs	r0, #2
 80086fe:	4798      	blx	r3
 8008700:	e7e6      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8008702:	7862      	ldrb	r2, [r4, #1]
 8008704:	4b26      	ldr	r3, [pc, #152]	; (80087a0 <LmhpComplianceOnMcpsIndication+0x234>)
 8008706:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 8008710:	e7de      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 8008712:	2304      	movs	r3, #4
 8008714:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8008718:	7863      	ldrb	r3, [r4, #1]
 800871a:	3b00      	subs	r3, #0
 800871c:	bf18      	it	ne
 800871e:	2301      	movne	r3, #1
 8008720:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008724:	a801      	add	r0, sp, #4
 8008726:	f002 ffd5 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
                break;
 800872a:	e7d1      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800872c:	7860      	ldrb	r0, [r4, #1]
 800872e:	3800      	subs	r0, #0
 8008730:	bf18      	it	ne
 8008732:	2001      	movne	r0, #1
 8008734:	f003 fc74 	bl	800c020 <LoRaMacTestSetDutyCycleOn>
                break;
 8008738:	e7ca      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800873a:	ad01      	add	r5, sp, #4
 800873c:	4e1b      	ldr	r6, [pc, #108]	; (80087ac <LmhpComplianceOnMcpsIndication+0x240>)
 800873e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008742:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008746:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800874a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800874e:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8008750:	2b0a      	cmp	r3, #10
 8008752:	d8bd      	bhi.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8008754:	4a16      	ldr	r2, [pc, #88]	; (80087b0 <LmhpComplianceOnMcpsIndication+0x244>)
 8008756:	6812      	ldr	r2, [r2, #0]
 8008758:	6852      	ldr	r2, [r2, #4]
 800875a:	2a00      	cmp	r2, #0
 800875c:	d0b8      	beq.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800875e:	a916      	add	r1, sp, #88	; 0x58
 8008760:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008764:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8008768:	4790      	blx	r2
                break;
 800876a:	e7b1      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800876c:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800876e:	1e53      	subs	r3, r2, #1
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b01      	cmp	r3, #1
 8008774:	d8ac      	bhi.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8008776:	1e50      	subs	r0, r2, #1
 8008778:	bf18      	it	ne
 800877a:	2001      	movne	r0, #1
 800877c:	4b08      	ldr	r3, [pc, #32]	; (80087a0 <LmhpComplianceOnMcpsIndication+0x234>)
 800877e:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8008780:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <LmhpComplianceOnMcpsIndication+0x244>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0a2      	beq.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800878a:	4798      	blx	r3
 800878c:	e7a0      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800878e:	4b04      	ldr	r3, [pc, #16]	; (80087a0 <LmhpComplianceOnMcpsIndication+0x234>)
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	2101      	movs	r1, #1
 8008794:	7299      	strb	r1, [r3, #10]
 8008796:	2308      	movs	r3, #8
 8008798:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800879a:	460b      	mov	r3, r1
 800879c:	e01b      	b.n	80087d6 <LmhpComplianceOnMcpsIndication+0x26a>
 800879e:	bf00      	nop
 80087a0:	2000094c 	.word	0x2000094c
 80087a4:	20000984 	.word	0x20000984
 80087a8:	200000b8 	.word	0x200000b8
 80087ac:	08017f44 	.word	0x08017f44
 80087b0:	20000948 	.word	0x20000948
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80087b4:	6882      	ldr	r2, [r0, #8]
 80087b6:	f101 0c01 	add.w	ip, r1, #1
 80087ba:	5c52      	ldrb	r2, [r2, r1]
 80087bc:	4971      	ldr	r1, [pc, #452]	; (8008984 <LmhpComplianceOnMcpsIndication+0x418>)
 80087be:	68cd      	ldr	r5, [r1, #12]
 80087c0:	7a8c      	ldrb	r4, [r1, #10]
 80087c2:	f104 0e01 	add.w	lr, r4, #1
 80087c6:	f881 e00a 	strb.w	lr, [r1, #10]
 80087ca:	3201      	adds	r2, #1
 80087cc:	552a      	strb	r2, [r5, r4]
                     i++ )
 80087ce:	3301      	adds	r3, #1
 80087d0:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80087d2:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80087d6:	4a6b      	ldr	r2, [pc, #428]	; (8008984 <LmhpComplianceOnMcpsIndication+0x418>)
 80087d8:	7a52      	ldrb	r2, [r2, #9]
 80087da:	7b04      	ldrb	r4, [r0, #12]
 80087dc:	42a2      	cmp	r2, r4
 80087de:	bf28      	it	cs
 80087e0:	4622      	movcs	r2, r4
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d8e6      	bhi.n	80087b4 <LmhpComplianceOnMcpsIndication+0x248>
 80087e6:	e773      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 80087e8:	4b66      	ldr	r3, [pc, #408]	; (8008984 <LmhpComplianceOnMcpsIndication+0x418>)
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	2101      	movs	r1, #1
 80087ee:	7299      	strb	r1, [r3, #10]
 80087f0:	2109      	movs	r1, #9
 80087f2:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 80087f4:	8a18      	ldrh	r0, [r3, #16]
 80087f6:	68d9      	ldr	r1, [r3, #12]
 80087f8:	7a9a      	ldrb	r2, [r3, #10]
 80087fa:	1c54      	adds	r4, r2, #1
 80087fc:	729c      	strb	r4, [r3, #10]
 80087fe:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8008800:	8a1a      	ldrh	r2, [r3, #16]
 8008802:	68d8      	ldr	r0, [r3, #12]
 8008804:	7a99      	ldrb	r1, [r3, #10]
 8008806:	1c4c      	adds	r4, r1, #1
 8008808:	729c      	strb	r4, [r3, #10]
 800880a:	0a13      	lsrs	r3, r2, #8
 800880c:	5443      	strb	r3, [r0, r1]
                break;
 800880e:	e75f      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 8008810:	4b5c      	ldr	r3, [pc, #368]	; (8008984 <LmhpComplianceOnMcpsIndication+0x418>)
 8008812:	2200      	movs	r2, #0
 8008814:	821a      	strh	r2, [r3, #16]
                break;
 8008816:	e75b      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 8008818:	2305      	movs	r3, #5
 800881a:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 800881e:	a801      	add	r0, sp, #4
 8008820:	f003 fa0c 	bl	800bc3c <LoRaMacMlmeRequest>
                break;
 8008824:	e754      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 8008826:	4b58      	ldr	r3, [pc, #352]	; (8008988 <LmhpComplianceOnMcpsIndication+0x41c>)
 8008828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882a:	4798      	blx	r3
                break;
 800882c:	e750      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800882e:	7860      	ldrb	r0, [r4, #1]
 8008830:	4b54      	ldr	r3, [pc, #336]	; (8008984 <LmhpComplianceOnMcpsIndication+0x418>)
 8008832:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8008834:	4b55      	ldr	r3, [pc, #340]	; (800898c <LmhpComplianceOnMcpsIndication+0x420>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f43f af48 	beq.w	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8008840:	4798      	blx	r3
 8008842:	e745      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 8008844:	7b03      	ldrb	r3, [r0, #12]
 8008846:	2b07      	cmp	r3, #7
 8008848:	f47f af42 	bne.w	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 800884c:	2306      	movs	r3, #6
 800884e:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8008852:	7863      	ldrb	r3, [r4, #1]
 8008854:	78a2      	ldrb	r2, [r4, #2]
 8008856:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 800885a:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800885e:	78e3      	ldrb	r3, [r4, #3]
 8008860:	7922      	ldrb	r2, [r4, #4]
 8008862:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8008866:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8008868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800886c:	2264      	movs	r2, #100	; 0x64
 800886e:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8008872:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8008874:	6883      	ldr	r3, [r0, #8]
 8008876:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800887a:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 800887e:	a801      	add	r0, sp, #4
 8008880:	f003 f9dc 	bl	800bc3c <LoRaMacMlmeRequest>
                break;
 8008884:	e724      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8008886:	233b      	movs	r3, #59	; 0x3b
 8008888:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                mibReq.Param.IsCertPortOn = false;
 800888c:	2300      	movs	r3, #0
 800888e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008892:	a80c      	add	r0, sp, #48	; 0x30
 8008894:	f002 ff1e 	bl	800b6d4 <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 8008898:	4b3a      	ldr	r3, [pc, #232]	; (8008984 <LmhpComplianceOnMcpsIndication+0x418>)
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 80088a0:	e716      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 80088a2:	232a      	movs	r3, #42	; 0x2a
 80088a4:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80088a8:	a801      	add	r0, sp, #4
 80088aa:	f002 fd9f 	bl	800b3ec <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 80088ae:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 80088b0:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 80088b2:	4b34      	ldr	r3, [pc, #208]	; (8008984 <LmhpComplianceOnMcpsIndication+0x418>)
 80088b4:	68dc      	ldr	r4, [r3, #12]
 80088b6:	7a98      	ldrb	r0, [r3, #10]
 80088b8:	1c45      	adds	r5, r0, #1
 80088ba:	729d      	strb	r5, [r3, #10]
 80088bc:	257f      	movs	r5, #127	; 0x7f
 80088be:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 80088c0:	4832      	ldr	r0, [pc, #200]	; (800898c <LmhpComplianceOnMcpsIndication+0x420>)
 80088c2:	6800      	ldr	r0, [r0, #0]
 80088c4:	68dd      	ldr	r5, [r3, #12]
 80088c6:	7a9c      	ldrb	r4, [r3, #10]
 80088c8:	1c66      	adds	r6, r4, #1
 80088ca:	729e      	strb	r6, [r3, #10]
 80088cc:	78c6      	ldrb	r6, [r0, #3]
 80088ce:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 80088d0:	68dd      	ldr	r5, [r3, #12]
 80088d2:	7a9c      	ldrb	r4, [r3, #10]
 80088d4:	1c66      	adds	r6, r4, #1
 80088d6:	729e      	strb	r6, [r3, #10]
 80088d8:	7886      	ldrb	r6, [r0, #2]
 80088da:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 80088dc:	68dd      	ldr	r5, [r3, #12]
 80088de:	7a9c      	ldrb	r4, [r3, #10]
 80088e0:	1c66      	adds	r6, r4, #1
 80088e2:	729e      	strb	r6, [r3, #10]
 80088e4:	7846      	ldrb	r6, [r0, #1]
 80088e6:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 80088e8:	68dd      	ldr	r5, [r3, #12]
 80088ea:	7a9c      	ldrb	r4, [r3, #10]
 80088ec:	1c66      	adds	r6, r4, #1
 80088ee:	729e      	strb	r6, [r3, #10]
 80088f0:	7800      	ldrb	r0, [r0, #0]
 80088f2:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 80088f4:	68dc      	ldr	r4, [r3, #12]
 80088f6:	7a98      	ldrb	r0, [r3, #10]
 80088f8:	1c45      	adds	r5, r0, #1
 80088fa:	729d      	strb	r5, [r3, #10]
 80088fc:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8008900:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8008902:	68dc      	ldr	r4, [r3, #12]
 8008904:	7a98      	ldrb	r0, [r3, #10]
 8008906:	1c45      	adds	r5, r0, #1
 8008908:	729d      	strb	r5, [r3, #10]
 800890a:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800890e:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8008910:	68dc      	ldr	r4, [r3, #12]
 8008912:	7a98      	ldrb	r0, [r3, #10]
 8008914:	1c45      	adds	r5, r0, #1
 8008916:	729d      	strb	r5, [r3, #10]
 8008918:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800891c:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800891e:	68dc      	ldr	r4, [r3, #12]
 8008920:	7a98      	ldrb	r0, [r3, #10]
 8008922:	1c45      	adds	r5, r0, #1
 8008924:	729d      	strb	r5, [r3, #10]
 8008926:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8008928:	68d8      	ldr	r0, [r3, #12]
 800892a:	7a99      	ldrb	r1, [r3, #10]
 800892c:	1c4c      	adds	r4, r1, #1
 800892e:	729c      	strb	r4, [r3, #10]
 8008930:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8008934:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8008936:	68d8      	ldr	r0, [r3, #12]
 8008938:	7a99      	ldrb	r1, [r3, #10]
 800893a:	1c4c      	adds	r4, r1, #1
 800893c:	729c      	strb	r4, [r3, #10]
 800893e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008942:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8008944:	68d8      	ldr	r0, [r3, #12]
 8008946:	7a99      	ldrb	r1, [r3, #10]
 8008948:	1c4c      	adds	r4, r1, #1
 800894a:	729c      	strb	r4, [r3, #10]
 800894c:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008950:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8008952:	68d8      	ldr	r0, [r3, #12]
 8008954:	7a99      	ldrb	r1, [r3, #10]
 8008956:	1c4c      	adds	r4, r1, #1
 8008958:	729c      	strb	r4, [r3, #10]
 800895a:	5442      	strb	r2, [r0, r1]
                break;
 800895c:	e6b8      	b.n	80086d0 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 800895e:	4c0c      	ldr	r4, [pc, #48]	; (8008990 <LmhpComplianceOnMcpsIndication+0x424>)
 8008960:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008964:	4620      	mov	r0, r4
 8008966:	f009 ffaf 	bl	80128c8 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800896a:	4620      	mov	r0, r4
 800896c:	f009 ff66 	bl	801283c <UTIL_TIMER_Start>
 8008970:	e6b8      	b.n	80086e4 <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 8008972:	4807      	ldr	r0, [pc, #28]	; (8008990 <LmhpComplianceOnMcpsIndication+0x424>)
 8008974:	f009 ff08 	bl	8012788 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8008978:	4b02      	ldr	r3, [pc, #8]	; (8008984 <LmhpComplianceOnMcpsIndication+0x418>)
 800897a:	2200      	movs	r2, #0
 800897c:	705a      	strb	r2, [r3, #1]
 800897e:	e6b1      	b.n	80086e4 <LmhpComplianceOnMcpsIndication+0x178>
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	2000094c 	.word	0x2000094c
 8008988:	200000b8 	.word	0x200000b8
 800898c:	20000948 	.word	0x20000948
 8008990:	20000984 	.word	0x20000984

08008994 <LmhpComplianceProcess>:
{
 8008994:	b530      	push	{r4, r5, lr}
 8008996:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8008998:	4b27      	ldr	r3, [pc, #156]	; (8008a38 <LmhpComplianceProcess+0xa4>)
 800899a:	785b      	ldrb	r3, [r3, #1]
 800899c:	b993      	cbnz	r3, 80089c4 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800899e:	4b26      	ldr	r3, [pc, #152]	; (8008a38 <LmhpComplianceProcess+0xa4>)
 80089a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d13d      	bne.n	8008a24 <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 80089a8:	4b23      	ldr	r3, [pc, #140]	; (8008a38 <LmhpComplianceProcess+0xa4>)
 80089aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089ae:	b13b      	cbz	r3, 80089c0 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 80089b0:	4b21      	ldr	r3, [pc, #132]	; (8008a38 <LmhpComplianceProcess+0xa4>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 80089b8:	4b20      	ldr	r3, [pc, #128]	; (8008a3c <LmhpComplianceProcess+0xa8>)
 80089ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089bc:	b103      	cbz	r3, 80089c0 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 80089be:	4798      	blx	r3
}
 80089c0:	b003      	add	sp, #12
 80089c2:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 80089c4:	f009 fea0 	bl	8012708 <UTIL_TIMER_GetCurrentTime>
 80089c8:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 80089ca:	4b1b      	ldr	r3, [pc, #108]	; (8008a38 <LmhpComplianceProcess+0xa4>)
 80089cc:	685d      	ldr	r5, [r3, #4]
 80089ce:	f7ff f9a3 	bl	8007d18 <LmHandlerGetDutyCycleWaitTime>
 80089d2:	4405      	add	r5, r0
 80089d4:	42a5      	cmp	r5, r4
 80089d6:	d2e7      	bcs.n	80089a8 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 80089d8:	4b17      	ldr	r3, [pc, #92]	; (8008a38 <LmhpComplianceProcess+0xa4>)
 80089da:	7a9b      	ldrb	r3, [r3, #10]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0e3      	beq.n	80089a8 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 80089e0:	22e0      	movs	r2, #224	; 0xe0
 80089e2:	f88d 2000 	strb.w	r2, [sp]
 80089e6:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 80089ea:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <LmhpComplianceProcess+0xa4>)
 80089ec:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 80089ee:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 80089f0:	2201      	movs	r2, #1
 80089f2:	7a19      	ldrb	r1, [r3, #8]
 80089f4:	4668      	mov	r0, sp
 80089f6:	f7ff f9bd 	bl	8007d74 <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 80089fa:	b110      	cbz	r0, 8008a02 <LmhpComplianceProcess+0x6e>
 80089fc:	f110 0f07 	cmn.w	r0, #7
 8008a00:	d106      	bne.n	8008a10 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 8008a02:	4b0d      	ldr	r3, [pc, #52]	; (8008a38 <LmhpComplianceProcess+0xa4>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8008a08:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8008a0a:	4b0b      	ldr	r3, [pc, #44]	; (8008a38 <LmhpComplianceProcess+0xa4>)
 8008a0c:	605c      	str	r4, [r3, #4]
 8008a0e:	e7cb      	b.n	80089a8 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 8008a10:	4d0b      	ldr	r5, [pc, #44]	; (8008a40 <LmhpComplianceProcess+0xac>)
 8008a12:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8008a16:	4628      	mov	r0, r5
 8008a18:	f009 ff56 	bl	80128c8 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f009 ff0d 	bl	801283c <UTIL_TIMER_Start>
 8008a22:	e7f2      	b.n	8008a0a <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 8008a24:	4b04      	ldr	r3, [pc, #16]	; (8008a38 <LmhpComplianceProcess+0xa4>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8008a2c:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8008a30:	f7ff fa4a 	bl	8007ec8 <LmHandlerRequestClass>
 8008a34:	e7b8      	b.n	80089a8 <LmhpComplianceProcess+0x14>
 8008a36:	bf00      	nop
 8008a38:	2000094c 	.word	0x2000094c
 8008a3c:	200000b8 	.word	0x200000b8
 8008a40:	20000984 	.word	0x20000984

08008a44 <LmhpComplianceInit>:
{
 8008a44:	b530      	push	{r4, r5, lr}
 8008a46:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8008a48:	b188      	cbz	r0, 8008a6e <LmhpComplianceInit+0x2a>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	b179      	cbz	r1, 8008a6e <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8008a4e:	4813      	ldr	r0, [pc, #76]	; (8008a9c <LmhpComplianceInit+0x58>)
 8008a50:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8008a52:	4b13      	ldr	r3, [pc, #76]	; (8008aa0 <LmhpComplianceInit+0x5c>)
 8008a54:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008a56:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8008a58:	2201      	movs	r2, #1
 8008a5a:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	9200      	str	r2, [sp, #0]
 8008a60:	4b10      	ldr	r3, [pc, #64]	; (8008aa4 <LmhpComplianceInit+0x60>)
 8008a62:	f04f 31ff 	mov.w	r1, #4294967295
 8008a66:	4810      	ldr	r0, [pc, #64]	; (8008aa8 <LmhpComplianceInit+0x64>)
 8008a68:	f009 fe30 	bl	80126cc <UTIL_TIMER_Create>
 8008a6c:	e004      	b.n	8008a78 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4a0a      	ldr	r2, [pc, #40]	; (8008a9c <LmhpComplianceInit+0x58>)
 8008a72:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8008a74:	4a0a      	ldr	r2, [pc, #40]	; (8008aa0 <LmhpComplianceInit+0x5c>)
 8008a76:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8008a78:	4c09      	ldr	r4, [pc, #36]	; (8008aa0 <LmhpComplianceInit+0x5c>)
 8008a7a:	2500      	movs	r5, #0
 8008a7c:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8008a7e:	2220      	movs	r2, #32
 8008a80:	4629      	mov	r1, r5
 8008a82:	f104 0014 	add.w	r0, r4, #20
 8008a86:	f007 fc64 	bl	8010352 <memset1>
    ComplianceTestState.IsTxPending = false;
 8008a8a:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8008a8c:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8008a8e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8008a92:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8008a96:	b003      	add	sp, #12
 8008a98:	bd30      	pop	{r4, r5, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000948 	.word	0x20000948
 8008aa0:	2000094c 	.word	0x2000094c
 8008aa4:	0800854d 	.word	0x0800854d
 8008aa8:	20000984 	.word	0x20000984

08008aac <LmhpCompliancePackageFactory>:
}
 8008aac:	4800      	ldr	r0, [pc, #0]	; (8008ab0 <LmhpCompliancePackageFactory+0x4>)
 8008aae:	4770      	bx	lr
 8008ab0:	200000b8 	.word	0x200000b8

08008ab4 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	4770      	bx	lr

08008ab8 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	4770      	bx	lr
	...

08008ac0 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008ac0:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <UpdateRxSlotIdleState+0x20>)
 8008ac2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d004      	beq.n	8008ad4 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8008aca:	4b06      	ldr	r3, [pc, #24]	; (8008ae4 <UpdateRxSlotIdleState+0x24>)
 8008acc:	2206      	movs	r2, #6
 8008ace:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 8008ad2:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8008ad4:	4b03      	ldr	r3, [pc, #12]	; (8008ae4 <UpdateRxSlotIdleState+0x24>)
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20008000 	.word	0x20008000
 8008ae4:	200009a0 	.word	0x200009a0

08008ae8 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8008ae8:	4b01      	ldr	r3, [pc, #4]	; (8008af0 <LoRaMacEnableRequests+0x8>)
 8008aea:	f883 0492 	strb.w	r0, [r3, #1170]	; 0x492
}
 8008aee:	4770      	bx	lr
 8008af0:	200009a0 	.word	0x200009a0

08008af4 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8008af4:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008af6:	4b15      	ldr	r3, [pc, #84]	; (8008b4c <LoRaMacHandleIndicationEvents+0x58>)
 8008af8:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8008afc:	f013 0f08 	tst.w	r3, #8
 8008b00:	d00e      	beq.n	8008b20 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008b02:	4812      	ldr	r0, [pc, #72]	; (8008b4c <LoRaMacHandleIndicationEvents+0x58>)
 8008b04:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 8008b08:	f36f 03c3 	bfc	r3, #3, #1
 8008b0c:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8008b10:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8008b1a:	f500 608d 	add.w	r0, r0, #1128	; 0x468
 8008b1e:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008b20:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <LoRaMacHandleIndicationEvents+0x58>)
 8008b22:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8008b26:	f013 0f02 	tst.w	r3, #2
 8008b2a:	d00e      	beq.n	8008b4a <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008b2c:	4807      	ldr	r0, [pc, #28]	; (8008b4c <LoRaMacHandleIndicationEvents+0x58>)
 8008b2e:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 8008b32:	f36f 0341 	bfc	r3, #1, #1
 8008b36:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8008b3a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 8008b44:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 8008b48:	4798      	blx	r3
    }
}
 8008b4a:	bd08      	pop	{r3, pc}
 8008b4c:	200009a0 	.word	0x200009a0

08008b50 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8008b50:	b110      	cbz	r0, 8008b58 <CheckForMinimumAbpDatarate+0x8>
 8008b52:	2901      	cmp	r1, #1
 8008b54:	d001      	beq.n	8008b5a <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8008b56:	2000      	movs	r0, #0
}
 8008b58:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	d0fc      	beq.n	8008b58 <CheckForMinimumAbpDatarate+0x8>
    return false;
 8008b5e:	2000      	movs	r0, #0
 8008b60:	4770      	bx	lr
	...

08008b64 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <LoRaMacCheckForRxAbort+0x20>)
 8008b66:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008b6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b6e:	d008      	beq.n	8008b82 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8008b70:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008b74:	4a03      	ldr	r2, [pc, #12]	; (8008b84 <LoRaMacCheckForRxAbort+0x20>)
 8008b76:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008b7a:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8008b7e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8008b82:	4770      	bx	lr
 8008b84:	200009a0 	.word	0x200009a0

08008b88 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8008b88:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <CalculateBackOff+0x1c>)
 8008b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8c:	b94b      	cbnz	r3, 8008ba2 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008b8e:	4a05      	ldr	r2, [pc, #20]	; (8008ba4 <CalculateBackOff+0x1c>)
 8008b90:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
 8008b94:	4904      	ldr	r1, [pc, #16]	; (8008ba8 <CalculateBackOff+0x20>)
 8008b96:	f8d1 141c 	ldr.w	r1, [r1, #1052]	; 0x41c
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ba0:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8008ba2:	4770      	bx	lr
 8008ba4:	20008000 	.word	0x20008000
 8008ba8:	200009a0 	.word	0x200009a0

08008bac <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8008bac:	b508      	push	{r3, lr}
 8008bae:	4684      	mov	ip, r0
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008bb4:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <SetTxContinuousWave+0x24>)
 8008bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb8:	4662      	mov	r2, ip
 8008bba:	b249      	sxtb	r1, r1
 8008bbc:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008bbe:	4a05      	ldr	r2, [pc, #20]	; (8008bd4 <SetTxContinuousWave+0x28>)
 8008bc0:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8008bc4:	f043 0302 	orr.w	r3, r3, #2
 8008bc8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8008bcc:	2000      	movs	r0, #0
 8008bce:	bd08      	pop	{r3, pc}
 8008bd0:	08018e34 	.word	0x08018e34
 8008bd4:	200009a0 	.word	0x200009a0

08008bd8 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8008bd8:	4602      	mov	r2, r0
 8008bda:	b1f8      	cbz	r0, 8008c1c <DetermineFrameType+0x44>
 8008bdc:	b301      	cbz	r1, 8008c20 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008bde:	7b03      	ldrb	r3, [r0, #12]
 8008be0:	f013 030f 	ands.w	r3, r3, #15
 8008be4:	d005      	beq.n	8008bf2 <DetermineFrameType+0x1a>
 8008be6:	f890 0020 	ldrb.w	r0, [r0, #32]
 8008bea:	b110      	cbz	r0, 8008bf2 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8008bec:	2000      	movs	r0, #0
 8008bee:	7008      	strb	r0, [r1, #0]
 8008bf0:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8008bf2:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8008bf6:	b910      	cbnz	r0, 8008bfe <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	700b      	strb	r3, [r1, #0]
 8008bfc:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008bfe:	b92b      	cbnz	r3, 8008c0c <DetermineFrameType+0x34>
 8008c00:	f892 0020 	ldrb.w	r0, [r2, #32]
 8008c04:	b910      	cbnz	r0, 8008c0c <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8008c06:	2302      	movs	r3, #2
 8008c08:	700b      	strb	r3, [r1, #0]
 8008c0a:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8008c0c:	b953      	cbnz	r3, 8008c24 <DetermineFrameType+0x4c>
 8008c0e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008c12:	b14a      	cbz	r2, 8008c28 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8008c14:	2203      	movs	r2, #3
 8008c16:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8008c18:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8008c1a:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008c1c:	2003      	movs	r0, #3
 8008c1e:	4770      	bx	lr
 8008c20:	2003      	movs	r0, #3
 8008c22:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8008c24:	2018      	movs	r0, #24
 8008c26:	4770      	bx	lr
 8008c28:	2018      	movs	r0, #24
}
 8008c2a:	4770      	bx	lr

08008c2c <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8008c2c:	4288      	cmp	r0, r1
 8008c2e:	d201      	bcs.n	8008c34 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8008c30:	2000      	movs	r0, #0
 8008c32:	4770      	bx	lr
        return true;
 8008c34:	2001      	movs	r0, #1
}
 8008c36:	4770      	bx	lr

08008c38 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8008c38:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <CheckRetransUnconfirmedUplink+0x30>)
 8008c3c:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8008c40:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <CheckRetransUnconfirmedUplink+0x34>)
 8008c42:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 8008c46:	f7ff fff1 	bl	8008c2c <CheckRetrans>
 8008c4a:	b950      	cbnz	r0, 8008c62 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008c4c:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <CheckRetransUnconfirmedUplink+0x34>)
 8008c4e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8008c52:	f013 0f02 	tst.w	r3, #2
 8008c56:	d004      	beq.n	8008c62 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008c58:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <CheckRetransUnconfirmedUplink+0x34>)
 8008c5a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d900      	bls.n	8008c64 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8008c62:	bd08      	pop	{r3, pc}
            return true;
 8008c64:	2001      	movs	r0, #1
 8008c66:	e7fc      	b.n	8008c62 <CheckRetransUnconfirmedUplink+0x2a>
 8008c68:	20008000 	.word	0x20008000
 8008c6c:	200009a0 	.word	0x200009a0

08008c70 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8008c70:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8008c72:	4b09      	ldr	r3, [pc, #36]	; (8008c98 <CheckRetransConfirmedUplink+0x28>)
 8008c74:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8008c78:	4b08      	ldr	r3, [pc, #32]	; (8008c9c <CheckRetransConfirmedUplink+0x2c>)
 8008c7a:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 8008c7e:	f7ff ffd5 	bl	8008c2c <CheckRetrans>
 8008c82:	b940      	cbnz	r0, 8008c96 <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008c84:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <CheckRetransConfirmedUplink+0x2c>)
 8008c86:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8008c8a:	f013 0f02 	tst.w	r3, #2
 8008c8e:	d002      	beq.n	8008c96 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008c90:	4b02      	ldr	r3, [pc, #8]	; (8008c9c <CheckRetransConfirmedUplink+0x2c>)
 8008c92:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
        {
            return true;
        }
    }
    return false;
}
 8008c96:	bd08      	pop	{r3, pc}
 8008c98:	20008000 	.word	0x20008000
 8008c9c:	200009a0 	.word	0x200009a0

08008ca0 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8008ca0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ca4:	d000      	beq.n	8008ca8 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 8008ca6:	3001      	adds	r0, #1
    }
    return counter;
}
 8008ca8:	4770      	bx	lr
	...

08008cac <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8008cac:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008cae:	4b12      	ldr	r3, [pc, #72]	; (8008cf8 <StopRetransmission+0x4c>)
 8008cb0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8008cb4:	f013 0f02 	tst.w	r3, #2
 8008cb8:	d004      	beq.n	8008cc4 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8008cba:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <StopRetransmission+0x4c>)
 8008cbc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d908      	bls.n	8008cd6 <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008cc4:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <StopRetransmission+0x50>)
 8008cc6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8008cca:	b123      	cbz	r3, 8008cd6 <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8008ccc:	4c0b      	ldr	r4, [pc, #44]	; (8008cfc <StopRetransmission+0x50>)
 8008cce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008cd0:	f7ff ffe6 	bl	8008ca0 <IncreaseAdrAckCounter>
 8008cd4:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8008cd6:	4b08      	ldr	r3, [pc, #32]	; (8008cf8 <StopRetransmission+0x4c>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8008cde:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8008ce2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008ce6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008cea:	f022 0202 	bic.w	r2, r2, #2
 8008cee:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 8008cf2:	2001      	movs	r0, #1
 8008cf4:	bd10      	pop	{r4, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200009a0 	.word	0x200009a0
 8008cfc:	20008000 	.word	0x20008000

08008d00 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8008d00:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008d02:	4b04      	ldr	r3, [pc, #16]	; (8008d14 <OnMacProcessNotify+0x14>)
 8008d04:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008d08:	b113      	cbz	r3, 8008d10 <OnMacProcessNotify+0x10>
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	b103      	cbz	r3, 8008d10 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008d0e:	4798      	blx	r3
    }
}
 8008d10:	bd08      	pop	{r3, pc}
 8008d12:	bf00      	nop
 8008d14:	200009a0 	.word	0x200009a0

08008d18 <OnRadioRxError>:
{
 8008d18:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008d1a:	4a04      	ldr	r2, [pc, #16]	; (8008d2c <OnRadioRxError+0x14>)
 8008d1c:	7813      	ldrb	r3, [r2, #0]
 8008d1e:	f043 0304 	orr.w	r3, r3, #4
 8008d22:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 8008d24:	f7ff ffec 	bl	8008d00 <OnMacProcessNotify>
}
 8008d28:	bd08      	pop	{r3, pc}
 8008d2a:	bf00      	nop
 8008d2c:	2000099c 	.word	0x2000099c

08008d30 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8008d30:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8008d32:	4b04      	ldr	r3, [pc, #16]	; (8008d44 <CallNvmDataChangeCallback+0x14>)
 8008d34:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008d38:	b113      	cbz	r3, 8008d40 <CallNvmDataChangeCallback+0x10>
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	b103      	cbz	r3, 8008d40 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008d3e:	4798      	blx	r3
    }
}
 8008d40:	bd08      	pop	{r3, pc}
 8008d42:	bf00      	nop
 8008d44:	200009a0 	.word	0x200009a0

08008d48 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008d48:	4b04      	ldr	r3, [pc, #16]	; (8008d5c <IsRequestPending+0x14>)
 8008d4a:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
 8008d4e:	f010 0005 	ands.w	r0, r0, #5
 8008d52:	d100      	bne.n	8008d56 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8008d54:	4770      	bx	lr
        return 1;
 8008d56:	2001      	movs	r0, #1
 8008d58:	e7fc      	b.n	8008d54 <IsRequestPending+0xc>
 8008d5a:	bf00      	nop
 8008d5c:	200009a0 	.word	0x200009a0

08008d60 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008d60:	b500      	push	{lr}
 8008d62:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008d64:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8008d66:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8008d6a:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8008d6e:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008d72:	220d      	movs	r2, #13
 8008d74:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008d78:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008d7c:	b113      	cbz	r3, 8008d84 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008d7e:	230e      	movs	r3, #14
 8008d80:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008d84:	a902      	add	r1, sp, #8
 8008d86:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8008d88:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008d8c:	f004 fa02 	bl	800d194 <RegionGetPhyParam>
 8008d90:	9001      	str	r0, [sp, #4]
}
 8008d92:	b2c0      	uxtb	r0, r0
 8008d94:	b005      	add	sp, #20
 8008d96:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d9a:	bf00      	nop
 8008d9c:	20008000 	.word	0x20008000

08008da0 <ValidatePayloadLength>:
{
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4605      	mov	r5, r0
 8008da4:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008da6:	4608      	mov	r0, r1
 8008da8:	f7ff ffda 	bl	8008d60 <GetMaxAppPayloadWithoutFOptsLength>
 8008dac:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8008dae:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d303      	bcc.n	8008dbc <ValidatePayloadLength+0x1c>
 8008db4:	2aff      	cmp	r2, #255	; 0xff
 8008db6:	d903      	bls.n	8008dc0 <ValidatePayloadLength+0x20>
    return false;
 8008db8:	2000      	movs	r0, #0
 8008dba:	e000      	b.n	8008dbe <ValidatePayloadLength+0x1e>
 8008dbc:	2000      	movs	r0, #0
}
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	e7fc      	b.n	8008dbe <ValidatePayloadLength+0x1e>

08008dc4 <ProcessRadioTxDone>:
{
 8008dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dc6:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008dc8:	4b3b      	ldr	r3, [pc, #236]	; (8008eb8 <ProcessRadioTxDone+0xf4>)
 8008dca:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d002      	beq.n	8008dd8 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 8008dd2:	4b3a      	ldr	r3, [pc, #232]	; (8008ebc <ProcessRadioTxDone+0xf8>)
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dd8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008ddc:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8008dde:	f009 fc93 	bl	8012708 <UTIL_TIMER_GetCurrentTime>
 8008de2:	4b37      	ldr	r3, [pc, #220]	; (8008ec0 <ProcessRadioTxDone+0xfc>)
 8008de4:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8008de6:	4c37      	ldr	r4, [pc, #220]	; (8008ec4 <ProcessRadioTxDone+0x100>)
 8008de8:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 8008dec:	1a2d      	subs	r5, r5, r0
 8008dee:	f504 7660 	add.w	r6, r4, #896	; 0x380
 8008df2:	4429      	add	r1, r5
 8008df4:	4630      	mov	r0, r6
 8008df6:	f009 fd67 	bl	80128c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f009 fd1e 	bl	801283c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8008e00:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8008e04:	f504 7666 	add.w	r6, r4, #920	; 0x398
 8008e08:	4429      	add	r1, r5
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	f009 fd5c 	bl	80128c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008e10:	4630      	mov	r0, r6
 8008e12:	f009 fd13 	bl	801283c <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e16:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 8008e1a:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d134      	bne.n	8008e8c <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008e22:	4b28      	ldr	r3, [pc, #160]	; (8008ec4 <ProcessRadioTxDone+0x100>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008e2a:	4b25      	ldr	r3, [pc, #148]	; (8008ec0 <ProcessRadioTxDone+0xfc>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4c22      	ldr	r4, [pc, #136]	; (8008eb8 <ProcessRadioTxDone+0xf4>)
 8008e30:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8008e32:	4f24      	ldr	r7, [pc, #144]	; (8008ec4 <ProcessRadioTxDone+0x100>)
 8008e34:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 8008e38:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008e3c:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008e3e:	ae0c      	add	r6, sp, #48	; 0x30
 8008e40:	4630      	mov	r0, r6
 8008e42:	f009 fbd5 	bl	80125f0 <SysTimeGetMcuTime>
 8008e46:	ad02      	add	r5, sp, #8
 8008e48:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8008e52:	e896 0006 	ldmia.w	r6, {r1, r2}
 8008e56:	4628      	mov	r0, r5
 8008e58:	f009 fb67 	bl	801252a <SysTimeSub>
 8008e5c:	ab07      	add	r3, sp, #28
 8008e5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008e62:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008e66:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8008e6a:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008e72:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 8008e76:	b90b      	cbnz	r3, 8008e7c <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 8008e78:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008e7c:	a904      	add	r1, sp, #16
 8008e7e:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <ProcessRadioTxDone+0xf4>)
 8008e80:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008e84:	f004 f99e 	bl	800d1c4 <RegionSetBandTxDone>
}
 8008e88:	b00f      	add	sp, #60	; 0x3c
 8008e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8008e8c:	2315      	movs	r3, #21
 8008e8e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008e92:	a90a      	add	r1, sp, #40	; 0x28
 8008e94:	4b08      	ldr	r3, [pc, #32]	; (8008eb8 <ProcessRadioTxDone+0xf4>)
 8008e96:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8008e9a:	f004 f97b 	bl	800d194 <RegionGetPhyParam>
 8008e9e:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008ea0:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 8008ea4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008ea8:	4401      	add	r1, r0
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f009 fd0c 	bl	80128c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f009 fcc3 	bl	801283c <UTIL_TIMER_Start>
 8008eb6:	e7b8      	b.n	8008e2a <ProcessRadioTxDone+0x66>
 8008eb8:	20008000 	.word	0x20008000
 8008ebc:	08018e34 	.word	0x08018e34
 8008ec0:	20000f5c 	.word	0x20000f5c
 8008ec4:	200009a0 	.word	0x200009a0

08008ec8 <OnRetransmitTimeoutTimerEvent>:
{
 8008ec8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8008eca:	4c07      	ldr	r4, [pc, #28]	; (8008ee8 <OnRetransmitTimeoutTimerEvent+0x20>)
 8008ecc:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8008ed0:	f009 fc5a 	bl	8012788 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8008ed4:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8008ed8:	b113      	cbz	r3, 8008ee0 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8008eda:	2201      	movs	r2, #1
 8008edc:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    OnMacProcessNotify( );
 8008ee0:	f7ff ff0e 	bl	8008d00 <OnMacProcessNotify>
}
 8008ee4:	bd10      	pop	{r4, pc}
 8008ee6:	bf00      	nop
 8008ee8:	200009a0 	.word	0x200009a0

08008eec <PrepareRxDoneAbort>:
{
 8008eec:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <PrepareRxDoneAbort+0x3c>)
 8008ef0:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008ef4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ef8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8008efc:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8008f00:	b973      	cbnz	r3, 8008f20 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8008f02:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <PrepareRxDoneAbort+0x3c>)
 8008f04:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 8008f08:	f042 0202 	orr.w	r2, r2, #2
 8008f0c:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008f10:	b2d2      	uxtb	r2, r2
 8008f12:	f042 0210 	orr.w	r2, r2, #16
 8008f16:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 8008f1a:	f7ff fdd1 	bl	8008ac0 <UpdateRxSlotIdleState>
}
 8008f1e:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 8008f20:	2000      	movs	r0, #0
 8008f22:	f7ff ffd1 	bl	8008ec8 <OnRetransmitTimeoutTimerEvent>
 8008f26:	e7ec      	b.n	8008f02 <PrepareRxDoneAbort+0x16>
 8008f28:	200009a0 	.word	0x200009a0

08008f2c <LoRaMacCheckForBeaconAcquisition>:
{
 8008f2c:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008f2e:	200b      	movs	r0, #11
 8008f30:	f003 fbb6 	bl	800c6a0 <LoRaMacConfirmQueueIsCmdActive>
 8008f34:	b188      	cbz	r0, 8008f5a <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008f36:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <LoRaMacCheckForBeaconAcquisition+0x38>)
 8008f38:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008f3c:	f010 0f01 	tst.w	r0, #1
 8008f40:	d10d      	bne.n	8008f5e <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008f42:	f010 0004 	ands.w	r0, r0, #4
 8008f46:	d009      	beq.n	8008f5c <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008f48:	461a      	mov	r2, r3
 8008f4a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008f4e:	f023 0302 	bic.w	r3, r3, #2
 8008f52:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8008f56:	2001      	movs	r0, #1
 8008f58:	e000      	b.n	8008f5c <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8008f5a:	2000      	movs	r0, #0
}
 8008f5c:	bd08      	pop	{r3, pc}
    return 0x00;
 8008f5e:	2000      	movs	r0, #0
 8008f60:	e7fc      	b.n	8008f5c <LoRaMacCheckForBeaconAcquisition+0x30>
 8008f62:	bf00      	nop
 8008f64:	200009a0 	.word	0x200009a0

08008f68 <GetFCntDown>:
{
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	9c04      	ldr	r4, [sp, #16]
 8008f6c:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8008f6e:	b1f2      	cbz	r2, 8008fae <GetFCntDown+0x46>
 8008f70:	4694      	mov	ip, r2
 8008f72:	b1f4      	cbz	r4, 8008fb2 <GetFCntDown+0x4a>
 8008f74:	b1fd      	cbz	r5, 8008fb6 <GetFCntDown+0x4e>
    switch( addrID )
 8008f76:	b188      	cbz	r0, 8008f9c <GetFCntDown+0x34>
 8008f78:	2801      	cmp	r0, #1
 8008f7a:	d11e      	bne.n	8008fba <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8008f7c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d002      	beq.n	8008f8a <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8008f84:	2303      	movs	r3, #3
 8008f86:	7023      	strb	r3, [r4, #0]
 8008f88:	e00a      	b.n	8008fa0 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8008f8a:	b121      	cbz	r1, 8008f96 <GetFCntDown+0x2e>
 8008f8c:	2903      	cmp	r1, #3
 8008f8e:	d002      	beq.n	8008f96 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8008f90:	2301      	movs	r3, #1
 8008f92:	7023      	strb	r3, [r4, #0]
 8008f94:	e004      	b.n	8008fa0 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8008f96:	2302      	movs	r3, #2
 8008f98:	7023      	strb	r3, [r4, #0]
 8008f9a:	e001      	b.n	8008fa0 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8008f9c:	2304      	movs	r3, #4
 8008f9e:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8008fa0:	462a      	mov	r2, r5
 8008fa2:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 8008fa6:	7820      	ldrb	r0, [r4, #0]
 8008fa8:	f003 fda4 	bl	800caf4 <LoRaMacCryptoGetFCntDown>
}
 8008fac:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8008fae:	2009      	movs	r0, #9
 8008fb0:	e7fc      	b.n	8008fac <GetFCntDown+0x44>
 8008fb2:	2009      	movs	r0, #9
 8008fb4:	e7fa      	b.n	8008fac <GetFCntDown+0x44>
 8008fb6:	2009      	movs	r0, #9
 8008fb8:	e7f8      	b.n	8008fac <GetFCntDown+0x44>
    switch( addrID )
 8008fba:	2005      	movs	r0, #5
 8008fbc:	e7f6      	b.n	8008fac <GetFCntDown+0x44>

08008fbe <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8008fbe:	2801      	cmp	r0, #1
 8008fc0:	d900      	bls.n	8008fc4 <RemoveMacCommands+0x6>
 8008fc2:	4770      	bx	lr
{
 8008fc4:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8008fc6:	2a01      	cmp	r2, #1
 8008fc8:	d105      	bne.n	8008fd6 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8008fca:	f011 0f20 	tst.w	r1, #32
 8008fce:	d004      	beq.n	8008fda <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8008fd0:	f003 fa12 	bl	800c3f8 <LoRaMacCommandsRemoveStickyAnsCmds>
 8008fd4:	e001      	b.n	8008fda <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8008fd6:	f003 fa0f 	bl	800c3f8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8008fda:	bd08      	pop	{r3, pc}

08008fdc <ProcessMacCommands>:
{
 8008fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe0:	b08f      	sub	sp, #60	; 0x3c
 8008fe2:	4698      	mov	r8, r3
    uint8_t status = 0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8008fea:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8008fee:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	f200 82da 	bhi.w	80095ac <ProcessMacCommands+0x5d0>
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 8008ffe:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 8009002:	42bc      	cmp	r4, r7
 8009004:	f080 82d2 	bcs.w	80095ac <ProcessMacCommands+0x5d0>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8009008:	5d28      	ldrb	r0, [r5, r4]
 800900a:	f003 fa4d 	bl	800c4a8 <LoRaMacCommandsGetCmdSize>
 800900e:	4420      	add	r0, r4
 8009010:	42b8      	cmp	r0, r7
 8009012:	f300 82cb 	bgt.w	80095ac <ProcessMacCommands+0x5d0>
        switch( payload[macIndex++] )
 8009016:	1c66      	adds	r6, r4, #1
 8009018:	b2f6      	uxtb	r6, r6
 800901a:	5d2b      	ldrb	r3, [r5, r4]
 800901c:	3b02      	subs	r3, #2
 800901e:	2b11      	cmp	r3, #17
 8009020:	f200 82c4 	bhi.w	80095ac <ProcessMacCommands+0x5d0>
 8009024:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009028:	00280012 	.word	0x00280012
 800902c:	00c000ad 	.word	0x00c000ad
 8009030:	011e0106 	.word	0x011e0106
 8009034:	01740157 	.word	0x01740157
 8009038:	02c201c0 	.word	0x02c201c0
 800903c:	01f002c2 	.word	0x01f002c2
 8009040:	02c202c2 	.word	0x02c202c2
 8009044:	02690252 	.word	0x02690252
 8009048:	02a20288 	.word	0x02a20288
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800904c:	2005      	movs	r0, #5
 800904e:	f003 fb27 	bl	800c6a0 <LoRaMacConfirmQueueIsCmdActive>
 8009052:	b908      	cbnz	r0, 8009058 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 8009054:	4634      	mov	r4, r6
 8009056:	e7d4      	b.n	8009002 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009058:	2105      	movs	r1, #5
 800905a:	2000      	movs	r0, #0
 800905c:	f003 fad4 	bl	800c608 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009060:	1ca3      	adds	r3, r4, #2
 8009062:	b2db      	uxtb	r3, r3
 8009064:	5da9      	ldrb	r1, [r5, r6]
 8009066:	4aa7      	ldr	r2, [pc, #668]	; (8009304 <ProcessMacCommands+0x328>)
 8009068:	f882 145c 	strb.w	r1, [r2, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800906c:	3403      	adds	r4, #3
 800906e:	b2e4      	uxtb	r4, r4
 8009070:	5ceb      	ldrb	r3, [r5, r3]
 8009072:	f882 345d 	strb.w	r3, [r2, #1117]	; 0x45d
 8009076:	e7c4      	b.n	8009002 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8009078:	2300      	movs	r3, #0
 800907a:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800907e:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8009082:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8009086:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800908a:	f1b9 0f00 	cmp.w	r9, #0
 800908e:	d036      	beq.n	80090fe <ProcessMacCommands+0x122>
                    macIndex += 4;
 8009090:	3405      	adds	r4, #5
 8009092:	b2e4      	uxtb	r4, r4
 8009094:	e7b5      	b.n	8009002 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 8009096:	2305      	movs	r3, #5
 8009098:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800909c:	e050      	b.n	8009140 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800909e:	4b9a      	ldr	r3, [pc, #616]	; (8009308 <ProcessMacCommands+0x32c>)
 80090a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80090a4:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 80090a8:	4293      	cmp	r3, r2
 80090aa:	da03      	bge.n	80090b4 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 80090ac:	4b96      	ldr	r3, [pc, #600]	; (8009308 <ProcessMacCommands+0x32c>)
 80090ae:	2101      	movs	r1, #1
 80090b0:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80090b4:	4b94      	ldr	r3, [pc, #592]	; (8009308 <ProcessMacCommands+0x32c>)
 80090b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80090ba:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80090be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80090c2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80090c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80090ca:	e04d      	b.n	8009168 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80090cc:	2201      	movs	r2, #1
 80090ce:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80090d2:	2003      	movs	r0, #3
 80090d4:	f003 f91c 	bl	800c310 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80090d8:	3401      	adds	r4, #1
 80090da:	b2e4      	uxtb	r4, r4
 80090dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80090e0:	498a      	ldr	r1, [pc, #552]	; (800930c <ProcessMacCommands+0x330>)
 80090e2:	fba1 2103 	umull	r2, r1, r1, r3
 80090e6:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 80090ea:	d3ef      	bcc.n	80090cc <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 80090ec:	441e      	add	r6, r3
 80090ee:	b2f6      	uxtb	r6, r6
 80090f0:	1e74      	subs	r4, r6, #1
 80090f2:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 80090f4:	42a7      	cmp	r7, r4
 80090f6:	d93a      	bls.n	800916e <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80090f8:	5d2b      	ldrb	r3, [r5, r4]
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d136      	bne.n	800916c <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80090fe:	1e73      	subs	r3, r6, #1
 8009100:	442b      	add	r3, r5
 8009102:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009104:	4b80      	ldr	r3, [pc, #512]	; (8009308 <ProcessMacCommands+0x32c>)
 8009106:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800910a:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800910e:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 8009112:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009116:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800911a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800911e:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 8009122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009126:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800912a:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800912e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8009132:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8009134:	2a00      	cmp	r2, #0
 8009136:	d0ae      	beq.n	8009096 <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009138:	1bbb      	subs	r3, r7, r6
 800913a:	3301      	adds	r3, #1
 800913c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8009140:	ab05      	add	r3, sp, #20
 8009142:	9301      	str	r3, [sp, #4]
 8009144:	ab03      	add	r3, sp, #12
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	f10d 030b 	add.w	r3, sp, #11
 800914c:	f10d 020a 	add.w	r2, sp, #10
 8009150:	a907      	add	r1, sp, #28
 8009152:	486d      	ldr	r0, [pc, #436]	; (8009308 <ProcessMacCommands+0x32c>)
 8009154:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8009158:	f004 f8b4 	bl	800d2c4 <RegionLinkAdrReq>
 800915c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8009160:	f000 0007 	and.w	r0, r0, #7
 8009164:	2807      	cmp	r0, #7
 8009166:	d09a      	beq.n	800909e <ProcessMacCommands+0xc2>
{
 8009168:	2400      	movs	r4, #0
 800916a:	e7b7      	b.n	80090dc <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800916c:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800916e:	42bc      	cmp	r4, r7
 8009170:	d204      	bcs.n	800917c <ProcessMacCommands+0x1a0>
                        macIndex--;
 8009172:	3c01      	subs	r4, #1
 8009174:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 8009176:	f04f 0901 	mov.w	r9, #1
 800917a:	e742      	b.n	8009002 <ProcessMacCommands+0x26>
 800917c:	f04f 0901 	mov.w	r9, #1
                break;
 8009180:	e73f      	b.n	8009002 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8009182:	3402      	adds	r4, #2
 8009184:	b2e4      	uxtb	r4, r4
 8009186:	5dab      	ldrb	r3, [r5, r6]
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	495e      	ldr	r1, [pc, #376]	; (8009308 <ProcessMacCommands+0x32c>)
 800918e:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8009192:	2201      	movs	r2, #1
 8009194:	fa02 f303 	lsl.w	r3, r2, r3
 8009198:	f8a1 3120 	strh.w	r3, [r1, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800919c:	2200      	movs	r2, #0
 800919e:	a90b      	add	r1, sp, #44	; 0x2c
 80091a0:	2004      	movs	r0, #4
 80091a2:	f003 f8b5 	bl	800c310 <LoRaMacCommandsAddCmd>
                break;
 80091a6:	e72c      	b.n	8009002 <ProcessMacCommands+0x26>
                status = 0x07;
 80091a8:	2307      	movs	r3, #7
 80091aa:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80091ae:	5dab      	ldrb	r3, [r5, r6]
 80091b0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80091b4:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80091b8:	57ab      	ldrsb	r3, [r5, r6]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80091c2:	1ca3      	adds	r3, r4, #2
 80091c4:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80091c6:	1ce1      	adds	r1, r4, #3
 80091c8:	b2c9      	uxtb	r1, r1
 80091ca:	5ceb      	ldrb	r3, [r5, r3]
 80091cc:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80091ce:	1d22      	adds	r2, r4, #4
 80091d0:	b2d2      	uxtb	r2, r2
 80091d2:	5c69      	ldrb	r1, [r5, r1]
 80091d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80091d8:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80091da:	3405      	adds	r4, #5
 80091dc:	b2e4      	uxtb	r4, r4
 80091de:	5caa      	ldrb	r2, [r5, r2]
 80091e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091e4:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 80091e6:	2264      	movs	r2, #100	; 0x64
 80091e8:	fb02 f303 	mul.w	r3, r2, r3
 80091ec:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80091ee:	a907      	add	r1, sp, #28
 80091f0:	4b45      	ldr	r3, [pc, #276]	; (8009308 <ProcessMacCommands+0x32c>)
 80091f2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80091f6:	f004 f881 	bl	800d2fc <RegionRxParamSetupReq>
 80091fa:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 80091fe:	f000 0307 	and.w	r3, r0, #7
 8009202:	2b07      	cmp	r3, #7
 8009204:	d007      	beq.n	8009216 <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 8009206:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800920a:	2201      	movs	r2, #1
 800920c:	a90b      	add	r1, sp, #44	; 0x2c
 800920e:	2005      	movs	r0, #5
 8009210:	f003 f87e 	bl	800c310 <LoRaMacCommandsAddCmd>
                break;
 8009214:	e6f5      	b.n	8009002 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8009216:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800921a:	4b3b      	ldr	r3, [pc, #236]	; (8009308 <ProcessMacCommands+0x32c>)
 800921c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8009220:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8009224:	9a08      	ldr	r2, [sp, #32]
 8009226:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009228:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800922a:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800922e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8009232:	e7e8      	b.n	8009206 <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009234:	4b33      	ldr	r3, [pc, #204]	; (8009304 <ProcessMacCommands+0x328>)
 8009236:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800923a:	b17b      	cbz	r3, 800925c <ProcessMacCommands+0x280>
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	b17b      	cbz	r3, 8009260 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8009240:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8009242:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009246:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800924a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800924e:	2202      	movs	r2, #2
 8009250:	a90b      	add	r1, sp, #44	; 0x2c
 8009252:	2006      	movs	r0, #6
 8009254:	f003 f85c 	bl	800c310 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8009258:	4634      	mov	r4, r6
                break;
 800925a:	e6d2      	b.n	8009002 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800925c:	20ff      	movs	r0, #255	; 0xff
 800925e:	e7f0      	b.n	8009242 <ProcessMacCommands+0x266>
 8009260:	20ff      	movs	r0, #255	; 0xff
 8009262:	e7ee      	b.n	8009242 <ProcessMacCommands+0x266>
                status = 0x03;
 8009264:	2303      	movs	r3, #3
 8009266:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800926a:	1ca3      	adds	r3, r4, #2
 800926c:	b2db      	uxtb	r3, r3
 800926e:	57aa      	ldrsb	r2, [r5, r6]
 8009270:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8009274:	aa07      	add	r2, sp, #28
 8009276:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009278:	1ce2      	adds	r2, r4, #3
 800927a:	b2d2      	uxtb	r2, r2
 800927c:	5ceb      	ldrb	r3, [r5, r3]
 800927e:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009280:	1d21      	adds	r1, r4, #4
 8009282:	b2c9      	uxtb	r1, r1
 8009284:	5caa      	ldrb	r2, [r5, r2]
 8009286:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800928a:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800928c:	1d62      	adds	r2, r4, #5
 800928e:	b2d2      	uxtb	r2, r2
 8009290:	5c69      	ldrb	r1, [r5, r1]
 8009292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009296:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8009298:	2164      	movs	r1, #100	; 0x64
 800929a:	fb01 f303 	mul.w	r3, r1, r3
 800929e:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 80092a4:	3406      	adds	r4, #6
 80092a6:	b2e4      	uxtb	r4, r4
 80092a8:	56ab      	ldrsb	r3, [r5, r2]
 80092aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80092ae:	a905      	add	r1, sp, #20
 80092b0:	4b15      	ldr	r3, [pc, #84]	; (8009308 <ProcessMacCommands+0x32c>)
 80092b2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80092b6:	f004 f830 	bl	800d31a <RegionNewChannelReq>
 80092ba:	b2c3      	uxtb	r3, r0
 80092bc:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80092c0:	2800      	cmp	r0, #0
 80092c2:	f6ff ae9e 	blt.w	8009002 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80092c6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80092ca:	2201      	movs	r2, #1
 80092cc:	a90b      	add	r1, sp, #44	; 0x2c
 80092ce:	2007      	movs	r0, #7
 80092d0:	f003 f81e 	bl	800c310 <LoRaMacCommandsAddCmd>
                break;
 80092d4:	e695      	b.n	8009002 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80092d6:	3402      	adds	r4, #2
 80092d8:	b2e4      	uxtb	r4, r4
 80092da:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 80092dc:	f013 030f 	ands.w	r3, r3, #15
 80092e0:	d100      	bne.n	80092e4 <ProcessMacCommands+0x308>
                    delay++;
 80092e2:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80092e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092e8:	fb02 f303 	mul.w	r3, r2, r3
 80092ec:	4a06      	ldr	r2, [pc, #24]	; (8009308 <ProcessMacCommands+0x32c>)
 80092ee:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80092f0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80092f4:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80092f6:	2200      	movs	r2, #0
 80092f8:	a90b      	add	r1, sp, #44	; 0x2c
 80092fa:	2008      	movs	r0, #8
 80092fc:	f003 f808 	bl	800c310 <LoRaMacCommandsAddCmd>
                break;
 8009300:	e67f      	b.n	8009002 <ProcessMacCommands+0x26>
 8009302:	bf00      	nop
 8009304:	200009a0 	.word	0x200009a0
 8009308:	20008000 	.word	0x20008000
 800930c:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8009310:	3402      	adds	r4, #2
 8009312:	b2e4      	uxtb	r4, r4
 8009314:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 8009316:	2200      	movs	r2, #0
 8009318:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800931c:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009320:	f013 0f20 	tst.w	r3, #32
 8009324:	d002      	beq.n	800932c <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009326:	2201      	movs	r2, #1
 8009328:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800932c:	f013 0f10 	tst.w	r3, #16
 8009330:	d002      	beq.n	8009338 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009332:	2201      	movs	r2, #1
 8009334:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009338:	f003 030f 	and.w	r3, r3, #15
 800933c:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8009340:	a903      	add	r1, sp, #12
 8009342:	4b9c      	ldr	r3, [pc, #624]	; (80095b4 <ProcessMacCommands+0x5d8>)
 8009344:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009348:	f003 fff6 	bl	800d338 <RegionTxParamSetupReq>
 800934c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009350:	f43f ae57 	beq.w	8009002 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009354:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8009358:	4e96      	ldr	r6, [pc, #600]	; (80095b4 <ProcessMacCommands+0x5d8>)
 800935a:	f886 a07c 	strb.w	sl, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800935e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009362:	f886 307d 	strb.w	r3, [r6, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009366:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800936a:	4a93      	ldr	r2, [pc, #588]	; (80095b8 <ProcessMacCommands+0x5dc>)
 800936c:	5cd0      	ldrb	r0, [r2, r3]
 800936e:	f7f7 fdcd 	bl	8000f0c <__aeabi_ui2f>
 8009372:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009376:	2302      	movs	r3, #2
 8009378:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800937c:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009380:	a907      	add	r1, sp, #28
 8009382:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 8009386:	f003 ff05 	bl	800d194 <RegionGetPhyParam>
 800938a:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800938c:	b240      	sxtb	r0, r0
 800938e:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8009392:	4298      	cmp	r0, r3
 8009394:	bfb8      	it	lt
 8009396:	4618      	movlt	r0, r3
 8009398:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800939c:	2200      	movs	r2, #0
 800939e:	a90b      	add	r1, sp, #44	; 0x2c
 80093a0:	2009      	movs	r0, #9
 80093a2:	f002 ffb5 	bl	800c310 <LoRaMacCommandsAddCmd>
                break;
 80093a6:	e62c      	b.n	8009002 <ProcessMacCommands+0x26>
                status = 0x03;
 80093a8:	2303      	movs	r3, #3
 80093aa:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80093ae:	1ca3      	adds	r3, r4, #2
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	5daa      	ldrb	r2, [r5, r6]
 80093b4:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80093b8:	1ce1      	adds	r1, r4, #3
 80093ba:	b2c9      	uxtb	r1, r1
 80093bc:	5ceb      	ldrb	r3, [r5, r3]
 80093be:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80093c0:	1d22      	adds	r2, r4, #4
 80093c2:	b2d2      	uxtb	r2, r2
 80093c4:	5c69      	ldrb	r1, [r5, r1]
 80093c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80093ca:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80093cc:	3405      	adds	r4, #5
 80093ce:	b2e4      	uxtb	r4, r4
 80093d0:	5caa      	ldrb	r2, [r5, r2]
 80093d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d6:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 80093d8:	2264      	movs	r2, #100	; 0x64
 80093da:	fb02 f303 	mul.w	r3, r2, r3
 80093de:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80093e0:	a907      	add	r1, sp, #28
 80093e2:	4b74      	ldr	r3, [pc, #464]	; (80095b4 <ProcessMacCommands+0x5d8>)
 80093e4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80093e8:	f003 ffb5 	bl	800d356 <RegionDlChannelReq>
 80093ec:	b2c3      	uxtb	r3, r0
 80093ee:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80093f2:	2800      	cmp	r0, #0
 80093f4:	f6ff ae05 	blt.w	8009002 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80093f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80093fc:	2201      	movs	r2, #1
 80093fe:	a90b      	add	r1, sp, #44	; 0x2c
 8009400:	200a      	movs	r0, #10
 8009402:	f002 ff85 	bl	800c310 <LoRaMacCommandsAddCmd>
                break;
 8009406:	e5fc      	b.n	8009002 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8009408:	2009      	movs	r0, #9
 800940a:	f003 f949 	bl	800c6a0 <LoRaMacConfirmQueueIsCmdActive>
 800940e:	b928      	cbnz	r0, 800941c <ProcessMacCommands+0x440>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009410:	4b6a      	ldr	r3, [pc, #424]	; (80095bc <ProcessMacCommands+0x5e0>)
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
        switch( payload[macIndex++] )
 8009418:	4634      	mov	r4, r6
 800941a:	e5f2      	b.n	8009002 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800941c:	2109      	movs	r1, #9
 800941e:	2000      	movs	r0, #0
 8009420:	f003 f8f2 	bl	800c608 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8009424:	a803      	add	r0, sp, #12
 8009426:	2300      	movs	r3, #0
 8009428:	9303      	str	r3, [sp, #12]
 800942a:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800942c:	f10d 0a14 	add.w	sl, sp, #20
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 8009434:	f10d 0b1c 	add.w	fp, sp, #28
 8009438:	9307      	str	r3, [sp, #28]
 800943a:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800943c:	1ca1      	adds	r1, r4, #2
 800943e:	b2c9      	uxtb	r1, r1
 8009440:	5dab      	ldrb	r3, [r5, r6]
 8009442:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009444:	1ce2      	adds	r2, r4, #3
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	5c69      	ldrb	r1, [r5, r1]
 800944a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800944e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009450:	1d21      	adds	r1, r4, #4
 8009452:	b2c9      	uxtb	r1, r1
 8009454:	5caa      	ldrb	r2, [r5, r2]
 8009456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800945a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800945c:	1d62      	adds	r2, r4, #5
 800945e:	b2d2      	uxtb	r2, r2
 8009460:	5c69      	ldrb	r1, [r5, r1]
 8009462:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009466:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009468:	3406      	adds	r4, #6
 800946a:	b2e4      	uxtb	r4, r4
 800946c:	5caa      	ldrb	r2, [r5, r2]
 800946e:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009472:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009476:	fb01 f202 	mul.w	r2, r1, r2
 800947a:	0a12      	lsrs	r2, r2, #8
 800947c:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8009480:	c803      	ldmia	r0, {r0, r1}
 8009482:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8009486:	4a4e      	ldr	r2, [pc, #312]	; (80095c0 <ProcessMacCommands+0x5e4>)
 8009488:	441a      	add	r2, r3
 800948a:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800948c:	4658      	mov	r0, fp
 800948e:	f009 f88d 	bl	80125ac <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009492:	4e4a      	ldr	r6, [pc, #296]	; (80095bc <ProcessMacCommands+0x5e0>)
 8009494:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800949e:	e89a 0006 	ldmia.w	sl, {r1, r2}
 80094a2:	a80c      	add	r0, sp, #48	; 0x30
 80094a4:	f009 f841 	bl	801252a <SysTimeSub>
 80094a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ae:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80094b2:	4650      	mov	r0, sl
 80094b4:	f009 f81a 	bl	80124ec <SysTimeAdd>
                    SysTimeSet( sysTime );
 80094b8:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80094bc:	f009 f854 	bl	8012568 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80094c0:	f002 fe88 	bl	800c1d4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80094c4:	2301      	movs	r3, #1
 80094c6:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
 80094ca:	e59a      	b.n	8009002 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80094cc:	200c      	movs	r0, #12
 80094ce:	f003 f8e7 	bl	800c6a0 <LoRaMacConfirmQueueIsCmdActive>
 80094d2:	b908      	cbnz	r0, 80094d8 <ProcessMacCommands+0x4fc>
        switch( payload[macIndex++] )
 80094d4:	4634      	mov	r4, r6
 80094d6:	e594      	b.n	8009002 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80094d8:	210c      	movs	r1, #12
 80094da:	2000      	movs	r0, #0
 80094dc:	f003 f894 	bl	800c608 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80094e0:	4b36      	ldr	r3, [pc, #216]	; (80095bc <ProcessMacCommands+0x5e0>)
 80094e2:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80094e6:	3b04      	subs	r3, #4
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d801      	bhi.n	80094f2 <ProcessMacCommands+0x516>
        switch( payload[macIndex++] )
 80094ee:	4634      	mov	r4, r6
 80094f0:	e587      	b.n	8009002 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 80094f2:	f002 fe6b 	bl	800c1cc <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80094f6:	4634      	mov	r4, r6
 80094f8:	e583      	b.n	8009002 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 80094fa:	1ca2      	adds	r2, r4, #2
 80094fc:	b2d2      	uxtb	r2, r2
 80094fe:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009500:	1ce1      	adds	r1, r4, #3
 8009502:	b2c9      	uxtb	r1, r1
 8009504:	5caa      	ldrb	r2, [r5, r2]
 8009506:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800950a:	1d22      	adds	r2, r4, #4
 800950c:	b2d2      	uxtb	r2, r2
 800950e:	5c69      	ldrb	r1, [r5, r1]
 8009510:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8009514:	3405      	adds	r4, #5
 8009516:	b2e4      	uxtb	r4, r4
 8009518:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800951a:	2164      	movs	r1, #100	; 0x64
 800951c:	fb03 f101 	mul.w	r1, r3, r1
 8009520:	f000 000f 	and.w	r0, r0, #15
 8009524:	f002 fe53 	bl	800c1ce <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8009528:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800952c:	2201      	movs	r2, #1
 800952e:	a90b      	add	r1, sp, #44	; 0x2c
 8009530:	2011      	movs	r0, #17
 8009532:	f002 feed 	bl	800c310 <LoRaMacCommandsAddCmd>
                break;
 8009536:	e564      	b.n	8009002 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8009538:	200d      	movs	r0, #13
 800953a:	f003 f8b1 	bl	800c6a0 <LoRaMacConfirmQueueIsCmdActive>
 800953e:	b908      	cbnz	r0, 8009544 <ProcessMacCommands+0x568>
        switch( payload[macIndex++] )
 8009540:	4634      	mov	r4, r6
 8009542:	e55e      	b.n	8009002 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8009544:	210d      	movs	r1, #13
 8009546:	2000      	movs	r0, #0
 8009548:	f003 f85e 	bl	800c608 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800954c:	1ca2      	adds	r2, r4, #2
 800954e:	b2d2      	uxtb	r2, r2
 8009550:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8009552:	1ce3      	adds	r3, r4, #3
 8009554:	b2db      	uxtb	r3, r3
 8009556:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8009558:	3404      	adds	r4, #4
 800955a:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800955c:	4a19      	ldr	r2, [pc, #100]	; (80095c4 <ProcessMacCommands+0x5e8>)
 800955e:	6812      	ldr	r2, [r2, #0]
 8009560:	5ce9      	ldrb	r1, [r5, r3]
 8009562:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8009566:	f002 fe34 	bl	800c1d2 <LoRaMacClassBBeaconTimingAns>
 800956a:	e54a      	b.n	8009002 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800956c:	1ca1      	adds	r1, r4, #2
 800956e:	b2c9      	uxtb	r1, r1
 8009570:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009572:	1ce2      	adds	r2, r4, #3
 8009574:	b2d2      	uxtb	r2, r2
 8009576:	5c68      	ldrb	r0, [r5, r1]
 8009578:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800957c:	3404      	adds	r4, #4
 800957e:	b2e4      	uxtb	r4, r4
 8009580:	5ca8      	ldrb	r0, [r5, r2]
 8009582:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8009586:	2064      	movs	r0, #100	; 0x64
 8009588:	fb03 f000 	mul.w	r0, r3, r0
 800958c:	f002 fe23 	bl	800c1d6 <LoRaMacClassBBeaconFreqReq>
 8009590:	b140      	cbz	r0, 80095a4 <ProcessMacCommands+0x5c8>
                        macCmdPayload[0] = 1;
 8009592:	2301      	movs	r3, #1
 8009594:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8009598:	2201      	movs	r2, #1
 800959a:	a90b      	add	r1, sp, #44	; 0x2c
 800959c:	2013      	movs	r0, #19
 800959e:	f002 feb7 	bl	800c310 <LoRaMacCommandsAddCmd>
                break;
 80095a2:	e52e      	b.n	8009002 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80095aa:	e7f5      	b.n	8009598 <ProcessMacCommands+0x5bc>
}
 80095ac:	b00f      	add	sp, #60	; 0x3c
 80095ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b2:	bf00      	nop
 80095b4:	20008000 	.word	0x20008000
 80095b8:	0801875c 	.word	0x0801875c
 80095bc:	200009a0 	.word	0x200009a0
 80095c0:	12d53d80 	.word	0x12d53d80
 80095c4:	20000f4c 	.word	0x20000f4c

080095c8 <ProcessRadioRxDone>:
{
 80095c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095cc:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 80095ce:	4ba5      	ldr	r3, [pc, #660]	; (8009864 <ProcessRadioRxDone+0x29c>)
 80095d0:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80095d2:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80095d4:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80095d8:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80095e0:	4aa1      	ldr	r2, [pc, #644]	; (8009868 <ProcessRadioRxDone+0x2a0>)
 80095e2:	f8d2 90e4 	ldr.w	r9, [r2, #228]	; 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80095e6:	4aa1      	ldr	r2, [pc, #644]	; (800986c <ProcessRadioRxDone+0x2a4>)
 80095e8:	7811      	ldrb	r1, [r2, #0]
 80095ea:	f363 0100 	bfi	r1, r3, #0, #1
 80095ee:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 80095f0:	4c9f      	ldr	r4, [pc, #636]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 80095f2:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 80095f6:	f8a4 848c 	strh.w	r8, [r4, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 80095fa:	f884 748e 	strb.w	r7, [r4, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80095fe:	f894 2490 	ldrb.w	r2, [r4, #1168]	; 0x490
 8009602:	f884 248f 	strb.w	r2, [r4, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 8009606:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800960a:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800960e:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8009612:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8009616:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800961a:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800961e:	f884 342e 	strb.w	r3, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009622:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009626:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800962a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800962e:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8009632:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 8009636:	4b8f      	ldr	r3, [pc, #572]	; (8009874 <ProcessRadioRxDone+0x2ac>)
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800963c:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 8009640:	b1d3      	cbz	r3, 8009678 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009642:	4629      	mov	r1, r5
 8009644:	4630      	mov	r0, r6
 8009646:	f002 fdae 	bl	800c1a6 <LoRaMacClassBRxBeacon>
 800964a:	b9d0      	cbnz	r0, 8009682 <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800964c:	4b86      	ldr	r3, [pc, #536]	; (8009868 <ProcessRadioRxDone+0x2a0>)
 800964e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009652:	2b01      	cmp	r3, #1
 8009654:	d01d      	beq.n	8009692 <ProcessRadioRxDone+0xca>
    if( size == 0 )
 8009656:	2d00      	cmp	r5, #0
 8009658:	d038      	beq.n	80096cc <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 800965a:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800965c:	0963      	lsrs	r3, r4, #5
 800965e:	3b01      	subs	r3, #1
 8009660:	2b06      	cmp	r3, #6
 8009662:	f200 82fc 	bhi.w	8009c5e <ProcessRadioRxDone+0x696>
 8009666:	e8df f013 	tbh	[pc, r3, lsl #1]
 800966a:	0038      	.short	0x0038
 800966c:	00d102fa 	.word	0x00d102fa
 8009670:	00cd02fa 	.word	0x00cd02fa
 8009674:	02cc02fa 	.word	0x02cc02fa
        TimerStop( &MacCtx.RxWindowTimer2 );
 8009678:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800967c:	f009 f884 	bl	8012788 <UTIL_TIMER_Stop>
 8009680:	e7df      	b.n	8009642 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009682:	4b7b      	ldr	r3, [pc, #492]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 8009684:	f8a3 847e 	strh.w	r8, [r3, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009688:	f883 7480 	strb.w	r7, [r3, #1152]	; 0x480
}
 800968c:	b025      	add	sp, #148	; 0x94
 800968e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009692:	f002 fd8c 	bl	800c1ae <LoRaMacClassBIsPingExpected>
 8009696:	b150      	cbz	r0, 80096ae <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009698:	2000      	movs	r0, #0
 800969a:	f002 fd7d 	bl	800c198 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800969e:	2000      	movs	r0, #0
 80096a0:	f002 fd7f 	bl	800c1a2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80096a4:	4b72      	ldr	r3, [pc, #456]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 80096a6:	2204      	movs	r2, #4
 80096a8:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 80096ac:	e7d3      	b.n	8009656 <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80096ae:	f002 fd80 	bl	800c1b2 <LoRaMacClassBIsMulticastExpected>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d0cf      	beq.n	8009656 <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80096b6:	2000      	movs	r0, #0
 80096b8:	f002 fd6f 	bl	800c19a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80096bc:	2000      	movs	r0, #0
 80096be:	f002 fd71 	bl	800c1a4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80096c2:	4b6b      	ldr	r3, [pc, #428]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 80096c4:	2205      	movs	r2, #5
 80096c6:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 80096ca:	e7c4      	b.n	8009656 <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80096cc:	4b68      	ldr	r3, [pc, #416]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 80096d4:	f7ff fc0a 	bl	8008eec <PrepareRxDoneAbort>
        return;
 80096d8:	e7d8      	b.n	800968c <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80096da:	2d10      	cmp	r5, #16
 80096dc:	d92e      	bls.n	800973c <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 80096de:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 80096e0:	b2ed      	uxtb	r5, r5
 80096e2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80096e6:	4b60      	ldr	r3, [pc, #384]	; (8009868 <ProcessRadioRxDone+0x2a0>)
 80096e8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80096ec:	bb6b      	cbnz	r3, 800974a <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 80096ee:	a804      	add	r0, sp, #16
 80096f0:	f006 fcfa 	bl	80100e8 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 80096f4:	aa08      	add	r2, sp, #32
 80096f6:	a904      	add	r1, sp, #16
 80096f8:	20ff      	movs	r0, #255	; 0xff
 80096fa:	f003 fb4d 	bl	800cd98 <LoRaMacCryptoHandleJoinAccept>
 80096fe:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009700:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8009704:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009708:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800970c:	4b56      	ldr	r3, [pc, #344]	; (8009868 <ProcessRadioRxDone+0x2a0>)
 800970e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8009712:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8009716:	2207      	movs	r2, #7
 8009718:	a903      	add	r1, sp, #12
 800971a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800971e:	f003 fd6d 	bl	800d1fc <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8009722:	b904      	cbnz	r4, 8009726 <ProcessRadioRxDone+0x15e>
 8009724:	b9c0      	cbnz	r0, 8009758 <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009726:	2001      	movs	r0, #1
 8009728:	f002 ffba 	bl	800c6a0 <LoRaMacConfirmQueueIsCmdActive>
 800972c:	2800      	cmp	r0, #0
 800972e:	f000 8282 	beq.w	8009c36 <ProcessRadioRxDone+0x66e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009732:	2101      	movs	r1, #1
 8009734:	2007      	movs	r0, #7
 8009736:	f002 ff67 	bl	800c608 <LoRaMacConfirmQueueSetStatus>
 800973a:	e27c      	b.n	8009c36 <ProcessRadioRxDone+0x66e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800973c:	4b4c      	ldr	r3, [pc, #304]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009744:	f7ff fbd2 	bl	8008eec <PrepareRxDoneAbort>
                return;
 8009748:	e7a0      	b.n	800968c <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800974a:	4b49      	ldr	r3, [pc, #292]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009752:	f7ff fbcb 	bl	8008eec <PrepareRxDoneAbort>
                return;
 8009756:	e799      	b.n	800968c <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009758:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800975c:	4c42      	ldr	r4, [pc, #264]	; (8009868 <ProcessRadioRxDone+0x2a0>)
 800975e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009762:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8009766:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800976a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800976e:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8009772:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009776:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800977a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800977c:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8009780:	2002      	movs	r0, #2
 8009782:	f006 fcbf 	bl	8010104 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009786:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800978a:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800978e:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009792:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009796:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800979a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800979e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80097a2:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80097a4:	b90b      	cbnz	r3, 80097aa <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80097a6:	2201      	movs	r2, #1
 80097a8:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80097aa:	4c2f      	ldr	r4, [pc, #188]	; (8009868 <ProcessRadioRxDone+0x2a0>)
 80097ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80097b2:	fb02 f303 	mul.w	r3, r2, r3
 80097b6:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80097b8:	4413      	add	r3, r2
 80097ba:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 80097bc:	2601      	movs	r6, #1
 80097be:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80097c8:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 80097cc:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 80097ce:	3d11      	subs	r5, #17
 80097d0:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 80097d4:	4b26      	ldr	r3, [pc, #152]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 80097d6:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 80097da:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80097de:	a921      	add	r1, sp, #132	; 0x84
 80097e0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80097e4:	f003 fd1a 	bl	800d21c <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80097e8:	2302      	movs	r3, #2
 80097ea:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80097ee:	4630      	mov	r0, r6
 80097f0:	f002 ff56 	bl	800c6a0 <LoRaMacConfirmQueueIsCmdActive>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f000 821e 	beq.w	8009c36 <ProcessRadioRxDone+0x66e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80097fa:	4631      	mov	r1, r6
 80097fc:	2000      	movs	r0, #0
 80097fe:	f002 ff03 	bl	800c608 <LoRaMacConfirmQueueSetStatus>
 8009802:	e218      	b.n	8009c36 <ProcessRadioRxDone+0x66e>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009804:	4b1a      	ldr	r3, [pc, #104]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800980c:	4b16      	ldr	r3, [pc, #88]	; (8009868 <ProcessRadioRxDone+0x2a0>)
 800980e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8009812:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009816:	4a16      	ldr	r2, [pc, #88]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 8009818:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 800981c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009820:	220d      	movs	r2, #13
 8009822:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009826:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800982a:	b113      	cbz	r3, 8009832 <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800982c:	230e      	movs	r3, #14
 800982e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009832:	a91f      	add	r1, sp, #124	; 0x7c
 8009834:	4b0c      	ldr	r3, [pc, #48]	; (8009868 <ProcessRadioRxDone+0x2a0>)
 8009836:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800983a:	f003 fcab 	bl	800d194 <RegionGetPhyParam>
 800983e:	901e      	str	r0, [sp, #120]	; 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009840:	f1a5 030d 	sub.w	r3, r5, #13
 8009844:	b21b      	sxth	r3, r3
 8009846:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800984a:	b200      	sxth	r0, r0
 800984c:	4283      	cmp	r3, r0
 800984e:	dc01      	bgt.n	8009854 <ProcessRadioRxDone+0x28c>
 8009850:	2d0b      	cmp	r5, #11
 8009852:	d811      	bhi.n	8009878 <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009854:	4b06      	ldr	r3, [pc, #24]	; (8009870 <ProcessRadioRxDone+0x2a8>)
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800985c:	f7ff fb46 	bl	8008eec <PrepareRxDoneAbort>
                return;
 8009860:	e714      	b.n	800968c <ProcessRadioRxDone+0xc4>
 8009862:	bf00      	nop
 8009864:	20000f4c 	.word	0x20000f4c
 8009868:	20008000 	.word	0x20008000
 800986c:	2000099c 	.word	0x2000099c
 8009870:	200009a0 	.word	0x200009a0
 8009874:	08018e34 	.word	0x08018e34
            macMsgData.Buffer = payload;
 8009878:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 800987a:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800987e:	4bb8      	ldr	r3, [pc, #736]	; (8009b60 <ProcessRadioRxDone+0x598>)
 8009880:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009882:	23ff      	movs	r3, #255	; 0xff
 8009884:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009888:	a812      	add	r0, sp, #72	; 0x48
 800988a:	f003 fb53 	bl	800cf34 <LoRaMacParserData>
 800988e:	2800      	cmp	r0, #0
 8009890:	d142      	bne.n	8009918 <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009892:	4bb4      	ldr	r3, [pc, #720]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 8009894:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009898:	2b01      	cmp	r3, #1
 800989a:	d044      	beq.n	8009926 <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800989c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800989e:	4bb2      	ldr	r3, [pc, #712]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 80098a0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80098a4:	a904      	add	r1, sp, #16
 80098a6:	a812      	add	r0, sp, #72	; 0x48
 80098a8:	f7ff f996 	bl	8008bd8 <DetermineFrameType>
 80098ac:	4605      	mov	r5, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d164      	bne.n	800997c <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d066      	beq.n	800998a <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 80098bc:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80098be:	2d01      	cmp	r5, #1
 80098c0:	d10a      	bne.n	80098d8 <ProcessRadioRxDone+0x310>
 80098c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	f040 808d 	bne.w	80099e6 <ProcessRadioRxDone+0x41e>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80098cc:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80098d0:	f013 0f60 	tst.w	r3, #96	; 0x60
 80098d4:	f040 8087 	bne.w	80099e6 <ProcessRadioRxDone+0x41e>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 80098d8:	ab07      	add	r3, sp, #28
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	f10d 031b 	add.w	r3, sp, #27
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	4ba0      	ldr	r3, [pc, #640]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 80098e4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80098e8:	aa12      	add	r2, sp, #72	; 0x48
 80098ea:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80098ee:	4630      	mov	r0, r6
 80098f0:	f7ff fb3a 	bl	8008f68 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80098f4:	2800      	cmp	r0, #0
 80098f6:	f000 8082 	beq.w	80099fe <ProcessRadioRxDone+0x436>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80098fa:	2807      	cmp	r0, #7
 80098fc:	d07a      	beq.n	80099f4 <ProcessRadioRxDone+0x42c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80098fe:	4b9a      	ldr	r3, [pc, #616]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009900:	2201      	movs	r2, #1
 8009902:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009906:	9a07      	ldr	r2, [sp, #28]
 8009908:	4b97      	ldr	r3, [pc, #604]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 800990a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800990e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 8009912:	f7ff faeb 	bl	8008eec <PrepareRxDoneAbort>
                return;
 8009916:	e6b9      	b.n	800968c <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009918:	4b93      	ldr	r3, [pc, #588]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009920:	f7ff fae4 	bl	8008eec <PrepareRxDoneAbort>
                return;
 8009924:	e6b2      	b.n	800968c <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8009926:	f002 fc42 	bl	800c1ae <LoRaMacClassBIsPingExpected>
 800992a:	b188      	cbz	r0, 8009950 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800992c:	2000      	movs	r0, #0
 800992e:	f002 fc33 	bl	800c198 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8009932:	2000      	movs	r0, #0
 8009934:	f002 fc35 	bl	800c1a2 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009938:	4b8b      	ldr	r3, [pc, #556]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 800993a:	2204      	movs	r2, #4
 800993c:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8009940:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8009944:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8009948:	9814      	ldr	r0, [sp, #80]	; 0x50
 800994a:	f002 fc49 	bl	800c1e0 <LoRaMacClassBSetFPendingBit>
 800994e:	e7a5      	b.n	800989c <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009950:	f002 fc2f 	bl	800c1b2 <LoRaMacClassBIsMulticastExpected>
 8009954:	2800      	cmp	r0, #0
 8009956:	d0a1      	beq.n	800989c <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009958:	2000      	movs	r0, #0
 800995a:	f002 fc1e 	bl	800c19a <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800995e:	2000      	movs	r0, #0
 8009960:	f002 fc20 	bl	800c1a4 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009964:	4b80      	ldr	r3, [pc, #512]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009966:	2205      	movs	r2, #5
 8009968:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800996c:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8009970:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8009974:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009976:	f002 fc33 	bl	800c1e0 <LoRaMacClassBSetFPendingBit>
 800997a:	e78f      	b.n	800989c <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800997c:	4b7a      	ldr	r3, [pc, #488]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009984:	f7ff fab2 	bl	8008eec <PrepareRxDoneAbort>
                return;
 8009988:	e680      	b.n	800968c <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800998a:	461e      	mov	r6, r3
 800998c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009990:	4974      	ldr	r1, [pc, #464]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 8009992:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8009996:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800999a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800999c:	428a      	cmp	r2, r1
 800999e:	d002      	beq.n	80099a6 <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80099a0:	3301      	adds	r3, #1
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	e788      	b.n	80098b8 <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80099a6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80099aa:	486e      	ldr	r0, [pc, #440]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 80099ac:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80099b0:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80099b4:	2900      	cmp	r1, #0
 80099b6:	d0f3      	beq.n	80099a0 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80099b8:	2330      	movs	r3, #48	; 0x30
 80099ba:	fb03 0306 	mla	r3, r3, r6, r0
 80099be:	f893 60ea 	ldrb.w	r6, [r3, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80099c2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	9307      	str	r3, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80099ca:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d002      	beq.n	80099d8 <ProcessRadioRxDone+0x410>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80099d2:	4691      	mov	r9, r2
                    multicast = 1;
 80099d4:	2501      	movs	r5, #1
 80099d6:	e772      	b.n	80098be <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80099d8:	4b63      	ldr	r3, [pc, #396]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 80099da:	2103      	movs	r1, #3
 80099dc:	f883 148f 	strb.w	r1, [r3, #1167]	; 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80099e0:	4691      	mov	r9, r2
                    multicast = 1;
 80099e2:	2501      	movs	r5, #1
 80099e4:	e76b      	b.n	80098be <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80099e6:	4b60      	ldr	r3, [pc, #384]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80099ee:	f7ff fa7d 	bl	8008eec <PrepareRxDoneAbort>
                return;
 80099f2:	e64b      	b.n	800968c <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80099f4:	4b5c      	ldr	r3, [pc, #368]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 80099f6:	2208      	movs	r2, #8
 80099f8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 80099fc:	e783      	b.n	8009906 <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80099fe:	ab12      	add	r3, sp, #72	; 0x48
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	9b07      	ldr	r3, [sp, #28]
 8009a04:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8009a08:	4649      	mov	r1, r9
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f003 f91c 	bl	800cc48 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d14a      	bne.n	8009aaa <ProcessRadioRxDone+0x4e2>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009a14:	4b54      	ldr	r3, [pc, #336]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009a16:	2100      	movs	r1, #0
 8009a18:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8009a1c:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8009a20:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8009a24:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009a28:	9a07      	ldr	r2, [sp, #28]
 8009a2a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8009a2e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009a32:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009a36:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8009a3a:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009a3e:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009a42:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009a46:	f893 048f 	ldrb.w	r0, [r3, #1167]	; 0x48f
 8009a4a:	2801      	cmp	r0, #1
 8009a4c:	d93b      	bls.n	8009ac6 <ProcessRadioRxDone+0x4fe>
            if( multicast == 1 )
 8009a4e:	2d01      	cmp	r5, #1
 8009a50:	d03f      	beq.n	8009ad2 <ProcessRadioRxDone+0x50a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009a52:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8009a56:	2ca0      	cmp	r4, #160	; 0xa0
 8009a58:	d040      	beq.n	8009adc <ProcessRadioRxDone+0x514>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4a41      	ldr	r2, [pc, #260]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 8009a5e:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009a62:	4a41      	ldr	r2, [pc, #260]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009a64:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8009a68:	4b3e      	ldr	r3, [pc, #248]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 8009a6a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009a6e:	b923      	cbnz	r3, 8009a7a <ProcessRadioRxDone+0x4b2>
 8009a70:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8009a74:	f013 0f10 	tst.w	r3, #16
 8009a78:	d007      	beq.n	8009a8a <ProcessRadioRxDone+0x4c2>
 8009a7a:	4b3a      	ldr	r3, [pc, #232]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 8009a7c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009a80:	b91b      	cbnz	r3, 8009a8a <ProcessRadioRxDone+0x4c2>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8009a82:	4b39      	ldr	r3, [pc, #228]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009a8a:	4b37      	ldr	r3, [pc, #220]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009a8c:	f893 2440 	ldrb.w	r2, [r3, #1088]	; 0x440
 8009a90:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8009a94:	f7ff fa93 	bl	8008fbe <RemoveMacCommands>
            switch( fType )
 8009a98:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009a9c:	2b03      	cmp	r3, #3
 8009a9e:	f200 8099 	bhi.w	8009bd4 <ProcessRadioRxDone+0x60c>
 8009aa2:	e8df f003 	tbb	[pc, r3]
 8009aa6:	6536      	.short	0x6536
 8009aa8:	8777      	.short	0x8777
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8009aaa:	2802      	cmp	r0, #2
 8009aac:	d006      	beq.n	8009abc <ProcessRadioRxDone+0x4f4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009aae:	4b2e      	ldr	r3, [pc, #184]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009ab0:	220b      	movs	r2, #11
 8009ab2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009ab6:	f7ff fa19 	bl	8008eec <PrepareRxDoneAbort>
                return;
 8009aba:	e5e7      	b.n	800968c <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8009abc:	4b2a      	ldr	r3, [pc, #168]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009abe:	220a      	movs	r2, #10
 8009ac0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8009ac4:	e7f7      	b.n	8009ab6 <ProcessRadioRxDone+0x4ee>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009ac6:	4b27      	ldr	r3, [pc, #156]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 8009ac8:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
 8009ad0:	e7bd      	b.n	8009a4e <ProcessRadioRxDone+0x486>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8009ad2:	4b25      	ldr	r3, [pc, #148]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8009ada:	e7c5      	b.n	8009a68 <ProcessRadioRxDone+0x4a0>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009adc:	4b21      	ldr	r3, [pc, #132]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009ae4:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8009ae8:	b913      	cbnz	r3, 8009af0 <ProcessRadioRxDone+0x528>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009aea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009aec:	4b1d      	ldr	r3, [pc, #116]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 8009aee:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009af0:	4b1d      	ldr	r3, [pc, #116]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009af8:	4290      	cmp	r0, r2
 8009afa:	d9b5      	bls.n	8009a68 <ProcessRadioRxDone+0x4a0>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8009afc:	4b19      	ldr	r3, [pc, #100]	; (8009b64 <ProcessRadioRxDone+0x59c>)
 8009afe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009b02:	4b19      	ldr	r3, [pc, #100]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009b04:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8009b08:	4a18      	ldr	r2, [pc, #96]	; (8009b6c <ProcessRadioRxDone+0x5a4>)
 8009b0a:	6812      	ldr	r2, [r2, #0]
 8009b0c:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 8009b10:	e7aa      	b.n	8009a68 <ProcessRadioRxDone+0x4a0>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009b12:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009b16:	4c14      	ldr	r4, [pc, #80]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009b18:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	463b      	mov	r3, r7
 8009b20:	f002 020f 	and.w	r2, r2, #15
 8009b24:	2100      	movs	r1, #0
 8009b26:	a816      	add	r0, sp, #88	; 0x58
 8009b28:	f7ff fa58 	bl	8008fdc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009b2c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8009b30:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009b34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b36:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009b3a:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8009b3e:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8009b42:	2301      	movs	r3, #1
 8009b44:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8009b48:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8009b4c:	2be0      	cmp	r3, #224	; 0xe0
 8009b4e:	d048      	beq.n	8009be2 <ProcessRadioRxDone+0x61a>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009b50:	4a05      	ldr	r2, [pc, #20]	; (8009b68 <ProcessRadioRxDone+0x5a0>)
 8009b52:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8009b56:	f043 0302 	orr.w	r3, r3, #2
 8009b5a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 8009b5e:	e06a      	b.n	8009c36 <ProcessRadioRxDone+0x66e>
 8009b60:	20000bd8 	.word	0x20000bd8
 8009b64:	20008000 	.word	0x20008000
 8009b68:	200009a0 	.word	0x200009a0
 8009b6c:	20000f4c 	.word	0x20000f4c
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009b70:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009b74:	4c44      	ldr	r4, [pc, #272]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009b76:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	463b      	mov	r3, r7
 8009b7e:	f002 020f 	and.w	r2, r2, #15
 8009b82:	2100      	movs	r1, #0
 8009b84:	a816      	add	r0, sp, #88	; 0x58
 8009b86:	f7ff fa29 	bl	8008fdc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009b8a:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8009b8e:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 8009b92:	e7d9      	b.n	8009b48 <ProcessRadioRxDone+0x580>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8009b94:	4c3c      	ldr	r4, [pc, #240]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009b96:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009ba6:	f7ff fa19 	bl	8008fdc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009baa:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8009bae:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 8009bb2:	e7c9      	b.n	8009b48 <ProcessRadioRxDone+0x580>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009bb4:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8009bb8:	4b33      	ldr	r3, [pc, #204]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009bba:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009bbe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009bc0:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009bc4:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8009bc8:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8009bd2:	e7b9      	b.n	8009b48 <ProcessRadioRxDone+0x580>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009bd4:	4b2c      	ldr	r3, [pc, #176]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 8009bdc:	f7ff f986 	bl	8008eec <PrepareRxDoneAbort>
                    break;
 8009be0:	e7b2      	b.n	8009b48 <ProcessRadioRxDone+0x580>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8009be2:	4a2a      	ldr	r2, [pc, #168]	; (8009c8c <ProcessRadioRxDone+0x6c4>)
 8009be4:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	d1b1      	bne.n	8009b50 <ProcessRadioRxDone+0x588>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009bec:	4a26      	ldr	r2, [pc, #152]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009bee:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8009bf8:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8009bfc:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 8009c00:	e7a6      	b.n	8009b50 <ProcessRadioRxDone+0x588>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009c02:	1e6a      	subs	r2, r5, #1
 8009c04:	4c20      	ldr	r4, [pc, #128]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009c06:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8009c0a:	b292      	uxth	r2, r2
 8009c0c:	1c71      	adds	r1, r6, #1
 8009c0e:	4638      	mov	r0, r7
 8009c10:	f006 fb87 	bl	8010322 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009c14:	2303      	movs	r3, #3
 8009c16:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009c20:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009c24:	3d01      	subs	r5, #1
 8009c26:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8009c2a:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 8009c2e:	f043 0302 	orr.w	r3, r3, #2
 8009c32:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009c36:	4b14      	ldr	r3, [pc, #80]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009c38:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d915      	bls.n	8009c6c <ProcessRadioRxDone+0x6a4>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8009c40:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009c42:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d006      	beq.n	8009c58 <ProcessRadioRxDone+0x690>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8009c4a:	4a0f      	ldr	r2, [pc, #60]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009c4c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8009c50:	f043 0310 	orr.w	r3, r3, #16
 8009c54:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 8009c58:	f7fe ff32 	bl	8008ac0 <UpdateRxSlotIdleState>
 8009c5c:	e516      	b.n	800968c <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009c5e:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8009c66:	f7ff f941 	bl	8008eec <PrepareRxDoneAbort>
            break;
 8009c6a:	e7e4      	b.n	8009c36 <ProcessRadioRxDone+0x66e>
        if( MacCtx.NodeAckRequested == true )
 8009c6c:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009c6e:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d0e4      	beq.n	8009c40 <ProcessRadioRxDone+0x678>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8009c76:	4b04      	ldr	r3, [pc, #16]	; (8009c88 <ProcessRadioRxDone+0x6c0>)
 8009c78:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0df      	beq.n	8009c40 <ProcessRadioRxDone+0x678>
                OnRetransmitTimeoutTimerEvent( NULL );
 8009c80:	2000      	movs	r0, #0
 8009c82:	f7ff f921 	bl	8008ec8 <OnRetransmitTimeoutTimerEvent>
 8009c86:	e7db      	b.n	8009c40 <ProcessRadioRxDone+0x678>
 8009c88:	200009a0 	.word	0x200009a0
 8009c8c:	20008000 	.word	0x20008000

08009c90 <ProcessRadioTxTimeout>:
{
 8009c90:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009c92:	4b0f      	ldr	r3, [pc, #60]	; (8009cd0 <ProcessRadioTxTimeout+0x40>)
 8009c94:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d002      	beq.n	8009ca2 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8009c9c:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <ProcessRadioTxTimeout+0x44>)
 8009c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca0:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009ca2:	f7fe ff0d 	bl	8008ac0 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009ca6:	4c0c      	ldr	r4, [pc, #48]	; (8009cd8 <ProcessRadioTxTimeout+0x48>)
 8009ca8:	2002      	movs	r0, #2
 8009caa:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009cae:	f002 fcd9 	bl	800c664 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009cb2:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8009cb6:	b113      	cbz	r3, 8009cbe <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009cbe:	4a06      	ldr	r2, [pc, #24]	; (8009cd8 <ProcessRadioTxTimeout+0x48>)
 8009cc0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8009cc4:	f043 0310 	orr.w	r3, r3, #16
 8009cc8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	bf00      	nop
 8009cd0:	20008000 	.word	0x20008000
 8009cd4:	08018e34 	.word	0x08018e34
 8009cd8:	200009a0 	.word	0x200009a0

08009cdc <CheckForClassBCollision>:
{
 8009cdc:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009cde:	f002 fa64 	bl	800c1aa <LoRaMacClassBIsBeaconExpected>
 8009ce2:	b978      	cbnz	r0, 8009d04 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009ce4:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <CheckForClassBCollision+0x30>)
 8009ce6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d001      	beq.n	8009cf2 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8009cee:	2000      	movs	r0, #0
}
 8009cf0:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009cf2:	f002 fa5c 	bl	800c1ae <LoRaMacClassBIsPingExpected>
 8009cf6:	b938      	cbnz	r0, 8009d08 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009cf8:	f002 fa5b 	bl	800c1b2 <LoRaMacClassBIsMulticastExpected>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d0f7      	beq.n	8009cf0 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009d00:	200f      	movs	r0, #15
 8009d02:	e7f5      	b.n	8009cf0 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8009d04:	200e      	movs	r0, #14
 8009d06:	e7f3      	b.n	8009cf0 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009d08:	200f      	movs	r0, #15
 8009d0a:	e7f1      	b.n	8009cf0 <CheckForClassBCollision+0x14>
 8009d0c:	20008000 	.word	0x20008000

08009d10 <HandleRadioRxErrorTimeout>:
{
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	4605      	mov	r5, r0
 8009d14:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009d16:	4b34      	ldr	r3, [pc, #208]	; (8009de8 <HandleRadioRxErrorTimeout+0xd8>)
 8009d18:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d002      	beq.n	8009d26 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8009d20:	4b32      	ldr	r3, [pc, #200]	; (8009dec <HandleRadioRxErrorTimeout+0xdc>)
 8009d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d24:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009d26:	f002 fa40 	bl	800c1aa <LoRaMacClassBIsBeaconExpected>
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	bb50      	cbnz	r0, 8009d84 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009d2e:	4b2e      	ldr	r3, [pc, #184]	; (8009de8 <HandleRadioRxErrorTimeout+0xd8>)
 8009d30:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d02c      	beq.n	8009d92 <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 8009d38:	2e00      	cmp	r6, #0
 8009d3a:	d152      	bne.n	8009de2 <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009d3c:	4b2c      	ldr	r3, [pc, #176]	; (8009df0 <HandleRadioRxErrorTimeout+0xe0>)
 8009d3e:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d13c      	bne.n	8009dc0 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 8009d46:	4b2a      	ldr	r3, [pc, #168]	; (8009df0 <HandleRadioRxErrorTimeout+0xe0>)
 8009d48:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8009d4c:	b113      	cbz	r3, 8009d54 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8009d4e:	4b28      	ldr	r3, [pc, #160]	; (8009df0 <HandleRadioRxErrorTimeout+0xe0>)
 8009d50:	f883 5441 	strb.w	r5, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8009d54:	4628      	mov	r0, r5
 8009d56:	f002 fc85 	bl	800c664 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8009d5a:	4b23      	ldr	r3, [pc, #140]	; (8009de8 <HandleRadioRxErrorTimeout+0xd8>)
 8009d5c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009d5e:	f008 fcdd 	bl	801271c <UTIL_TIMER_GetElapsedTime>
 8009d62:	4b23      	ldr	r3, [pc, #140]	; (8009df0 <HandleRadioRxErrorTimeout+0xe0>)
 8009d64:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8009d68:	4298      	cmp	r0, r3
 8009d6a:	d33a      	bcc.n	8009de2 <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8009d6c:	4c20      	ldr	r4, [pc, #128]	; (8009df0 <HandleRadioRxErrorTimeout+0xe0>)
 8009d6e:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8009d72:	f008 fd09 	bl	8012788 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009d76:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 8009d7a:	f043 0310 	orr.w	r3, r3, #16
 8009d7e:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
 8009d82:	e02e      	b.n	8009de2 <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009d84:	2002      	movs	r0, #2
 8009d86:	f002 fa06 	bl	800c196 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	f002 fa08 	bl	800c1a0 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009d90:	e7cd      	b.n	8009d2e <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009d92:	f002 fa0c 	bl	800c1ae <LoRaMacClassBIsPingExpected>
 8009d96:	4607      	mov	r7, r0
 8009d98:	b950      	cbnz	r0, 8009db0 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009d9a:	f002 fa0a 	bl	800c1b2 <LoRaMacClassBIsMulticastExpected>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d0ca      	beq.n	8009d38 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009da2:	2000      	movs	r0, #0
 8009da4:	f002 f9f9 	bl	800c19a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009da8:	2000      	movs	r0, #0
 8009daa:	f002 f9fb 	bl	800c1a4 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8009dae:	e018      	b.n	8009de2 <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009db0:	2000      	movs	r0, #0
 8009db2:	f002 f9f1 	bl	800c198 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009db6:	2000      	movs	r0, #0
 8009db8:	f002 f9f3 	bl	800c1a2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009dbc:	463e      	mov	r6, r7
 8009dbe:	e7ec      	b.n	8009d9a <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 8009dc0:	4b0b      	ldr	r3, [pc, #44]	; (8009df0 <HandleRadioRxErrorTimeout+0xe0>)
 8009dc2:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8009dc6:	b113      	cbz	r3, 8009dce <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009dc8:	4b09      	ldr	r3, [pc, #36]	; (8009df0 <HandleRadioRxErrorTimeout+0xe0>)
 8009dca:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f002 fc48 	bl	800c664 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8009dd4:	4a06      	ldr	r2, [pc, #24]	; (8009df0 <HandleRadioRxErrorTimeout+0xe0>)
 8009dd6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8009dda:	f043 0310 	orr.w	r3, r3, #16
 8009dde:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 8009de2:	f7fe fe6d 	bl	8008ac0 <UpdateRxSlotIdleState>
}
 8009de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009de8:	20008000 	.word	0x20008000
 8009dec:	08018e34 	.word	0x08018e34
 8009df0:	200009a0 	.word	0x200009a0

08009df4 <ProcessRadioRxError>:
{
 8009df4:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009df6:	2106      	movs	r1, #6
 8009df8:	2005      	movs	r0, #5
 8009dfa:	f7ff ff89 	bl	8009d10 <HandleRadioRxErrorTimeout>
}
 8009dfe:	bd08      	pop	{r3, pc}

08009e00 <ProcessRadioRxTimeout>:
{
 8009e00:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009e02:	2104      	movs	r1, #4
 8009e04:	2003      	movs	r0, #3
 8009e06:	f7ff ff83 	bl	8009d10 <HandleRadioRxErrorTimeout>
}
 8009e0a:	bd08      	pop	{r3, pc}

08009e0c <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e0c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009e10:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8009e12:	4a14      	ldr	r2, [pc, #80]	; (8009e64 <LoRaMacHandleIrqEvents+0x58>)
 8009e14:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8009e16:	2000      	movs	r0, #0
 8009e18:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e1a:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8009e1e:	b303      	cbz	r3, 8009e62 <LoRaMacHandleIrqEvents+0x56>
{
 8009e20:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8009e22:	b2dc      	uxtb	r4, r3
 8009e24:	f013 0f20 	tst.w	r3, #32
 8009e28:	d10c      	bne.n	8009e44 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8009e2a:	f014 0f10 	tst.w	r4, #16
 8009e2e:	d10c      	bne.n	8009e4a <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8009e30:	f014 0f08 	tst.w	r4, #8
 8009e34:	d10c      	bne.n	8009e50 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8009e36:	f014 0f04 	tst.w	r4, #4
 8009e3a:	d10c      	bne.n	8009e56 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8009e3c:	f014 0f02 	tst.w	r4, #2
 8009e40:	d10c      	bne.n	8009e5c <LoRaMacHandleIrqEvents+0x50>
}
 8009e42:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8009e44:	f7fe ffbe 	bl	8008dc4 <ProcessRadioTxDone>
 8009e48:	e7ef      	b.n	8009e2a <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8009e4a:	f7ff fbbd 	bl	80095c8 <ProcessRadioRxDone>
 8009e4e:	e7ef      	b.n	8009e30 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8009e50:	f7ff ff1e 	bl	8009c90 <ProcessRadioTxTimeout>
 8009e54:	e7ef      	b.n	8009e36 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8009e56:	f7ff ffcd 	bl	8009df4 <ProcessRadioRxError>
 8009e5a:	e7ef      	b.n	8009e3c <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8009e5c:	f7ff ffd0 	bl	8009e00 <ProcessRadioRxTimeout>
}
 8009e60:	e7ef      	b.n	8009e42 <LoRaMacHandleIrqEvents+0x36>
 8009e62:	4770      	bx	lr
 8009e64:	2000099c 	.word	0x2000099c

08009e68 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 8009e68:	b909      	cbnz	r1, 8009e6e <LoRaMacHandleResponseTimeout+0x6>
    return false;
 8009e6a:	2000      	movs	r0, #0
}
 8009e6c:	4770      	bx	lr
{
 8009e6e:	b510      	push	{r4, lr}
 8009e70:	4604      	mov	r4, r0
 8009e72:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8009e74:	f008 fc52 	bl	801271c <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8009e78:	42a0      	cmp	r0, r4
 8009e7a:	d801      	bhi.n	8009e80 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 8009e7c:	2000      	movs	r0, #0
}
 8009e7e:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 8009e80:	4b02      	ldr	r3, [pc, #8]	; (8009e8c <LoRaMacHandleResponseTimeout+0x24>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 8009e88:	2001      	movs	r0, #1
 8009e8a:	e7f8      	b.n	8009e7e <LoRaMacHandleResponseTimeout+0x16>
 8009e8c:	20008000 	.word	0x20008000

08009e90 <LoRaMacHandleMlmeRequest>:
{
 8009e90:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009e92:	4b14      	ldr	r3, [pc, #80]	; (8009ee4 <LoRaMacHandleMlmeRequest+0x54>)
 8009e94:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8009e98:	f013 0f04 	tst.w	r3, #4
 8009e9c:	d100      	bne.n	8009ea0 <LoRaMacHandleMlmeRequest+0x10>
}
 8009e9e:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009ea0:	2001      	movs	r0, #1
 8009ea2:	f002 fbfd 	bl	800c6a0 <LoRaMacConfirmQueueIsCmdActive>
 8009ea6:	b178      	cbz	r0, 8009ec8 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	f002 fbc3 	bl	800c634 <LoRaMacConfirmQueueGetStatus>
 8009eae:	b918      	cbnz	r0, 8009eb8 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8009eb0:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <LoRaMacHandleMlmeRequest+0x54>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009eb8:	4a0a      	ldr	r2, [pc, #40]	; (8009ee4 <LoRaMacHandleMlmeRequest+0x54>)
 8009eba:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009ebe:	f023 0302 	bic.w	r3, r3, #2
 8009ec2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8009ec6:	e7ea      	b.n	8009e9e <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8009ec8:	2006      	movs	r0, #6
 8009eca:	f002 fbe9 	bl	800c6a0 <LoRaMacConfirmQueueIsCmdActive>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d0e5      	beq.n	8009e9e <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009ed2:	4a04      	ldr	r2, [pc, #16]	; (8009ee4 <LoRaMacHandleMlmeRequest+0x54>)
 8009ed4:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009ed8:	f023 0302 	bic.w	r3, r3, #2
 8009edc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8009ee0:	e7dd      	b.n	8009e9e <LoRaMacHandleMlmeRequest+0xe>
 8009ee2:	bf00      	nop
 8009ee4:	200009a0 	.word	0x200009a0

08009ee8 <SerializeTxFrame>:
{
 8009ee8:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 8009eea:	4b0f      	ldr	r3, [pc, #60]	; (8009f28 <SerializeTxFrame+0x40>)
 8009eec:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009ef0:	b11b      	cbz	r3, 8009efa <SerializeTxFrame+0x12>
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d00a      	beq.n	8009f0c <SerializeTxFrame+0x24>
 8009ef6:	2003      	movs	r0, #3
}
 8009ef8:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009efa:	480c      	ldr	r0, [pc, #48]	; (8009f2c <SerializeTxFrame+0x44>)
 8009efc:	f003 f879 	bl	800cff2 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009f00:	b968      	cbnz	r0, 8009f1e <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009f02:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <SerializeTxFrame+0x40>)
 8009f04:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009f08:	801a      	strh	r2, [r3, #0]
            break;
 8009f0a:	e7f5      	b.n	8009ef8 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8009f0c:	4807      	ldr	r0, [pc, #28]	; (8009f2c <SerializeTxFrame+0x44>)
 8009f0e:	f003 f8a6 	bl	800d05e <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009f12:	b930      	cbnz	r0, 8009f22 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009f14:	4b04      	ldr	r3, [pc, #16]	; (8009f28 <SerializeTxFrame+0x40>)
 8009f16:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009f1a:	801a      	strh	r2, [r3, #0]
            break;
 8009f1c:	e7ec      	b.n	8009ef8 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009f1e:	2011      	movs	r0, #17
 8009f20:	e7ea      	b.n	8009ef8 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009f22:	2011      	movs	r0, #17
 8009f24:	e7e8      	b.n	8009ef8 <SerializeTxFrame+0x10>
 8009f26:	bf00      	nop
 8009f28:	200009a0 	.word	0x200009a0
 8009f2c:	20000aa8 	.word	0x20000aa8

08009f30 <ComputeRxWindowParameters>:
{
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009f34:	4c1e      	ldr	r4, [pc, #120]	; (8009fb0 <ComputeRxWindowParameters+0x80>)
 8009f36:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8009f3a:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 8009f3e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 8009f42:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 8009f46:	4630      	mov	r0, r6
 8009f48:	f003 fa39 	bl	800d3be <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009f4c:	4d19      	ldr	r5, [pc, #100]	; (8009fb4 <ComputeRxWindowParameters+0x84>)
 8009f4e:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009f56:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8009f5a:	b241      	sxtb	r1, r0
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f003 f97a 	bl	800d256 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009f62:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009f6a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8009f6e:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 8009f72:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009f76:	f003 f96e 	bl	800d256 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009f7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f7c:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 8009f80:	440b      	add	r3, r1
 8009f82:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009f86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009f88:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8009f92:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d007      	beq.n	8009faa <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009f9a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009f9c:	4419      	add	r1, r3
 8009f9e:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009fa2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009fa4:	440a      	add	r2, r1
 8009fa6:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8009faa:	b002      	add	sp, #8
 8009fac:	bd70      	pop	{r4, r5, r6, pc}
 8009fae:	bf00      	nop
 8009fb0:	20008000 	.word	0x20008000
 8009fb4:	200009a0 	.word	0x200009a0

08009fb8 <VerifyTxFrame>:
{
 8009fb8:	b510      	push	{r4, lr}
 8009fba:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009fc0:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <VerifyTxFrame+0x40>)
 8009fc2:	f893 4130 	ldrb.w	r4, [r3, #304]	; 0x130
 8009fc6:	b914      	cbnz	r4, 8009fce <VerifyTxFrame+0x16>
}
 8009fc8:	4620      	mov	r0, r4
 8009fca:	b002      	add	sp, #8
 8009fcc:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009fce:	a801      	add	r0, sp, #4
 8009fd0:	f002 fa2c 	bl	800c42c <LoRaMacCommandsGetSizeSerializedCmds>
 8009fd4:	4604      	mov	r4, r0
 8009fd6:	b968      	cbnz	r0, 8009ff4 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8009fd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009fdc:	4b06      	ldr	r3, [pc, #24]	; (8009ff8 <VerifyTxFrame+0x40>)
 8009fde:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8009fe2:	4b06      	ldr	r3, [pc, #24]	; (8009ffc <VerifyTxFrame+0x44>)
 8009fe4:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8009fe8:	f7fe feda 	bl	8008da0 <ValidatePayloadLength>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d1eb      	bne.n	8009fc8 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8009ff0:	2408      	movs	r4, #8
 8009ff2:	e7e9      	b.n	8009fc8 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009ff4:	2413      	movs	r4, #19
 8009ff6:	e7e7      	b.n	8009fc8 <VerifyTxFrame+0x10>
 8009ff8:	20008000 	.word	0x20008000
 8009ffc:	200009a0 	.word	0x200009a0

0800a000 <SecureFrame>:
{
 800a000:	b530      	push	{r4, r5, lr}
 800a002:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800a008:	4b18      	ldr	r3, [pc, #96]	; (800a06c <SecureFrame+0x6c>)
 800a00a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a00e:	b133      	cbz	r3, 800a01e <SecureFrame+0x1e>
 800a010:	4605      	mov	r5, r0
 800a012:	460c      	mov	r4, r1
 800a014:	2b04      	cmp	r3, #4
 800a016:	d00b      	beq.n	800a030 <SecureFrame+0x30>
 800a018:	2003      	movs	r0, #3
}
 800a01a:	b003      	add	sp, #12
 800a01c:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a01e:	4814      	ldr	r0, [pc, #80]	; (800a070 <SecureFrame+0x70>)
 800a020:	f002 fda8 	bl	800cb74 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a024:	b9d8      	cbnz	r0, 800a05e <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a026:	4b11      	ldr	r3, [pc, #68]	; (800a06c <SecureFrame+0x6c>)
 800a028:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a02c:	801a      	strh	r2, [r3, #0]
            break;
 800a02e:	e7f4      	b.n	800a01a <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a030:	a801      	add	r0, sp, #4
 800a032:	f002 fd53 	bl	800cadc <LoRaMacCryptoGetFCntUp>
 800a036:	b9a0      	cbnz	r0, 800a062 <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800a038:	4b0c      	ldr	r3, [pc, #48]	; (800a06c <SecureFrame+0x6c>)
 800a03a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a03e:	b113      	cbz	r3, 800a046 <SecureFrame+0x46>
                fCntUp -= 1;
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	3b01      	subs	r3, #1
 800a044:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800a046:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <SecureFrame+0x70>)
 800a048:	4622      	mov	r2, r4
 800a04a:	4629      	mov	r1, r5
 800a04c:	9801      	ldr	r0, [sp, #4]
 800a04e:	f002 fdb7 	bl	800cbc0 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a052:	b940      	cbnz	r0, 800a066 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a054:	4b05      	ldr	r3, [pc, #20]	; (800a06c <SecureFrame+0x6c>)
 800a056:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a05a:	801a      	strh	r2, [r3, #0]
            break;
 800a05c:	e7dd      	b.n	800a01a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a05e:	2011      	movs	r0, #17
 800a060:	e7db      	b.n	800a01a <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a062:	2012      	movs	r0, #18
 800a064:	e7d9      	b.n	800a01a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a066:	2011      	movs	r0, #17
 800a068:	e7d7      	b.n	800a01a <SecureFrame+0x1a>
 800a06a:	bf00      	nop
 800a06c:	200009a0 	.word	0x200009a0
 800a070:	20000aa8 	.word	0x20000aa8

0800a074 <SendFrameOnChannel>:
{
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800a080:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a084:	4d36      	ldr	r5, [pc, #216]	; (800a160 <SendFrameOnChannel+0xec>)
 800a086:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800a08a:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a08e:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800a092:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800a096:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800a09a:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a09c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800a0a0:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800a0a2:	4c30      	ldr	r4, [pc, #192]	; (800a164 <SendFrameOnChannel+0xf0>)
 800a0a4:	8823      	ldrh	r3, [r4, #0]
 800a0a6:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a0aa:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
 800a0ae:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800a0b2:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800a0b6:	f10d 0207 	add.w	r2, sp, #7
 800a0ba:	a902      	add	r1, sp, #8
 800a0bc:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800a0c0:	f003 f8ed 	bl	800d29e <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a0ca:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800a0ce:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800a0d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a0d6:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800a0da:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a0de:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 800a0e2:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a0e6:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800a0ea:	f002 f864 	bl	800c1b6 <LoRaMacClassBIsBeaconModeActive>
 800a0ee:	bb60      	cbnz	r0, 800a14a <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a0f0:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <SendFrameOnChannel+0xec>)
 800a0f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d02f      	beq.n	800a15a <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800a0fa:	f002 f85f 	bl	800c1bc <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800a0fe:	4b18      	ldr	r3, [pc, #96]	; (800a160 <SendFrameOnChannel+0xec>)
 800a100:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800a104:	4b17      	ldr	r3, [pc, #92]	; (800a164 <SendFrameOnChannel+0xf0>)
 800a106:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 800a10a:	b2c0      	uxtb	r0, r0
 800a10c:	f7ff ff78 	bl	800a000 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800a110:	4604      	mov	r4, r0
 800a112:	b9b8      	cbnz	r0, 800a144 <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800a114:	4813      	ldr	r0, [pc, #76]	; (800a164 <SendFrameOnChannel+0xf0>)
 800a116:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800a11a:	f043 0302 	orr.w	r3, r3, #2
 800a11e:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800a122:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 800a126:	3301      	adds	r3, #1
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a12e:	f880 3445 	strb.w	r3, [r0, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800a132:	2300      	movs	r3, #0
 800a134:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800a138:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <SendFrameOnChannel+0xf4>)
 800a13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13c:	f830 1b02 	ldrh.w	r1, [r0], #2
 800a140:	b2c9      	uxtb	r1, r1
 800a142:	4798      	blx	r3
}
 800a144:	4620      	mov	r0, r4
 800a146:	b006      	add	sp, #24
 800a148:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800a14a:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 800a14e:	f002 f844 	bl	800c1da <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800a152:	2800      	cmp	r0, #0
 800a154:	d0cc      	beq.n	800a0f0 <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800a156:	2410      	movs	r4, #16
 800a158:	e7f4      	b.n	800a144 <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800a15a:	f002 f840 	bl	800c1de <LoRaMacClassBStopRxSlots>
 800a15e:	e7cc      	b.n	800a0fa <SendFrameOnChannel+0x86>
 800a160:	20008000 	.word	0x20008000
 800a164:	200009a0 	.word	0x200009a0
 800a168:	08018e34 	.word	0x08018e34

0800a16c <ScheduleTx>:
{
 800a16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a170:	b08c      	sub	sp, #48	; 0x30
 800a172:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800a174:	f7ff fdb2 	bl	8009cdc <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800a178:	4604      	mov	r4, r0
 800a17a:	b118      	cbz	r0, 800a184 <ScheduleTx+0x18>
}
 800a17c:	4620      	mov	r0, r4
 800a17e:	b00c      	add	sp, #48	; 0x30
 800a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800a184:	f7fe fd00 	bl	8008b88 <CalculateBackOff>
    status = SerializeTxFrame( );
 800a188:	f7ff feae 	bl	8009ee8 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800a18c:	4604      	mov	r4, r0
 800a18e:	2800      	cmp	r0, #0
 800a190:	d1f4      	bne.n	800a17c <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800a192:	4e36      	ldr	r6, [pc, #216]	; (800a26c <ScheduleTx+0x100>)
 800a194:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800a196:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a198:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800a19c:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800a1a0:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800a1a4:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800a1a8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	f008 fa1f 	bl	80125f0 <SysTimeGetMcuTime>
 800a1b2:	af02      	add	r7, sp, #8
 800a1b4:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800a1be:	e898 0006 	ldmia.w	r8, {r1, r2}
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	f008 f9b1 	bl	801252a <SysTimeSub>
 800a1c8:	ab07      	add	r3, sp, #28
 800a1ca:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a1ce:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800a1d2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a1d4:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800a1e2:	4b23      	ldr	r3, [pc, #140]	; (800a270 <ScheduleTx+0x104>)
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a1ea:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 800a1ee:	b92b      	cbnz	r3, 800a1fc <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800a1fc:	4a1c      	ldr	r2, [pc, #112]	; (800a270 <ScheduleTx+0x104>)
 800a1fe:	481b      	ldr	r0, [pc, #108]	; (800a26c <ScheduleTx+0x100>)
 800a200:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	f202 4394 	addw	r3, r2, #1172	; 0x494
 800a20a:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 800a20e:	a904      	add	r1, sp, #16
 800a210:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800a214:	f003 f8be 	bl	800d394 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800a218:	b1c0      	cbz	r0, 800a24c <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800a21a:	280b      	cmp	r0, #11
 800a21c:	d124      	bne.n	800a268 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800a21e:	4a14      	ldr	r2, [pc, #80]	; (800a270 <ScheduleTx+0x104>)
 800a220:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
 800a224:	b191      	cbz	r1, 800a24c <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 800a226:	b90d      	cbnz	r5, 800a22c <ScheduleTx+0xc0>
                return status;
 800a228:	4604      	mov	r4, r0
 800a22a:	e7a7      	b.n	800a17c <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800a22c:	4615      	mov	r5, r2
 800a22e:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800a232:	f042 0220 	orr.w	r2, r2, #32
 800a236:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800a23a:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800a23e:	4628      	mov	r0, r5
 800a240:	f008 fb42 	bl	80128c8 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800a244:	4628      	mov	r0, r5
 800a246:	f008 faf9 	bl	801283c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800a24a:	e797      	b.n	800a17c <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800a24c:	f7ff fe70 	bl	8009f30 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800a250:	f7ff feb2 	bl	8009fb8 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800a254:	4604      	mov	r4, r0
 800a256:	2800      	cmp	r0, #0
 800a258:	d190      	bne.n	800a17c <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800a25a:	4b05      	ldr	r3, [pc, #20]	; (800a270 <ScheduleTx+0x104>)
 800a25c:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800a260:	f7ff ff08 	bl	800a074 <SendFrameOnChannel>
 800a264:	4604      	mov	r4, r0
 800a266:	e789      	b.n	800a17c <ScheduleTx+0x10>
            return status;
 800a268:	4604      	mov	r4, r0
 800a26a:	e787      	b.n	800a17c <ScheduleTx+0x10>
 800a26c:	20008000 	.word	0x20008000
 800a270:	200009a0 	.word	0x200009a0

0800a274 <OnTxDelayedTimerEvent>:
{
 800a274:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800a276:	4c16      	ldr	r4, [pc, #88]	; (800a2d0 <OnTxDelayedTimerEvent+0x5c>)
 800a278:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a27c:	f008 fa84 	bl	8012788 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a280:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800a284:	f023 0320 	bic.w	r3, r3, #32
 800a288:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800a28c:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 800a290:	4b10      	ldr	r3, [pc, #64]	; (800a2d4 <OnTxDelayedTimerEvent+0x60>)
 800a292:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800a296:	f7ff fde7 	bl	8009e68 <LoRaMacHandleResponseTimeout>
 800a29a:	b100      	cbz	r0, 800a29e <OnTxDelayedTimerEvent+0x2a>
}
 800a29c:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800a29e:	2001      	movs	r0, #1
 800a2a0:	f7ff ff64 	bl	800a16c <ScheduleTx>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d0f9      	beq.n	800a29c <OnTxDelayedTimerEvent+0x28>
 800a2a8:	280b      	cmp	r0, #11
 800a2aa:	d0f7      	beq.n	800a29c <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a2ac:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <OnTxDelayedTimerEvent+0x60>)
 800a2ae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800a2b2:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a2b6:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800a2ba:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800a2be:	2009      	movs	r0, #9
 800a2c0:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800a2c4:	f002 f9ce 	bl	800c664 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800a2c8:	f7fe fcf0 	bl	8008cac <StopRetransmission>
            break;
 800a2cc:	e7e6      	b.n	800a29c <OnTxDelayedTimerEvent+0x28>
 800a2ce:	bf00      	nop
 800a2d0:	200009a0 	.word	0x200009a0
 800a2d4:	20008000 	.word	0x20008000

0800a2d8 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a2d8:	4b1c      	ldr	r3, [pc, #112]	; (800a34c <LoRaMacHandleMcpsRequest+0x74>)
 800a2da:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800a2de:	f013 0f01 	tst.w	r3, #1
 800a2e2:	d032      	beq.n	800a34a <LoRaMacHandleMcpsRequest+0x72>
{
 800a2e4:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a2e6:	4b19      	ldr	r3, [pc, #100]	; (800a34c <LoRaMacHandleMcpsRequest+0x74>)
 800a2e8:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800a2ec:	b12b      	cbz	r3, 800a2fa <LoRaMacHandleMcpsRequest+0x22>
 800a2ee:	2b03      	cmp	r3, #3
 800a2f0:	d003      	beq.n	800a2fa <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d006      	beq.n	800a304 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	e002      	b.n	800a300 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800a2fa:	f7fe fc9d 	bl	8008c38 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800a2fe:	b940      	cbnz	r0, 800a312 <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800a300:	b1b8      	cbz	r0, 800a332 <LoRaMacHandleMcpsRequest+0x5a>
}
 800a302:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800a304:	4b11      	ldr	r3, [pc, #68]	; (800a34c <LoRaMacHandleMcpsRequest+0x74>)
 800a306:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800a30a:	b183      	cbz	r3, 800a32e <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800a30c:	f7fe fcb0 	bl	8008c70 <CheckRetransConfirmedUplink>
 800a310:	e7f5      	b.n	800a2fe <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800a312:	4c0e      	ldr	r4, [pc, #56]	; (800a34c <LoRaMacHandleMcpsRequest+0x74>)
 800a314:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a318:	f008 fa36 	bl	8012788 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a31c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800a320:	f023 0320 	bic.w	r3, r3, #32
 800a324:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800a328:	f7fe fcc0 	bl	8008cac <StopRetransmission>
 800a32c:	e7e9      	b.n	800a302 <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800a32e:	2001      	movs	r0, #1
 800a330:	e7e6      	b.n	800a300 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a332:	4b06      	ldr	r3, [pc, #24]	; (800a34c <LoRaMacHandleMcpsRequest+0x74>)
 800a334:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800a338:	f36f 1204 	bfc	r2, #4, #1
 800a33c:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800a340:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800a344:	f7ff ff96 	bl	800a274 <OnTxDelayedTimerEvent>
}
 800a348:	e7db      	b.n	800a302 <LoRaMacHandleMcpsRequest+0x2a>
 800a34a:	4770      	bx	lr
 800a34c:	200009a0 	.word	0x200009a0

0800a350 <LoRaMacHandleRequestEvents>:
{
 800a350:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a352:	4b22      	ldr	r3, [pc, #136]	; (800a3dc <LoRaMacHandleRequestEvents+0x8c>)
 800a354:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a358:	bb7b      	cbnz	r3, 800a3ba <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a35a:	4b20      	ldr	r3, [pc, #128]	; (800a3dc <LoRaMacHandleRequestEvents+0x8c>)
 800a35c:	f893 4491 	ldrb.w	r4, [r3, #1169]	; 0x491
 800a360:	f014 0501 	ands.w	r5, r4, #1
 800a364:	d005      	beq.n	800a372 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a366:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800a36a:	f36f 0200 	bfc	r2, #0, #1
 800a36e:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a372:	4b1a      	ldr	r3, [pc, #104]	; (800a3dc <LoRaMacHandleRequestEvents+0x8c>)
 800a374:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800a378:	f013 0f04 	tst.w	r3, #4
 800a37c:	d006      	beq.n	800a38c <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a37e:	4b17      	ldr	r3, [pc, #92]	; (800a3dc <LoRaMacHandleRequestEvents+0x8c>)
 800a380:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800a384:	f36f 0282 	bfc	r2, #2, #1
 800a388:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a38c:	2001      	movs	r0, #1
 800a38e:	f7fe fbab 	bl	8008ae8 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800a392:	b135      	cbz	r5, 800a3a2 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a394:	4811      	ldr	r0, [pc, #68]	; (800a3dc <LoRaMacHandleRequestEvents+0x8c>)
 800a396:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 800a3a0:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800a3a2:	f014 0f04 	tst.w	r4, #4
 800a3a6:	d109      	bne.n	800a3bc <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800a3a8:	f001 ff09 	bl	800c1be <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <LoRaMacHandleRequestEvents+0x8c>)
 800a3ae:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800a3b2:	f36f 1204 	bfc	r2, #4, #1
 800a3b6:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
}
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a3bc:	4808      	ldr	r0, [pc, #32]	; (800a3e0 <LoRaMacHandleRequestEvents+0x90>)
 800a3be:	f002 f97b 	bl	800c6b8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a3c2:	f002 f9b1 	bl	800c728 <LoRaMacConfirmQueueGetCnt>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d0ee      	beq.n	800a3a8 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a3ca:	4a04      	ldr	r2, [pc, #16]	; (800a3dc <LoRaMacHandleRequestEvents+0x8c>)
 800a3cc:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a3d0:	f043 0304 	orr.w	r3, r3, #4
 800a3d4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800a3d8:	e7e6      	b.n	800a3a8 <LoRaMacHandleRequestEvents+0x58>
 800a3da:	bf00      	nop
 800a3dc:	200009a0 	.word	0x200009a0
 800a3e0:	20000df4 	.word	0x20000df4

0800a3e4 <OpenContinuousRxCWindow>:
{
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800a3e8:	4c16      	ldr	r4, [pc, #88]	; (800a444 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a3ea:	4d17      	ldr	r5, [pc, #92]	; (800a448 <OpenContinuousRxCWindow+0x64>)
 800a3ec:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800a3f0:	9600      	str	r6, [sp, #0]
 800a3f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a3f4:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800a3f8:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800a3fc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a400:	f002 ff29 	bl	800d256 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a404:	2302      	movs	r3, #2
 800a406:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a40a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800a40e:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a412:	2301      	movs	r3, #1
 800a414:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800a418:	f205 4224 	addw	r2, r5, #1060	; 0x424
 800a41c:	4631      	mov	r1, r6
 800a41e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a422:	f002 ff2c 	bl	800d27e <RegionRxConfig>
 800a426:	b158      	cbz	r0, 800a440 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800a428:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800a42c:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800a430:	4b06      	ldr	r3, [pc, #24]	; (800a44c <OpenContinuousRxCWindow+0x68>)
 800a432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a434:	2000      	movs	r0, #0
 800a436:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800a438:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800a43c:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800a440:	b002      	add	sp, #8
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	20008000 	.word	0x20008000
 800a448:	200009a0 	.word	0x200009a0
 800a44c:	08018e34 	.word	0x08018e34

0800a450 <RxWindowSetup>:
{
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800a454:	f008 f998 	bl	8012788 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800a458:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <RxWindowSetup+0x3c>)
 800a45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45c:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800a45e:	4a0c      	ldr	r2, [pc, #48]	; (800a490 <RxWindowSetup+0x40>)
 800a460:	4621      	mov	r1, r4
 800a462:	4b0c      	ldr	r3, [pc, #48]	; (800a494 <RxWindowSetup+0x44>)
 800a464:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800a468:	f002 ff09 	bl	800d27e <RegionRxConfig>
 800a46c:	b160      	cbz	r0, 800a488 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800a46e:	4d0a      	ldr	r5, [pc, #40]	; (800a498 <RxWindowSetup+0x48>)
 800a470:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800a474:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800a478:	4b04      	ldr	r3, [pc, #16]	; (800a48c <RxWindowSetup+0x3c>)
 800a47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a47c:	4a05      	ldr	r2, [pc, #20]	; (800a494 <RxWindowSetup+0x44>)
 800a47e:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800a480:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800a482:	7ce3      	ldrb	r3, [r4, #19]
 800a484:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800a488:	bd38      	pop	{r3, r4, r5, pc}
 800a48a:	bf00      	nop
 800a48c:	08018e34 	.word	0x08018e34
 800a490:	20000dc4 	.word	0x20000dc4
 800a494:	20008000 	.word	0x20008000
 800a498:	200009a0 	.word	0x200009a0

0800a49c <OnRxWindow2TimerEvent>:
{
 800a49c:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a49e:	4b13      	ldr	r3, [pc, #76]	; (800a4ec <OnRxWindow2TimerEvent+0x50>)
 800a4a0:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800a4a4:	b903      	cbnz	r3, 800a4a8 <OnRxWindow2TimerEvent+0xc>
}
 800a4a6:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800a4a8:	4810      	ldr	r0, [pc, #64]	; (800a4ec <OnRxWindow2TimerEvent+0x50>)
 800a4aa:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800a4ae:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800a4b2:	4b0f      	ldr	r3, [pc, #60]	; (800a4f0 <OnRxWindow2TimerEvent+0x54>)
 800a4b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a4b6:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a4ba:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a4be:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a4c2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800a4c6:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a4d6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a4da:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800a4de:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800a4e2:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800a4e6:	f7ff ffb3 	bl	800a450 <RxWindowSetup>
 800a4ea:	e7dc      	b.n	800a4a6 <OnRxWindow2TimerEvent+0xa>
 800a4ec:	200009a0 	.word	0x200009a0
 800a4f0:	20008000 	.word	0x20008000

0800a4f4 <OnRxWindow1TimerEvent>:
{
 800a4f4:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800a4f6:	4811      	ldr	r0, [pc, #68]	; (800a53c <OnRxWindow1TimerEvent+0x48>)
 800a4f8:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800a4fc:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800a500:	4b0f      	ldr	r3, [pc, #60]	; (800a540 <OnRxWindow1TimerEvent+0x4c>)
 800a502:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800a506:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a50a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800a50e:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a512:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800a516:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800a51a:	2200      	movs	r2, #0
 800a51c:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800a520:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a524:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a528:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800a52c:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800a530:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800a534:	f7ff ff8c 	bl	800a450 <RxWindowSetup>
}
 800a538:	bd08      	pop	{r3, pc}
 800a53a:	bf00      	nop
 800a53c:	200009a0 	.word	0x200009a0
 800a540:	20008000 	.word	0x20008000

0800a544 <LoRaMacHandleNvm>:
{
 800a544:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800a546:	4b31      	ldr	r3, [pc, #196]	; (800a60c <LoRaMacHandleNvm+0xc8>)
 800a548:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a54c:	b103      	cbz	r3, 800a550 <LoRaMacHandleNvm+0xc>
}
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800a552:	2124      	movs	r1, #36	; 0x24
 800a554:	f005 ff06 	bl	8010364 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800a558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a55a:	4283      	cmp	r3, r0
 800a55c:	d053      	beq.n	800a606 <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800a55e:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800a560:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800a562:	211c      	movs	r1, #28
 800a564:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a568:	f005 fefc 	bl	8010364 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800a56c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a56e:	4283      	cmp	r3, r0
 800a570:	d002      	beq.n	800a578 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800a572:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800a574:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800a578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a57c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800a580:	f005 fef0 	bl	8010364 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800a584:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800a588:	4283      	cmp	r3, r0
 800a58a:	d003      	beq.n	800a594 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800a58c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800a590:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800a594:	21d4      	movs	r1, #212	; 0xd4
 800a596:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800a59a:	f005 fee3 	bl	8010364 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800a59e:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800a5a2:	4283      	cmp	r3, r0
 800a5a4:	d003      	beq.n	800a5ae <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800a5a6:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800a5aa:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800a5ae:	2110      	movs	r1, #16
 800a5b0:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800a5b4:	f005 fed6 	bl	8010364 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800a5b8:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800a5bc:	4283      	cmp	r3, r0
 800a5be:	d003      	beq.n	800a5c8 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800a5c0:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800a5c4:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800a5c8:	f44f 715e 	mov.w	r1, #888	; 0x378
 800a5cc:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800a5d0:	f005 fec8 	bl	8010364 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800a5d4:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800a5d8:	4283      	cmp	r3, r0
 800a5da:	d003      	beq.n	800a5e4 <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800a5dc:	f8c4 05b0 	str.w	r0, [r4, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800a5e0:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800a5e4:	2114      	movs	r1, #20
 800a5e6:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800a5ea:	f005 febb 	bl	8010364 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800a5ee:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800a5f2:	4283      	cmp	r3, r0
 800a5f4:	d003      	beq.n	800a5fe <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800a5f6:	f8c4 05c8 	str.w	r0, [r4, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800a5fa:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800a5fe:	4628      	mov	r0, r5
 800a600:	f7fe fb96 	bl	8008d30 <CallNvmDataChangeCallback>
 800a604:	e7a3      	b.n	800a54e <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800a606:	2500      	movs	r5, #0
 800a608:	e7ab      	b.n	800a562 <LoRaMacHandleNvm+0x1e>
 800a60a:	bf00      	nop
 800a60c:	200009a0 	.word	0x200009a0

0800a610 <RestoreNvmData>:
{
 800a610:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800a612:	4b3d      	ldr	r3, [pc, #244]	; (800a708 <RestoreNvmData+0xf8>)
 800a614:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d001      	beq.n	800a620 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800a61c:	2001      	movs	r0, #1
}
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800a620:	4c3a      	ldr	r4, [pc, #232]	; (800a70c <RestoreNvmData+0xfc>)
 800a622:	2124      	movs	r1, #36	; 0x24
 800a624:	4620      	mov	r0, r4
 800a626:	f005 fe9d 	bl	8010364 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800a62a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a62c:	4283      	cmp	r3, r0
 800a62e:	d001      	beq.n	800a634 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a630:	2017      	movs	r0, #23
 800a632:	e7f4      	b.n	800a61e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800a634:	211c      	movs	r1, #28
 800a636:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a63a:	f005 fe93 	bl	8010364 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800a63e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a640:	4283      	cmp	r3, r0
 800a642:	d001      	beq.n	800a648 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a644:	2017      	movs	r0, #23
 800a646:	e7ea      	b.n	800a61e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800a648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a64c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800a650:	f005 fe88 	bl	8010364 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800a654:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800a658:	4283      	cmp	r3, r0
 800a65a:	d001      	beq.n	800a660 <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a65c:	2017      	movs	r0, #23
 800a65e:	e7de      	b.n	800a61e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800a660:	21d4      	movs	r1, #212	; 0xd4
 800a662:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800a666:	f005 fe7d 	bl	8010364 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800a66a:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800a66e:	4283      	cmp	r3, r0
 800a670:	d001      	beq.n	800a676 <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a672:	2017      	movs	r0, #23
 800a674:	e7d3      	b.n	800a61e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800a676:	2110      	movs	r1, #16
 800a678:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800a67c:	f005 fe72 	bl	8010364 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800a680:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800a684:	4283      	cmp	r3, r0
 800a686:	d001      	beq.n	800a68c <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a688:	2017      	movs	r0, #23
 800a68a:	e7c8      	b.n	800a61e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800a68c:	f44f 715e 	mov.w	r1, #888	; 0x378
 800a690:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800a694:	f005 fe66 	bl	8010364 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800a698:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800a69c:	4283      	cmp	r3, r0
 800a69e:	d001      	beq.n	800a6a4 <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a6a0:	2017      	movs	r0, #23
 800a6a2:	e7bc      	b.n	800a61e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800a6a4:	2114      	movs	r1, #20
 800a6a6:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800a6aa:	f005 fe5b 	bl	8010364 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800a6ae:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800a6b2:	4283      	cmp	r3, r0
 800a6b4:	d001      	beq.n	800a6ba <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800a6b6:	2017      	movs	r0, #23
 800a6b8:	e7b1      	b.n	800a61e <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800a6ba:	4625      	mov	r5, r4
 800a6bc:	4c14      	ldr	r4, [pc, #80]	; (800a710 <RestoreNvmData+0x100>)
 800a6be:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f005 fe2c 	bl	8010322 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800a6ca:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f005 fe3e 	bl	8010352 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800a6d6:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <RestoreNvmData+0xf8>)
 800a6d8:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800a6dc:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800a6e0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800a6e2:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a6e6:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800a6ea:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a6fa:	4b06      	ldr	r3, [pc, #24]	; (800a714 <RestoreNvmData+0x104>)
 800a6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6fe:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 800a702:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800a704:	2000      	movs	r0, #0
 800a706:	e78a      	b.n	800a61e <RestoreNvmData+0xe>
 800a708:	200009a0 	.word	0x200009a0
 800a70c:	200085cc 	.word	0x200085cc
 800a710:	20008000 	.word	0x20008000
 800a714:	08018e34 	.word	0x08018e34

0800a718 <OnRadioRxTimeout>:
{
 800a718:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800a71a:	4a07      	ldr	r2, [pc, #28]	; (800a738 <OnRadioRxTimeout+0x20>)
 800a71c:	7813      	ldrb	r3, [r2, #0]
 800a71e:	f043 0302 	orr.w	r3, r3, #2
 800a722:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800a724:	f7fe faec 	bl	8008d00 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800a728:	4b04      	ldr	r3, [pc, #16]	; (800a73c <OnRadioRxTimeout+0x24>)
 800a72a:	2201      	movs	r2, #1
 800a72c:	2100      	movs	r1, #0
 800a72e:	2002      	movs	r0, #2
 800a730:	f007 fcd6 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a734:	bd08      	pop	{r3, pc}
 800a736:	bf00      	nop
 800a738:	2000099c 	.word	0x2000099c
 800a73c:	0801871c 	.word	0x0801871c

0800a740 <OnRadioTxTimeout>:
{
 800a740:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800a742:	4a07      	ldr	r2, [pc, #28]	; (800a760 <OnRadioTxTimeout+0x20>)
 800a744:	7813      	ldrb	r3, [r2, #0]
 800a746:	f043 0308 	orr.w	r3, r3, #8
 800a74a:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800a74c:	f7fe fad8 	bl	8008d00 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800a750:	4b04      	ldr	r3, [pc, #16]	; (800a764 <OnRadioTxTimeout+0x24>)
 800a752:	2201      	movs	r2, #1
 800a754:	2100      	movs	r1, #0
 800a756:	2002      	movs	r0, #2
 800a758:	f007 fcc2 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a75c:	bd08      	pop	{r3, pc}
 800a75e:	bf00      	nop
 800a760:	2000099c 	.word	0x2000099c
 800a764:	0801872c 	.word	0x0801872c

0800a768 <OnRadioRxDone>:
{
 800a768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76c:	4680      	mov	r8, r0
 800a76e:	460f      	mov	r7, r1
 800a770:	4616      	mov	r6, r2
 800a772:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800a774:	f007 ffc8 	bl	8012708 <UTIL_TIMER_GetCurrentTime>
 800a778:	4c0c      	ldr	r4, [pc, #48]	; (800a7ac <OnRadioRxDone+0x44>)
 800a77a:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800a77c:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800a780:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800a782:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800a784:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800a786:	4b0a      	ldr	r3, [pc, #40]	; (800a7b0 <OnRadioRxDone+0x48>)
 800a788:	781a      	ldrb	r2, [r3, #0]
 800a78a:	f042 0210 	orr.w	r2, r2, #16
 800a78e:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800a790:	b2d2      	uxtb	r2, r2
 800a792:	f042 0201 	orr.w	r2, r2, #1
 800a796:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800a798:	f7fe fab2 	bl	8008d00 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800a79c:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <OnRadioRxDone+0x4c>)
 800a79e:	2201      	movs	r2, #1
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	2002      	movs	r0, #2
 800a7a4:	f007 fc9c 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ac:	20000f4c 	.word	0x20000f4c
 800a7b0:	2000099c 	.word	0x2000099c
 800a7b4:	0801873c 	.word	0x0801873c

0800a7b8 <OnRadioTxDone>:
{
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800a7bc:	f007 ffa4 	bl	8012708 <UTIL_TIMER_GetCurrentTime>
 800a7c0:	4b0c      	ldr	r3, [pc, #48]	; (800a7f4 <OnRadioTxDone+0x3c>)
 800a7c2:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800a7c4:	466c      	mov	r4, sp
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f007 fef0 	bl	80125ac <SysTimeGet>
 800a7cc:	4b0a      	ldr	r3, [pc, #40]	; (800a7f8 <OnRadioTxDone+0x40>)
 800a7ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a7d2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800a7d6:	4a09      	ldr	r2, [pc, #36]	; (800a7fc <OnRadioTxDone+0x44>)
 800a7d8:	7813      	ldrb	r3, [r2, #0]
 800a7da:	f043 0320 	orr.w	r3, r3, #32
 800a7de:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800a7e0:	f7fe fa8e 	bl	8008d00 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800a7e4:	4b06      	ldr	r3, [pc, #24]	; (800a800 <OnRadioTxDone+0x48>)
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	2002      	movs	r0, #2
 800a7ec:	f007 fc78 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800a7f0:	b002      	add	sp, #8
 800a7f2:	bd10      	pop	{r4, pc}
 800a7f4:	20000f5c 	.word	0x20000f5c
 800a7f8:	20000cd8 	.word	0x20000cd8
 800a7fc:	2000099c 	.word	0x2000099c
 800a800:	0801874c 	.word	0x0801874c

0800a804 <ResetMacParameters>:
{
 800a804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a806:	b091      	sub	sp, #68	; 0x44
    if( isRejoin == false )
 800a808:	b918      	cbnz	r0, 800a812 <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800a80a:	4b61      	ldr	r3, [pc, #388]	; (800a990 <ResetMacParameters+0x18c>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800a812:	4c5f      	ldr	r4, [pc, #380]	; (800a990 <ResetMacParameters+0x18c>)
 800a814:	2500      	movs	r5, #0
 800a816:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800a818:	4e5e      	ldr	r6, [pc, #376]	; (800a994 <ResetMacParameters+0x190>)
 800a81a:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800a81e:	f886 5419 	strb.w	r5, [r6, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800a822:	f8c6 5498 	str.w	r5, [r6, #1176]	; 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800a826:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800a82a:	2701      	movs	r7, #1
 800a82c:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a830:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 800a834:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a838:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 800a83c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800a840:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800a844:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a848:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800a84c:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800a850:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a854:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a858:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800a85c:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800a860:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a864:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800a868:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800a86c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800a870:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800a874:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800a878:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800a87c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a880:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800a884:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800a888:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800a88c:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800a890:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800a894:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800a898:	f886 541a 	strb.w	r5, [r6, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800a89c:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800a8a0:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800a8a4:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800a8a8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800a8ac:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800a8b0:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800a8b4:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800a8b8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800a8bc:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800a8c0:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800a8c4:	f884 5147 	strb.w	r5, [r4, #327]	; 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800a8c8:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a8cc:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800a8d0:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a8d2:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800a8d6:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800a8d8:	4b2f      	ldr	r3, [pc, #188]	; (800a998 <ResetMacParameters+0x194>)
 800a8da:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a8dc:	a901      	add	r1, sp, #4
 800a8de:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a8e2:	f002 fc7d 	bl	800d1e0 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800a8e6:	f886 541b 	strb.w	r5, [r6, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800a8ea:	f886 53d0 	strb.w	r5, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800a8ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a8f0:	f8c6 33d4 	str.w	r3, [r6, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a8f4:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800a8f8:	f886 33e0 	strb.w	r3, [r6, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a8fc:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800a900:	f886 33e1 	strb.w	r3, [r6, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800a904:	f886 53e2 	strb.w	r5, [r6, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800a908:	f886 73e3 	strb.w	r7, [r6, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a90c:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800a910:	f886 33e4 	strb.w	r3, [r6, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800a914:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800a918:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800a91c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a922:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a926:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a92a:	f886 73fa 	strb.w	r7, [r6, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a92e:	2302      	movs	r3, #2
 800a930:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800a934:	950e      	str	r5, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800a936:	950f      	str	r5, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800a938:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800a93c:	b11b      	cbz	r3, 800a946 <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800a93e:	685a      	ldr	r2, [r3, #4]
 800a940:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800a946:	4b13      	ldr	r3, [pc, #76]	; (800a994 <ResetMacParameters+0x190>)
 800a948:	f503 628d 	add.w	r2, r3, #1128	; 0x468
 800a94c:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800a94e:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 800a952:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800a954:	f203 4254 	addw	r2, r3, #1108	; 0x454
 800a958:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800a95a:	f203 4391 	addw	r3, r3, #1169	; 0x491
 800a95e:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800a960:	4a0b      	ldr	r2, [pc, #44]	; (800a990 <ResetMacParameters+0x18c>)
 800a962:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800a966:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800a968:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800a96c:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800a96e:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800a972:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800a974:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800a978:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800a97a:	f502 7398 	add.w	r3, r2, #304	; 0x130
 800a97e:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800a980:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800a984:	a90e      	add	r1, sp, #56	; 0x38
 800a986:	a805      	add	r0, sp, #20
 800a988:	f001 fc04 	bl	800c194 <LoRaMacClassBInit>
}
 800a98c:	b011      	add	sp, #68	; 0x44
 800a98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a990:	20008000 	.word	0x20008000
 800a994:	200009a0 	.word	0x200009a0
 800a998:	20000ebc 	.word	0x20000ebc

0800a99c <SwitchClass>:
{
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800a9a0:	4b46      	ldr	r3, [pc, #280]	; (800aabc <SwitchClass+0x120>)
 800a9a2:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 800a9a6:	2d01      	cmp	r5, #1
 800a9a8:	d071      	beq.n	800aa8e <SwitchClass+0xf2>
 800a9aa:	2d02      	cmp	r5, #2
 800a9ac:	d077      	beq.n	800aa9e <SwitchClass+0x102>
 800a9ae:	b10d      	cbz	r5, 800a9b4 <SwitchClass+0x18>
 800a9b0:	2003      	movs	r0, #3
}
 800a9b2:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800a9b4:	bb58      	cbnz	r0, 800aa0e <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a9b6:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800a9ba:	336c      	adds	r3, #108	; 0x6c
 800a9bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a9c0:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800a9c4:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800a9c6:	2c01      	cmp	r4, #1
 800a9c8:	d023      	beq.n	800aa12 <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 800a9ca:	2c02      	cmp	r4, #2
 800a9cc:	d1f1      	bne.n	800a9b2 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a9ce:	4b3b      	ldr	r3, [pc, #236]	; (800aabc <SwitchClass+0x120>)
 800a9d0:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800a9d4:	4e3a      	ldr	r6, [pc, #232]	; (800aac0 <SwitchClass+0x124>)
 800a9d6:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800a9da:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800a9de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a9e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9e4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a9e8:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dd15      	ble.n	800aa24 <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 800a9f8:	4b31      	ldr	r3, [pc, #196]	; (800aac0 <SwitchClass+0x124>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 800aa00:	4b30      	ldr	r3, [pc, #192]	; (800aac4 <SwitchClass+0x128>)
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800aa06:	f7ff fced 	bl	800a3e4 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	e7d1      	b.n	800a9b2 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aa0e:	2003      	movs	r0, #3
 800aa10:	e7d9      	b.n	800a9c6 <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800aa12:	4620      	mov	r0, r4
 800aa14:	f001 fbd4 	bl	800c1c0 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d1d6      	bne.n	800a9ca <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800aa1c:	4b27      	ldr	r3, [pc, #156]	; (800aabc <SwitchClass+0x120>)
 800aa1e:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800aa22:	e7d2      	b.n	800a9ca <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800aa24:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800aa28:	4924      	ldr	r1, [pc, #144]	; (800aabc <SwitchClass+0x120>)
 800aa2a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800aa2e:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800aa32:	b13a      	cbz	r2, 800aa44 <SwitchClass+0xa8>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800aa34:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800aa38:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800aa3c:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800aa40:	2a02      	cmp	r2, #2
 800aa42:	d002      	beq.n	800aa4a <SwitchClass+0xae>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800aa44:	3301      	adds	r3, #1
 800aa46:	b25b      	sxtb	r3, r3
 800aa48:	e7d4      	b.n	800a9f4 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800aa4a:	460a      	mov	r2, r1
 800aa4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aa50:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800aa54:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800aa58:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800aa5a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800aa5e:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800aa62:	4b17      	ldr	r3, [pc, #92]	; (800aac0 <SwitchClass+0x124>)
 800aa64:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800aa68:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800aa6c:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa70:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 800aa74:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800aa78:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800aa7c:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800aa80:	2203      	movs	r2, #3
 800aa82:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800aa8c:	e7b4      	b.n	800a9f8 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800aa8e:	f001 fb97 	bl	800c1c0 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d18d      	bne.n	800a9b2 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800aa96:	4b09      	ldr	r3, [pc, #36]	; (800aabc <SwitchClass+0x120>)
 800aa98:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800aa9c:	e789      	b.n	800a9b2 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800aa9e:	b958      	cbnz	r0, 800aab8 <SwitchClass+0x11c>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800aaa0:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <SwitchClass+0x124>)
 800aaa2:	2206      	movs	r2, #6
 800aaa4:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800aaa8:	4b04      	ldr	r3, [pc, #16]	; (800aabc <SwitchClass+0x120>)
 800aaaa:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 800aaae:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <SwitchClass+0x128>)
 800aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab2:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800aab4:	4620      	mov	r0, r4
 800aab6:	e77c      	b.n	800a9b2 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aab8:	2003      	movs	r0, #3
 800aaba:	e77a      	b.n	800a9b2 <SwitchClass+0x16>
 800aabc:	20008000 	.word	0x20008000
 800aac0:	200009a0 	.word	0x200009a0
 800aac4:	08018e34 	.word	0x08018e34

0800aac8 <SendReJoinReq>:
{
 800aac8:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800aaca:	28ff      	cmp	r0, #255	; 0xff
 800aacc:	d003      	beq.n	800aad6 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800aace:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800aad0:	f7ff fb4c 	bl	800a16c <ScheduleTx>
}
 800aad4:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800aad6:	2000      	movs	r0, #0
 800aad8:	f7ff ff60 	bl	800a99c <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800aadc:	4d0a      	ldr	r5, [pc, #40]	; (800ab08 <SendReJoinReq+0x40>)
 800aade:	2400      	movs	r4, #0
 800aae0:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800aae4:	1cab      	adds	r3, r5, #2
 800aae6:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800aaea:	23ff      	movs	r3, #255	; 0xff
 800aaec:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800aaf0:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800aaf4:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800aaf8:	f005 faf6 	bl	80100e8 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800aafc:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800ab00:	f005 fad4 	bl	80100ac <SecureElementGetDevEui>
            allowDelayedTx = false;
 800ab04:	4620      	mov	r0, r4
            break;
 800ab06:	e7e3      	b.n	800aad0 <SendReJoinReq+0x8>
 800ab08:	200009a0 	.word	0x200009a0

0800ab0c <PrepareFrame>:
{
 800ab0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab10:	b083      	sub	sp, #12
 800ab12:	4605      	mov	r5, r0
 800ab14:	460e      	mov	r6, r1
 800ab16:	4617      	mov	r7, r2
 800ab18:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800ab1c:	4959      	ldr	r1, [pc, #356]	; (800ac84 <PrepareFrame+0x178>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800ab22:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 800ab26:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800ab28:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800ab2a:	4698      	mov	r8, r3
 800ab2c:	b1cb      	cbz	r3, 800ab62 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800ab2e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800ac84 <PrepareFrame+0x178>
 800ab32:	4622      	mov	r2, r4
 800ab34:	4641      	mov	r1, r8
 800ab36:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800ab3a:	f005 fbf2 	bl	8010322 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800ab3e:	b2e0      	uxtb	r0, r4
 800ab40:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800ab44:	782b      	ldrb	r3, [r5, #0]
 800ab46:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800ab4a:	782b      	ldrb	r3, [r5, #0]
 800ab4c:	095b      	lsrs	r3, r3, #5
 800ab4e:	2b04      	cmp	r3, #4
 800ab50:	d009      	beq.n	800ab66 <PrepareFrame+0x5a>
 800ab52:	2b07      	cmp	r3, #7
 800ab54:	d079      	beq.n	800ac4a <PrepareFrame+0x13e>
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d009      	beq.n	800ab6e <PrepareFrame+0x62>
 800ab5a:	2002      	movs	r0, #2
}
 800ab5c:	b003      	add	sp, #12
 800ab5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800ab62:	4614      	mov	r4, r2
 800ab64:	e7e3      	b.n	800ab2e <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800ab66:	4b47      	ldr	r3, [pc, #284]	; (800ac84 <PrepareFrame+0x178>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800ab6e:	4b45      	ldr	r3, [pc, #276]	; (800ac84 <PrepareFrame+0x178>)
 800ab70:	2204      	movs	r2, #4
 800ab72:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800ab76:	1c9a      	adds	r2, r3, #2
 800ab78:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800ab7c:	22ff      	movs	r2, #255	; 0xff
 800ab7e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800ab82:	782a      	ldrb	r2, [r5, #0]
 800ab84:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800ab88:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800ab8c:	4a3e      	ldr	r2, [pc, #248]	; (800ac88 <PrepareFrame+0x17c>)
 800ab8e:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800ab92:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ab96:	7832      	ldrb	r2, [r6, #0]
 800ab98:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800ab9c:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800aba0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800aba4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800aba8:	a801      	add	r0, sp, #4
 800abaa:	f001 ff97 	bl	800cadc <LoRaMacCryptoGetFCntUp>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d15c      	bne.n	800ac6c <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800abb2:	9a01      	ldr	r2, [sp, #4]
 800abb4:	4b33      	ldr	r3, [pc, #204]	; (800ac84 <PrepareFrame+0x178>)
 800abb6:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800abba:	2100      	movs	r1, #0
 800abbc:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800abc0:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800abc4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800abc8:	4668      	mov	r0, sp
 800abca:	f001 fc2f 	bl	800c42c <LoRaMacCommandsGetSizeSerializedCmds>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d14e      	bne.n	800ac70 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800abd2:	9b00      	ldr	r3, [sp, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0c1      	beq.n	800ab5c <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800abd8:	4b2b      	ldr	r3, [pc, #172]	; (800ac88 <PrepareFrame+0x17c>)
 800abda:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800abde:	f7fe f8bf 	bl	8008d60 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800abe2:	4b28      	ldr	r3, [pc, #160]	; (800ac84 <PrepareFrame+0x178>)
 800abe4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800abe8:	b113      	cbz	r3, 800abf0 <PrepareFrame+0xe4>
 800abea:	9a00      	ldr	r2, [sp, #0]
 800abec:	2a0f      	cmp	r2, #15
 800abee:	d915      	bls.n	800ac1c <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800abf0:	b113      	cbz	r3, 800abf8 <PrepareFrame+0xec>
 800abf2:	9b00      	ldr	r3, [sp, #0]
 800abf4:	2b0f      	cmp	r3, #15
 800abf6:	d821      	bhi.n	800ac3c <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800abf8:	4a24      	ldr	r2, [pc, #144]	; (800ac8c <PrepareFrame+0x180>)
 800abfa:	4669      	mov	r1, sp
 800abfc:	f001 fc22 	bl	800c444 <LoRaMacCommandsSerializeCmds>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d13b      	bne.n	800ac7c <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800ac04:	4b1f      	ldr	r3, [pc, #124]	; (800ac84 <PrepareFrame+0x178>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800ac0c:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800ac10:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800ac14:	9a00      	ldr	r2, [sp, #0]
 800ac16:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800ac1a:	e79f      	b.n	800ab5c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800ac1c:	4a1c      	ldr	r2, [pc, #112]	; (800ac90 <PrepareFrame+0x184>)
 800ac1e:	4669      	mov	r1, sp
 800ac20:	200f      	movs	r0, #15
 800ac22:	f001 fc0f 	bl	800c444 <LoRaMacCommandsSerializeCmds>
 800ac26:	bb28      	cbnz	r0, 800ac74 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800ac28:	7833      	ldrb	r3, [r6, #0]
 800ac2a:	9a00      	ldr	r2, [sp, #0]
 800ac2c:	f362 0303 	bfi	r3, r2, #0, #4
 800ac30:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	4b13      	ldr	r3, [pc, #76]	; (800ac84 <PrepareFrame+0x178>)
 800ac36:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800ac3a:	e78f      	b.n	800ab5c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800ac3c:	4a13      	ldr	r2, [pc, #76]	; (800ac8c <PrepareFrame+0x180>)
 800ac3e:	4669      	mov	r1, sp
 800ac40:	f001 fc00 	bl	800c444 <LoRaMacCommandsSerializeCmds>
 800ac44:	b1c0      	cbz	r0, 800ac78 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ac46:	2013      	movs	r0, #19
 800ac48:	e788      	b.n	800ab5c <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800ac4a:	f1b8 0f00 	cmp.w	r8, #0
 800ac4e:	d017      	beq.n	800ac80 <PrepareFrame+0x174>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d083      	beq.n	800ab5c <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800ac54:	4c0b      	ldr	r4, [pc, #44]	; (800ac84 <PrepareFrame+0x178>)
 800ac56:	b282      	uxth	r2, r0
 800ac58:	4641      	mov	r1, r8
 800ac5a:	1ce0      	adds	r0, r4, #3
 800ac5c:	f005 fb61 	bl	8010322 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800ac60:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800ac64:	3301      	adds	r3, #1
 800ac66:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800ac68:	2000      	movs	r0, #0
 800ac6a:	e777      	b.n	800ab5c <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ac6c:	2012      	movs	r0, #18
 800ac6e:	e775      	b.n	800ab5c <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ac70:	2013      	movs	r0, #19
 800ac72:	e773      	b.n	800ab5c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ac74:	2013      	movs	r0, #19
 800ac76:	e771      	b.n	800ab5c <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800ac78:	200a      	movs	r0, #10
 800ac7a:	e76f      	b.n	800ab5c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ac7c:	2013      	movs	r0, #19
 800ac7e:	e76d      	b.n	800ab5c <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800ac80:	2000      	movs	r0, #0
 800ac82:	e76b      	b.n	800ab5c <PrepareFrame+0x50>
 800ac84:	200009a0 	.word	0x200009a0
 800ac88:	20008000 	.word	0x20008000
 800ac8c:	20000e3c 	.word	0x20000e3c
 800ac90:	20000ab8 	.word	0x20000ab8

0800ac94 <Send>:
{
 800ac94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac98:	b08a      	sub	sp, #40	; 0x28
 800ac9a:	4617      	mov	r7, r2
 800ac9c:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ac9e:	4c44      	ldr	r4, [pc, #272]	; (800adb0 <Send+0x11c>)
 800aca0:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800aca4:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800aca8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800acaa:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800acac:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d07a      	beq.n	800adaa <Send+0x116>
 800acb4:	4605      	mov	r5, r0
 800acb6:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800acb8:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800acbc:	b90b      	cbnz	r3, 800acc2 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800acbe:	2100      	movs	r1, #0
 800acc0:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800acc8:	4839      	ldr	r0, [pc, #228]	; (800adb0 <Send+0x11c>)
 800acca:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800acce:	f361 13c7 	bfi	r3, r1, #7, #1
 800acd2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800acd6:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d052      	beq.n	800ad84 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800acde:	4b34      	ldr	r3, [pc, #208]	; (800adb0 <Send+0x11c>)
 800ace0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ace4:	b12b      	cbz	r3, 800acf2 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800ace6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800acea:	f043 0320 	orr.w	r3, r3, #32
 800acee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800acf2:	2301      	movs	r3, #1
 800acf4:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800acf8:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800acfc:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800acfe:	492c      	ldr	r1, [pc, #176]	; (800adb0 <Send+0x11c>)
 800ad00:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800ad04:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800ad08:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800ad0c:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ad10:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ad14:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ad18:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800ad1c:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800ad20:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800ad24:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ad28:	460b      	mov	r3, r1
 800ad2a:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800ad2e:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800ad32:	aa08      	add	r2, sp, #32
 800ad34:	9200      	str	r2, [sp, #0]
 800ad36:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800ad3a:	3139      	adds	r1, #57	; 0x39
 800ad3c:	a803      	add	r0, sp, #12
 800ad3e:	f001 f9af 	bl	800c0a0 <LoRaMacAdrCalcNext>
 800ad42:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ad46:	f360 1386 	bfi	r3, r0, #6, #1
 800ad4a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800ad4e:	f8cd 8000 	str.w	r8, [sp]
 800ad52:	463b      	mov	r3, r7
 800ad54:	4632      	mov	r2, r6
 800ad56:	a909      	add	r1, sp, #36	; 0x24
 800ad58:	4628      	mov	r0, r5
 800ad5a:	f7ff fed7 	bl	800ab0c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800ad5e:	4604      	mov	r4, r0
 800ad60:	b108      	cbz	r0, 800ad66 <Send+0xd2>
 800ad62:	280a      	cmp	r0, #10
 800ad64:	d104      	bne.n	800ad70 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800ad66:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800ad6a:	f7ff f9ff 	bl	800a16c <ScheduleTx>
 800ad6e:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800ad70:	b17c      	cbz	r4, 800ad92 <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800ad72:	4b0f      	ldr	r3, [pc, #60]	; (800adb0 <Send+0x11c>)
 800ad74:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800ad78:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	b00a      	add	sp, #40	; 0x28
 800ad80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800ad84:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ad88:	f043 0310 	orr.w	r3, r3, #16
 800ad8c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ad90:	e7a5      	b.n	800acde <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800ad92:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <Send+0x11c>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800ad9a:	9a08      	ldr	r2, [sp, #32]
 800ad9c:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800ad9e:	f001 fb13 	bl	800c3c8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d0ea      	beq.n	800ad7c <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ada6:	2413      	movs	r4, #19
 800ada8:	e7e8      	b.n	800ad7c <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800adaa:	2407      	movs	r4, #7
 800adac:	e7e6      	b.n	800ad7c <Send+0xe8>
 800adae:	bf00      	nop
 800adb0:	20008000 	.word	0x20008000

0800adb4 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800adb4:	4b0c      	ldr	r3, [pc, #48]	; (800ade8 <LoRaMacIsBusy+0x34>)
 800adb6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d00c      	beq.n	800add8 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800adbe:	4a0b      	ldr	r2, [pc, #44]	; (800adec <LoRaMacIsBusy+0x38>)
 800adc0:	7812      	ldrb	r2, [r2, #0]
 800adc2:	f012 0f01 	tst.w	r2, #1
 800adc6:	d109      	bne.n	800addc <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800adc8:	b953      	cbnz	r3, 800ade0 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800adca:	4b07      	ldr	r3, [pc, #28]	; (800ade8 <LoRaMacIsBusy+0x34>)
 800adcc:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800add0:	2b01      	cmp	r3, #1
 800add2:	d007      	beq.n	800ade4 <LoRaMacIsBusy+0x30>
    return true;
 800add4:	2001      	movs	r0, #1
 800add6:	4770      	bx	lr
        return false;
 800add8:	2000      	movs	r0, #0
 800adda:	4770      	bx	lr
        return true;
 800addc:	2001      	movs	r0, #1
 800adde:	4770      	bx	lr
    return true;
 800ade0:	2001      	movs	r0, #1
 800ade2:	4770      	bx	lr
        return false;
 800ade4:	2000      	movs	r0, #0
}
 800ade6:	4770      	bx	lr
 800ade8:	200009a0 	.word	0x200009a0
 800adec:	2000099c 	.word	0x2000099c

0800adf0 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800adf0:	4b04      	ldr	r3, [pc, #16]	; (800ae04 <LoRaMacIsStopped+0x14>)
 800adf2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d001      	beq.n	800adfe <LoRaMacIsStopped+0xe>
    return false;
 800adfa:	2000      	movs	r0, #0
 800adfc:	4770      	bx	lr
        return true;
 800adfe:	2001      	movs	r0, #1
}
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	200009a0 	.word	0x200009a0

0800ae08 <LoRaMacProcess>:
{
 800ae08:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800ae0a:	f7fe ffff 	bl	8009e0c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800ae0e:	f001 f9e8 	bl	800c1e2 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800ae12:	4b1f      	ldr	r3, [pc, #124]	; (800ae90 <LoRaMacProcess+0x88>)
 800ae14:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ae18:	f013 0f10 	tst.w	r3, #16
 800ae1c:	d10d      	bne.n	800ae3a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800ae1e:	f7fd fe69 	bl	8008af4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ae22:	4b1b      	ldr	r3, [pc, #108]	; (800ae90 <LoRaMacProcess+0x88>)
 800ae24:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d022      	beq.n	800ae72 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800ae2c:	4b18      	ldr	r3, [pc, #96]	; (800ae90 <LoRaMacProcess+0x88>)
 800ae2e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ae32:	f013 0f20 	tst.w	r3, #32
 800ae36:	d11f      	bne.n	800ae78 <LoRaMacProcess+0x70>
}
 800ae38:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	f7fd fe54 	bl	8008ae8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800ae40:	f7fd fe90 	bl	8008b64 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800ae44:	f7fd ff80 	bl	8008d48 <IsRequestPending>
 800ae48:	b110      	cbz	r0, 800ae50 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ae4a:	f7fe f86f 	bl	8008f2c <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800ae4e:	b918      	cbnz	r0, 800ae58 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800ae50:	f7ff f81e 	bl	8009e90 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ae54:	f7ff fa40 	bl	800a2d8 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800ae58:	f7ff fa7a 	bl	800a350 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ae5c:	2001      	movs	r0, #1
 800ae5e:	f7fd fe43 	bl	8008ae8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ae62:	4a0b      	ldr	r2, [pc, #44]	; (800ae90 <LoRaMacProcess+0x88>)
 800ae64:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ae68:	f043 0320 	orr.w	r3, r3, #32
 800ae6c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800ae70:	e7d5      	b.n	800ae1e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800ae72:	f7ff fab7 	bl	800a3e4 <OpenContinuousRxCWindow>
 800ae76:	e7d9      	b.n	800ae2c <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ae78:	4b05      	ldr	r3, [pc, #20]	; (800ae90 <LoRaMacProcess+0x88>)
 800ae7a:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800ae7e:	f36f 1245 	bfc	r2, #5, #1
 800ae82:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800ae86:	4803      	ldr	r0, [pc, #12]	; (800ae94 <LoRaMacProcess+0x8c>)
 800ae88:	f7ff fb5c 	bl	800a544 <LoRaMacHandleNvm>
}
 800ae8c:	e7d4      	b.n	800ae38 <LoRaMacProcess+0x30>
 800ae8e:	bf00      	nop
 800ae90:	200009a0 	.word	0x200009a0
 800ae94:	20008000 	.word	0x20008000

0800ae98 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9c:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	f000 81a3 	beq.w	800b1ea <LoRaMacInitialization+0x352>
 800aea4:	4688      	mov	r8, r1
 800aea6:	4691      	mov	r9, r2
 800aea8:	4607      	mov	r7, r0
 800aeaa:	2900      	cmp	r1, #0
 800aeac:	f000 819f 	beq.w	800b1ee <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800aeb0:	6803      	ldr	r3, [r0, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f000 819d 	beq.w	800b1f2 <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800aeb8:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 819b 	beq.w	800b1f6 <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800aec0:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 8199 	beq.w	800b1fa <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800aec8:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 8197 	beq.w	800b1fe <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800aed0:	4610      	mov	r0, r2
 800aed2:	f002 f955 	bl	800d180 <RegionIsActive>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	f000 8193 	beq.w	800b202 <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800aedc:	4638      	mov	r0, r7
 800aede:	f001 fb45 	bl	800c56c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800aee2:	4ccb      	ldr	r4, [pc, #812]	; (800b210 <LoRaMacInitialization+0x378>)
 800aee4:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800aee8:	2100      	movs	r1, #0
 800aeea:	4620      	mov	r0, r4
 800aeec:	f005 fa31 	bl	8010352 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800aef0:	4ec8      	ldr	r6, [pc, #800]	; (800b214 <LoRaMacInitialization+0x37c>)
 800aef2:	f240 521c 	movw	r2, #1308	; 0x51c
 800aef6:	2100      	movs	r1, #0
 800aef8:	4630      	mov	r0, r6
 800aefa:	f005 fa2a 	bl	8010352 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800aefe:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800af02:	2500      	movs	r5, #0
 800af04:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800af08:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800af0c:	4bc2      	ldr	r3, [pc, #776]	; (800b218 <LoRaMacInitialization+0x380>)
 800af0e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800af12:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800af16:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800af1a:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800af1c:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800af20:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800af22:	4bbe      	ldr	r3, [pc, #760]	; (800b21c <LoRaMacInitialization+0x384>)
 800af24:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800af26:	a905      	add	r1, sp, #20
 800af28:	4648      	mov	r0, r9
 800af2a:	f002 f959 	bl	800d1e0 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800af2e:	230f      	movs	r3, #15
 800af30:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800af34:	a90a      	add	r1, sp, #40	; 0x28
 800af36:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800af3a:	f002 f92b 	bl	800d194 <RegionGetPhyParam>
 800af3e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800af40:	1b40      	subs	r0, r0, r5
 800af42:	bf18      	it	ne
 800af44:	2001      	movne	r0, #1
 800af46:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800af4a:	f04f 0a0a 	mov.w	sl, #10
 800af4e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800af52:	a90a      	add	r1, sp, #40	; 0x28
 800af54:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800af58:	f002 f91c 	bl	800d194 <RegionGetPhyParam>
 800af5c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800af5e:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800af62:	f04f 0906 	mov.w	r9, #6
 800af66:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800af6a:	a90a      	add	r1, sp, #40	; 0x28
 800af6c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800af70:	f002 f910 	bl	800d194 <RegionGetPhyParam>
 800af74:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800af76:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800af7a:	2310      	movs	r3, #16
 800af7c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800af80:	a90a      	add	r1, sp, #40	; 0x28
 800af82:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800af86:	f002 f905 	bl	800d194 <RegionGetPhyParam>
 800af8a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800af8c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800af90:	2311      	movs	r3, #17
 800af92:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800af96:	a90a      	add	r1, sp, #40	; 0x28
 800af98:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800af9c:	f002 f8fa 	bl	800d194 <RegionGetPhyParam>
 800afa0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800afa2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800afa6:	2312      	movs	r3, #18
 800afa8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800afac:	a90a      	add	r1, sp, #40	; 0x28
 800afae:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800afb2:	f002 f8ef 	bl	800d194 <RegionGetPhyParam>
 800afb6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800afb8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800afbc:	2313      	movs	r3, #19
 800afbe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800afc2:	a90a      	add	r1, sp, #40	; 0x28
 800afc4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800afc8:	f002 f8e4 	bl	800d194 <RegionGetPhyParam>
 800afcc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800afce:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800afd2:	2314      	movs	r3, #20
 800afd4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800afd8:	a90a      	add	r1, sp, #40	; 0x28
 800afda:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800afde:	f002 f8d9 	bl	800d194 <RegionGetPhyParam>
 800afe2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800afe4:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800afe8:	2316      	movs	r3, #22
 800afea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800afee:	a90a      	add	r1, sp, #40	; 0x28
 800aff0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800aff4:	f002 f8ce 	bl	800d194 <RegionGetPhyParam>
 800aff8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800affa:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800affe:	2317      	movs	r3, #23
 800b000:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b004:	a90a      	add	r1, sp, #40	; 0x28
 800b006:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b00a:	f002 f8c3 	bl	800d194 <RegionGetPhyParam>
 800b00e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800b010:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800b014:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800b018:	2318      	movs	r3, #24
 800b01a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b01e:	a90a      	add	r1, sp, #40	; 0x28
 800b020:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b024:	f002 f8b6 	bl	800d194 <RegionGetPhyParam>
 800b028:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800b02a:	b2c0      	uxtb	r0, r0
 800b02c:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800b030:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800b034:	231d      	movs	r3, #29
 800b036:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b03a:	a90a      	add	r1, sp, #40	; 0x28
 800b03c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b040:	f002 f8a8 	bl	800d194 <RegionGetPhyParam>
 800b044:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800b046:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800b04a:	231e      	movs	r3, #30
 800b04c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b050:	a90a      	add	r1, sp, #40	; 0x28
 800b052:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b056:	f002 f89d 	bl	800d194 <RegionGetPhyParam>
 800b05a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800b05c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800b060:	231f      	movs	r3, #31
 800b062:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b066:	a90a      	add	r1, sp, #40	; 0x28
 800b068:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b06c:	f002 f892 	bl	800d194 <RegionGetPhyParam>
 800b070:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800b072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b074:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800b078:	2320      	movs	r3, #32
 800b07a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b07e:	a90a      	add	r1, sp, #40	; 0x28
 800b080:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b084:	f002 f886 	bl	800d194 <RegionGetPhyParam>
 800b088:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800b08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800b090:	230b      	movs	r3, #11
 800b092:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b096:	a90a      	add	r1, sp, #40	; 0x28
 800b098:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b09c:	f002 f87a 	bl	800d194 <RegionGetPhyParam>
 800b0a0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800b0a2:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800b0a6:	230c      	movs	r3, #12
 800b0a8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0ac:	a90a      	add	r1, sp, #40	; 0x28
 800b0ae:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b0b2:	f002 f86f 	bl	800d194 <RegionGetPhyParam>
 800b0b6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800b0b8:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800b0bc:	f04f 0b01 	mov.w	fp, #1
 800b0c0:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800b0c4:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800b0c8:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800b0cc:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800b0d0:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800b0d4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b0d8:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800b0da:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b0de:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800b0e0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b0e4:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800b0e6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800b0ea:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800b0ec:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800b0f0:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800b0f2:	f884 b068 	strb.w	fp, [r4, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800b0f6:	f884 b11f 	strb.w	fp, [r4, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800b0fa:	f8c6 8348 	str.w	r8, [r6, #840]	; 0x348
    ResetMacParameters( false );
 800b0fe:	4628      	mov	r0, r5
 800b100:	f7ff fb80 	bl	800a804 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800b104:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800b108:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800b10c:	f886 5491 	strb.w	r5, [r6, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800b110:	f8c6 b340 	str.w	fp, [r6, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800b114:	62e5      	str	r5, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b116:	6325      	str	r5, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800b118:	9500      	str	r5, [sp, #0]
 800b11a:	4b41      	ldr	r3, [pc, #260]	; (800b220 <LoRaMacInitialization+0x388>)
 800b11c:	462a      	mov	r2, r5
 800b11e:	f04f 31ff 	mov.w	r1, #4294967295
 800b122:	f506 705a 	add.w	r0, r6, #872	; 0x368
 800b126:	f007 fad1 	bl	80126cc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800b12a:	9500      	str	r5, [sp, #0]
 800b12c:	4b3d      	ldr	r3, [pc, #244]	; (800b224 <LoRaMacInitialization+0x38c>)
 800b12e:	462a      	mov	r2, r5
 800b130:	f04f 31ff 	mov.w	r1, #4294967295
 800b134:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800b138:	f007 fac8 	bl	80126cc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800b13c:	9500      	str	r5, [sp, #0]
 800b13e:	4b3a      	ldr	r3, [pc, #232]	; (800b228 <LoRaMacInitialization+0x390>)
 800b140:	462a      	mov	r2, r5
 800b142:	f04f 31ff 	mov.w	r1, #4294967295
 800b146:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800b14a:	f007 fabf 	bl	80126cc <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800b14e:	9500      	str	r5, [sp, #0]
 800b150:	4b36      	ldr	r3, [pc, #216]	; (800b22c <LoRaMacInitialization+0x394>)
 800b152:	462a      	mov	r2, r5
 800b154:	f04f 31ff 	mov.w	r1, #4294967295
 800b158:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800b15c:	f007 fab6 	bl	80126cc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800b160:	af02      	add	r7, sp, #8
 800b162:	4638      	mov	r0, r7
 800b164:	f007 fa44 	bl	80125f0 <SysTimeGetMcuTime>
 800b168:	f504 7392 	add.w	r3, r4, #292	; 0x124
 800b16c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b170:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800b174:	4b2e      	ldr	r3, [pc, #184]	; (800b230 <LoRaMacInitialization+0x398>)
 800b176:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800b178:	4b2e      	ldr	r3, [pc, #184]	; (800b234 <LoRaMacInitialization+0x39c>)
 800b17a:	f8c6 334c 	str.w	r3, [r6, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800b17e:	4b2e      	ldr	r3, [pc, #184]	; (800b238 <LoRaMacInitialization+0x3a0>)
 800b180:	f8c6 3354 	str.w	r3, [r6, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800b184:	4b2d      	ldr	r3, [pc, #180]	; (800b23c <LoRaMacInitialization+0x3a4>)
 800b186:	f8c6 335c 	str.w	r3, [r6, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800b18a:	4b2d      	ldr	r3, [pc, #180]	; (800b240 <LoRaMacInitialization+0x3a8>)
 800b18c:	f8c6 3350 	str.w	r3, [r6, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800b190:	4b2c      	ldr	r3, [pc, #176]	; (800b244 <LoRaMacInitialization+0x3ac>)
 800b192:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800b196:	4b2c      	ldr	r3, [pc, #176]	; (800b248 <LoRaMacInitialization+0x3b0>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f506 7053 	add.w	r0, r6, #844	; 0x34c
 800b19e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800b1a0:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800b1a4:	f004 fde8 	bl	800fd78 <SecureElementInit>
 800b1a8:	bb80      	cbnz	r0, 800b20c <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f001 fc76 	bl	800ca9c <LoRaMacCryptoInit>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d14b      	bne.n	800b24c <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800b1b4:	f001 f89c 	bl	800c2f0 <LoRaMacCommandsInit>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d149      	bne.n	800b250 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800b1bc:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800b1c0:	f001 fcbe 	bl	800cb40 <LoRaMacCryptoSetMulticastReference>
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d144      	bne.n	800b254 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800b1ca:	4d1f      	ldr	r5, [pc, #124]	; (800b248 <LoRaMacInitialization+0x3b0>)
 800b1cc:	696b      	ldr	r3, [r5, #20]
 800b1ce:	4798      	blx	r3
 800b1d0:	f005 f894 	bl	80102fc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b1d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b1d6:	4a0e      	ldr	r2, [pc, #56]	; (800b210 <LoRaMacInitialization+0x378>)
 800b1d8:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800b1dc:	4798      	blx	r3
    Radio.Sleep( );
 800b1de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b1e0:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b1e2:	4658      	mov	r0, fp
 800b1e4:	f7fd fc80 	bl	8008ae8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800b1e8:	e00c      	b.n	800b204 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b1ea:	2403      	movs	r4, #3
 800b1ec:	e00a      	b.n	800b204 <LoRaMacInitialization+0x36c>
 800b1ee:	2403      	movs	r4, #3
 800b1f0:	e008      	b.n	800b204 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b1f2:	2403      	movs	r4, #3
 800b1f4:	e006      	b.n	800b204 <LoRaMacInitialization+0x36c>
 800b1f6:	2403      	movs	r4, #3
 800b1f8:	e004      	b.n	800b204 <LoRaMacInitialization+0x36c>
 800b1fa:	2403      	movs	r4, #3
 800b1fc:	e002      	b.n	800b204 <LoRaMacInitialization+0x36c>
 800b1fe:	2403      	movs	r4, #3
 800b200:	e000      	b.n	800b204 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800b202:	2409      	movs	r4, #9
}
 800b204:	4620      	mov	r0, r4
 800b206:	b00d      	add	sp, #52	; 0x34
 800b208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b20c:	2411      	movs	r4, #17
 800b20e:	e7f9      	b.n	800b204 <LoRaMacInitialization+0x36c>
 800b210:	20008000 	.word	0x20008000
 800b214:	200009a0 	.word	0x200009a0
 800b218:	01000400 	.word	0x01000400
 800b21c:	20000ebc 	.word	0x20000ebc
 800b220:	0800a275 	.word	0x0800a275
 800b224:	0800a4f5 	.word	0x0800a4f5
 800b228:	0800a49d 	.word	0x0800a49d
 800b22c:	08008ec9 	.word	0x08008ec9
 800b230:	2000099c 	.word	0x2000099c
 800b234:	0800a7b9 	.word	0x0800a7b9
 800b238:	0800a769 	.word	0x0800a769
 800b23c:	08008d19 	.word	0x08008d19
 800b240:	0800a741 	.word	0x0800a741
 800b244:	0800a719 	.word	0x0800a719
 800b248:	08018e34 	.word	0x08018e34
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b24c:	2411      	movs	r4, #17
 800b24e:	e7d9      	b.n	800b204 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b250:	2413      	movs	r4, #19
 800b252:	e7d7      	b.n	800b204 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b254:	2411      	movs	r4, #17
 800b256:	e7d5      	b.n	800b204 <LoRaMacInitialization+0x36c>

0800b258 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800b258:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800b25a:	2400      	movs	r4, #0
 800b25c:	4b03      	ldr	r3, [pc, #12]	; (800b26c <LoRaMacStart+0x14>)
 800b25e:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800b262:	f7fd fc2d 	bl	8008ac0 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800b266:	4620      	mov	r0, r4
 800b268:	bd10      	pop	{r4, pc}
 800b26a:	bf00      	nop
 800b26c:	200009a0 	.word	0x200009a0

0800b270 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800b270:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800b272:	f7ff fd9f 	bl	800adb4 <LoRaMacIsBusy>
 800b276:	b130      	cbz	r0, 800b286 <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800b278:	4b0b      	ldr	r3, [pc, #44]	; (800b2a8 <LoRaMacStop+0x38>)
 800b27a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d010      	beq.n	800b2a4 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800b282:	2001      	movs	r0, #1
}
 800b284:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800b286:	4b09      	ldr	r3, [pc, #36]	; (800b2ac <LoRaMacStop+0x3c>)
 800b288:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d005      	beq.n	800b29c <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800b290:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <LoRaMacStop+0x38>)
 800b292:	2201      	movs	r2, #1
 800b294:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800b298:	2000      	movs	r0, #0
 800b29a:	e7f3      	b.n	800b284 <LoRaMacStop+0x14>
            Radio.Sleep( );
 800b29c:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <LoRaMacStop+0x40>)
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	4798      	blx	r3
 800b2a2:	e7f5      	b.n	800b290 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	e7ed      	b.n	800b284 <LoRaMacStop+0x14>
 800b2a8:	200009a0 	.word	0x200009a0
 800b2ac:	20008000 	.word	0x20008000
 800b2b0:	08018e34 	.word	0x08018e34

0800b2b4 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800b2b4:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800b2b6:	4c14      	ldr	r4, [pc, #80]	; (800b308 <LoRaMacHalt+0x54>)
 800b2b8:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800b2bc:	f007 fa64 	bl	8012788 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800b2c0:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800b2c4:	f007 fa60 	bl	8012788 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800b2c8:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800b2cc:	f007 fa5c 	bl	8012788 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800b2d0:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800b2d4:	f007 fa58 	bl	8012788 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800b2d8:	f000 ff70 	bl	800c1bc <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800b2dc:	4b0b      	ldr	r3, [pc, #44]	; (800b30c <LoRaMacHalt+0x58>)
 800b2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800b2e2:	2500      	movs	r5, #0
 800b2e4:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800b2e8:	4e09      	ldr	r6, [pc, #36]	; (800b310 <LoRaMacHalt+0x5c>)
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f7ff f92a 	bl	800a544 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800b2f0:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4807      	ldr	r0, [pc, #28]	; (800b314 <LoRaMacHalt+0x60>)
 800b2f8:	f005 f813 	bl	8010322 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800b302:	4628      	mov	r0, r5
 800b304:	bd70      	pop	{r4, r5, r6, pc}
 800b306:	bf00      	nop
 800b308:	200009a0 	.word	0x200009a0
 800b30c:	08018e34 	.word	0x08018e34
 800b310:	20008000 	.word	0x20008000
 800b314:	200085cc 	.word	0x200085cc

0800b318 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800b318:	b530      	push	{r4, r5, lr}
 800b31a:	b08b      	sub	sp, #44	; 0x2c
 800b31c:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b31e:	4b31      	ldr	r3, [pc, #196]	; (800b3e4 <LoRaMacQueryTxPossible+0xcc>)
 800b320:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b322:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b324:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800b328:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b32c:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800b330:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800b334:	4b2c      	ldr	r3, [pc, #176]	; (800b3e8 <LoRaMacQueryTxPossible+0xd0>)
 800b336:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b33a:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800b342:	2900      	cmp	r1, #0
 800b344:	d048      	beq.n	800b3d8 <LoRaMacQueryTxPossible+0xc0>
 800b346:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800b348:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800b34c:	4b25      	ldr	r3, [pc, #148]	; (800b3e4 <LoRaMacQueryTxPossible+0xcc>)
 800b34e:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800b352:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b356:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800b358:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 800b35c:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800b360:	f8b3 108a 	ldrh.w	r1, [r3, #138]	; 0x8a
 800b364:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b368:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800b36c:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b370:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800b374:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800b378:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b37c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800b380:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800b384:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b388:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800b38c:	ab04      	add	r3, sp, #16
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	f10d 030d 	add.w	r3, sp, #13
 800b394:	f10d 020e 	add.w	r2, sp, #14
 800b398:	f10d 010f 	add.w	r1, sp, #15
 800b39c:	a805      	add	r0, sp, #20
 800b39e:	f000 fe7f 	bl	800c0a0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b3a2:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800b3a6:	f7fd fcdb 	bl	8008d60 <GetMaxAppPayloadWithoutFOptsLength>
 800b3aa:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b3ac:	a802      	add	r0, sp, #8
 800b3ae:	f001 f83d 	bl	800c42c <LoRaMacCommandsGetSizeSerializedCmds>
 800b3b2:	b998      	cbnz	r0, 800b3dc <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800b3b4:	9b02      	ldr	r3, [sp, #8]
 800b3b6:	2b0f      	cmp	r3, #15
 800b3b8:	d80a      	bhi.n	800b3d0 <LoRaMacQueryTxPossible+0xb8>
 800b3ba:	786a      	ldrb	r2, [r5, #1]
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d807      	bhi.n	800b3d0 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800b3c4:	9b02      	ldr	r3, [sp, #8]
 800b3c6:	441c      	add	r4, r3
 800b3c8:	42a2      	cmp	r2, r4
 800b3ca:	d309      	bcc.n	800b3e0 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800b3cc:	b00b      	add	sp, #44	; 0x2c
 800b3ce:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800b3d4:	2008      	movs	r0, #8
 800b3d6:	e7f9      	b.n	800b3cc <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b3d8:	2003      	movs	r0, #3
 800b3da:	e7f7      	b.n	800b3cc <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b3dc:	2013      	movs	r0, #19
 800b3de:	e7f5      	b.n	800b3cc <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800b3e0:	2008      	movs	r0, #8
 800b3e2:	e7f3      	b.n	800b3cc <LoRaMacQueryTxPossible+0xb4>
 800b3e4:	20008000 	.word	0x20008000
 800b3e8:	200009a0 	.word	0x200009a0

0800b3ec <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	f000 815f 	beq.w	800b6b0 <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800b3f2:	b510      	push	{r4, lr}
 800b3f4:	b084      	sub	sp, #16
 800b3f6:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800b3f8:	7800      	ldrb	r0, [r0, #0]
 800b3fa:	2841      	cmp	r0, #65	; 0x41
 800b3fc:	f200 8154 	bhi.w	800b6a8 <LoRaMacMibGetRequestConfirm+0x2bc>
 800b400:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b404:	00470042 	.word	0x00470042
 800b408:	0052004d 	.word	0x0052004d
 800b40c:	005d0057 	.word	0x005d0057
 800b410:	01520063 	.word	0x01520063
 800b414:	01520152 	.word	0x01520152
 800b418:	01520152 	.word	0x01520152
 800b41c:	01520152 	.word	0x01520152
 800b420:	006b0152 	.word	0x006b0152
 800b424:	00770071 	.word	0x00770071
 800b428:	008c0084 	.word	0x008c0084
 800b42c:	009c0094 	.word	0x009c0094
 800b430:	00a400b1 	.word	0x00a400b1
 800b434:	00c400be 	.word	0x00c400be
 800b438:	00ce00c9 	.word	0x00ce00c9
 800b43c:	00d800d3 	.word	0x00d800d3
 800b440:	00ee00dd 	.word	0x00ee00dd
 800b444:	010000f4 	.word	0x010000f4
 800b448:	010600fa 	.word	0x010600fa
 800b44c:	0111010b 	.word	0x0111010b
 800b450:	0117011f 	.word	0x0117011f
 800b454:	0152011b 	.word	0x0152011b
 800b458:	01520125 	.word	0x01520125
 800b45c:	01520152 	.word	0x01520152
 800b460:	01520152 	.word	0x01520152
 800b464:	01520152 	.word	0x01520152
 800b468:	01520152 	.word	0x01520152
 800b46c:	01520152 	.word	0x01520152
 800b470:	01520152 	.word	0x01520152
 800b474:	01520152 	.word	0x01520152
 800b478:	0134012e 	.word	0x0134012e
 800b47c:	0140013a 	.word	0x0140013a
 800b480:	014c0146 	.word	0x014c0146
 800b484:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800b488:	4b8c      	ldr	r3, [pc, #560]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b48a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b48e:	7123      	strb	r3, [r4, #4]
            break;
 800b490:	e111      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800b492:	4b8a      	ldr	r3, [pc, #552]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b494:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b498:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b49a:	2000      	movs	r0, #0
            break;
 800b49c:	e10b      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800b49e:	6860      	ldr	r0, [r4, #4]
 800b4a0:	f004 fe04 	bl	80100ac <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4a4:	2000      	movs	r0, #0
            break;
 800b4a6:	e106      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800b4a8:	6860      	ldr	r0, [r4, #4]
 800b4aa:	f004 fe1d 	bl	80100e8 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4ae:	2000      	movs	r0, #0
            break;
 800b4b0:	e101      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800b4b2:	4b82      	ldr	r3, [pc, #520]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b4b4:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800b4b8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4ba:	2000      	movs	r0, #0
            break;
 800b4bc:	e0fb      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800b4be:	4b7f      	ldr	r3, [pc, #508]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b4c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b4c4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4c6:	2000      	movs	r0, #0
            break;
 800b4c8:	e0f5      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800b4ca:	1d21      	adds	r1, r4, #4
 800b4cc:	4b7b      	ldr	r3, [pc, #492]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b4ce:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800b4d2:	f004 fe25 	bl	8010120 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4d6:	2000      	movs	r0, #0
            break;
 800b4d8:	e0ed      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800b4da:	4b78      	ldr	r3, [pc, #480]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b4dc:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800b4e0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4e2:	2000      	movs	r0, #0
            break;
 800b4e4:	e0e7      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b4e6:	4b75      	ldr	r3, [pc, #468]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b4e8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b4ec:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b4ee:	2000      	movs	r0, #0
            break;
 800b4f0:	e0e1      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800b4f2:	231c      	movs	r3, #28
 800b4f4:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b4f8:	a902      	add	r1, sp, #8
 800b4fa:	4b70      	ldr	r3, [pc, #448]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b4fc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b500:	f001 fe48 	bl	800d194 <RegionGetPhyParam>
 800b504:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800b506:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b508:	2000      	movs	r0, #0
            break;
 800b50a:	e0d4      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800b50c:	3404      	adds	r4, #4
 800b50e:	4b6c      	ldr	r3, [pc, #432]	; (800b6c0 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800b510:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b514:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b518:	2000      	movs	r0, #0
            break;
 800b51a:	e0cc      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800b51c:	3404      	adds	r4, #4
 800b51e:	4b69      	ldr	r3, [pc, #420]	; (800b6c4 <LoRaMacMibGetRequestConfirm+0x2d8>)
 800b520:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b524:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b528:	2000      	movs	r0, #0
            break;
 800b52a:	e0c4      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800b52c:	3404      	adds	r4, #4
 800b52e:	4b66      	ldr	r3, [pc, #408]	; (800b6c8 <LoRaMacMibGetRequestConfirm+0x2dc>)
 800b530:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b534:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b538:	2000      	movs	r0, #0
            break;
 800b53a:	e0bc      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800b53c:	3404      	adds	r4, #4
 800b53e:	4b63      	ldr	r3, [pc, #396]	; (800b6cc <LoRaMacMibGetRequestConfirm+0x2e0>)
 800b540:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b544:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b548:	2000      	movs	r0, #0
            break;
 800b54a:	e0b4      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800b54c:	231a      	movs	r3, #26
 800b54e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b552:	a902      	add	r1, sp, #8
 800b554:	4b59      	ldr	r3, [pc, #356]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b556:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b55a:	f001 fe1b 	bl	800d194 <RegionGetPhyParam>
 800b55e:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800b560:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b562:	2000      	movs	r0, #0
            break;
 800b564:	e0a7      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800b566:	2319      	movs	r3, #25
 800b568:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b56c:	a902      	add	r1, sp, #8
 800b56e:	4b53      	ldr	r3, [pc, #332]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b570:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b574:	f001 fe0e 	bl	800d194 <RegionGetPhyParam>
 800b578:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800b57a:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b57c:	2000      	movs	r0, #0
            break;
 800b57e:	e09a      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b580:	4b4e      	ldr	r3, [pc, #312]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b582:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800b586:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b588:	2000      	movs	r0, #0
            break;
 800b58a:	e094      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800b58c:	4b4b      	ldr	r3, [pc, #300]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b590:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b592:	2000      	movs	r0, #0
            break;
 800b594:	e08f      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800b596:	4b49      	ldr	r3, [pc, #292]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b59a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b59c:	2000      	movs	r0, #0
            break;
 800b59e:	e08a      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800b5a0:	4b46      	ldr	r3, [pc, #280]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b5a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5a4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5a6:	2000      	movs	r0, #0
            break;
 800b5a8:	e085      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800b5aa:	4b44      	ldr	r3, [pc, #272]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b5ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5ae:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5b0:	2000      	movs	r0, #0
            break;
 800b5b2:	e080      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800b5b4:	4b41      	ldr	r3, [pc, #260]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b5b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5b8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5ba:	2000      	movs	r0, #0
            break;
 800b5bc:	e07b      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800b5be:	2302      	movs	r3, #2
 800b5c0:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b5c4:	4b3d      	ldr	r3, [pc, #244]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b5c6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800b5ca:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b5ce:	a902      	add	r1, sp, #8
 800b5d0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b5d4:	f001 fdde 	bl	800d194 <RegionGetPhyParam>
 800b5d8:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800b5da:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5dc:	2000      	movs	r0, #0
            break;
 800b5de:	e06a      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b5e0:	4b36      	ldr	r3, [pc, #216]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b5e2:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800b5e6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5e8:	2000      	movs	r0, #0
            break;
 800b5ea:	e064      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800b5ec:	4b33      	ldr	r3, [pc, #204]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b5ee:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b5f2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b5f4:	2000      	movs	r0, #0
            break;
 800b5f6:	e05e      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b5f8:	4b30      	ldr	r3, [pc, #192]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b5fa:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800b5fe:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b600:	2000      	movs	r0, #0
            break;
 800b602:	e058      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b604:	4b2d      	ldr	r3, [pc, #180]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b606:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800b60a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b60c:	2000      	movs	r0, #0
            break;
 800b60e:	e052      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800b610:	4b2a      	ldr	r3, [pc, #168]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b614:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b616:	2000      	movs	r0, #0
            break;
 800b618:	e04d      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800b61a:	4b28      	ldr	r3, [pc, #160]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b61c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b620:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b622:	2000      	movs	r0, #0
            break;
 800b624:	e047      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b626:	4b25      	ldr	r3, [pc, #148]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b62c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b62e:	2000      	movs	r0, #0
            break;
 800b630:	e041      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800b632:	4b22      	ldr	r3, [pc, #136]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b634:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b636:	2000      	movs	r0, #0
            break;
 800b638:	e03d      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800b63a:	4b25      	ldr	r3, [pc, #148]	; (800b6d0 <LoRaMacMibGetRequestConfirm+0x2e4>)
 800b63c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b63e:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800b640:	e039      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800b642:	4b1e      	ldr	r3, [pc, #120]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b644:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800b648:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b64a:	2000      	movs	r0, #0
            break;
 800b64c:	e033      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800b64e:	4b1b      	ldr	r3, [pc, #108]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b650:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800b654:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800b656:	f001 fec5 	bl	800d3e4 <RegionGetVersion>
 800b65a:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b65c:	2000      	movs	r0, #0
            break;
 800b65e:	e02a      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800b660:	4b16      	ldr	r3, [pc, #88]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b666:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b668:	2000      	movs	r0, #0
            break;
 800b66a:	e024      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800b66c:	4b13      	ldr	r3, [pc, #76]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b66e:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800b672:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b674:	2000      	movs	r0, #0
            break;
 800b676:	e01e      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800b678:	4b10      	ldr	r3, [pc, #64]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b67a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800b67e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b680:	2000      	movs	r0, #0
            break;
 800b682:	e018      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800b684:	4b0d      	ldr	r3, [pc, #52]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b686:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800b68a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b68c:	2000      	movs	r0, #0
            break;
 800b68e:	e012      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800b690:	4b0a      	ldr	r3, [pc, #40]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b692:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800b696:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b698:	2000      	movs	r0, #0
            break;
 800b69a:	e00c      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800b69c:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <LoRaMacMibGetRequestConfirm+0x2d0>)
 800b69e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b6a2:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6a4:	2000      	movs	r0, #0
            break;
 800b6a6:	e006      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 fd8b 	bl	800c1c4 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800b6ae:	e002      	b.n	800b6b6 <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b6b0:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800b6b2:	4770      	bx	lr
    switch( mibGet->Type )
 800b6b4:	2018      	movs	r0, #24
}
 800b6b6:	b004      	add	sp, #16
 800b6b8:	bd10      	pop	{r4, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20008000 	.word	0x20008000
 800b6c0:	2000806c 	.word	0x2000806c
 800b6c4:	200080b4 	.word	0x200080b4
 800b6c8:	20008074 	.word	0x20008074
 800b6cc:	200080bc 	.word	0x200080bc
 800b6d0:	200085cc 	.word	0x200085cc

0800b6d4 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	f000 827f 	beq.w	800bbd8 <LoRaMacMibSetRequestConfirm+0x504>
{
 800b6da:	b530      	push	{r4, r5, lr}
 800b6dc:	b085      	sub	sp, #20
 800b6de:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800b6e0:	4b9b      	ldr	r3, [pc, #620]	; (800b950 <LoRaMacMibSetRequestConfirm+0x27c>)
 800b6e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b6e6:	f013 0f02 	tst.w	r3, #2
 800b6ea:	f040 8277 	bne.w	800bbdc <LoRaMacMibSetRequestConfirm+0x508>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800b6ee:	7805      	ldrb	r5, [r0, #0]
 800b6f0:	2d41      	cmp	r5, #65	; 0x41
 800b6f2:	f200 826e 	bhi.w	800bbd2 <LoRaMacMibSetRequestConfirm+0x4fe>
 800b6f6:	e8df f015 	tbh	[pc, r5, lsl #1]
 800b6fa:	0042      	.short	0x0042
 800b6fc:	0058004f 	.word	0x0058004f
 800b700:	0066005f 	.word	0x0066005f
 800b704:	0072006c 	.word	0x0072006c
 800b708:	008b0080 	.word	0x008b0080
 800b70c:	00a10096 	.word	0x00a10096
 800b710:	00b700ac 	.word	0x00b700ac
 800b714:	00ce00c2 	.word	0x00ce00c2
 800b718:	00e500da 	.word	0x00e500da
 800b71c:	00eb026c 	.word	0x00eb026c
 800b720:	01350111 	.word	0x01350111
 800b724:	018d0163 	.word	0x018d0163
 800b728:	019d017d 	.word	0x019d017d
 800b72c:	01ad01a8 	.word	0x01ad01a8
 800b730:	01b701b2 	.word	0x01b701b2
 800b734:	026c01bc 	.word	0x026c01bc
 800b738:	01d601c1 	.word	0x01d601c1
 800b73c:	01ef0204 	.word	0x01ef0204
 800b740:	02200219 	.word	0x02200219
 800b744:	022e0228 	.word	0x022e0228
 800b748:	026c0234 	.word	0x026c0234
 800b74c:	026c0237 	.word	0x026c0237
 800b750:	026c026c 	.word	0x026c026c
 800b754:	026c026c 	.word	0x026c026c
 800b758:	026c026c 	.word	0x026c026c
 800b75c:	026c026c 	.word	0x026c026c
 800b760:	026c026c 	.word	0x026c026c
 800b764:	026c026c 	.word	0x026c026c
 800b768:	026c026c 	.word	0x026c026c
 800b76c:	0248026c 	.word	0x0248026c
 800b770:	0254024e 	.word	0x0254024e
 800b774:	0260025a 	.word	0x0260025a
 800b778:	02730266 	.word	0x02730266
 800b77c:	0273      	.short	0x0273
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800b77e:	7900      	ldrb	r0, [r0, #4]
 800b780:	f7ff f90c 	bl	800a99c <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800b784:	b930      	cbnz	r0, 800b794 <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b786:	4a72      	ldr	r2, [pc, #456]	; (800b950 <LoRaMacMibSetRequestConfirm+0x27c>)
 800b788:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800b78c:	f043 0320 	orr.w	r3, r3, #32
 800b790:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800b794:	b005      	add	sp, #20
 800b796:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800b798:	7903      	ldrb	r3, [r0, #4]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	f000 8222 	beq.w	800bbe4 <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800b7a0:	4a6c      	ldr	r2, [pc, #432]	; (800b954 <LoRaMacMibSetRequestConfirm+0x280>)
 800b7a2:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	e7ed      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800b7aa:	6840      	ldr	r0, [r0, #4]
 800b7ac:	f004 fc70 	bl	8010090 <SecureElementSetDevEui>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d0e8      	beq.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b7b4:	2003      	movs	r0, #3
 800b7b6:	e7ed      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800b7b8:	6840      	ldr	r0, [r0, #4]
 800b7ba:	f004 fc85 	bl	80100c8 <SecureElementSetJoinEui>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d0e1      	beq.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	e7e6      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800b7c6:	7902      	ldrb	r2, [r0, #4]
 800b7c8:	4b62      	ldr	r3, [pc, #392]	; (800b954 <LoRaMacMibSetRequestConfirm+0x280>)
 800b7ca:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	e7d9      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800b7d2:	6842      	ldr	r2, [r0, #4]
 800b7d4:	4b5f      	ldr	r3, [pc, #380]	; (800b954 <LoRaMacMibSetRequestConfirm+0x280>)
 800b7d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b7da:	2000      	movs	r0, #0
 800b7dc:	e7d3      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800b7de:	6841      	ldr	r1, [r0, #4]
 800b7e0:	4b5c      	ldr	r3, [pc, #368]	; (800b954 <LoRaMacMibSetRequestConfirm+0x280>)
 800b7e2:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800b7e6:	f004 fc8d 	bl	8010104 <SecureElementSetDevAddr>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	f040 81fc 	bne.w	800bbe8 <LoRaMacMibSetRequestConfirm+0x514>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800b7f0:	6862      	ldr	r2, [r4, #4]
 800b7f2:	4b58      	ldr	r3, [pc, #352]	; (800b954 <LoRaMacMibSetRequestConfirm+0x280>)
 800b7f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if( status == LORAMAC_STATUS_OK )
 800b7f8:	e7c5      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800b7fa:	6841      	ldr	r1, [r0, #4]
 800b7fc:	2900      	cmp	r1, #0
 800b7fe:	f000 81f5 	beq.w	800bbec <LoRaMacMibSetRequestConfirm+0x518>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800b802:	2000      	movs	r0, #0
 800b804:	f001 faa6 	bl	800cd54 <LoRaMacCryptoSetKey>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d0bc      	beq.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b80c:	2011      	movs	r0, #17
 800b80e:	e7c1      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 800b810:	6841      	ldr	r1, [r0, #4]
 800b812:	2900      	cmp	r1, #0
 800b814:	f000 81ec 	beq.w	800bbf0 <LoRaMacMibSetRequestConfirm+0x51c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800b818:	2001      	movs	r0, #1
 800b81a:	f001 fa9b 	bl	800cd54 <LoRaMacCryptoSetKey>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d0b0      	beq.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b822:	2011      	movs	r0, #17
 800b824:	e7b6      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 800b826:	6841      	ldr	r1, [r0, #4]
 800b828:	2900      	cmp	r1, #0
 800b82a:	f000 81e3 	beq.w	800bbf4 <LoRaMacMibSetRequestConfirm+0x520>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800b82e:	2008      	movs	r0, #8
 800b830:	f001 fa90 	bl	800cd54 <LoRaMacCryptoSetKey>
 800b834:	2800      	cmp	r0, #0
 800b836:	d0a5      	beq.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b838:	2011      	movs	r0, #17
 800b83a:	e7ab      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 800b83c:	6841      	ldr	r1, [r0, #4]
 800b83e:	2900      	cmp	r1, #0
 800b840:	f000 81da 	beq.w	800bbf8 <LoRaMacMibSetRequestConfirm+0x524>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800b844:	2009      	movs	r0, #9
 800b846:	f001 fa85 	bl	800cd54 <LoRaMacCryptoSetKey>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d09a      	beq.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b84e:	2011      	movs	r0, #17
 800b850:	e7a0      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 800b852:	6841      	ldr	r1, [r0, #4]
 800b854:	2900      	cmp	r1, #0
 800b856:	f000 81d1 	beq.w	800bbfc <LoRaMacMibSetRequestConfirm+0x528>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800b85a:	200c      	movs	r0, #12
 800b85c:	f001 fa7a 	bl	800cd54 <LoRaMacCryptoSetKey>
 800b860:	2800      	cmp	r0, #0
 800b862:	d08f      	beq.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b864:	2011      	movs	r0, #17
 800b866:	e795      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 800b868:	6841      	ldr	r1, [r0, #4]
 800b86a:	2900      	cmp	r1, #0
 800b86c:	f000 81c8 	beq.w	800bc00 <LoRaMacMibSetRequestConfirm+0x52c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800b870:	200d      	movs	r0, #13
 800b872:	f001 fa6f 	bl	800cd54 <LoRaMacCryptoSetKey>
 800b876:	2800      	cmp	r0, #0
 800b878:	d084      	beq.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b87a:	2011      	movs	r0, #17
 800b87c:	e78a      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800b87e:	6841      	ldr	r1, [r0, #4]
 800b880:	2900      	cmp	r1, #0
 800b882:	f000 81bf 	beq.w	800bc04 <LoRaMacMibSetRequestConfirm+0x530>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800b886:	200e      	movs	r0, #14
 800b888:	f001 fa64 	bl	800cd54 <LoRaMacCryptoSetKey>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f43f af79 	beq.w	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b892:	2011      	movs	r0, #17
 800b894:	e77e      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800b896:	6841      	ldr	r1, [r0, #4]
 800b898:	2900      	cmp	r1, #0
 800b89a:	f000 81b5 	beq.w	800bc08 <LoRaMacMibSetRequestConfirm+0x534>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800b89e:	200f      	movs	r0, #15
 800b8a0:	f001 fa58 	bl	800cd54 <LoRaMacCryptoSetKey>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	f43f af6d 	beq.w	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b8aa:	2011      	movs	r0, #17
 800b8ac:	e772      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800b8ae:	7900      	ldrb	r0, [r0, #4]
 800b8b0:	4b28      	ldr	r3, [pc, #160]	; (800b954 <LoRaMacMibSetRequestConfirm+0x280>)
 800b8b2:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b8b6:	4c28      	ldr	r4, [pc, #160]	; (800b958 <LoRaMacMibSetRequestConfirm+0x284>)
 800b8b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8ba:	4798      	blx	r3
            Radio.Sleep( );
 800b8bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b8be:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	e760      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800b8c4:	7902      	ldrb	r2, [r0, #4]
 800b8c6:	4b23      	ldr	r3, [pc, #140]	; (800b954 <LoRaMacMibSetRequestConfirm+0x280>)
 800b8c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	e75a      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b8d0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b8d4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b8d8:	4b1e      	ldr	r3, [pc, #120]	; (800b954 <LoRaMacMibSetRequestConfirm+0x280>)
 800b8da:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800b8de:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800b8e2:	2207      	movs	r2, #7
 800b8e4:	a901      	add	r1, sp, #4
 800b8e6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b8ea:	f001 fc87 	bl	800d1fc <RegionVerify>
 800b8ee:	b908      	cbnz	r0, 800b8f4 <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b8f0:	2003      	movs	r0, #3
 800b8f2:	e747      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800b8f4:	6863      	ldr	r3, [r4, #4]
 800b8f6:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	a901      	add	r1, sp, #4
 800b8fc:	4b15      	ldr	r3, [pc, #84]	; (800b954 <LoRaMacMibSetRequestConfirm+0x280>)
 800b8fe:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b902:	f001 fc7b 	bl	800d1fc <RegionVerify>
 800b906:	2800      	cmp	r0, #0
 800b908:	f000 8180 	beq.w	800bc0c <LoRaMacMibSetRequestConfirm+0x538>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800b90c:	4b13      	ldr	r3, [pc, #76]	; (800b95c <LoRaMacMibSetRequestConfirm+0x288>)
 800b90e:	3404      	adds	r4, #4
 800b910:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b914:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b918:	2000      	movs	r0, #0
 800b91a:	e733      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b91c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b920:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b924:	4b0b      	ldr	r3, [pc, #44]	; (800b954 <LoRaMacMibSetRequestConfirm+0x280>)
 800b926:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800b92a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b92e:	2207      	movs	r2, #7
 800b930:	a901      	add	r1, sp, #4
 800b932:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b936:	f001 fc61 	bl	800d1fc <RegionVerify>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	f000 8168 	beq.w	800bc10 <LoRaMacMibSetRequestConfirm+0x53c>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800b940:	4b07      	ldr	r3, [pc, #28]	; (800b960 <LoRaMacMibSetRequestConfirm+0x28c>)
 800b942:	3404      	adds	r4, #4
 800b944:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b948:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b94c:	2000      	movs	r0, #0
 800b94e:	e719      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
 800b950:	200009a0 	.word	0x200009a0
 800b954:	20008000 	.word	0x20008000
 800b958:	08018e34 	.word	0x08018e34
 800b95c:	2000806c 	.word	0x2000806c
 800b960:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b964:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b968:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b96c:	4bb0      	ldr	r3, [pc, #704]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800b96e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800b972:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b976:	2207      	movs	r2, #7
 800b978:	a901      	add	r1, sp, #4
 800b97a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b97e:	f001 fc3d 	bl	800d1fc <RegionVerify>
 800b982:	2800      	cmp	r0, #0
 800b984:	f000 8146 	beq.w	800bc14 <LoRaMacMibSetRequestConfirm+0x540>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800b988:	4ba9      	ldr	r3, [pc, #676]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800b98a:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800b98e:	3404      	adds	r4, #4
 800b990:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b994:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b998:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	d001      	beq.n	800b9a4 <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	e6ef      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b9a4:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800b9a8:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	f43f aee9 	beq.w	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                    Radio.Sleep( );
 800b9b2:	4ba0      	ldr	r3, [pc, #640]	; (800bc34 <LoRaMacMibSetRequestConfirm+0x560>)
 800b9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b6:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800b9b8:	f7fe fd14 	bl	800a3e4 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b9bc:	2000      	movs	r0, #0
 800b9be:	e6e1      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b9c0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b9c4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b9c8:	4b99      	ldr	r3, [pc, #612]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800b9ca:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800b9ce:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b9d2:	2207      	movs	r2, #7
 800b9d4:	a901      	add	r1, sp, #4
 800b9d6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800b9da:	f001 fc0f 	bl	800d1fc <RegionVerify>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f000 811a 	beq.w	800bc18 <LoRaMacMibSetRequestConfirm+0x544>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b9e4:	4b94      	ldr	r3, [pc, #592]	; (800bc38 <LoRaMacMibSetRequestConfirm+0x564>)
 800b9e6:	3404      	adds	r4, #4
 800b9e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b9ec:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	e6c7      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800b9f4:	6843      	ldr	r3, [r0, #4]
 800b9f6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800b9fe:	a902      	add	r1, sp, #8
 800ba00:	4b8b      	ldr	r3, [pc, #556]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ba02:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ba06:	f001 fc17 	bl	800d238 <RegionChanMaskSet>
 800ba0a:	b108      	cbz	r0, 800ba10 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	e6b9      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ba10:	2003      	movs	r0, #3
 800ba12:	e6bf      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ba14:	6843      	ldr	r3, [r0, #4]
 800ba16:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ba1e:	a902      	add	r1, sp, #8
 800ba20:	4b83      	ldr	r3, [pc, #524]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ba22:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ba26:	f001 fc07 	bl	800d238 <RegionChanMaskSet>
 800ba2a:	b108      	cbz	r0, 800ba30 <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	e6a9      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ba30:	2003      	movs	r0, #3
 800ba32:	e6af      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ba34:	7902      	ldrb	r2, [r0, #4]
 800ba36:	1e53      	subs	r3, r2, #1
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b0e      	cmp	r3, #14
 800ba3c:	f200 80ee 	bhi.w	800bc1c <LoRaMacMibSetRequestConfirm+0x548>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ba40:	4b7b      	ldr	r3, [pc, #492]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ba42:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba46:	2000      	movs	r0, #0
 800ba48:	e69c      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ba4a:	6842      	ldr	r2, [r0, #4]
 800ba4c:	4b78      	ldr	r3, [pc, #480]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ba4e:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba50:	2000      	movs	r0, #0
 800ba52:	e698      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ba54:	6842      	ldr	r2, [r0, #4]
 800ba56:	4b76      	ldr	r3, [pc, #472]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ba58:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	e693      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ba5e:	6842      	ldr	r2, [r0, #4]
 800ba60:	4b73      	ldr	r3, [pc, #460]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ba62:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba64:	2000      	movs	r0, #0
 800ba66:	e68e      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800ba68:	6842      	ldr	r2, [r0, #4]
 800ba6a:	4b71      	ldr	r3, [pc, #452]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ba6c:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba6e:	2000      	movs	r0, #0
 800ba70:	e689      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ba72:	6842      	ldr	r2, [r0, #4]
 800ba74:	4b6e      	ldr	r3, [pc, #440]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ba76:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba78:	2000      	movs	r0, #0
 800ba7a:	e684      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ba7c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ba80:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800ba84:	2206      	movs	r2, #6
 800ba86:	a901      	add	r1, sp, #4
 800ba88:	4b69      	ldr	r3, [pc, #420]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ba8a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800ba8e:	f001 fbb5 	bl	800d1fc <RegionVerify>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	f000 80c4 	beq.w	800bc20 <LoRaMacMibSetRequestConfirm+0x54c>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800ba98:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ba9c:	4b64      	ldr	r3, [pc, #400]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800ba9e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800baa2:	2000      	movs	r0, #0
 800baa4:	e66e      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800baa6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800baaa:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800baae:	4b60      	ldr	r3, [pc, #384]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bab0:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800bab4:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800bab8:	2205      	movs	r2, #5
 800baba:	a901      	add	r1, sp, #4
 800babc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bac0:	f001 fb9c 	bl	800d1fc <RegionVerify>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	f000 80ad 	beq.w	800bc24 <LoRaMacMibSetRequestConfirm+0x550>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800baca:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800bace:	4b58      	ldr	r3, [pc, #352]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bad4:	2000      	movs	r0, #0
 800bad6:	e655      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800bad8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800badc:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800bae0:	220a      	movs	r2, #10
 800bae2:	a901      	add	r1, sp, #4
 800bae4:	4b52      	ldr	r3, [pc, #328]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bae6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800baea:	f001 fb87 	bl	800d1fc <RegionVerify>
 800baee:	2800      	cmp	r0, #0
 800baf0:	f000 809a 	beq.w	800bc28 <LoRaMacMibSetRequestConfirm+0x554>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800baf4:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800baf8:	4b4d      	ldr	r3, [pc, #308]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bafa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bafe:	2000      	movs	r0, #0
 800bb00:	e640      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800bb02:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800bb06:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800bb0a:	2209      	movs	r2, #9
 800bb0c:	a901      	add	r1, sp, #4
 800bb0e:	4b48      	ldr	r3, [pc, #288]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bb10:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bb14:	f001 fb72 	bl	800d1fc <RegionVerify>
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	f000 8087 	beq.w	800bc2c <LoRaMacMibSetRequestConfirm+0x558>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800bb1e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800bb22:	4b43      	ldr	r3, [pc, #268]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bb24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb28:	2000      	movs	r0, #0
 800bb2a:	e62b      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800bb2c:	6842      	ldr	r2, [r0, #4]
 800bb2e:	4b40      	ldr	r3, [pc, #256]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bb30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800bb34:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb36:	2000      	movs	r0, #0
 800bb38:	e625      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800bb3a:	7902      	ldrb	r2, [r0, #4]
 800bb3c:	4b3c      	ldr	r3, [pc, #240]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bb3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800bb42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb46:	2000      	movs	r0, #0
 800bb48:	e61d      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800bb4a:	6842      	ldr	r2, [r0, #4]
 800bb4c:	4b38      	ldr	r3, [pc, #224]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bb4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb52:	2000      	movs	r0, #0
 800bb54:	e617      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800bb56:	6842      	ldr	r2, [r0, #4]
 800bb58:	4b35      	ldr	r3, [pc, #212]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bb5a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e611      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800bb62:	f7fe fd55 	bl	800a610 <RestoreNvmData>
            break;
 800bb66:	e60d      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800bb68:	7983      	ldrb	r3, [r0, #6]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d901      	bls.n	800bb72 <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bb6e:	2003      	movs	r0, #3
 800bb70:	e610      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800bb72:	6842      	ldr	r2, [r0, #4]
 800bb74:	4b2e      	ldr	r3, [pc, #184]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bb76:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800bb7a:	6840      	ldr	r0, [r0, #4]
 800bb7c:	f000 ffa6 	bl	800cacc <LoRaMacCryptoSetLrWanVersion>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	f43f ae00 	beq.w	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800bb86:	2011      	movs	r0, #17
 800bb88:	e604      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800bb8a:	6842      	ldr	r2, [r0, #4]
 800bb8c:	4b28      	ldr	r3, [pc, #160]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bb8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb92:	2000      	movs	r0, #0
 800bb94:	e5f7      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800bb96:	7902      	ldrb	r2, [r0, #4]
 800bb98:	4b25      	ldr	r3, [pc, #148]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bb9a:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb9e:	2000      	movs	r0, #0
 800bba0:	e5f1      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800bba2:	8882      	ldrh	r2, [r0, #4]
 800bba4:	4b22      	ldr	r3, [pc, #136]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bba6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbaa:	2000      	movs	r0, #0
 800bbac:	e5eb      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800bbae:	8882      	ldrh	r2, [r0, #4]
 800bbb0:	4b1f      	ldr	r3, [pc, #124]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bbb2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	e5e5      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800bbba:	8882      	ldrh	r2, [r0, #4]
 800bbbc:	4b1c      	ldr	r3, [pc, #112]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bbbe:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	e5df      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800bbc6:	8882      	ldrh	r2, [r0, #4]
 800bbc8:	4b19      	ldr	r3, [pc, #100]	; (800bc30 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bbca:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbce:	2000      	movs	r0, #0
 800bbd0:	e5d9      	b.n	800b786 <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800bbd2:	f000 faf9 	bl	800c1c8 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800bbd6:	e5d5      	b.n	800b784 <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bbd8:	2003      	movs	r0, #3
}
 800bbda:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800bbdc:	2001      	movs	r0, #1
 800bbde:	e5d9      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
    switch( mibSet->Type )
 800bbe0:	2018      	movs	r0, #24
 800bbe2:	e5d7      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bbe4:	2003      	movs	r0, #3
 800bbe6:	e5d5      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bbe8:	2003      	movs	r0, #3
 800bbea:	e5d3      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bbec:	2003      	movs	r0, #3
 800bbee:	e5d1      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bbf0:	2003      	movs	r0, #3
 800bbf2:	e5cf      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bbf4:	2003      	movs	r0, #3
 800bbf6:	e5cd      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bbf8:	2003      	movs	r0, #3
 800bbfa:	e5cb      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bbfc:	2003      	movs	r0, #3
 800bbfe:	e5c9      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc00:	2003      	movs	r0, #3
 800bc02:	e5c7      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc04:	2003      	movs	r0, #3
 800bc06:	e5c5      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc08:	2003      	movs	r0, #3
 800bc0a:	e5c3      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc0c:	2003      	movs	r0, #3
 800bc0e:	e5c1      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc10:	2003      	movs	r0, #3
 800bc12:	e5bf      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc14:	2003      	movs	r0, #3
 800bc16:	e5bd      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc18:	2003      	movs	r0, #3
 800bc1a:	e5bb      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc1c:	2003      	movs	r0, #3
 800bc1e:	e5b9      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc20:	2003      	movs	r0, #3
 800bc22:	e5b7      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc24:	2003      	movs	r0, #3
 800bc26:	e5b5      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc28:	2003      	movs	r0, #3
 800bc2a:	e5b3      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bc2c:	2003      	movs	r0, #3
 800bc2e:	e5b1      	b.n	800b794 <LoRaMacMibSetRequestConfirm+0xc0>
 800bc30:	20008000 	.word	0x20008000
 800bc34:	08018e34 	.word	0x08018e34
 800bc38:	200080bc 	.word	0x200080bc

0800bc3c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800bc40:	2300      	movs	r3, #0
 800bc42:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f000 80f3 	beq.w	800be32 <LoRaMacMlmeRequest+0x1f6>
 800bc4c:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800bc4e:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800bc50:	f7ff f8b0 	bl	800adb4 <LoRaMacIsBusy>
 800bc54:	b118      	cbz	r0, 800bc5e <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800bc56:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800bc58:	4620      	mov	r0, r4
 800bc5a:	b006      	add	sp, #24
 800bc5c:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800bc5e:	f000 fd69 	bl	800c734 <LoRaMacConfirmQueueIsFull>
 800bc62:	b108      	cbz	r0, 800bc68 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800bc64:	2401      	movs	r4, #1
 800bc66:	e7f7      	b.n	800bc58 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800bc68:	f000 fd5e 	bl	800c728 <LoRaMacConfirmQueueGetCnt>
 800bc6c:	b308      	cbz	r0, 800bcb2 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc6e:	4b72      	ldr	r3, [pc, #456]	; (800be38 <LoRaMacMlmeRequest+0x1fc>)
 800bc70:	2101      	movs	r1, #1
 800bc72:	f883 1455 	strb.w	r1, [r3, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800bc76:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800bc7a:	f042 0204 	orr.w	r2, r2, #4
 800bc7e:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 800bc82:	782b      	ldrb	r3, [r5, #0]
 800bc84:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc88:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800bc92:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800bc96:	461c      	mov	r4, r3
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	2b0c      	cmp	r3, #12
 800bc9c:	f200 80af 	bhi.w	800bdfe <LoRaMacMlmeRequest+0x1c2>
 800bca0:	e8df f003 	tbb	[pc, r3]
 800bca4:	adadad0d 	.word	0xadadad0d
 800bca8:	adad675d 	.word	0xadad675d
 800bcac:	7f9ead70 	.word	0x7f9ead70
 800bcb0:	95          	.byte	0x95
 800bcb1:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800bcb2:	2214      	movs	r2, #20
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	4861      	ldr	r0, [pc, #388]	; (800be3c <LoRaMacMlmeRequest+0x200>)
 800bcb8:	f004 fb4b 	bl	8010352 <memset1>
 800bcbc:	e7d7      	b.n	800bc6e <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800bcbe:	4b5e      	ldr	r3, [pc, #376]	; (800be38 <LoRaMacMlmeRequest+0x1fc>)
 800bcc0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bcc4:	f013 0f20 	tst.w	r3, #32
 800bcc8:	d1c6      	bne.n	800bc58 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800bcca:	792b      	ldrb	r3, [r5, #4]
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d003      	beq.n	800bcd8 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d026      	beq.n	800bd22 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800bcd4:	2402      	movs	r4, #2
 800bcd6:	e093      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800bcd8:	2000      	movs	r0, #0
 800bcda:	f7fe fd93 	bl	800a804 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800bcde:	4c58      	ldr	r4, [pc, #352]	; (800be40 <LoRaMacMlmeRequest+0x204>)
 800bce0:	2200      	movs	r2, #0
 800bce2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800bce6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800bcea:	f001 fb43 	bl	800d374 <RegionAlternateDr>
 800bcee:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800bcf2:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800bcf6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800bcfa:	2307      	movs	r3, #7
 800bcfc:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800bd00:	20ff      	movs	r0, #255	; 0xff
 800bd02:	f7fe fee1 	bl	800aac8 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800bd06:	4604      	mov	r4, r0
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d079      	beq.n	800be00 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800bd0c:	4e4c      	ldr	r6, [pc, #304]	; (800be40 <LoRaMacMlmeRequest+0x204>)
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800bd14:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800bd18:	f001 fb2c 	bl	800d374 <RegionAlternateDr>
 800bd1c:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800bd20:	e06e      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800bd22:	4e47      	ldr	r6, [pc, #284]	; (800be40 <LoRaMacMlmeRequest+0x204>)
 800bd24:	2400      	movs	r4, #0
 800bd26:	f886 411d 	strb.w	r4, [r6, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800bd30:	4669      	mov	r1, sp
 800bd32:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800bd36:	f001 fa53 	bl	800d1e0 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800bd3a:	792b      	ldrb	r3, [r5, #4]
 800bd3c:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bd40:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800bd44:	2301      	movs	r3, #1
 800bd46:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800bd4a:	f7fc ffd9 	bl	8008d00 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800bd4e:	4a3a      	ldr	r2, [pc, #232]	; (800be38 <LoRaMacMlmeRequest+0x1fc>)
 800bd50:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800bd54:	f043 0310 	orr.w	r3, r3, #16
 800bd58:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 800bd5c:	e050      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bd5e:	2200      	movs	r2, #0
 800bd60:	a904      	add	r1, sp, #16
 800bd62:	2002      	movs	r0, #2
 800bd64:	f000 fad4 	bl	800c310 <LoRaMacCommandsAddCmd>
 800bd68:	4604      	mov	r4, r0
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d048      	beq.n	800be00 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bd6e:	2413      	movs	r4, #19
 800bd70:	e046      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800bd72:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800bd76:	b2d2      	uxtb	r2, r2
 800bd78:	68a9      	ldr	r1, [r5, #8]
 800bd7a:	88a8      	ldrh	r0, [r5, #4]
 800bd7c:	f7fc ff16 	bl	8008bac <SetTxContinuousWave>
 800bd80:	4604      	mov	r4, r0
            break;
 800bd82:	e03d      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800bd84:	4669      	mov	r1, sp
 800bd86:	200d      	movs	r0, #13
 800bd88:	f000 fb0e 	bl	800c3a8 <LoRaMacCommandsGetCmd>
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	b3b8      	cbz	r0, 800be00 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bd90:	2200      	movs	r2, #0
 800bd92:	a904      	add	r1, sp, #16
 800bd94:	200d      	movs	r0, #13
 800bd96:	f000 fabb 	bl	800c310 <LoRaMacCommandsAddCmd>
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	b380      	cbz	r0, 800be00 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bd9e:	2413      	movs	r4, #19
            break;
 800bda0:	e02e      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800bda2:	4b27      	ldr	r3, [pc, #156]	; (800be40 <LoRaMacMlmeRequest+0x204>)
 800bda4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800bda8:	b10b      	cbz	r3, 800bdae <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800bdaa:	2402      	movs	r4, #2
 800bdac:	e028      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800bdae:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800bdb0:	f004 0007 	and.w	r0, r4, #7
 800bdb4:	f000 fa01 	bl	800c1ba <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800bdb8:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	a904      	add	r1, sp, #16
 800bdc0:	2010      	movs	r0, #16
 800bdc2:	f000 faa5 	bl	800c310 <LoRaMacCommandsAddCmd>
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	b1d0      	cbz	r0, 800be00 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bdca:	2413      	movs	r4, #19
 800bdcc:	e018      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bdce:	2200      	movs	r2, #0
 800bdd0:	a904      	add	r1, sp, #16
 800bdd2:	2012      	movs	r0, #18
 800bdd4:	f000 fa9c 	bl	800c310 <LoRaMacCommandsAddCmd>
 800bdd8:	4604      	mov	r4, r0
 800bdda:	b188      	cbz	r0, 800be00 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bddc:	2413      	movs	r4, #19
 800bdde:	e00f      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800bde0:	2301      	movs	r3, #1
 800bde2:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800bde6:	f000 f9d9 	bl	800c19c <LoRaMacClassBIsAcquisitionInProgress>
 800bdea:	b108      	cbz	r0, 800bdf0 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800bdec:	2401      	movs	r4, #1
 800bdee:	e007      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800bdf0:	f000 f9d1 	bl	800c196 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	f000 f9d3 	bl	800c1a0 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800bdfa:	2400      	movs	r4, #0
 800bdfc:	e000      	b.n	800be00 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800bdfe:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800be00:	4b0d      	ldr	r3, [pc, #52]	; (800be38 <LoRaMacMlmeRequest+0x1fc>)
 800be02:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800be06:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800be08:	b17c      	cbz	r4, 800be2a <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800be0a:	f000 fc8d 	bl	800c728 <LoRaMacConfirmQueueGetCnt>
 800be0e:	2800      	cmp	r0, #0
 800be10:	f47f af22 	bne.w	800bc58 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800be14:	4b08      	ldr	r3, [pc, #32]	; (800be38 <LoRaMacMlmeRequest+0x1fc>)
 800be16:	2100      	movs	r1, #0
 800be18:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800be1c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800be20:	f361 0282 	bfi	r2, r1, #2, #1
 800be24:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800be28:	e716      	b.n	800bc58 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800be2a:	a805      	add	r0, sp, #20
 800be2c:	f000 fbb2 	bl	800c594 <LoRaMacConfirmQueueAdd>
 800be30:	e712      	b.n	800bc58 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800be32:	2403      	movs	r4, #3
 800be34:	e710      	b.n	800bc58 <LoRaMacMlmeRequest+0x1c>
 800be36:	bf00      	nop
 800be38:	200009a0 	.word	0x200009a0
 800be3c:	20000df4 	.word	0x20000df4
 800be40:	20008000 	.word	0x20008000

0800be44 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800be44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	b091      	sub	sp, #68	; 0x44
 800be4a:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800be4c:	2800      	cmp	r0, #0
 800be4e:	f000 80de 	beq.w	800c00e <LoRaMacMcpsRequest+0x1ca>
 800be52:	f04f 0a00 	mov.w	sl, #0
 800be56:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800be58:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800be5c:	f7fe ffaa 	bl	800adb4 <LoRaMacIsBusy>
 800be60:	4680      	mov	r8, r0
 800be62:	b118      	cbz	r0, 800be6c <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800be64:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800be66:	b011      	add	sp, #68	; 0x44
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800be6c:	ac06      	add	r4, sp, #24
 800be6e:	462e      	mov	r6, r5
 800be70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800be72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be74:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800be78:	4651      	mov	r1, sl
 800be7a:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800be7e:	4c66      	ldr	r4, [pc, #408]	; (800c018 <LoRaMacMcpsRequest+0x1d4>)
 800be80:	2214      	movs	r2, #20
 800be82:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 800be86:	f004 fa64 	bl	8010352 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800be90:	4b62      	ldr	r3, [pc, #392]	; (800c01c <LoRaMacMcpsRequest+0x1d8>)
 800be92:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800be96:	2b02      	cmp	r3, #2
 800be98:	d065      	beq.n	800bf66 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800be9a:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800be9e:	2f01      	cmp	r7, #1
 800bea0:	f000 8086 	beq.w	800bfb0 <LoRaMacMcpsRequest+0x16c>
 800bea4:	2f03      	cmp	r7, #3
 800bea6:	f000 8096 	beq.w	800bfd6 <LoRaMacMcpsRequest+0x192>
 800beaa:	2f00      	cmp	r7, #0
 800beac:	d06d      	beq.n	800bf8a <LoRaMacMcpsRequest+0x146>
 800beae:	f04f 0b00 	mov.w	fp, #0
 800beb2:	f8cd b014 	str.w	fp, [sp, #20]
 800beb6:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800beba:	2302      	movs	r3, #2
 800bebc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bec0:	4e56      	ldr	r6, [pc, #344]	; (800c01c <LoRaMacMcpsRequest+0x1d8>)
 800bec2:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800bec6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800beca:	a90e      	add	r1, sp, #56	; 0x38
 800becc:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800bed0:	f001 f960 	bl	800d194 <RegionGetPhyParam>
 800bed4:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800bed6:	b244      	sxtb	r4, r0
 800bed8:	45a3      	cmp	fp, r4
 800beda:	bfb8      	it	lt
 800bedc:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800bede:	f896 911a 	ldrb.w	r9, [r6, #282]	; 0x11a
 800bee2:	f896 211d 	ldrb.w	r2, [r6, #285]	; 0x11d
 800bee6:	f896 1130 	ldrb.w	r1, [r6, #304]	; 0x130
 800beea:	4648      	mov	r0, r9
 800beec:	f7fc fe30 	bl	8008b50 <CheckForMinimumAbpDatarate>
 800bef0:	4603      	mov	r3, r0
 800bef2:	b900      	cbnz	r0, 800bef6 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800bef4:	465c      	mov	r4, fp
    if( readyToSend == true )
 800bef6:	f1b8 0f00 	cmp.w	r8, #0
 800befa:	f000 8082 	beq.w	800c002 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800befe:	f1b9 0f00 	cmp.w	r9, #0
 800bf02:	d000      	beq.n	800bf06 <LoRaMacMcpsRequest+0xc2>
 800bf04:	b19b      	cbz	r3, 800bf2e <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800bf06:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bf0a:	4b44      	ldr	r3, [pc, #272]	; (800c01c <LoRaMacMcpsRequest+0x1d8>)
 800bf0c:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800bf10:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800bf14:	2205      	movs	r2, #5
 800bf16:	a90b      	add	r1, sp, #44	; 0x2c
 800bf18:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bf1c:	f001 f96e 	bl	800d1fc <RegionVerify>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d076      	beq.n	800c012 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800bf24:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800bf28:	4b3c      	ldr	r3, [pc, #240]	; (800c01c <LoRaMacMcpsRequest+0x1d8>)
 800bf2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800bf2e:	4b3a      	ldr	r3, [pc, #232]	; (800c018 <LoRaMacMcpsRequest+0x1d4>)
 800bf30:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800bf34:	4b39      	ldr	r3, [pc, #228]	; (800c01c <LoRaMacMcpsRequest+0x1d8>)
 800bf36:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800bf3a:	f7fd ff95 	bl	8009e68 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800bf3e:	9b03      	ldr	r3, [sp, #12]
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	4653      	mov	r3, sl
 800bf44:	9a05      	ldr	r2, [sp, #20]
 800bf46:	9904      	ldr	r1, [sp, #16]
 800bf48:	a80c      	add	r0, sp, #48	; 0x30
 800bf4a:	f7fe fea3 	bl	800ac94 <Send>
        if( status == LORAMAC_STATUS_OK )
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d152      	bne.n	800bff8 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800bf52:	4b31      	ldr	r3, [pc, #196]	; (800c018 <LoRaMacMcpsRequest+0x1d4>)
 800bf54:	f883 7440 	strb.w	r7, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800bf58:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800bf5c:	f042 0201 	orr.w	r2, r2, #1
 800bf60:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800bf64:	e04e      	b.n	800c004 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800bf66:	4b2d      	ldr	r3, [pc, #180]	; (800c01c <LoRaMacMcpsRequest+0x1d8>)
 800bf68:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d194      	bne.n	800be9a <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800bf70:	4b2a      	ldr	r3, [pc, #168]	; (800c01c <LoRaMacMcpsRequest+0x1d8>)
 800bf72:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d18f      	bne.n	800be9a <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800bf7a:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d18b      	bne.n	800be9a <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800bf82:	2301      	movs	r3, #1
 800bf84:	f88d 3018 	strb.w	r3, [sp, #24]
 800bf88:	e787      	b.n	800be9a <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800bf8a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f362 1347 	bfi	r3, r2, #5, #3
 800bf94:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800bf98:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800bf9c:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800bf9e:	9b08      	ldr	r3, [sp, #32]
 800bfa0:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800bfa2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800bfa6:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800bfaa:	f04f 0801 	mov.w	r8, #1
            break;
 800bfae:	e784      	b.n	800beba <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800bfb0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800bfb4:	2204      	movs	r2, #4
 800bfb6:	f362 1347 	bfi	r3, r2, #5, #3
 800bfba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800bfbe:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800bfc2:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800bfc4:	9b08      	ldr	r3, [sp, #32]
 800bfc6:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800bfc8:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800bfcc:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800bfd0:	f04f 0801 	mov.w	r8, #1
            break;
 800bfd4:	e771      	b.n	800beba <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800bfd6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800bfda:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800bfde:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800bfe2:	9b07      	ldr	r3, [sp, #28]
 800bfe4:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800bfe6:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800bfea:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800bfee:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	9304      	str	r3, [sp, #16]
            break;
 800bff6:	e760      	b.n	800beba <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800bff8:	4b07      	ldr	r3, [pc, #28]	; (800c018 <LoRaMacMcpsRequest+0x1d4>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800c000:	e000      	b.n	800c004 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c002:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800c004:	4b04      	ldr	r3, [pc, #16]	; (800c018 <LoRaMacMcpsRequest+0x1d4>)
 800c006:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800c00a:	612b      	str	r3, [r5, #16]
    return status;
 800c00c:	e72b      	b.n	800be66 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c00e:	2003      	movs	r0, #3
 800c010:	e729      	b.n	800be66 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800c012:	2003      	movs	r0, #3
 800c014:	e727      	b.n	800be66 <LoRaMacMcpsRequest+0x22>
 800c016:	bf00      	nop
 800c018:	200009a0 	.word	0x200009a0
 800c01c:	20008000 	.word	0x20008000

0800c020 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800c020:	b510      	push	{r4, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800c026:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800c02a:	220f      	movs	r2, #15
 800c02c:	a901      	add	r1, sp, #4
 800c02e:	4b09      	ldr	r3, [pc, #36]	; (800c054 <LoRaMacTestSetDutyCycleOn+0x34>)
 800c030:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c034:	f001 f8e2 	bl	800d1fc <RegionVerify>
 800c038:	b148      	cbz	r0, 800c04e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800c03a:	4b06      	ldr	r3, [pc, #24]	; (800c054 <LoRaMacTestSetDutyCycleOn+0x34>)
 800c03c:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800c040:	4a05      	ldr	r2, [pc, #20]	; (800c058 <LoRaMacTestSetDutyCycleOn+0x38>)
 800c042:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c046:	f043 0320 	orr.w	r3, r3, #32
 800c04a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800c04e:	b002      	add	sp, #8
 800c050:	bd10      	pop	{r4, pc}
 800c052:	bf00      	nop
 800c054:	20008000 	.word	0x20008000
 800c058:	200009a0 	.word	0x200009a0

0800c05c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800c05c:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800c05e:	f7ff f907 	bl	800b270 <LoRaMacStop>
 800c062:	b110      	cbz	r0, 800c06a <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800c064:	2401      	movs	r4, #1
    }
}
 800c066:	4620      	mov	r0, r4
 800c068:	bd38      	pop	{r3, r4, r5, pc}
 800c06a:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800c06c:	4d0a      	ldr	r5, [pc, #40]	; (800c098 <LoRaMacDeInitialization+0x3c>)
 800c06e:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800c072:	f006 fb89 	bl	8012788 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800c076:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800c07a:	f006 fb85 	bl	8012788 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800c07e:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800c082:	f006 fb81 	bl	8012788 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800c086:	f000 f899 	bl	800c1bc <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800c08a:	2000      	movs	r0, #0
 800c08c:	f7fe fbba 	bl	800a804 <ResetMacParameters>
        Radio.Sleep( );
 800c090:	4b02      	ldr	r3, [pc, #8]	; (800c09c <LoRaMacDeInitialization+0x40>)
 800c092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c094:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800c096:	e7e6      	b.n	800c066 <LoRaMacDeInitialization+0xa>
 800c098:	200009a0 	.word	0x200009a0
 800c09c:	08018e34 	.word	0x08018e34

0800c0a0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	b08b      	sub	sp, #44	; 0x2c
 800c0a6:	460f      	mov	r7, r1
 800c0a8:	4616      	mov	r6, r2
 800c0aa:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800c0ac:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800c0b0:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800c0b4:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800c0b8:	6842      	ldr	r2, [r0, #4]
 800c0ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0bc:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800c0be:	f890 8001 	ldrb.w	r8, [r0, #1]
 800c0c2:	f1b8 0f00 	cmp.w	r8, #0
 800c0c6:	d109      	bne.n	800c0dc <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800c0c8:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800c0cc:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800c0d0:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	b00b      	add	sp, #44	; 0x2c
 800c0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0dc:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800c0de:	2302      	movs	r3, #2
 800c0e0:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c0e4:	7bc3      	ldrb	r3, [r0, #15]
 800c0e6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c0ea:	a908      	add	r1, sp, #32
 800c0ec:	7c00      	ldrb	r0, [r0, #16]
 800c0ee:	f001 f851 	bl	800d194 <RegionGetPhyParam>
 800c0f2:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800c0f4:	b243      	sxtb	r3, r0
 800c0f6:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800c0f8:	454b      	cmp	r3, r9
 800c0fa:	bfb8      	it	lt
 800c0fc:	464b      	movlt	r3, r9
 800c0fe:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800c100:	6862      	ldr	r2, [r4, #4]
 800c102:	8923      	ldrh	r3, [r4, #8]
 800c104:	429a      	cmp	r2, r3
 800c106:	d201      	bcs.n	800c10c <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800c108:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800c10c:	8961      	ldrh	r1, [r4, #10]
 800c10e:	440b      	add	r3, r1
 800c110:	429a      	cmp	r2, r3
 800c112:	d224      	bcs.n	800c15e <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800c114:	6863      	ldr	r3, [r4, #4]
 800c116:	8921      	ldrh	r1, [r4, #8]
 800c118:	8962      	ldrh	r2, [r4, #10]
 800c11a:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800c11e:	4283      	cmp	r3, r0
 800c120:	d332      	bcc.n	800c188 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800c122:	1a5b      	subs	r3, r3, r1
 800c124:	fbb3 f1f2 	udiv	r1, r3, r2
 800c128:	fb02 3311 	mls	r3, r2, r1, r3
 800c12c:	bb7b      	cbnz	r3, 800c18e <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800c12e:	9b01      	ldr	r3, [sp, #4]
 800c130:	4599      	cmp	r9, r3
 800c132:	dc03      	bgt.n	800c13c <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800c134:	7823      	ldrb	r3, [r4, #0]
 800c136:	b9eb      	cbnz	r3, 800c174 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800c138:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800c13c:	2321      	movs	r3, #33	; 0x21
 800c13e:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800c142:	9b00      	ldr	r3, [sp, #0]
 800c144:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c148:	7be3      	ldrb	r3, [r4, #15]
 800c14a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c14e:	a908      	add	r1, sp, #32
 800c150:	7c20      	ldrb	r0, [r4, #16]
 800c152:	f001 f81f 	bl	800d194 <RegionGetPhyParam>
 800c156:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800c158:	fa4f f980 	sxtb.w	r9, r0
 800c15c:	e7b4      	b.n	800c0c8 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800c15e:	230a      	movs	r3, #10
 800c160:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c164:	a908      	add	r1, sp, #32
 800c166:	7c20      	ldrb	r0, [r4, #16]
 800c168:	f001 f814 	bl	800d194 <RegionGetPhyParam>
 800c16c:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800c16e:	fa4f fa80 	sxtb.w	sl, r0
 800c172:	e7cf      	b.n	800c114 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c174:	2302      	movs	r3, #2
 800c176:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800c17a:	a903      	add	r1, sp, #12
 800c17c:	7c20      	ldrb	r0, [r4, #16]
 800c17e:	f001 f82f 	bl	800d1e0 <RegionInitDefaults>
                    nbTrans = 1;
 800c182:	f04f 0b01 	mov.w	fp, #1
 800c186:	e7d9      	b.n	800c13c <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800c188:	f8dd 9000 	ldr.w	r9, [sp]
 800c18c:	e79c      	b.n	800c0c8 <LoRaMacAdrCalcNext+0x28>
 800c18e:	f8dd 9000 	ldr.w	r9, [sp]
 800c192:	e799      	b.n	800c0c8 <LoRaMacAdrCalcNext+0x28>

0800c194 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c194:	4770      	bx	lr

0800c196 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c196:	4770      	bx	lr

0800c198 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c198:	4770      	bx	lr

0800c19a <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c19a:	4770      	bx	lr

0800c19c <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c19c:	2000      	movs	r0, #0
 800c19e:	4770      	bx	lr

0800c1a0 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1a0:	4770      	bx	lr

0800c1a2 <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1a2:	4770      	bx	lr

0800c1a4 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1a4:	4770      	bx	lr

0800c1a6 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	4770      	bx	lr

0800c1aa <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	4770      	bx	lr

0800c1ae <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	4770      	bx	lr

0800c1b2 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	4770      	bx	lr

0800c1b6 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	4770      	bx	lr

0800c1ba <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1ba:	4770      	bx	lr

0800c1bc <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1bc:	4770      	bx	lr

0800c1be <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1be:	4770      	bx	lr

0800c1c0 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1c0:	2002      	movs	r0, #2
 800c1c2:	4770      	bx	lr

0800c1c4 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1c4:	2002      	movs	r0, #2
 800c1c6:	4770      	bx	lr

0800c1c8 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1c8:	2002      	movs	r0, #2
 800c1ca:	4770      	bx	lr

0800c1cc <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1cc:	4770      	bx	lr

0800c1ce <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1ce:	2000      	movs	r0, #0
 800c1d0:	4770      	bx	lr

0800c1d2 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1d2:	4770      	bx	lr

0800c1d4 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1d4:	4770      	bx	lr

0800c1d6 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	4770      	bx	lr

0800c1da <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1da:	2000      	movs	r0, #0
 800c1dc:	4770      	bx	lr

0800c1de <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1de:	4770      	bx	lr

0800c1e0 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1e0:	4770      	bx	lr

0800c1e2 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c1e2:	4770      	bx	lr

0800c1e4 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	2b0f      	cmp	r3, #15
 800c1e8:	d804      	bhi.n	800c1f4 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800c1ea:	5cc2      	ldrb	r2, [r0, r3]
 800c1ec:	b922      	cbnz	r2, 800c1f8 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	e7f8      	b.n	800c1e6 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	4770      	bx	lr
            return false;
 800c1f8:	2000      	movs	r0, #0
}
 800c1fa:	4770      	bx	lr

0800c1fc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800c1fc:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800c1fe:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800c200:	0125      	lsls	r5, r4, #4
 800c202:	f105 0308 	add.w	r3, r5, #8
 800c206:	4d06      	ldr	r5, [pc, #24]	; (800c220 <MallocNewMacCommandSlot+0x24>)
 800c208:	441d      	add	r5, r3
 800c20a:	4628      	mov	r0, r5
 800c20c:	f7ff ffea 	bl	800c1e4 <IsSlotFree>
 800c210:	b920      	cbnz	r0, 800c21c <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800c212:	3401      	adds	r4, #1
 800c214:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800c216:	2c20      	cmp	r4, #32
 800c218:	d1f2      	bne.n	800c200 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800c21a:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800c21c:	4628      	mov	r0, r5
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	20000f60 	.word	0x20000f60

0800c224 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800c224:	b120      	cbz	r0, 800c230 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800c226:	2200      	movs	r2, #0
 800c228:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800c22a:	6042      	str	r2, [r0, #4]

    return true;
 800c22c:	2001      	movs	r0, #1
 800c22e:	4770      	bx	lr
        return false;
 800c230:	2000      	movs	r0, #0
}
 800c232:	4770      	bx	lr

0800c234 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c234:	4603      	mov	r3, r0
 800c236:	b160      	cbz	r0, 800c252 <LinkedListAdd+0x1e>
 800c238:	b169      	cbz	r1, 800c256 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800c23a:	6802      	ldr	r2, [r0, #0]
 800c23c:	b13a      	cbz	r2, 800c24e <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	b102      	cbz	r2, 800c244 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800c242:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800c244:	2200      	movs	r2, #0
 800c246:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800c248:	6059      	str	r1, [r3, #4]

    return true;
 800c24a:	2001      	movs	r0, #1
 800c24c:	4770      	bx	lr
        list->First = element;
 800c24e:	6001      	str	r1, [r0, #0]
 800c250:	e7f5      	b.n	800c23e <LinkedListAdd+0xa>
        return false;
 800c252:	2000      	movs	r0, #0
 800c254:	4770      	bx	lr
 800c256:	2000      	movs	r0, #0
}
 800c258:	4770      	bx	lr

0800c25a <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c25a:	b160      	cbz	r0, 800c276 <LinkedListGetPrevious+0x1c>
 800c25c:	b161      	cbz	r1, 800c278 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800c25e:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800c260:	4281      	cmp	r1, r0
 800c262:	d102      	bne.n	800c26a <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800c264:	2000      	movs	r0, #0
    }

    return curElement;
}
 800c266:	4770      	bx	lr
            curElement = curElement->Next;
 800c268:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d0fb      	beq.n	800c266 <LinkedListGetPrevious+0xc>
 800c26e:	6803      	ldr	r3, [r0, #0]
 800c270:	428b      	cmp	r3, r1
 800c272:	d1f9      	bne.n	800c268 <LinkedListGetPrevious+0xe>
 800c274:	4770      	bx	lr
 800c276:	4770      	bx	lr
        return NULL;
 800c278:	4608      	mov	r0, r1
 800c27a:	4770      	bx	lr

0800c27c <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c27c:	b1b8      	cbz	r0, 800c2ae <LinkedListRemove+0x32>
{
 800c27e:	b538      	push	{r3, r4, r5, lr}
 800c280:	460c      	mov	r4, r1
 800c282:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800c284:	b1a9      	cbz	r1, 800c2b2 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800c286:	f7ff ffe8 	bl	800c25a <LinkedListGetPrevious>

    if( list->First == element )
 800c28a:	682b      	ldr	r3, [r5, #0]
 800c28c:	42a3      	cmp	r3, r4
 800c28e:	d009      	beq.n	800c2a4 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800c290:	686b      	ldr	r3, [r5, #4]
 800c292:	42a3      	cmp	r3, r4
 800c294:	d009      	beq.n	800c2aa <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800c296:	b108      	cbz	r0, 800c29c <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800c29c:	2300      	movs	r3, #0
 800c29e:	6023      	str	r3, [r4, #0]

    return true;
 800c2a0:	2001      	movs	r0, #1
}
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800c2a4:	6823      	ldr	r3, [r4, #0]
 800c2a6:	602b      	str	r3, [r5, #0]
 800c2a8:	e7f2      	b.n	800c290 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800c2aa:	6068      	str	r0, [r5, #4]
 800c2ac:	e7f3      	b.n	800c296 <LinkedListRemove+0x1a>
        return false;
 800c2ae:	2000      	movs	r0, #0
}
 800c2b0:	4770      	bx	lr
        return false;
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	e7f5      	b.n	800c2a2 <LinkedListRemove+0x26>
	...

0800c2b8 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800c2b8:	2811      	cmp	r0, #17
 800c2ba:	d808      	bhi.n	800c2ce <IsSticky+0x16>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	fa03 f000 	lsl.w	r0, r3, r0
 800c2c2:	4b04      	ldr	r3, [pc, #16]	; (800c2d4 <IsSticky+0x1c>)
 800c2c4:	4218      	tst	r0, r3
 800c2c6:	bf14      	ite	ne
 800c2c8:	2001      	movne	r0, #1
 800c2ca:	2000      	moveq	r0, #0
 800c2cc:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800c2ce:	2000      	movs	r0, #0
    }
}
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	00020720 	.word	0x00020720

0800c2d8 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800c2d8:	2000      	movs	r0, #0
 800c2da:	4770      	bx	lr

0800c2dc <FreeMacCommandSlot>:
    if( slot == NULL )
 800c2dc:	b130      	cbz	r0, 800c2ec <FreeMacCommandSlot+0x10>
{
 800c2de:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800c2e0:	2210      	movs	r2, #16
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	f004 f835 	bl	8010352 <memset1>
    return true;
 800c2e8:	2001      	movs	r0, #1
}
 800c2ea:	bd08      	pop	{r3, pc}
        return false;
 800c2ec:	2000      	movs	r0, #0
}
 800c2ee:	4770      	bx	lr

0800c2f0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800c2f0:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800c2f2:	4c06      	ldr	r4, [pc, #24]	; (800c30c <LoRaMacCommandsInit+0x1c>)
 800c2f4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f004 f829 	bl	8010352 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800c300:	4620      	mov	r0, r4
 800c302:	f7ff ff8f 	bl	800c224 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c306:	2000      	movs	r0, #0
 800c308:	bd10      	pop	{r4, pc}
 800c30a:	bf00      	nop
 800c30c:	20000f60 	.word	0x20000f60

0800c310 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800c310:	b321      	cbz	r1, 800c35c <LoRaMacCommandsAddCmd+0x4c>
{
 800c312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c314:	4605      	mov	r5, r0
 800c316:	4614      	mov	r4, r2
 800c318:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800c31a:	f7ff ff6f 	bl	800c1fc <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800c31e:	4606      	mov	r6, r0
 800c320:	b1f0      	cbz	r0, 800c360 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800c322:	4601      	mov	r1, r0
 800c324:	4810      	ldr	r0, [pc, #64]	; (800c368 <LoRaMacCommandsAddCmd+0x58>)
 800c326:	f7ff ff85 	bl	800c234 <LinkedListAdd>
 800c32a:	b1d8      	cbz	r0, 800c364 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800c32c:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800c32e:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800c330:	b2a2      	uxth	r2, r4
 800c332:	4639      	mov	r1, r7
 800c334:	1d70      	adds	r0, r6, #5
 800c336:	f003 fff4 	bl	8010322 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800c33a:	4628      	mov	r0, r5
 800c33c:	f7ff ffbc 	bl	800c2b8 <IsSticky>
 800c340:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800c342:	4628      	mov	r0, r5
 800c344:	f7ff ffc8 	bl	800c2d8 <IsConfirmationRequired>
 800c348:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800c34a:	4b07      	ldr	r3, [pc, #28]	; (800c368 <LoRaMacCommandsAddCmd+0x58>)
 800c34c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c350:	4414      	add	r4, r2
 800c352:	3401      	adds	r4, #1
 800c354:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800c358:	2000      	movs	r0, #0
}
 800c35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c35c:	2001      	movs	r0, #1
}
 800c35e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800c360:	2002      	movs	r0, #2
 800c362:	e7fa      	b.n	800c35a <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800c364:	2005      	movs	r0, #5
 800c366:	e7f8      	b.n	800c35a <LoRaMacCommandsAddCmd+0x4a>
 800c368:	20000f60 	.word	0x20000f60

0800c36c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800c36c:	b1a0      	cbz	r0, 800c398 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800c36e:	b510      	push	{r4, lr}
 800c370:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800c372:	4601      	mov	r1, r0
 800c374:	480b      	ldr	r0, [pc, #44]	; (800c3a4 <LoRaMacCommandsRemoveCmd+0x38>)
 800c376:	f7ff ff81 	bl	800c27c <LinkedListRemove>
 800c37a:	b178      	cbz	r0, 800c39c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800c37c:	68a1      	ldr	r1, [r4, #8]
 800c37e:	4a09      	ldr	r2, [pc, #36]	; (800c3a4 <LoRaMacCommandsRemoveCmd+0x38>)
 800c380:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800c384:	1a5b      	subs	r3, r3, r1
 800c386:	3b01      	subs	r3, #1
 800c388:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800c38c:	4620      	mov	r0, r4
 800c38e:	f7ff ffa5 	bl	800c2dc <FreeMacCommandSlot>
 800c392:	b128      	cbz	r0, 800c3a0 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800c394:	2000      	movs	r0, #0
}
 800c396:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c398:	2001      	movs	r0, #1
}
 800c39a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800c39c:	2003      	movs	r0, #3
 800c39e:	e7fa      	b.n	800c396 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800c3a0:	2005      	movs	r0, #5
 800c3a2:	e7f8      	b.n	800c396 <LoRaMacCommandsRemoveCmd+0x2a>
 800c3a4:	20000f60 	.word	0x20000f60

0800c3a8 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c3a8:	4b06      	ldr	r3, [pc, #24]	; (800c3c4 <LoRaMacCommandsGetCmd+0x1c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800c3ac:	e000      	b.n	800c3b0 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800c3ae:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800c3b0:	b113      	cbz	r3, 800c3b8 <LoRaMacCommandsGetCmd+0x10>
 800c3b2:	791a      	ldrb	r2, [r3, #4]
 800c3b4:	4282      	cmp	r2, r0
 800c3b6:	d1fa      	bne.n	800c3ae <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800c3b8:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800c3ba:	b10b      	cbz	r3, 800c3c0 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800c3bc:	2000      	movs	r0, #0
 800c3be:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800c3c0:	2003      	movs	r0, #3
}
 800c3c2:	4770      	bx	lr
 800c3c4:	20000f60 	.word	0x20000f60

0800c3c8 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c3c8:	4b0a      	ldr	r3, [pc, #40]	; (800c3f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800c3ca:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c3cc:	b120      	cbz	r0, 800c3d8 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800c3ce:	7b03      	ldrb	r3, [r0, #12]
 800c3d0:	b11b      	cbz	r3, 800c3da <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800c3d2:	6800      	ldr	r0, [r0, #0]
 800c3d4:	e7fa      	b.n	800c3cc <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c3d6:	bd10      	pop	{r4, pc}
 800c3d8:	4770      	bx	lr
{
 800c3da:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800c3dc:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800c3de:	f7ff ffc5 	bl	800c36c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800c3e2:	4620      	mov	r0, r4
    while( curElement != NULL )
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d0f6      	beq.n	800c3d6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800c3e8:	7b03      	ldrb	r3, [r0, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d0f6      	beq.n	800c3dc <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800c3ee:	6800      	ldr	r0, [r0, #0]
 800c3f0:	e7f8      	b.n	800c3e4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800c3f2:	bf00      	nop
 800c3f4:	20000f60 	.word	0x20000f60

0800c3f8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800c3f8:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c3fa:	4b0b      	ldr	r3, [pc, #44]	; (800c428 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800c3fc:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c3fe:	e000      	b.n	800c402 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800c400:	4634      	mov	r4, r6
    while( curElement != NULL )
 800c402:	b17c      	cbz	r4, 800c424 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800c404:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800c406:	7925      	ldrb	r5, [r4, #4]
 800c408:	4628      	mov	r0, r5
 800c40a:	f7ff ff55 	bl	800c2b8 <IsSticky>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d0f6      	beq.n	800c400 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800c412:	4628      	mov	r0, r5
 800c414:	f7ff ff60 	bl	800c2d8 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800c418:	2800      	cmp	r0, #0
 800c41a:	d1f1      	bne.n	800c400 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800c41c:	4620      	mov	r0, r4
 800c41e:	f7ff ffa5 	bl	800c36c <LoRaMacCommandsRemoveCmd>
 800c422:	e7ed      	b.n	800c400 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c424:	2000      	movs	r0, #0
 800c426:	bd70      	pop	{r4, r5, r6, pc}
 800c428:	20000f60 	.word	0x20000f60

0800c42c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800c42c:	b128      	cbz	r0, 800c43a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800c42e:	4a04      	ldr	r2, [pc, #16]	; (800c440 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800c430:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800c434:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800c436:	2000      	movs	r0, #0
 800c438:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c43a:	2001      	movs	r0, #1
}
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	20000f60 	.word	0x20000f60

0800c444 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800c444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800c448:	4b16      	ldr	r3, [pc, #88]	; (800c4a4 <LoRaMacCommandsSerializeCmds+0x60>)
 800c44a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800c44c:	b32a      	cbz	r2, 800c49a <LoRaMacCommandsSerializeCmds+0x56>
 800c44e:	4607      	mov	r7, r0
 800c450:	4688      	mov	r8, r1
 800c452:	4616      	mov	r6, r2
 800c454:	b319      	cbz	r1, 800c49e <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800c456:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800c458:	b194      	cbz	r4, 800c480 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800c45a:	1a7a      	subs	r2, r7, r1
 800c45c:	68a3      	ldr	r3, [r4, #8]
 800c45e:	3301      	adds	r3, #1
 800c460:	429a      	cmp	r2, r3
 800c462:	d30d      	bcc.n	800c480 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800c464:	1c4d      	adds	r5, r1, #1
 800c466:	b2ed      	uxtb	r5, r5
 800c468:	7923      	ldrb	r3, [r4, #4]
 800c46a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800c46c:	8922      	ldrh	r2, [r4, #8]
 800c46e:	1d61      	adds	r1, r4, #5
 800c470:	1970      	adds	r0, r6, r5
 800c472:	f003 ff56 	bl	8010322 <memcpy1>
            itr += curElement->PayloadSize;
 800c476:	68a3      	ldr	r3, [r4, #8]
 800c478:	441d      	add	r5, r3
 800c47a:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800c47c:	6824      	ldr	r4, [r4, #0]
 800c47e:	e7eb      	b.n	800c458 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800c480:	b12c      	cbz	r4, 800c48e <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800c482:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800c484:	4620      	mov	r0, r4
 800c486:	f7ff ff71 	bl	800c36c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800c48a:	462c      	mov	r4, r5
 800c48c:	e7f8      	b.n	800c480 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800c48e:	4640      	mov	r0, r8
 800c490:	f7ff ffcc 	bl	800c42c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800c494:	2000      	movs	r0, #0
}
 800c496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c49a:	2001      	movs	r0, #1
 800c49c:	e7fb      	b.n	800c496 <LoRaMacCommandsSerializeCmds+0x52>
 800c49e:	2001      	movs	r0, #1
 800c4a0:	e7f9      	b.n	800c496 <LoRaMacCommandsSerializeCmds+0x52>
 800c4a2:	bf00      	nop
 800c4a4:	20000f60 	.word	0x20000f60

0800c4a8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800c4a8:	1e83      	subs	r3, r0, #2
 800c4aa:	2b11      	cmp	r3, #17
 800c4ac:	d80a      	bhi.n	800c4c4 <LoRaMacCommandsGetCmdSize+0x1c>
 800c4ae:	e8df f003 	tbb	[pc, r3]
 800c4b2:	0b23      	.short	0x0b23
 800c4b4:	110f240d 	.word	0x110f240d
 800c4b8:	09171513 	.word	0x09171513
 800c4bc:	09091909 	.word	0x09091909
 800c4c0:	211f1d1b 	.word	0x211f1d1b
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800c4c8:	2005      	movs	r0, #5
            break;
 800c4ca:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800c4cc:	2002      	movs	r0, #2
            break;
 800c4ce:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800c4d0:	2001      	movs	r0, #1
            break;
 800c4d2:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800c4d4:	2006      	movs	r0, #6
            break;
 800c4d6:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800c4d8:	2002      	movs	r0, #2
            break;
 800c4da:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800c4dc:	2002      	movs	r0, #2
            break;
 800c4de:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800c4e0:	2005      	movs	r0, #5
            break;
 800c4e2:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800c4e4:	2006      	movs	r0, #6
            break;
 800c4e6:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800c4e8:	2001      	movs	r0, #1
            break;
 800c4ea:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800c4ec:	2005      	movs	r0, #5
            break;
 800c4ee:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800c4f0:	2004      	movs	r0, #4
            break;
 800c4f2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800c4f4:	2004      	movs	r0, #4
            break;
 800c4f6:	4770      	bx	lr
            cidSize = 3;
 800c4f8:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800c4fa:	4770      	bx	lr

0800c4fc <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c4fc:	4b03      	ldr	r3, [pc, #12]	; (800c50c <IncreaseBufferPointer+0x10>)
 800c4fe:	4298      	cmp	r0, r3
 800c500:	d001      	beq.n	800c506 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800c502:	3004      	adds	r0, #4
 800c504:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c506:	4802      	ldr	r0, [pc, #8]	; (800c510 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	20001188 	.word	0x20001188
 800c510:	20001178 	.word	0x20001178

0800c514 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800c514:	b108      	cbz	r0, 800c51a <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800c516:	2000      	movs	r0, #0
 800c518:	4770      	bx	lr
        return true;
 800c51a:	2001      	movs	r0, #1
}
 800c51c:	4770      	bx	lr

0800c51e <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800c51e:	2804      	cmp	r0, #4
 800c520:	d801      	bhi.n	800c526 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800c522:	2000      	movs	r0, #0
 800c524:	4770      	bx	lr
        return true;
 800c526:	2001      	movs	r0, #1
}
 800c528:	4770      	bx	lr
	...

0800c52c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	4606      	mov	r6, r0
 800c530:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c532:	4b0d      	ldr	r3, [pc, #52]	; (800c568 <GetElement+0x3c>)
 800c534:	f893 7020 	ldrb.w	r7, [r3, #32]
 800c538:	4638      	mov	r0, r7
 800c53a:	f7ff ffeb 	bl	800c514 <IsListEmpty>
 800c53e:	b970      	cbnz	r0, 800c55e <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800c540:	2500      	movs	r5, #0
 800c542:	42af      	cmp	r7, r5
 800c544:	d909      	bls.n	800c55a <GetElement+0x2e>
    {
        if( element->Request == request )
 800c546:	7823      	ldrb	r3, [r4, #0]
 800c548:	42b3      	cmp	r3, r6
 800c54a:	d00a      	beq.n	800c562 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800c54c:	4620      	mov	r0, r4
 800c54e:	f7ff ffd5 	bl	800c4fc <IncreaseBufferPointer>
 800c552:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800c554:	3501      	adds	r5, #1
 800c556:	b2ed      	uxtb	r5, r5
 800c558:	e7f3      	b.n	800c542 <GetElement+0x16>
    }

    return NULL;
 800c55a:	2000      	movs	r0, #0
}
 800c55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800c55e:	2000      	movs	r0, #0
 800c560:	e7fc      	b.n	800c55c <GetElement+0x30>
            return element;
 800c562:	4620      	mov	r0, r4
 800c564:	e7fa      	b.n	800c55c <GetElement+0x30>
 800c566:	bf00      	nop
 800c568:	2000116c 	.word	0x2000116c

0800c56c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800c56c:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800c56e:	4c08      	ldr	r4, [pc, #32]	; (800c590 <LoRaMacConfirmQueueInit+0x24>)
 800c570:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800c572:	2300      	movs	r3, #0
 800c574:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c578:	f104 000c 	add.w	r0, r4, #12
 800c57c:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800c57e:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800c580:	2214      	movs	r2, #20
 800c582:	21ff      	movs	r1, #255	; 0xff
 800c584:	f003 fee5 	bl	8010352 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800c58e:	bd10      	pop	{r4, pc}
 800c590:	2000116c 	.word	0x2000116c

0800c594 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c598:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <LoRaMacConfirmQueueAdd+0x44>)
 800c59a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c59e:	f7ff ffbe 	bl	800c51e <IsListFull>
 800c5a2:	b9b8      	cbnz	r0, 800c5d4 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800c5a4:	4c0c      	ldr	r4, [pc, #48]	; (800c5d8 <LoRaMacConfirmQueueAdd+0x44>)
 800c5a6:	68a3      	ldr	r3, [r4, #8]
 800c5a8:	782a      	ldrb	r2, [r5, #0]
 800c5aa:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800c5ac:	68a3      	ldr	r3, [r4, #8]
 800c5ae:	786a      	ldrb	r2, [r5, #1]
 800c5b0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800c5b2:	68a3      	ldr	r3, [r4, #8]
 800c5b4:	78ea      	ldrb	r2, [r5, #3]
 800c5b6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800c5b8:	68a3      	ldr	r3, [r4, #8]
 800c5ba:	78aa      	ldrb	r2, [r5, #2]
 800c5bc:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800c5be:	f894 3020 	ldrb.w	r3, [r4, #32]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800c5c8:	68a0      	ldr	r0, [r4, #8]
 800c5ca:	f7ff ff97 	bl	800c4fc <IncreaseBufferPointer>
 800c5ce:	60a0      	str	r0, [r4, #8]

    return true;
 800c5d0:	2001      	movs	r0, #1
}
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	e7fc      	b.n	800c5d2 <LoRaMacConfirmQueueAdd+0x3e>
 800c5d8:	2000116c 	.word	0x2000116c

0800c5dc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800c5dc:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c5de:	4b09      	ldr	r3, [pc, #36]	; (800c604 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800c5e0:	f893 4020 	ldrb.w	r4, [r3, #32]
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f7ff ff95 	bl	800c514 <IsListEmpty>
 800c5ea:	b948      	cbnz	r0, 800c600 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800c5ec:	4d05      	ldr	r5, [pc, #20]	; (800c604 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800c5ee:	3c01      	subs	r4, #1
 800c5f0:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800c5f4:	6868      	ldr	r0, [r5, #4]
 800c5f6:	f7ff ff81 	bl	800c4fc <IncreaseBufferPointer>
 800c5fa:	6068      	str	r0, [r5, #4]

    return true;
 800c5fc:	2001      	movs	r0, #1
}
 800c5fe:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800c600:	2000      	movs	r0, #0
 800c602:	e7fc      	b.n	800c5fe <LoRaMacConfirmQueueRemoveFirst+0x22>
 800c604:	2000116c 	.word	0x2000116c

0800c608 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4605      	mov	r5, r0
 800c60c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c60e:	4b08      	ldr	r3, [pc, #32]	; (800c630 <LoRaMacConfirmQueueSetStatus+0x28>)
 800c610:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c614:	f7ff ff7e 	bl	800c514 <IsListEmpty>
 800c618:	b948      	cbnz	r0, 800c62e <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c61a:	4b05      	ldr	r3, [pc, #20]	; (800c630 <LoRaMacConfirmQueueSetStatus+0x28>)
 800c61c:	689a      	ldr	r2, [r3, #8]
 800c61e:	6859      	ldr	r1, [r3, #4]
 800c620:	4620      	mov	r0, r4
 800c622:	f7ff ff83 	bl	800c52c <GetElement>
        if( element != NULL )
 800c626:	b110      	cbz	r0, 800c62e <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800c628:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800c62a:	2201      	movs	r2, #1
 800c62c:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800c62e:	bd38      	pop	{r3, r4, r5, pc}
 800c630:	2000116c 	.word	0x2000116c

0800c634 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800c634:	b510      	push	{r4, lr}
 800c636:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c638:	4b09      	ldr	r3, [pc, #36]	; (800c660 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800c63a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c63e:	f7ff ff69 	bl	800c514 <IsListEmpty>
 800c642:	b940      	cbnz	r0, 800c656 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c644:	4b06      	ldr	r3, [pc, #24]	; (800c660 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800c646:	689a      	ldr	r2, [r3, #8]
 800c648:	6859      	ldr	r1, [r3, #4]
 800c64a:	4620      	mov	r0, r4
 800c64c:	f7ff ff6e 	bl	800c52c <GetElement>
        if( element != NULL )
 800c650:	b118      	cbz	r0, 800c65a <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800c652:	7840      	ldrb	r0, [r0, #1]
 800c654:	e000      	b.n	800c658 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c656:	2001      	movs	r0, #1
}
 800c658:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c65a:	2001      	movs	r0, #1
 800c65c:	e7fc      	b.n	800c658 <LoRaMacConfirmQueueGetStatus+0x24>
 800c65e:	bf00      	nop
 800c660:	2000116c 	.word	0x2000116c

0800c664 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800c668:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800c66a:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800c66c:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800c670:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c674:	f7ff ff4e 	bl	800c514 <IsListEmpty>
 800c678:	b150      	cbz	r0, 800c690 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800c67a:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800c67c:	2301      	movs	r3, #1
 800c67e:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800c680:	4620      	mov	r0, r4
 800c682:	f7ff ff3b 	bl	800c4fc <IncreaseBufferPointer>
 800c686:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800c688:	4b04      	ldr	r3, [pc, #16]	; (800c69c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	4283      	cmp	r3, r0
 800c68e:	d0f4      	beq.n	800c67a <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800c690:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800c692:	78e3      	ldrb	r3, [r4, #3]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1f3      	bne.n	800c680 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800c698:	e7f0      	b.n	800c67c <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800c69a:	bf00      	nop
 800c69c:	2000116c 	.word	0x2000116c

0800c6a0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800c6a0:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800c6a2:	4b04      	ldr	r3, [pc, #16]	; (800c6b4 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800c6a4:	689a      	ldr	r2, [r3, #8]
 800c6a6:	6859      	ldr	r1, [r3, #4]
 800c6a8:	f7ff ff40 	bl	800c52c <GetElement>
 800c6ac:	b100      	cbz	r0, 800c6b0 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800c6ae:	2001      	movs	r0, #1
    }
    return false;
}
 800c6b0:	bd08      	pop	{r3, pc}
 800c6b2:	bf00      	nop
 800c6b4:	2000116c 	.word	0x2000116c

0800c6b8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800c6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800c6be:	4b19      	ldr	r3, [pc, #100]	; (800c724 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800c6c0:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800c6c4:	2204      	movs	r2, #4
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	eb0d 0002 	add.w	r0, sp, r2
 800c6cc:	f003 fe41 	bl	8010352 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800c6d0:	2400      	movs	r4, #0
 800c6d2:	e00d      	b.n	800c6f0 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800c6d4:	781a      	ldrb	r2, [r3, #0]
 800c6d6:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800c6da:	785a      	ldrb	r2, [r3, #1]
 800c6dc:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800c6e0:	78db      	ldrb	r3, [r3, #3]
 800c6e2:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800c6e6:	f7ff ff79 	bl	800c5dc <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800c6ea:	b1a5      	cbz	r5, 800c716 <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800c6ec:	3401      	adds	r4, #1
 800c6ee:	b2e4      	uxtb	r4, r4
 800c6f0:	42bc      	cmp	r4, r7
 800c6f2:	d214      	bcs.n	800c71e <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800c6f4:	4b0b      	ldr	r3, [pc, #44]	; (800c724 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	7812      	ldrb	r2, [r2, #0]
 800c6fa:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	7852      	ldrb	r2, [r2, #1]
 800c700:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800c706:	2d00      	cmp	r5, #0
 800c708:	d0e4      	beq.n	800c6d4 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800c70a:	4b06      	ldr	r3, [pc, #24]	; (800c724 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	4630      	mov	r0, r6
 800c712:	4798      	blx	r3
 800c714:	e7e7      	b.n	800c6e6 <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800c716:	a801      	add	r0, sp, #4
 800c718:	f7ff ff3c 	bl	800c594 <LoRaMacConfirmQueueAdd>
 800c71c:	e7e6      	b.n	800c6ec <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800c71e:	b003      	add	sp, #12
 800c720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c722:	bf00      	nop
 800c724:	2000116c 	.word	0x2000116c

0800c728 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800c728:	4b01      	ldr	r3, [pc, #4]	; (800c730 <LoRaMacConfirmQueueGetCnt+0x8>)
 800c72a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c72e:	4770      	bx	lr
 800c730:	2000116c 	.word	0x2000116c

0800c734 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800c734:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800c736:	4b03      	ldr	r3, [pc, #12]	; (800c744 <LoRaMacConfirmQueueIsFull+0x10>)
 800c738:	f893 0020 	ldrb.w	r0, [r3, #32]
 800c73c:	f7ff feef 	bl	800c51e <IsListFull>
    }
    else
    {
        return false;
    }
}
 800c740:	bd08      	pop	{r3, pc}
 800c742:	bf00      	nop
 800c744:	2000116c 	.word	0x2000116c

0800c748 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800c748:	b410      	push	{r4}
 800c74a:	9c01      	ldr	r4, [sp, #4]
 800c74c:	9902      	ldr	r1, [sp, #8]
 800c74e:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800c750:	b1da      	cbz	r2, 800c78a <PrepareB0+0x42>
 800c752:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800c754:	2049      	movs	r0, #73	; 0x49
 800c756:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800c758:	2000      	movs	r0, #0
 800c75a:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800c75c:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800c75e:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800c760:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800c762:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800c764:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800c766:	0a23      	lsrs	r3, r4, #8
 800c768:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c76a:	0c23      	lsrs	r3, r4, #16
 800c76c:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c76e:	0e24      	lsrs	r4, r4, #24
 800c770:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800c772:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800c774:	0a0b      	lsrs	r3, r1, #8
 800c776:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c778:	0c0b      	lsrs	r3, r1, #16
 800c77a:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c77c:	0e09      	lsrs	r1, r1, #24
 800c77e:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800c780:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800c782:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c786:	bc10      	pop	{r4}
 800c788:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c78a:	2009      	movs	r0, #9
 800c78c:	e7fb      	b.n	800c786 <PrepareB0+0x3e>
	...

0800c790 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c790:	2300      	movs	r3, #0
 800c792:	2b01      	cmp	r3, #1
 800c794:	d80e      	bhi.n	800c7b4 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800c796:	469c      	mov	ip, r3
 800c798:	4a07      	ldr	r2, [pc, #28]	; (800c7b8 <GetKeyAddrItem+0x28>)
 800c79a:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800c79e:	4282      	cmp	r2, r0
 800c7a0:	d002      	beq.n	800c7a8 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	e7f4      	b.n	800c792 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800c7a8:	4b03      	ldr	r3, [pc, #12]	; (800c7b8 <GetKeyAddrItem+0x28>)
 800c7aa:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800c7ae:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800c7b4:	200b      	movs	r0, #11
}
 800c7b6:	4770      	bx	lr
 800c7b8:	200000f0 	.word	0x200000f0

0800c7bc <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800c7bc:	b1f1      	cbz	r1, 800c7fc <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800c7be:	3801      	subs	r0, #1
 800c7c0:	2803      	cmp	r0, #3
 800c7c2:	d81d      	bhi.n	800c800 <GetLastFcntDown+0x44>
 800c7c4:	e8df f000 	tbb	[pc, r0]
 800c7c8:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800c7cc:	4a0d      	ldr	r2, [pc, #52]	; (800c804 <GetLastFcntDown+0x48>)
 800c7ce:	6812      	ldr	r2, [r2, #0]
 800c7d0:	6912      	ldr	r2, [r2, #16]
 800c7d2:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800c7d4:	2000      	movs	r0, #0
            break;
 800c7d6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800c7d8:	4a0a      	ldr	r2, [pc, #40]	; (800c804 <GetLastFcntDown+0x48>)
 800c7da:	6812      	ldr	r2, [r2, #0]
 800c7dc:	6952      	ldr	r2, [r2, #20]
 800c7de:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c7e0:	2000      	movs	r0, #0
            break;
 800c7e2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800c7e4:	4a07      	ldr	r2, [pc, #28]	; (800c804 <GetLastFcntDown+0x48>)
 800c7e6:	6812      	ldr	r2, [r2, #0]
 800c7e8:	6992      	ldr	r2, [r2, #24]
 800c7ea:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c7ec:	2000      	movs	r0, #0
            break;
 800c7ee:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800c7f0:	4a04      	ldr	r2, [pc, #16]	; (800c804 <GetLastFcntDown+0x48>)
 800c7f2:	6812      	ldr	r2, [r2, #0]
 800c7f4:	69d2      	ldr	r2, [r2, #28]
 800c7f6:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800c7f8:	2000      	movs	r0, #0
            break;
 800c7fa:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c7fc:	2009      	movs	r0, #9
 800c7fe:	4770      	bx	lr
    switch( fCntID )
 800c800:	2005      	movs	r0, #5
}
 800c802:	4770      	bx	lr
 800c804:	20001190 	.word	0x20001190

0800c808 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800c808:	b510      	push	{r4, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800c80e:	2300      	movs	r3, #0
 800c810:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800c812:	a901      	add	r1, sp, #4
 800c814:	f7ff ffd2 	bl	800c7bc <GetLastFcntDown>
 800c818:	b948      	cbnz	r0, 800c82e <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800c81a:	9b01      	ldr	r3, [sp, #4]
 800c81c:	42a3      	cmp	r3, r4
 800c81e:	d309      	bcc.n	800c834 <CheckFCntDown+0x2c>
 800c820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c824:	d001      	beq.n	800c82a <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800c826:	2000      	movs	r0, #0
 800c828:	e002      	b.n	800c830 <CheckFCntDown+0x28>
        return true;
 800c82a:	2001      	movs	r0, #1
 800c82c:	e000      	b.n	800c830 <CheckFCntDown+0x28>
        return false;
 800c82e:	2000      	movs	r0, #0
    }
}
 800c830:	b002      	add	sp, #8
 800c832:	bd10      	pop	{r4, pc}
        return true;
 800c834:	2001      	movs	r0, #1
 800c836:	e7fb      	b.n	800c830 <CheckFCntDown+0x28>

0800c838 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800c838:	3801      	subs	r0, #1
 800c83a:	2803      	cmp	r0, #3
 800c83c:	d815      	bhi.n	800c86a <UpdateFCntDown+0x32>
 800c83e:	e8df f000 	tbb	[pc, r0]
 800c842:	0702      	.short	0x0702
 800c844:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800c846:	4b09      	ldr	r3, [pc, #36]	; (800c86c <UpdateFCntDown+0x34>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800c84c:	6219      	str	r1, [r3, #32]
            break;
 800c84e:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800c850:	4b06      	ldr	r3, [pc, #24]	; (800c86c <UpdateFCntDown+0x34>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800c856:	6219      	str	r1, [r3, #32]
            break;
 800c858:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800c85a:	4b04      	ldr	r3, [pc, #16]	; (800c86c <UpdateFCntDown+0x34>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800c860:	6219      	str	r1, [r3, #32]
            break;
 800c862:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800c864:	4b01      	ldr	r3, [pc, #4]	; (800c86c <UpdateFCntDown+0x34>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800c86a:	4770      	bx	lr
 800c86c:	20001190 	.word	0x20001190

0800c870 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800c870:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <ResetFCnts+0x2c>)
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	2300      	movs	r3, #0
 800c876:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c878:	f04f 31ff 	mov.w	r1, #4294967295
 800c87c:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c87e:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800c880:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800c882:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c884:	2b00      	cmp	r3, #0
 800c886:	dd00      	ble.n	800c88a <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800c888:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800c88a:	1d99      	adds	r1, r3, #6
 800c88c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800c890:	f04f 30ff 	mov.w	r0, #4294967295
 800c894:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c896:	3301      	adds	r3, #1
 800c898:	e7f4      	b.n	800c884 <ResetFCnts+0x14>
 800c89a:	bf00      	nop
 800c89c:	20001190 	.word	0x20001190

0800c8a0 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800c8a0:	4b03      	ldr	r3, [pc, #12]	; (800c8b0 <IsJoinNonce10xOk+0x10>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800c8a6:	4283      	cmp	r3, r0
 800c8a8:	bf2c      	ite	cs
 800c8aa:	2000      	movcs	r0, #0
 800c8ac:	2001      	movcc	r0, #1
 800c8ae:	4770      	bx	lr
 800c8b0:	20001190 	.word	0x20001190

0800c8b4 <ComputeCmacB0>:
{
 800c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	b088      	sub	sp, #32
 800c8ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800c8bc:	b1f0      	cbz	r0, 800c8fc <ComputeCmacB0+0x48>
 800c8be:	460c      	mov	r4, r1
 800c8c0:	4615      	mov	r5, r2
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	4680      	mov	r8, r0
 800c8c6:	b1de      	cbz	r6, 800c900 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c8c8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c8cc:	d81a      	bhi.n	800c904 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800c8ce:	af04      	add	r7, sp, #16
 800c8d0:	9702      	str	r7, [sp, #8]
 800c8d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8d4:	9301      	str	r3, [sp, #4]
 800c8d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800c8de:	4629      	mov	r1, r5
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f7ff ff31 	bl	800c748 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c8e6:	9600      	str	r6, [sp, #0]
 800c8e8:	462b      	mov	r3, r5
 800c8ea:	4622      	mov	r2, r4
 800c8ec:	4641      	mov	r1, r8
 800c8ee:	4638      	mov	r0, r7
 800c8f0:	f003 fad2 	bl	800fe98 <SecureElementComputeAesCmac>
 800c8f4:	b940      	cbnz	r0, 800c908 <ComputeCmacB0+0x54>
}
 800c8f6:	b008      	add	sp, #32
 800c8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c8fc:	2009      	movs	r0, #9
 800c8fe:	e7fa      	b.n	800c8f6 <ComputeCmacB0+0x42>
 800c900:	2009      	movs	r0, #9
 800c902:	e7f8      	b.n	800c8f6 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c904:	200d      	movs	r0, #13
 800c906:	e7f6      	b.n	800c8f6 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c908:	200e      	movs	r0, #14
 800c90a:	e7f4      	b.n	800c8f6 <ComputeCmacB0+0x42>

0800c90c <DeriveSessionKey10x>:
{
 800c90c:	b510      	push	{r4, lr}
 800c90e:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800c910:	2400      	movs	r4, #0
 800c912:	9400      	str	r4, [sp, #0]
 800c914:	9401      	str	r4, [sp, #4]
 800c916:	9402      	str	r4, [sp, #8]
 800c918:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800c91a:	2808      	cmp	r0, #8
 800c91c:	d003      	beq.n	800c926 <DeriveSessionKey10x+0x1a>
 800c91e:	2809      	cmp	r0, #9
 800c920:	d025      	beq.n	800c96e <DeriveSessionKey10x+0x62>
 800c922:	200a      	movs	r0, #10
 800c924:	e021      	b.n	800c96a <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800c926:	2401      	movs	r4, #1
 800c928:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800c92c:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800c930:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c934:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800c938:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800c93c:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800c940:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800c944:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800c948:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800c94c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800c950:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800c954:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800c958:	0a1b      	lsrs	r3, r3, #8
 800c95a:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c95e:	4602      	mov	r2, r0
 800c960:	2101      	movs	r1, #1
 800c962:	4668      	mov	r0, sp
 800c964:	f003 fb36 	bl	800ffd4 <SecureElementDeriveAndStoreKey>
 800c968:	b928      	cbnz	r0, 800c976 <DeriveSessionKey10x+0x6a>
}
 800c96a:	b004      	add	sp, #16
 800c96c:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800c96e:	2402      	movs	r4, #2
 800c970:	f88d 4000 	strb.w	r4, [sp]
            break;
 800c974:	e7da      	b.n	800c92c <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c976:	200e      	movs	r0, #14
 800c978:	e7f7      	b.n	800c96a <DeriveSessionKey10x+0x5e>

0800c97a <PayloadEncrypt>:
{
 800c97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c97e:	b088      	sub	sp, #32
 800c980:	4690      	mov	r8, r2
 800c982:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800c984:	2800      	cmp	r0, #0
 800c986:	d052      	beq.n	800ca2e <PayloadEncrypt+0xb4>
 800c988:	460d      	mov	r5, r1
 800c98a:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800c98c:	2600      	movs	r6, #0
 800c98e:	9604      	str	r6, [sp, #16]
 800c990:	9605      	str	r6, [sp, #20]
 800c992:	9606      	str	r6, [sp, #24]
 800c994:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800c996:	9600      	str	r6, [sp, #0]
 800c998:	9601      	str	r6, [sp, #4]
 800c99a:	9602      	str	r6, [sp, #8]
 800c99c:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800c99e:	2701      	movs	r7, #1
 800c9a0:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800c9a4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800c9a8:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800c9ac:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800c9b0:	0a19      	lsrs	r1, r3, #8
 800c9b2:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c9b6:	0c19      	lsrs	r1, r3, #16
 800c9b8:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c9bc:	0e1b      	lsrs	r3, r3, #24
 800c9be:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800c9c2:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800c9c6:	0a13      	lsrs	r3, r2, #8
 800c9c8:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c9cc:	0c13      	lsrs	r3, r2, #16
 800c9ce:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c9d2:	0e12      	lsrs	r2, r2, #24
 800c9d4:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800c9d8:	e014      	b.n	800ca04 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c9da:	18f2      	adds	r2, r6, r3
 800c9dc:	5ca0      	ldrb	r0, [r4, r2]
 800c9de:	f103 0120 	add.w	r1, r3, #32
 800c9e2:	4469      	add	r1, sp
 800c9e4:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800c9e8:	4048      	eors	r0, r1
 800c9ea:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	462a      	mov	r2, r5
 800c9f2:	2d10      	cmp	r5, #16
 800c9f4:	bfa8      	it	ge
 800c9f6:	2210      	movge	r2, #16
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	dbee      	blt.n	800c9da <PayloadEncrypt+0x60>
        size -= 16;
 800c9fc:	3d10      	subs	r5, #16
 800c9fe:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800ca00:	3610      	adds	r6, #16
 800ca02:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800ca04:	2d00      	cmp	r5, #0
 800ca06:	dd0e      	ble.n	800ca26 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800ca08:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800ca0c:	3701      	adds	r7, #1
 800ca0e:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800ca10:	ab04      	add	r3, sp, #16
 800ca12:	4642      	mov	r2, r8
 800ca14:	2110      	movs	r1, #16
 800ca16:	4668      	mov	r0, sp
 800ca18:	f003 fa63 	bl	800fee2 <SecureElementAesEncrypt>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d0e6      	beq.n	800c9f0 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ca22:	200e      	movs	r0, #14
 800ca24:	e000      	b.n	800ca28 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800ca26:	2000      	movs	r0, #0
}
 800ca28:	b008      	add	sp, #32
 800ca2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ca2e:	2009      	movs	r0, #9
 800ca30:	e7fa      	b.n	800ca28 <PayloadEncrypt+0xae>

0800ca32 <VerifyCmacB0>:
    if( msg == 0 )
 800ca32:	b368      	cbz	r0, 800ca90 <VerifyCmacB0+0x5e>
{
 800ca34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca38:	b0c8      	sub	sp, #288	; 0x120
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	4615      	mov	r5, r2
 800ca3e:	461e      	mov	r6, r3
 800ca40:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ca42:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ca46:	d825      	bhi.n	800ca94 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800ca48:	af04      	add	r7, sp, #16
 800ca4a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800ca4e:	2100      	movs	r1, #0
 800ca50:	4638      	mov	r0, r7
 800ca52:	f003 fc7e 	bl	8010352 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ca56:	9702      	str	r7, [sp, #8]
 800ca58:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800ca5a:	9301      	str	r3, [sp, #4]
 800ca5c:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800ca64:	4632      	mov	r2, r6
 800ca66:	4629      	mov	r1, r5
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f7ff fe6d 	bl	800c748 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800ca6e:	4622      	mov	r2, r4
 800ca70:	4641      	mov	r1, r8
 800ca72:	a808      	add	r0, sp, #32
 800ca74:	f003 fc55 	bl	8010322 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800ca78:	462b      	mov	r3, r5
 800ca7a:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800ca7c:	f104 0110 	add.w	r1, r4, #16
 800ca80:	4638      	mov	r0, r7
 800ca82:	f003 fa18 	bl	800feb6 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800ca86:	b130      	cbz	r0, 800ca96 <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800ca88:	2801      	cmp	r0, #1
 800ca8a:	d004      	beq.n	800ca96 <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ca8c:	200e      	movs	r0, #14
 800ca8e:	e002      	b.n	800ca96 <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ca90:	2009      	movs	r0, #9
}
 800ca92:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ca94:	200d      	movs	r0, #13
}
 800ca96:	b048      	add	sp, #288	; 0x120
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca9c <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800ca9c:	b188      	cbz	r0, 800cac2 <LoRaMacCryptoInit+0x26>
{
 800ca9e:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800caa0:	4c09      	ldr	r4, [pc, #36]	; (800cac8 <LoRaMacCryptoInit+0x2c>)
 800caa2:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800caa4:	2228      	movs	r2, #40	; 0x28
 800caa6:	2100      	movs	r1, #0
 800caa8:	f003 fc53 	bl	8010352 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800caac:	6823      	ldr	r3, [r4, #0]
 800caae:	2201      	movs	r2, #1
 800cab0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800cab2:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800cab4:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800cab6:	2400      	movs	r4, #0
 800cab8:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800caba:	f7ff fed9 	bl	800c870 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800cabe:	4620      	mov	r0, r4
}
 800cac0:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800cac2:	2008      	movs	r0, #8
}
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	20001190 	.word	0x20001190

0800cacc <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800cacc:	4b02      	ldr	r3, [pc, #8]	; (800cad8 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800cad2:	2000      	movs	r0, #0
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	20001190 	.word	0x20001190

0800cadc <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800cadc:	b130      	cbz	r0, 800caec <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800cade:	4b04      	ldr	r3, [pc, #16]	; (800caf0 <LoRaMacCryptoGetFCntUp+0x14>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	3301      	adds	r3, #1
 800cae6:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800cae8:	2000      	movs	r0, #0
 800caea:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800caec:	2009      	movs	r0, #9
}
 800caee:	4770      	bx	lr
 800caf0:	20001190 	.word	0x20001190

0800caf4 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800caf4:	b530      	push	{r4, r5, lr}
 800caf6:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800cafc:	b1f2      	cbz	r2, 800cb3c <LoRaMacCryptoGetFCntDown+0x48>
 800cafe:	460c      	mov	r4, r1
 800cb00:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800cb02:	a901      	add	r1, sp, #4
 800cb04:	f7ff fe5a 	bl	800c7bc <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800cb08:	b948      	cbnz	r0, 800cb1e <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800cb0a:	9b01      	ldr	r3, [sp, #4]
 800cb0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb10:	d007      	beq.n	800cb22 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800cb12:	b29a      	uxth	r2, r3
 800cb14:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800cb16:	2a00      	cmp	r2, #0
 800cb18:	dd05      	ble.n	800cb26 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800cb1a:	4413      	add	r3, r2
 800cb1c:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cb1e:	b003      	add	sp, #12
 800cb20:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800cb22:	602c      	str	r4, [r5, #0]
 800cb24:	e7fb      	b.n	800cb1e <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800cb26:	b132      	cbz	r2, 800cb36 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800cb28:	0c1b      	lsrs	r3, r3, #16
 800cb2a:	041b      	lsls	r3, r3, #16
 800cb2c:	4423      	add	r3, r4
 800cb2e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800cb32:	602b      	str	r3, [r5, #0]
 800cb34:	e7f3      	b.n	800cb1e <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800cb36:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800cb38:	2007      	movs	r0, #7
 800cb3a:	e7f0      	b.n	800cb1e <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cb3c:	2009      	movs	r0, #9
 800cb3e:	e7ee      	b.n	800cb1e <LoRaMacCryptoGetFCntDown+0x2a>

0800cb40 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800cb40:	4601      	mov	r1, r0
 800cb42:	b908      	cbnz	r0, 800cb48 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cb44:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cb46:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cb48:	2300      	movs	r3, #0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	dd01      	ble.n	800cb52 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800cb4e:	2000      	movs	r0, #0
 800cb50:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800cb52:	4a07      	ldr	r2, [pc, #28]	; (800cb70 <LoRaMacCryptoSetMulticastReference+0x30>)
 800cb54:	6812      	ldr	r2, [r2, #0]
 800cb56:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800cb5a:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800cb5e:	f103 0c06 	add.w	ip, r3, #6
 800cb62:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800cb66:	3204      	adds	r2, #4
 800cb68:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	e7ed      	b.n	800cb4a <LoRaMacCryptoSetMulticastReference+0xa>
 800cb6e:	bf00      	nop
 800cb70:	20001190 	.word	0x20001190

0800cb74 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800cb74:	b1d8      	cbz	r0, 800cbae <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800cb76:	b510      	push	{r4, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800cb7c:	4b0f      	ldr	r3, [pc, #60]	; (800cbbc <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	8893      	ldrh	r3, [r2, #4]
 800cb82:	3301      	adds	r3, #1
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800cb88:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cb8a:	f000 fa32 	bl	800cff2 <LoRaMacSerializerJoinRequest>
 800cb8e:	b980      	cbnz	r0, 800cbb2 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800cb90:	4623      	mov	r3, r4
 800cb92:	f853 1b18 	ldr.w	r1, [r3], #24
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	2301      	movs	r3, #1
 800cb9a:	2213      	movs	r2, #19
 800cb9c:	f003 f97c 	bl	800fe98 <SecureElementComputeAesCmac>
 800cba0:	b950      	cbnz	r0, 800cbb8 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cba2:	4620      	mov	r0, r4
 800cba4:	f000 fa25 	bl	800cff2 <LoRaMacSerializerJoinRequest>
 800cba8:	b120      	cbz	r0, 800cbb4 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cbaa:	2010      	movs	r0, #16
 800cbac:	e002      	b.n	800cbb4 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cbae:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cbb0:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cbb2:	2010      	movs	r0, #16
}
 800cbb4:	b002      	add	sp, #8
 800cbb6:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cbb8:	200e      	movs	r0, #14
 800cbba:	e7fb      	b.n	800cbb4 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800cbbc:	20001190 	.word	0x20001190

0800cbc0 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d036      	beq.n	800cc32 <LoRaMacCryptoSecureMessage+0x72>
{
 800cbc4:	b530      	push	{r4, r5, lr}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	4604      	mov	r4, r0
 800cbca:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800cbcc:	4b1d      	ldr	r3, [pc, #116]	; (800cc44 <LoRaMacCryptoSecureMessage+0x84>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	4283      	cmp	r3, r0
 800cbd4:	d82f      	bhi.n	800cc36 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800cbd6:	f895 2020 	ldrb.w	r2, [r5, #32]
 800cbda:	b342      	cbz	r2, 800cc2e <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800cbdc:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800cbde:	42a3      	cmp	r3, r4
 800cbe0:	d209      	bcs.n	800cbf6 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800cbe2:	9401      	str	r4, [sp, #4]
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	68ab      	ldr	r3, [r5, #8]
 800cbea:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800cbee:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800cbf0:	f7ff fec3 	bl	800c97a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cbf4:	bb10      	cbnz	r0, 800cc3c <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f000 fa31 	bl	800d05e <LoRaMacSerializerData>
 800cbfc:	b9e8      	cbnz	r0, 800cc3a <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800cbfe:	7929      	ldrb	r1, [r5, #4]
 800cc00:	3904      	subs	r1, #4
 800cc02:	462b      	mov	r3, r5
 800cc04:	f853 0b2c 	ldr.w	r0, [r3], #44
 800cc08:	9303      	str	r3, [sp, #12]
 800cc0a:	9402      	str	r4, [sp, #8]
 800cc0c:	68ab      	ldr	r3, [r5, #8]
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	2300      	movs	r3, #0
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	2208      	movs	r2, #8
 800cc16:	b289      	uxth	r1, r1
 800cc18:	f7ff fe4c 	bl	800c8b4 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc1c:	b970      	cbnz	r0, 800cc3c <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800cc1e:	4628      	mov	r0, r5
 800cc20:	f000 fa1d 	bl	800d05e <LoRaMacSerializerData>
 800cc24:	b960      	cbnz	r0, 800cc40 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800cc26:	4b07      	ldr	r3, [pc, #28]	; (800cc44 <LoRaMacCryptoSecureMessage+0x84>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800cc2c:	e006      	b.n	800cc3c <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800cc2e:	2208      	movs	r2, #8
 800cc30:	e7d5      	b.n	800cbde <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cc32:	2009      	movs	r0, #9
}
 800cc34:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800cc36:	2006      	movs	r0, #6
 800cc38:	e000      	b.n	800cc3c <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cc3a:	2010      	movs	r0, #16
}
 800cc3c:	b005      	add	sp, #20
 800cc3e:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800cc40:	2010      	movs	r0, #16
 800cc42:	e7fb      	b.n	800cc3c <LoRaMacCryptoSecureMessage+0x7c>
 800cc44:	20001190 	.word	0x20001190

0800cc48 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800cc48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc4c:	b087      	sub	sp, #28
 800cc4e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800cc50:	2e00      	cmp	r6, #0
 800cc52:	d049      	beq.n	800cce8 <LoRaMacCryptoUnsecureMessage+0xa0>
 800cc54:	4605      	mov	r5, r0
 800cc56:	4688      	mov	r8, r1
 800cc58:	4617      	mov	r7, r2
 800cc5a:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	4610      	mov	r0, r2
 800cc60:	f7ff fdd2 	bl	800c808 <CheckFCntDown>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d041      	beq.n	800ccec <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800cc68:	4630      	mov	r0, r6
 800cc6a:	f000 f963 	bl	800cf34 <LoRaMacParserData>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d141      	bne.n	800ccf6 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800cc72:	a905      	add	r1, sp, #20
 800cc74:	4628      	mov	r0, r5
 800cc76:	f7ff fd8b 	bl	800c790 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d136      	bne.n	800ccee <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800cc80:	9b05      	ldr	r3, [sp, #20]
 800cc82:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800cc86:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800cc88:	68b3      	ldr	r3, [r6, #8]
 800cc8a:	4543      	cmp	r3, r8
 800cc8c:	d135      	bne.n	800ccfa <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800cc8e:	7b33      	ldrb	r3, [r6, #12]
 800cc90:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800cc94:	491a      	ldr	r1, [pc, #104]	; (800cd00 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800cc96:	6809      	ldr	r1, [r1, #0]
 800cc98:	7889      	ldrb	r1, [r1, #2]
 800cc9a:	b901      	cbnz	r1, 800cc9e <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800cc9c:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800cc9e:	7931      	ldrb	r1, [r6, #4]
 800cca0:	3904      	subs	r1, #4
 800cca2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800cca4:	9003      	str	r0, [sp, #12]
 800cca6:	9402      	str	r4, [sp, #8]
 800cca8:	f8cd 8004 	str.w	r8, [sp, #4]
 800ccac:	2001      	movs	r0, #1
 800ccae:	9000      	str	r0, [sp, #0]
 800ccb0:	b289      	uxth	r1, r1
 800ccb2:	6830      	ldr	r0, [r6, #0]
 800ccb4:	f7ff febd 	bl	800ca32 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ccb8:	4605      	mov	r5, r0
 800ccba:	b9c0      	cbnz	r0, 800ccee <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800ccbc:	f896 3020 	ldrb.w	r3, [r6, #32]
 800ccc0:	b90b      	cbnz	r3, 800ccc6 <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800ccc2:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ccc6:	9401      	str	r4, [sp, #4]
 800ccc8:	2301      	movs	r3, #1
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	4643      	mov	r3, r8
 800ccce:	464a      	mov	r2, r9
 800ccd0:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800ccd4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800ccd6:	f7ff fe50 	bl	800c97a <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ccda:	4605      	mov	r5, r0
 800ccdc:	b938      	cbnz	r0, 800ccee <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800ccde:	4621      	mov	r1, r4
 800cce0:	4638      	mov	r0, r7
 800cce2:	f7ff fda9 	bl	800c838 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800cce6:	e002      	b.n	800ccee <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cce8:	2509      	movs	r5, #9
 800ccea:	e000      	b.n	800ccee <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ccec:	2506      	movs	r5, #6
}
 800ccee:	4628      	mov	r0, r5
 800ccf0:	b007      	add	sp, #28
 800ccf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ccf6:	250f      	movs	r5, #15
 800ccf8:	e7f9      	b.n	800ccee <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800ccfa:	2502      	movs	r5, #2
 800ccfc:	e7f7      	b.n	800ccee <LoRaMacCryptoUnsecureMessage+0xa6>
 800ccfe:	bf00      	nop
 800cd00:	20001190 	.word	0x20001190

0800cd04 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800cd04:	b500      	push	{lr}
 800cd06:	b085      	sub	sp, #20
 800cd08:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	9301      	str	r3, [sp, #4]
 800cd10:	9302      	str	r3, [sp, #8]
 800cd12:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800cd14:	290b      	cmp	r1, #11
 800cd16:	d007      	beq.n	800cd28 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800cd18:	290c      	cmp	r1, #12
 800cd1a:	d013      	beq.n	800cd44 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800cd1c:	290a      	cmp	r1, #10
 800cd1e:	d00c      	beq.n	800cd3a <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800cd20:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cd22:	b005      	add	sp, #20
 800cd24:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800cd28:	2801      	cmp	r0, #1
 800cd2a:	d001      	beq.n	800cd30 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	e00a      	b.n	800cd46 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800cd30:	2320      	movs	r3, #32
 800cd32:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800cd36:	2100      	movs	r1, #0
 800cd38:	e005      	b.n	800cd46 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800cd3a:	2330      	movs	r3, #48	; 0x30
 800cd3c:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800cd40:	2100      	movs	r1, #0
            break;
 800cd42:	e000      	b.n	800cd46 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800cd44:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800cd46:	4668      	mov	r0, sp
 800cd48:	f003 f944 	bl	800ffd4 <SecureElementDeriveAndStoreKey>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d0e8      	beq.n	800cd22 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cd50:	200e      	movs	r0, #14
 800cd52:	e7e6      	b.n	800cd22 <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800cd54 <LoRaMacCryptoSetKey>:
{
 800cd54:	b510      	push	{r4, lr}
 800cd56:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800cd58:	f003 f8fa 	bl	800ff50 <SecureElementSetKey>
 800cd5c:	b998      	cbnz	r0, 800cd86 <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800cd5e:	b104      	cbz	r4, 800cd62 <LoRaMacCryptoSetKey+0xe>
}
 800cd60:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800cd62:	4b0c      	ldr	r3, [pc, #48]	; (800cd94 <LoRaMacCryptoSetKey+0x40>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	210b      	movs	r1, #11
 800cd68:	7898      	ldrb	r0, [r3, #2]
 800cd6a:	f7ff ffcb 	bl	800cd04 <LoRaMacCryptoDeriveLifeTimeKey>
 800cd6e:	b960      	cbnz	r0, 800cd8a <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800cd70:	210c      	movs	r1, #12
 800cd72:	f7ff ffc7 	bl	800cd04 <LoRaMacCryptoDeriveLifeTimeKey>
 800cd76:	b950      	cbnz	r0, 800cd8e <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800cd78:	210a      	movs	r1, #10
 800cd7a:	f7ff ffc3 	bl	800cd04 <LoRaMacCryptoDeriveLifeTimeKey>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d0ee      	beq.n	800cd60 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cd82:	200e      	movs	r0, #14
 800cd84:	e7ec      	b.n	800cd60 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cd86:	200e      	movs	r0, #14
 800cd88:	e7ea      	b.n	800cd60 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cd8a:	200e      	movs	r0, #14
 800cd8c:	e7e8      	b.n	800cd60 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cd8e:	200e      	movs	r0, #14
 800cd90:	e7e6      	b.n	800cd60 <LoRaMacCryptoSetKey+0xc>
 800cd92:	bf00      	nop
 800cd94:	20001190 	.word	0x20001190

0800cd98 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800cd98:	2a00      	cmp	r2, #0
 800cd9a:	d06c      	beq.n	800ce76 <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800cd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd9e:	b08f      	sub	sp, #60	; 0x3c
 800cda0:	4607      	mov	r7, r0
 800cda2:	460d      	mov	r5, r1
 800cda4:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800cda6:	2900      	cmp	r1, #0
 800cda8:	d067      	beq.n	800ce7a <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800cdaa:	2600      	movs	r6, #0
 800cdac:	9605      	str	r6, [sp, #20]
 800cdae:	221d      	movs	r2, #29
 800cdb0:	4631      	mov	r1, r6
 800cdb2:	a806      	add	r0, sp, #24
 800cdb4:	f005 ff72 	bl	8012c9c <memset>
    uint8_t versionMinor         = 0;
 800cdb8:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800cdbc:	4b33      	ldr	r3, [pc, #204]	; (800ce8c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800cdc2:	f10d 0313 	add.w	r3, sp, #19
 800cdc6:	9302      	str	r3, [sp, #8]
 800cdc8:	ab05      	add	r3, sp, #20
 800cdca:	9301      	str	r3, [sp, #4]
 800cdcc:	7923      	ldrb	r3, [r4, #4]
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	6823      	ldr	r3, [r4, #0]
 800cdd2:	4632      	mov	r2, r6
 800cdd4:	4629      	mov	r1, r5
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	f003 f91c 	bl	8010014 <SecureElementProcessJoinAccept>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d14e      	bne.n	800ce7e <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800cde0:	7922      	ldrb	r2, [r4, #4]
 800cde2:	a905      	add	r1, sp, #20
 800cde4:	6820      	ldr	r0, [r4, #0]
 800cde6:	f003 fa9c 	bl	8010322 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800cdea:	4620      	mov	r0, r4
 800cdec:	f000 f850 	bl	800ce90 <LoRaMacParserJoinAccept>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d147      	bne.n	800ce84 <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800cdf4:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800cdf6:	79e3      	ldrb	r3, [r4, #7]
 800cdf8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800cdfc:	7a23      	ldrb	r3, [r4, #8]
 800cdfe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800ce02:	4628      	mov	r0, r5
 800ce04:	f7ff fd4c 	bl	800c8a0 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d03d      	beq.n	800ce88 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ce0c:	4b1f      	ldr	r3, [pc, #124]	; (800ce8c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800ce12:	210b      	movs	r1, #11
 800ce14:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800ce18:	f7ff ff74 	bl	800cd04 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce1c:	bb80      	cbnz	r0, 800ce80 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800ce1e:	210c      	movs	r1, #12
 800ce20:	2000      	movs	r0, #0
 800ce22:	f7ff ff6f 	bl	800cd04 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce26:	bb58      	cbnz	r0, 800ce80 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800ce28:	210a      	movs	r1, #10
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	f7ff ff6a 	bl	800cd04 <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce30:	bb30      	cbnz	r0, 800ce80 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800ce32:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ce34:	7aa2      	ldrb	r2, [r4, #10]
 800ce36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ce3a:	7ae4      	ldrb	r4, [r4, #11]
 800ce3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800ce40:	4633      	mov	r3, r6
 800ce42:	4622      	mov	r2, r4
 800ce44:	4629      	mov	r1, r5
 800ce46:	2009      	movs	r0, #9
 800ce48:	f7ff fd60 	bl	800c90c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce4c:	b9c0      	cbnz	r0, 800ce80 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800ce4e:	4633      	mov	r3, r6
 800ce50:	4622      	mov	r2, r4
 800ce52:	4629      	mov	r1, r5
 800ce54:	2008      	movs	r0, #8
 800ce56:	f7ff fd59 	bl	800c90c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ce5a:	b988      	cbnz	r0, 800ce80 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ce5c:	4b0b      	ldr	r3, [pc, #44]	; (800ce8c <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800ce64:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800ce66:	2200      	movs	r2, #0
 800ce68:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800ce6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce6e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800ce70:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800ce72:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800ce74:	e004      	b.n	800ce80 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ce76:	2009      	movs	r0, #9
}
 800ce78:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ce7a:	2009      	movs	r0, #9
 800ce7c:	e000      	b.n	800ce80 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ce7e:	200e      	movs	r0, #14
}
 800ce80:	b00f      	add	sp, #60	; 0x3c
 800ce82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ce84:	200f      	movs	r0, #15
 800ce86:	e7fb      	b.n	800ce80 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ce88:	2003      	movs	r0, #3
 800ce8a:	e7f9      	b.n	800ce80 <LoRaMacCryptoHandleJoinAccept+0xe8>
 800ce8c:	20001190 	.word	0x20001190

0800ce90 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d049      	beq.n	800cf28 <LoRaMacParserJoinAccept+0x98>
{
 800ce94:	b510      	push	{r4, lr}
 800ce96:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ce98:	6801      	ldr	r1, [r0, #0]
 800ce9a:	2900      	cmp	r1, #0
 800ce9c:	d046      	beq.n	800cf2c <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ce9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cea2:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800cea4:	2203      	movs	r2, #3
 800cea6:	3006      	adds	r0, #6
 800cea8:	f003 fa3b 	bl	8010322 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800ceac:	4620      	mov	r0, r4
 800ceae:	f850 1b09 	ldr.w	r1, [r0], #9
 800ceb2:	2203      	movs	r2, #3
 800ceb4:	3104      	adds	r1, #4
 800ceb6:	f003 fa34 	bl	8010322 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ceba:	6821      	ldr	r1, [r4, #0]
 800cebc:	79cb      	ldrb	r3, [r1, #7]
 800cebe:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cec0:	7a0a      	ldrb	r2, [r1, #8]
 800cec2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cec6:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800cec8:	7a4a      	ldrb	r2, [r1, #9]
 800ceca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cece:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ced0:	7a8a      	ldrb	r2, [r1, #10]
 800ced2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ced6:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800ced8:	7acb      	ldrb	r3, [r1, #11]
 800ceda:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800cedc:	7b0b      	ldrb	r3, [r1, #12]
 800cede:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800cee0:	7923      	ldrb	r3, [r4, #4]
 800cee2:	2b21      	cmp	r3, #33	; 0x21
 800cee4:	d018      	beq.n	800cf18 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800cee6:	2b11      	cmp	r3, #17
 800cee8:	dc22      	bgt.n	800cf30 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800ceea:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ceec:	6821      	ldr	r1, [r4, #0]
 800ceee:	f102 0c01 	add.w	ip, r2, #1
 800cef2:	5c8b      	ldrb	r3, [r1, r2]
 800cef4:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cef6:	1c90      	adds	r0, r2, #2
 800cef8:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800cefc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800cf00:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800cf02:	3203      	adds	r2, #3
 800cf04:	5c08      	ldrb	r0, [r1, r0]
 800cf06:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf0a:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800cf0c:	5c8a      	ldrb	r2, [r1, r2]
 800cf0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cf12:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800cf14:	2000      	movs	r0, #0
}
 800cf16:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800cf18:	2210      	movs	r2, #16
 800cf1a:	310d      	adds	r1, #13
 800cf1c:	f104 0012 	add.w	r0, r4, #18
 800cf20:	f003 f9ff 	bl	8010322 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800cf24:	221d      	movs	r2, #29
 800cf26:	e7e1      	b.n	800ceec <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800cf28:	2002      	movs	r0, #2
}
 800cf2a:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800cf2c:	2002      	movs	r0, #2
 800cf2e:	e7f2      	b.n	800cf16 <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800cf30:	2001      	movs	r0, #1
 800cf32:	e7f0      	b.n	800cf16 <LoRaMacParserJoinAccept+0x86>

0800cf34 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d058      	beq.n	800cfea <LoRaMacParserData+0xb6>
{
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cf3c:	6801      	ldr	r1, [r0, #0]
 800cf3e:	2900      	cmp	r1, #0
 800cf40:	d055      	beq.n	800cfee <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800cf42:	780b      	ldrb	r3, [r1, #0]
 800cf44:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800cf46:	784b      	ldrb	r3, [r1, #1]
 800cf48:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cf4a:	788a      	ldrb	r2, [r1, #2]
 800cf4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf50:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800cf52:	78ca      	ldrb	r2, [r1, #3]
 800cf54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf58:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800cf5a:	790a      	ldrb	r2, [r1, #4]
 800cf5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cf60:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800cf62:	794b      	ldrb	r3, [r1, #5]
 800cf64:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800cf66:	798b      	ldrb	r3, [r1, #6]
 800cf68:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800cf6a:	79ca      	ldrb	r2, [r1, #7]
 800cf6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cf70:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800cf72:	7b02      	ldrb	r2, [r0, #12]
 800cf74:	f002 020f 	and.w	r2, r2, #15
 800cf78:	3108      	adds	r1, #8
 800cf7a:	3010      	adds	r0, #16
 800cf7c:	f003 f9d1 	bl	8010322 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cf80:	7b23      	ldrb	r3, [r4, #12]
 800cf82:	f003 030f 	and.w	r3, r3, #15
 800cf86:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800cf90:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800cf94:	7922      	ldrb	r2, [r4, #4]
 800cf96:	1a11      	subs	r1, r2, r0
 800cf98:	2904      	cmp	r1, #4
 800cf9a:	dc16      	bgt.n	800cfca <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800cf9c:	6822      	ldr	r2, [r4, #0]
 800cf9e:	7923      	ldrb	r3, [r4, #4]
 800cfa0:	441a      	add	r2, r3
 800cfa2:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800cfa6:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800cfa8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800cfac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cfb0:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800cfb2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800cfb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cfba:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800cfbc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800cfc0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800cfc4:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800cfc6:	2000      	movs	r0, #0
}
 800cfc8:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800cfca:	6821      	ldr	r1, [r4, #0]
 800cfcc:	3309      	adds	r3, #9
 800cfce:	5c08      	ldrb	r0, [r1, r0]
 800cfd0:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800cfd4:	1ad2      	subs	r2, r2, r3
 800cfd6:	b2d2      	uxtb	r2, r2
 800cfd8:	3a04      	subs	r2, #4
 800cfda:	b2d2      	uxtb	r2, r2
 800cfdc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800cfe0:	4419      	add	r1, r3
 800cfe2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cfe4:	f003 f99d 	bl	8010322 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800cfe8:	e7d8      	b.n	800cf9c <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800cfea:	2002      	movs	r0, #2
}
 800cfec:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800cfee:	2002      	movs	r0, #2
 800cff0:	e7ea      	b.n	800cfc8 <LoRaMacParserData+0x94>

0800cff2 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cff2:	b370      	cbz	r0, 800d052 <LoRaMacSerializerJoinRequest+0x60>
{
 800cff4:	b510      	push	{r4, lr}
 800cff6:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cff8:	6803      	ldr	r3, [r0, #0]
 800cffa:	b363      	cbz	r3, 800d056 <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800cffc:	7902      	ldrb	r2, [r0, #4]
 800cffe:	2a16      	cmp	r2, #22
 800d000:	d92b      	bls.n	800d05a <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d002:	7942      	ldrb	r2, [r0, #5]
 800d004:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d006:	4601      	mov	r1, r0
 800d008:	f851 0b06 	ldr.w	r0, [r1], #6
 800d00c:	2208      	movs	r2, #8
 800d00e:	3001      	adds	r0, #1
 800d010:	f003 f992 	bl	8010338 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800d014:	4621      	mov	r1, r4
 800d016:	f851 0b0e 	ldr.w	r0, [r1], #14
 800d01a:	2208      	movs	r2, #8
 800d01c:	3009      	adds	r0, #9
 800d01e:	f003 f98b 	bl	8010338 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800d022:	8ae2      	ldrh	r2, [r4, #22]
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800d028:	8ae3      	ldrh	r3, [r4, #22]
 800d02a:	6822      	ldr	r2, [r4, #0]
 800d02c:	0a1b      	lsrs	r3, r3, #8
 800d02e:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d030:	69a2      	ldr	r2, [r4, #24]
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d036:	69a3      	ldr	r3, [r4, #24]
 800d038:	0a1b      	lsrs	r3, r3, #8
 800d03a:	6822      	ldr	r2, [r4, #0]
 800d03c:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d03e:	8b62      	ldrh	r2, [r4, #26]
 800d040:	6823      	ldr	r3, [r4, #0]
 800d042:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d044:	7ee2      	ldrb	r2, [r4, #27]
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800d04a:	2317      	movs	r3, #23
 800d04c:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d04e:	2000      	movs	r0, #0
}
 800d050:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d052:	2001      	movs	r0, #1
}
 800d054:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d056:	2001      	movs	r0, #1
 800d058:	e7fa      	b.n	800d050 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d05a:	2002      	movs	r0, #2
 800d05c:	e7f8      	b.n	800d050 <LoRaMacSerializerJoinRequest+0x5e>

0800d05e <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d05e:	2800      	cmp	r0, #0
 800d060:	d066      	beq.n	800d130 <LoRaMacSerializerData+0xd2>
{
 800d062:	b538      	push	{r3, r4, r5, lr}
 800d064:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d066:	6801      	ldr	r1, [r0, #0]
 800d068:	2900      	cmp	r1, #0
 800d06a:	d063      	beq.n	800d134 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d06c:	7b02      	ldrb	r2, [r0, #12]
 800d06e:	f002 020f 	and.w	r2, r2, #15
 800d072:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d076:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d07a:	b10b      	cbz	r3, 800d080 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800d07c:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800d080:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800d082:	3304      	adds	r3, #4
 800d084:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800d086:	7922      	ldrb	r2, [r4, #4]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d355      	bcc.n	800d138 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d08c:	7963      	ldrb	r3, [r4, #5]
 800d08e:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800d090:	68a2      	ldr	r2, [r4, #8]
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800d096:	68a3      	ldr	r3, [r4, #8]
 800d098:	0a1b      	lsrs	r3, r3, #8
 800d09a:	6822      	ldr	r2, [r4, #0]
 800d09c:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800d09e:	8962      	ldrh	r2, [r4, #10]
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800d0a4:	7ae2      	ldrb	r2, [r4, #11]
 800d0a6:	6823      	ldr	r3, [r4, #0]
 800d0a8:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	7b22      	ldrb	r2, [r4, #12]
 800d0ae:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800d0b0:	89e2      	ldrh	r2, [r4, #14]
 800d0b2:	6823      	ldr	r3, [r4, #0]
 800d0b4:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800d0b6:	89e3      	ldrh	r3, [r4, #14]
 800d0b8:	6822      	ldr	r2, [r4, #0]
 800d0ba:	0a1b      	lsrs	r3, r3, #8
 800d0bc:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d0be:	4621      	mov	r1, r4
 800d0c0:	f851 0b10 	ldr.w	r0, [r1], #16
 800d0c4:	7b22      	ldrb	r2, [r4, #12]
 800d0c6:	f002 020f 	and.w	r2, r2, #15
 800d0ca:	3008      	adds	r0, #8
 800d0cc:	f003 f929 	bl	8010322 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d0d0:	7b23      	ldrb	r3, [r4, #12]
 800d0d2:	f003 030f 	and.w	r3, r3, #15
 800d0d6:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d0da:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800d0de:	b12a      	cbz	r2, 800d0ec <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800d0e0:	6822      	ldr	r2, [r4, #0]
 800d0e2:	f894 1020 	ldrb.w	r1, [r4, #32]
 800d0e6:	5551      	strb	r1, [r2, r5]
 800d0e8:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800d0ec:	6820      	ldr	r0, [r4, #0]
 800d0ee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800d0f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d0f4:	4428      	add	r0, r5
 800d0f6:	f003 f914 	bl	8010322 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800d0fa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d0fe:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d100:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d102:	6821      	ldr	r1, [r4, #0]
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	b292      	uxth	r2, r2
 800d108:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d10a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d10c:	0a08      	lsrs	r0, r1, #8
 800d10e:	6825      	ldr	r5, [r4, #0]
 800d110:	1c99      	adds	r1, r3, #2
 800d112:	b289      	uxth	r1, r1
 800d114:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d116:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800d118:	6820      	ldr	r0, [r4, #0]
 800d11a:	1cda      	adds	r2, r3, #3
 800d11c:	b292      	uxth	r2, r2
 800d11e:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d120:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800d124:	6821      	ldr	r1, [r4, #0]
 800d126:	3304      	adds	r3, #4
 800d128:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800d12a:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d12c:	2000      	movs	r0, #0
}
 800d12e:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d130:	2001      	movs	r0, #1
}
 800d132:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d134:	2001      	movs	r0, #1
 800d136:	e7fa      	b.n	800d12e <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d138:	2002      	movs	r0, #2
 800d13a:	e7f8      	b.n	800d12e <LoRaMacSerializerData+0xd0>

0800d13c <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d13c:	4b02      	ldr	r3, [pc, #8]	; (800d148 <NvmDataMgmtEvent+0xc>)
 800d13e:	881a      	ldrh	r2, [r3, #0]
 800d140:	4310      	orrs	r0, r2
 800d142:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	20001194 	.word	0x20001194

0800d14c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d14c:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d14e:	4b06      	ldr	r3, [pc, #24]	; (800d168 <NvmDataMgmtStoreBegin+0x1c>)
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	b11b      	cbz	r3, 800d15c <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d154:	f7fe f88c 	bl	800b270 <LoRaMacStop>
 800d158:	b918      	cbnz	r0, 800d162 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d15a:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800d15c:	f06f 0001 	mvn.w	r0, #1
 800d160:	e7fb      	b.n	800d15a <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800d162:	f06f 0002 	mvn.w	r0, #2
 800d166:	e7f8      	b.n	800d15a <NvmDataMgmtStoreBegin+0xe>
 800d168:	20001194 	.word	0x20001194

0800d16c <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d16c:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d16e:	2400      	movs	r4, #0
 800d170:	4b02      	ldr	r3, [pc, #8]	; (800d17c <NvmDataMgmtStoreEnd+0x10>)
 800d172:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800d174:	f7fe f870 	bl	800b258 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d178:	4620      	mov	r0, r4
 800d17a:	bd10      	pop	{r4, pc}
 800d17c:	20001194 	.word	0x20001194

0800d180 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800d180:	2805      	cmp	r0, #5
 800d182:	d005      	beq.n	800d190 <RegionIsActive+0x10>
 800d184:	2808      	cmp	r0, #8
 800d186:	d001      	beq.n	800d18c <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800d188:	2000      	movs	r0, #0
        }
    }
}
 800d18a:	4770      	bx	lr
    switch( region )
 800d18c:	2001      	movs	r0, #1
 800d18e:	4770      	bx	lr
 800d190:	2001      	movs	r0, #1
 800d192:	4770      	bx	lr

0800d194 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800d194:	b500      	push	{lr}
 800d196:	b083      	sub	sp, #12
 800d198:	4603      	mov	r3, r0
 800d19a:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800d19c:	2200      	movs	r2, #0
 800d19e:	9200      	str	r2, [sp, #0]
    switch( region )
 800d1a0:	2b05      	cmp	r3, #5
 800d1a2:	d004      	beq.n	800d1ae <RegionGetPhyParam+0x1a>
 800d1a4:	2b08      	cmp	r3, #8
 800d1a6:	d009      	beq.n	800d1bc <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800d1a8:	9b00      	ldr	r3, [sp, #0]
 800d1aa:	9301      	str	r3, [sp, #4]
 800d1ac:	e002      	b.n	800d1b4 <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800d1ae:	f000 fdeb 	bl	800dd88 <RegionEU868GetPhyParam>
 800d1b2:	9001      	str	r0, [sp, #4]
        }
    }
}
 800d1b4:	9801      	ldr	r0, [sp, #4]
 800d1b6:	b003      	add	sp, #12
 800d1b8:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800d1bc:	f001 fbda 	bl	800e974 <RegionUS915GetPhyParam>
 800d1c0:	9001      	str	r0, [sp, #4]
 800d1c2:	e7f7      	b.n	800d1b4 <RegionGetPhyParam+0x20>

0800d1c4 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800d1c4:	b508      	push	{r3, lr}
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	4608      	mov	r0, r1
    switch( region )
 800d1ca:	2b05      	cmp	r3, #5
 800d1cc:	d002      	beq.n	800d1d4 <RegionSetBandTxDone+0x10>
 800d1ce:	2b08      	cmp	r3, #8
 800d1d0:	d003      	beq.n	800d1da <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800d1d2:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800d1d4:	f000 fe94 	bl	800df00 <RegionEU868SetBandTxDone>
 800d1d8:	e7fb      	b.n	800d1d2 <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800d1da:	f001 fca1 	bl	800eb20 <RegionUS915SetBandTxDone>
 800d1de:	e7f8      	b.n	800d1d2 <RegionSetBandTxDone+0xe>

0800d1e0 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800d1e0:	b508      	push	{r3, lr}
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	4608      	mov	r0, r1
    switch( region )
 800d1e6:	2b05      	cmp	r3, #5
 800d1e8:	d002      	beq.n	800d1f0 <RegionInitDefaults+0x10>
 800d1ea:	2b08      	cmp	r3, #8
 800d1ec:	d003      	beq.n	800d1f6 <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800d1ee:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800d1f0:	f000 fea4 	bl	800df3c <RegionEU868InitDefaults>
 800d1f4:	e7fb      	b.n	800d1ee <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800d1f6:	f001 fcb1 	bl	800eb5c <RegionUS915InitDefaults>
}
 800d1fa:	e7f8      	b.n	800d1ee <RegionInitDefaults+0xe>

0800d1fc <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d1fc:	b508      	push	{r3, lr}
 800d1fe:	4603      	mov	r3, r0
 800d200:	4608      	mov	r0, r1
 800d202:	4611      	mov	r1, r2
    switch( region )
 800d204:	2b05      	cmp	r3, #5
 800d206:	d003      	beq.n	800d210 <RegionVerify+0x14>
 800d208:	2b08      	cmp	r3, #8
 800d20a:	d004      	beq.n	800d216 <RegionVerify+0x1a>
 800d20c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d20e:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800d210:	f000 ff00 	bl	800e014 <RegionEU868Verify>
 800d214:	e7fb      	b.n	800d20e <RegionVerify+0x12>
        US915_VERIFY( );
 800d216:	f001 fd45 	bl	800eca4 <RegionUS915Verify>
 800d21a:	e7f8      	b.n	800d20e <RegionVerify+0x12>

0800d21c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800d21c:	b508      	push	{r3, lr}
 800d21e:	4603      	mov	r3, r0
 800d220:	4608      	mov	r0, r1
    switch( region )
 800d222:	2b05      	cmp	r3, #5
 800d224:	d002      	beq.n	800d22c <RegionApplyCFList+0x10>
 800d226:	2b08      	cmp	r3, #8
 800d228:	d003      	beq.n	800d232 <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800d22a:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800d22c:	f001 fac4 	bl	800e7b8 <RegionEU868ApplyCFList>
 800d230:	e7fb      	b.n	800d22a <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800d232:	f001 fd71 	bl	800ed18 <RegionUS915ApplyCFList>
}
 800d236:	e7f8      	b.n	800d22a <RegionApplyCFList+0xe>

0800d238 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800d238:	b508      	push	{r3, lr}
 800d23a:	4603      	mov	r3, r0
 800d23c:	4608      	mov	r0, r1
    switch( region )
 800d23e:	2b05      	cmp	r3, #5
 800d240:	d003      	beq.n	800d24a <RegionChanMaskSet+0x12>
 800d242:	2b08      	cmp	r3, #8
 800d244:	d004      	beq.n	800d250 <RegionChanMaskSet+0x18>
 800d246:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d248:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800d24a:	f000 ff29 	bl	800e0a0 <RegionEU868ChanMaskSet>
 800d24e:	e7fb      	b.n	800d248 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800d250:	f001 fda0 	bl	800ed94 <RegionUS915ChanMaskSet>
 800d254:	e7f8      	b.n	800d248 <RegionChanMaskSet+0x10>

0800d256 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d256:	b508      	push	{r3, lr}
 800d258:	4684      	mov	ip, r0
 800d25a:	4608      	mov	r0, r1
 800d25c:	4611      	mov	r1, r2
 800d25e:	461a      	mov	r2, r3
    switch( region )
 800d260:	f1bc 0f05 	cmp.w	ip, #5
 800d264:	d003      	beq.n	800d26e <RegionComputeRxWindowParameters+0x18>
 800d266:	f1bc 0f08 	cmp.w	ip, #8
 800d26a:	d004      	beq.n	800d276 <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800d26c:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d26e:	9b02      	ldr	r3, [sp, #8]
 800d270:	f000 ff34 	bl	800e0dc <RegionEU868ComputeRxWindowParameters>
 800d274:	e7fa      	b.n	800d26c <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d276:	9b02      	ldr	r3, [sp, #8]
 800d278:	f001 fdce 	bl	800ee18 <RegionUS915ComputeRxWindowParameters>
}
 800d27c:	e7f6      	b.n	800d26c <RegionComputeRxWindowParameters+0x16>

0800d27e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d27e:	b508      	push	{r3, lr}
 800d280:	4603      	mov	r3, r0
 800d282:	4608      	mov	r0, r1
 800d284:	4611      	mov	r1, r2
    switch( region )
 800d286:	2b05      	cmp	r3, #5
 800d288:	d003      	beq.n	800d292 <RegionRxConfig+0x14>
 800d28a:	2b08      	cmp	r3, #8
 800d28c:	d004      	beq.n	800d298 <RegionRxConfig+0x1a>
 800d28e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d290:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800d292:	f000 ff59 	bl	800e148 <RegionEU868RxConfig>
 800d296:	e7fb      	b.n	800d290 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800d298:	f001 fdec 	bl	800ee74 <RegionUS915RxConfig>
 800d29c:	e7f8      	b.n	800d290 <RegionRxConfig+0x12>

0800d29e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d29e:	b508      	push	{r3, lr}
 800d2a0:	4684      	mov	ip, r0
 800d2a2:	4608      	mov	r0, r1
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	461a      	mov	r2, r3
    switch( region )
 800d2a8:	f1bc 0f05 	cmp.w	ip, #5
 800d2ac:	d004      	beq.n	800d2b8 <RegionTxConfig+0x1a>
 800d2ae:	f1bc 0f08 	cmp.w	ip, #8
 800d2b2:	d004      	beq.n	800d2be <RegionTxConfig+0x20>
 800d2b4:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d2b6:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800d2b8:	f000 ffca 	bl	800e250 <RegionEU868TxConfig>
 800d2bc:	e7fb      	b.n	800d2b6 <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800d2be:	f001 fe33 	bl	800ef28 <RegionUS915TxConfig>
 800d2c2:	e7f8      	b.n	800d2b6 <RegionTxConfig+0x18>

0800d2c4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d2c4:	b500      	push	{lr}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	4684      	mov	ip, r0
 800d2ca:	4608      	mov	r0, r1
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	461a      	mov	r2, r3
    switch( region )
 800d2d0:	f1bc 0f05 	cmp.w	ip, #5
 800d2d4:	d006      	beq.n	800d2e4 <RegionLinkAdrReq+0x20>
 800d2d6:	f1bc 0f08 	cmp.w	ip, #8
 800d2da:	d009      	beq.n	800d2f0 <RegionLinkAdrReq+0x2c>
 800d2dc:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d2de:	b003      	add	sp, #12
 800d2e0:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800d2e4:	9b05      	ldr	r3, [sp, #20]
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	9b04      	ldr	r3, [sp, #16]
 800d2ea:	f001 f849 	bl	800e380 <RegionEU868LinkAdrReq>
 800d2ee:	e7f6      	b.n	800d2de <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800d2f0:	9b05      	ldr	r3, [sp, #20]
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	9b04      	ldr	r3, [sp, #16]
 800d2f6:	f001 fe91 	bl	800f01c <RegionUS915LinkAdrReq>
 800d2fa:	e7f0      	b.n	800d2de <RegionLinkAdrReq+0x1a>

0800d2fc <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d2fc:	b508      	push	{r3, lr}
 800d2fe:	4603      	mov	r3, r0
 800d300:	4608      	mov	r0, r1
    switch( region )
 800d302:	2b05      	cmp	r3, #5
 800d304:	d003      	beq.n	800d30e <RegionRxParamSetupReq+0x12>
 800d306:	2b08      	cmp	r3, #8
 800d308:	d004      	beq.n	800d314 <RegionRxParamSetupReq+0x18>
 800d30a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d30c:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800d30e:	f001 f8fb 	bl	800e508 <RegionEU868RxParamSetupReq>
 800d312:	e7fb      	b.n	800d30c <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800d314:	f001 ffc4 	bl	800f2a0 <RegionUS915RxParamSetupReq>
 800d318:	e7f8      	b.n	800d30c <RegionRxParamSetupReq+0x10>

0800d31a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800d31a:	b508      	push	{r3, lr}
 800d31c:	4603      	mov	r3, r0
 800d31e:	4608      	mov	r0, r1
    switch( region )
 800d320:	2b05      	cmp	r3, #5
 800d322:	d003      	beq.n	800d32c <RegionNewChannelReq+0x12>
 800d324:	2b08      	cmp	r3, #8
 800d326:	d004      	beq.n	800d332 <RegionNewChannelReq+0x18>
 800d328:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d32a:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800d32c:	f001 fa85 	bl	800e83a <RegionEU868NewChannelReq>
 800d330:	e7fb      	b.n	800d32a <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800d332:	f001 ffe0 	bl	800f2f6 <RegionUS915NewChannelReq>
 800d336:	e7f8      	b.n	800d32a <RegionNewChannelReq+0x10>

0800d338 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800d338:	b508      	push	{r3, lr}
 800d33a:	4603      	mov	r3, r0
 800d33c:	4608      	mov	r0, r1
    switch( region )
 800d33e:	2b05      	cmp	r3, #5
 800d340:	d003      	beq.n	800d34a <RegionTxParamSetupReq+0x12>
 800d342:	2b08      	cmp	r3, #8
 800d344:	d004      	beq.n	800d350 <RegionTxParamSetupReq+0x18>
 800d346:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d348:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800d34a:	f001 f901 	bl	800e550 <RegionEU868TxParamSetupReq>
 800d34e:	e7fb      	b.n	800d348 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800d350:	f001 ffd4 	bl	800f2fc <RegionUS915TxParamSetupReq>
 800d354:	e7f8      	b.n	800d348 <RegionTxParamSetupReq+0x10>

0800d356 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800d356:	b508      	push	{r3, lr}
 800d358:	4603      	mov	r3, r0
 800d35a:	4608      	mov	r0, r1
    switch( region )
 800d35c:	2b05      	cmp	r3, #5
 800d35e:	d003      	beq.n	800d368 <RegionDlChannelReq+0x12>
 800d360:	2b08      	cmp	r3, #8
 800d362:	d004      	beq.n	800d36e <RegionDlChannelReq+0x18>
 800d364:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d366:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800d368:	f001 f8f6 	bl	800e558 <RegionEU868DlChannelReq>
 800d36c:	e7fb      	b.n	800d366 <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800d36e:	f001 ffc8 	bl	800f302 <RegionUS915DlChannelReq>
 800d372:	e7f8      	b.n	800d366 <RegionDlChannelReq+0x10>

0800d374 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800d374:	b508      	push	{r3, lr}
 800d376:	4603      	mov	r3, r0
 800d378:	4608      	mov	r0, r1
 800d37a:	4611      	mov	r1, r2
    switch( region )
 800d37c:	2b05      	cmp	r3, #5
 800d37e:	d003      	beq.n	800d388 <RegionAlternateDr+0x14>
 800d380:	2b08      	cmp	r3, #8
 800d382:	d004      	beq.n	800d38e <RegionAlternateDr+0x1a>
 800d384:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d386:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800d388:	f001 f912 	bl	800e5b0 <RegionEU868AlternateDr>
 800d38c:	e7fb      	b.n	800d386 <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800d38e:	f001 ffbb 	bl	800f308 <RegionUS915AlternateDr>
 800d392:	e7f8      	b.n	800d386 <RegionAlternateDr+0x12>

0800d394 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d394:	b508      	push	{r3, lr}
 800d396:	4684      	mov	ip, r0
 800d398:	4608      	mov	r0, r1
 800d39a:	4611      	mov	r1, r2
 800d39c:	461a      	mov	r2, r3
    switch( region )
 800d39e:	f1bc 0f05 	cmp.w	ip, #5
 800d3a2:	d004      	beq.n	800d3ae <RegionNextChannel+0x1a>
 800d3a4:	f1bc 0f08 	cmp.w	ip, #8
 800d3a8:	d005      	beq.n	800d3b6 <RegionNextChannel+0x22>
 800d3aa:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800d3ac:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800d3ae:	9b02      	ldr	r3, [sp, #8]
 800d3b0:	f001 f900 	bl	800e5b4 <RegionEU868NextChannel>
 800d3b4:	e7fa      	b.n	800d3ac <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800d3b6:	9b02      	ldr	r3, [sp, #8]
 800d3b8:	f001 ffc8 	bl	800f34c <RegionUS915NextChannel>
 800d3bc:	e7f6      	b.n	800d3ac <RegionNextChannel+0x18>

0800d3be <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800d3be:	b508      	push	{r3, lr}
 800d3c0:	4684      	mov	ip, r0
 800d3c2:	4608      	mov	r0, r1
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	461a      	mov	r2, r3
    switch( region )
 800d3c8:	f1bc 0f05 	cmp.w	ip, #5
 800d3cc:	d004      	beq.n	800d3d8 <RegionApplyDrOffset+0x1a>
 800d3ce:	f1bc 0f08 	cmp.w	ip, #8
 800d3d2:	d004      	beq.n	800d3de <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800d3d4:	b2c8      	uxtb	r0, r1
 800d3d6:	e001      	b.n	800d3dc <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800d3d8:	f001 fa5a 	bl	800e890 <RegionEU868ApplyDrOffset>
        }
    }
}
 800d3dc:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800d3de:	f002 f863 	bl	800f4a8 <RegionUS915ApplyDrOffset>
 800d3e2:	e7fb      	b.n	800d3dc <RegionApplyDrOffset+0x1e>

0800d3e4 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800d3e4:	4800      	ldr	r0, [pc, #0]	; (800d3e8 <RegionGetVersion+0x4>)
 800d3e6:	4770      	bx	lr
 800d3e8:	02010001 	.word	0x02010001

0800d3ec <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800d3ec:	468c      	mov	ip, r1
 800d3ee:	b1a9      	cbz	r1, 800d41c <FindAvailable125kHzChannels+0x30>
 800d3f0:	b1b2      	cbz	r2, 800d420 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800d3f6:	e001      	b.n	800d3fc <FindAvailable125kHzChannels+0x10>
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	2b07      	cmp	r3, #7
 800d3fe:	d80b      	bhi.n	800d418 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800d400:	fa40 f103 	asr.w	r1, r0, r3
 800d404:	f011 0f01 	tst.w	r1, #1
 800d408:	d0f6      	beq.n	800d3f8 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800d40a:	7811      	ldrb	r1, [r2, #0]
 800d40c:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800d410:	7811      	ldrb	r1, [r2, #0]
 800d412:	3101      	adds	r1, #1
 800d414:	7011      	strb	r1, [r2, #0]
 800d416:	e7ef      	b.n	800d3f8 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800d418:	2000      	movs	r0, #0
 800d41a:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d41c:	2003      	movs	r0, #3
 800d41e:	4770      	bx	lr
 800d420:	2003      	movs	r0, #3
}
 800d422:	4770      	bx	lr

0800d424 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800d424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d426:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800d428:	2300      	movs	r3, #0
 800d42a:	9302      	str	r3, [sp, #8]
 800d42c:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800d42e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800d432:	2800      	cmp	r0, #0
 800d434:	d03e      	beq.n	800d4b4 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800d436:	460d      	mov	r5, r1
 800d438:	4617      	mov	r7, r2
 800d43a:	4606      	mov	r6, r0
 800d43c:	2900      	cmp	r1, #0
 800d43e:	d03b      	beq.n	800d4b8 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800d440:	2a00      	cmp	r2, #0
 800d442:	d03b      	beq.n	800d4bc <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800d444:	780c      	ldrb	r4, [r1, #0]
 800d446:	e017      	b.n	800d478 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800d448:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800d44c:	0a00      	lsrs	r0, r0, #8
 800d44e:	e019      	b.n	800d484 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800d450:	3901      	subs	r1, #1
 800d452:	2000      	movs	r0, #0
 800d454:	f002 ff58 	bl	8010308 <randr>
 800d458:	f100 0310 	add.w	r3, r0, #16
 800d45c:	eb0d 0003 	add.w	r0, sp, r3
 800d460:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800d464:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d468:	703b      	strb	r3, [r7, #0]
 800d46a:	e016      	b.n	800d49a <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800d46c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d470:	b9cb      	cbnz	r3, 800d4a6 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800d472:	782a      	ldrb	r2, [r5, #0]
 800d474:	42a2      	cmp	r2, r4
 800d476:	d016      	beq.n	800d4a6 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800d478:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800d47a:	f014 0f01 	tst.w	r4, #1
 800d47e:	d1e3      	bne.n	800d448 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800d480:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800d484:	f10d 0207 	add.w	r2, sp, #7
 800d488:	a902      	add	r1, sp, #8
 800d48a:	f7ff ffaf 	bl	800d3ec <FindAvailable125kHzChannels>
 800d48e:	2803      	cmp	r0, #3
 800d490:	d00b      	beq.n	800d4aa <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800d492:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d496:	2900      	cmp	r1, #0
 800d498:	d1da      	bne.n	800d450 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800d49a:	3401      	adds	r4, #1
 800d49c:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800d49e:	2c07      	cmp	r4, #7
 800d4a0:	d9e4      	bls.n	800d46c <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800d4a2:	2400      	movs	r4, #0
 800d4a4:	e7e2      	b.n	800d46c <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800d4a6:	b913      	cbnz	r3, 800d4ae <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800d4a8:	2003      	movs	r0, #3
}
 800d4aa:	b005      	add	sp, #20
 800d4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800d4ae:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e7fa      	b.n	800d4aa <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d4b4:	2003      	movs	r0, #3
 800d4b6:	e7f8      	b.n	800d4aa <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800d4b8:	2003      	movs	r0, #3
 800d4ba:	e7f6      	b.n	800d4aa <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800d4bc:	2003      	movs	r0, #3
 800d4be:	e7f4      	b.n	800d4aa <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800d4c0 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800d4c0:	fb02 1000 	mla	r0, r2, r0, r1
 800d4c4:	4770      	bx	lr

0800d4c6 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	f10d 0c08 	add.w	ip, sp, #8
 800d4cc:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800d4d0:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800d4d2:	b971      	cbnz	r1, 800d4f2 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800d4da:	d306      	bcc.n	800d4ea <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800d4dc:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d80a      	bhi.n	800d4fa <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800d4e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d4e8:	e000      	b.n	800d4ec <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800d4ea:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d4ec:	4298      	cmp	r0, r3
 800d4ee:	bf38      	it	cc
 800d4f0:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800d4f2:	b900      	cbnz	r0, 800d4f6 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800d4f4:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800d4f6:	b002      	add	sp, #8
 800d4f8:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800d4fa:	f242 7310 	movw	r3, #10000	; 0x2710
 800d4fe:	e7f5      	b.n	800d4ec <GetDutyCycle+0x26>

0800d500 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800d500:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800d502:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800d504:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800d506:	e001      	b.n	800d50c <CountChannels+0xc>
 800d508:	3301      	adds	r3, #1
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	428b      	cmp	r3, r1
 800d50e:	d207      	bcs.n	800d520 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800d510:	2201      	movs	r2, #1
 800d512:	409a      	lsls	r2, r3
 800d514:	ea32 020c 	bics.w	r2, r2, ip
 800d518:	d1f6      	bne.n	800d508 <CountChannels+0x8>
        {
            nbActiveBits++;
 800d51a:	3001      	adds	r0, #1
 800d51c:	b2c0      	uxtb	r0, r0
 800d51e:	e7f3      	b.n	800d508 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800d520:	4770      	bx	lr
	...

0800d524 <SetMaxTimeCredits>:
{
 800d524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d528:	b089      	sub	sp, #36	; 0x24
 800d52a:	4604      	mov	r4, r0
 800d52c:	460e      	mov	r6, r1
 800d52e:	ad02      	add	r5, sp, #8
 800d530:	e885 000c 	stmia.w	r5, {r2, r3}
 800d534:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800d538:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800d53c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d540:	f005 f86c 	bl	801261c <SysTimeToMs>
 800d544:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800d546:	2300      	movs	r3, #0
 800d548:	9304      	str	r3, [sp, #16]
 800d54a:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d54c:	e895 000c 	ldmia.w	r5, {r2, r3}
 800d550:	4631      	mov	r1, r6
 800d552:	4620      	mov	r0, r4
 800d554:	f7ff ffb7 	bl	800d4c6 <GetDutyCycle>
 800d558:	4605      	mov	r5, r0
    if( joined == false )
 800d55a:	2e00      	cmp	r6, #0
 800d55c:	d14c      	bne.n	800d5f8 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800d55e:	2864      	cmp	r0, #100	; 0x64
 800d560:	d025      	beq.n	800d5ae <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800d562:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d566:	d025      	beq.n	800d5b4 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800d568:	4e27      	ldr	r6, [pc, #156]	; (800d608 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800d56a:	68a1      	ldr	r1, [r4, #8]
 800d56c:	a806      	add	r0, sp, #24
 800d56e:	f005 f875 	bl	801265c <SysTimeFromMs>
 800d572:	9b07      	ldr	r3, [sp, #28]
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	9b06      	ldr	r3, [sp, #24]
 800d578:	aa02      	add	r2, sp, #8
 800d57a:	ca06      	ldmia	r2, {r1, r2}
 800d57c:	a804      	add	r0, sp, #16
 800d57e:	f004 ffd4 	bl	801252a <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800d582:	f1b8 0f00 	cmp.w	r8, #0
 800d586:	d102      	bne.n	800d58e <SetMaxTimeCredits+0x6a>
 800d588:	f1b9 0f00 	cmp.w	r9, #0
 800d58c:	d002      	beq.n	800d594 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800d58e:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800d590:	42b3      	cmp	r3, r6
 800d592:	d012      	beq.n	800d5ba <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800d594:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800d596:	9b02      	ldr	r3, [sp, #8]
 800d598:	4a1c      	ldr	r2, [pc, #112]	; (800d60c <SetMaxTimeCredits+0xe8>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d812      	bhi.n	800d5c4 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800d59e:	6863      	ldr	r3, [r4, #4]
 800d5a0:	b903      	cbnz	r3, 800d5a4 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800d5a2:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800d5a4:	6126      	str	r6, [r4, #16]
}
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	b009      	add	sp, #36	; 0x24
 800d5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800d5ae:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d5b0:	4e17      	ldr	r6, [pc, #92]	; (800d610 <SetMaxTimeCredits+0xec>)
 800d5b2:	e7da      	b.n	800d56a <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800d5b4:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800d5b6:	4e17      	ldr	r6, [pc, #92]	; (800d614 <SetMaxTimeCredits+0xf0>)
 800d5b8:	e7d7      	b.n	800d56a <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800d5ba:	9a04      	ldr	r2, [sp, #16]
 800d5bc:	4b16      	ldr	r3, [pc, #88]	; (800d618 <SetMaxTimeCredits+0xf4>)
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d9ed      	bls.n	800d59e <SetMaxTimeCredits+0x7a>
 800d5c2:	e7e7      	b.n	800d594 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800d5c4:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800d5c8:	3b30      	subs	r3, #48	; 0x30
 800d5ca:	4a14      	ldr	r2, [pc, #80]	; (800d61c <SetMaxTimeCredits+0xf8>)
 800d5cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d5d0:	0c1b      	lsrs	r3, r3, #16
 800d5d2:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800d5d4:	4a12      	ldr	r2, [pc, #72]	; (800d620 <SetMaxTimeCredits+0xfc>)
 800d5d6:	fb02 f303 	mul.w	r3, r2, r3
 800d5da:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800d5dc:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800d5e0:	3330      	adds	r3, #48	; 0x30
 800d5e2:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800d5ea:	ab04      	add	r3, sp, #16
 800d5ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5f0:	f005 f814 	bl	801261c <SysTimeToMs>
 800d5f4:	60a0      	str	r0, [r4, #8]
 800d5f6:	e7d2      	b.n	800d59e <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800d5f8:	f1b8 0f00 	cmp.w	r8, #0
 800d5fc:	d102      	bne.n	800d604 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800d5fe:	4e04      	ldr	r6, [pc, #16]	; (800d610 <SetMaxTimeCredits+0xec>)
 800d600:	60e6      	str	r6, [r4, #12]
 800d602:	e7cc      	b.n	800d59e <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800d604:	4e02      	ldr	r6, [pc, #8]	; (800d610 <SetMaxTimeCredits+0xec>)
 800d606:	e7ca      	b.n	800d59e <SetMaxTimeCredits+0x7a>
 800d608:	02932e00 	.word	0x02932e00
 800d60c:	0001ec2f 	.word	0x0001ec2f
 800d610:	001b7740 	.word	0x001b7740
 800d614:	0112a880 	.word	0x0112a880
 800d618:	0001517f 	.word	0x0001517f
 800d61c:	c22e4507 	.word	0xc22e4507
 800d620:	00015180 	.word	0x00015180

0800d624 <UpdateTimeCredits>:
{
 800d624:	b570      	push	{r4, r5, r6, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	4604      	mov	r4, r0
 800d62a:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800d62c:	9301      	str	r3, [sp, #4]
 800d62e:	9200      	str	r2, [sp, #0]
 800d630:	ab06      	add	r3, sp, #24
 800d632:	cb0c      	ldmia	r3, {r2, r3}
 800d634:	f7ff ff76 	bl	800d524 <SetMaxTimeCredits>
 800d638:	4605      	mov	r5, r0
    if( joined == true )
 800d63a:	b94e      	cbnz	r6, 800d650 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800d63c:	68e2      	ldr	r2, [r4, #12]
 800d63e:	6923      	ldr	r3, [r4, #16]
 800d640:	429a      	cmp	r2, r3
 800d642:	d900      	bls.n	800d646 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800d644:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800d646:	9b08      	ldr	r3, [sp, #32]
 800d648:	6063      	str	r3, [r4, #4]
}
 800d64a:	4628      	mov	r0, r5
 800d64c:	b002      	add	sp, #8
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d650:	6860      	ldr	r0, [r4, #4]
 800d652:	f005 f863 	bl	801271c <UTIL_TIMER_GetElapsedTime>
 800d656:	68e3      	ldr	r3, [r4, #12]
 800d658:	4403      	add	r3, r0
 800d65a:	60e3      	str	r3, [r4, #12]
 800d65c:	e7ee      	b.n	800d63c <UpdateTimeCredits+0x18>

0800d65e <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800d65e:	4288      	cmp	r0, r1
 800d660:	db03      	blt.n	800d66a <RegionCommonValueInRange+0xc>
 800d662:	4290      	cmp	r0, r2
 800d664:	dd03      	ble.n	800d66e <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800d666:	2000      	movs	r0, #0
 800d668:	4770      	bx	lr
 800d66a:	2000      	movs	r0, #0
 800d66c:	4770      	bx	lr
        return 1;
 800d66e:	2001      	movs	r0, #1
}
 800d670:	4770      	bx	lr

0800d672 <RegionCommonChanVerifyDr>:
{
 800d672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d676:	4682      	mov	sl, r0
 800d678:	460e      	mov	r6, r1
 800d67a:	4690      	mov	r8, r2
 800d67c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800d680:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800d684:	4619      	mov	r1, r3
 800d686:	4640      	mov	r0, r8
 800d688:	f7ff ffe9 	bl	800d65e <RegionCommonValueInRange>
 800d68c:	b338      	cbz	r0, 800d6de <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d68e:	2500      	movs	r5, #0
 800d690:	462f      	mov	r7, r5
 800d692:	e01e      	b.n	800d6d2 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800d694:	3401      	adds	r4, #1
 800d696:	b2e4      	uxtb	r4, r4
 800d698:	2c0f      	cmp	r4, #15
 800d69a:	d816      	bhi.n	800d6ca <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800d69c:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800d6a0:	4123      	asrs	r3, r4
 800d6a2:	f013 0f01 	tst.w	r3, #1
 800d6a6:	d0f5      	beq.n	800d694 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800d6a8:	193b      	adds	r3, r7, r4
 800d6aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d6ae:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d6b2:	7a19      	ldrb	r1, [r3, #8]
 800d6b4:	090a      	lsrs	r2, r1, #4
 800d6b6:	f001 010f 	and.w	r1, r1, #15
 800d6ba:	4640      	mov	r0, r8
 800d6bc:	f7ff ffcf 	bl	800d65e <RegionCommonValueInRange>
 800d6c0:	2801      	cmp	r0, #1
 800d6c2:	d1e7      	bne.n	800d694 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800d6c4:	2001      	movs	r0, #1
}
 800d6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d6ca:	3710      	adds	r7, #16
 800d6cc:	b2ff      	uxtb	r7, r7
 800d6ce:	3501      	adds	r5, #1
 800d6d0:	b2ed      	uxtb	r5, r5
 800d6d2:	4557      	cmp	r7, sl
 800d6d4:	d201      	bcs.n	800d6da <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800d6d6:	2400      	movs	r4, #0
 800d6d8:	e7de      	b.n	800d698 <RegionCommonChanVerifyDr+0x26>
    return false;
 800d6da:	2000      	movs	r0, #0
 800d6dc:	e7f3      	b.n	800d6c6 <RegionCommonChanVerifyDr+0x54>
        return false;
 800d6de:	2000      	movs	r0, #0
 800d6e0:	e7f1      	b.n	800d6c6 <RegionCommonChanVerifyDr+0x54>

0800d6e2 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800d6e2:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d6e6:	0913      	lsrs	r3, r2, #4
 800d6e8:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800d6ec:	d30e      	bcc.n	800d70c <RegionCommonChanDisable+0x2a>
 800d6ee:	4291      	cmp	r1, r2
 800d6f0:	d20e      	bcs.n	800d710 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800d6f2:	f001 010f 	and.w	r1, r1, #15
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	fa03 f101 	lsl.w	r1, r3, r1
 800d6fc:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800d700:	ea22 0101 	bic.w	r1, r2, r1
 800d704:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800d708:	4618      	mov	r0, r3
 800d70a:	4770      	bx	lr
        return false;
 800d70c:	2000      	movs	r0, #0
 800d70e:	4770      	bx	lr
 800d710:	2000      	movs	r0, #0
}
 800d712:	4770      	bx	lr

0800d714 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800d714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800d716:	b188      	cbz	r0, 800d73c <RegionCommonCountChannels+0x28>
 800d718:	460c      	mov	r4, r1
 800d71a:	4616      	mov	r6, r2
 800d71c:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800d71e:	2500      	movs	r5, #0
 800d720:	e008      	b.n	800d734 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d722:	2110      	movs	r1, #16
 800d724:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800d728:	f7ff feea 	bl	800d500 <CountChannels>
 800d72c:	4405      	add	r5, r0
 800d72e:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800d730:	3401      	adds	r4, #1
 800d732:	b2e4      	uxtb	r4, r4
 800d734:	42b4      	cmp	r4, r6
 800d736:	d3f4      	bcc.n	800d722 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800d738:	4628      	mov	r0, r5
 800d73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800d73c:	2500      	movs	r5, #0
 800d73e:	e7fb      	b.n	800d738 <RegionCommonCountChannels+0x24>

0800d740 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800d740:	4684      	mov	ip, r0
 800d742:	b158      	cbz	r0, 800d75c <RegionCommonChanMaskCopy+0x1c>
 800d744:	b109      	cbz	r1, 800d74a <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800d746:	2300      	movs	r3, #0
 800d748:	e006      	b.n	800d758 <RegionCommonChanMaskCopy+0x18>
 800d74a:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800d74c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800d750:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800d754:	3301      	adds	r3, #1
 800d756:	b2db      	uxtb	r3, r3
 800d758:	4293      	cmp	r3, r2
 800d75a:	d3f7      	bcc.n	800d74c <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800d75c:	4770      	bx	lr

0800d75e <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d75e:	b082      	sub	sp, #8
 800d760:	b538      	push	{r3, r4, r5, lr}
 800d762:	4604      	mov	r4, r0
 800d764:	460d      	mov	r5, r1
 800d766:	4611      	mov	r1, r2
 800d768:	aa04      	add	r2, sp, #16
 800d76a:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d76e:	ca0c      	ldmia	r2, {r2, r3}
 800d770:	f7ff fea9 	bl	800d4c6 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d774:	68e3      	ldr	r3, [r4, #12]
 800d776:	fb05 f000 	mul.w	r0, r5, r0
 800d77a:	4283      	cmp	r3, r0
 800d77c:	d905      	bls.n	800d78a <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800d77e:	1a18      	subs	r0, r3, r0
 800d780:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800d782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d786:	b002      	add	sp, #8
 800d788:	4770      	bx	lr
        band->TimeCredits = 0;
 800d78a:	2300      	movs	r3, #0
 800d78c:	60e3      	str	r3, [r4, #12]
}
 800d78e:	e7f8      	b.n	800d782 <RegionCommonSetBandTxDone+0x24>

0800d790 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	b089      	sub	sp, #36	; 0x24
 800d796:	4607      	mov	r7, r0
 800d798:	468b      	mov	fp, r1
 800d79a:	4691      	mov	r9, r2
 800d79c:	4698      	mov	r8, r3
 800d79e:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d7a2:	f004 ffb1 	bl	8012708 <UTIL_TIMER_GetCurrentTime>
 800d7a6:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800d7a8:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800d7aa:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d7ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d7b0:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800d7b2:	e005      	b.n	800d7c0 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800d7b8:	441e      	add	r6, r3
 800d7ba:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800d7bc:	3401      	adds	r4, #1
 800d7be:	b2e4      	uxtb	r4, r4
 800d7c0:	454c      	cmp	r4, r9
 800d7c2:	d25d      	bcs.n	800d880 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800d7c4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800d7c8:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800d7cc:	9b04      	ldr	r3, [sp, #16]
 800d7ce:	9302      	str	r3, [sp, #8]
 800d7d0:	ab13      	add	r3, sp, #76	; 0x4c
 800d7d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d7d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d7da:	4653      	mov	r3, sl
 800d7dc:	4642      	mov	r2, r8
 800d7de:	4639      	mov	r1, r7
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	f7ff ff1f 	bl	800d624 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d7e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7e8:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800d7ec:	68ea      	ldr	r2, [r5, #12]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d2e0      	bcs.n	800d7b4 <RegionCommonUpdateBandTimeOff+0x24>
 800d7f2:	f1b8 0f00 	cmp.w	r8, #0
 800d7f6:	d101      	bne.n	800d7fc <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800d7f8:	2f00      	cmp	r7, #0
 800d7fa:	d1db      	bne.n	800d7b4 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800d7fc:	2100      	movs	r1, #0
 800d7fe:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800d800:	6929      	ldr	r1, [r5, #16]
 800d802:	4299      	cmp	r1, r3
 800d804:	d307      	bcc.n	800d816 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800d806:	1a9b      	subs	r3, r3, r2
 800d808:	9a05      	ldr	r2, [sp, #20]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	bf28      	it	cs
 800d80e:	461a      	movcs	r2, r3
 800d810:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800d812:	3601      	adds	r6, #1
 800d814:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800d816:	2f00      	cmp	r7, #0
 800d818:	d1d0      	bne.n	800d7bc <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800d81a:	2300      	movs	r3, #0
 800d81c:	9306      	str	r3, [sp, #24]
 800d81e:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800d822:	2864      	cmp	r0, #100	; 0x64
 800d824:	d024      	beq.n	800d870 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800d826:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d82a:	d025      	beq.n	800d878 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800d82c:	4b19      	ldr	r3, [pc, #100]	; (800d894 <RegionCommonUpdateBandTimeOff+0x104>)
 800d82e:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800d830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d832:	4a18      	ldr	r2, [pc, #96]	; (800d894 <RegionCommonUpdateBandTimeOff+0x104>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d90c      	bls.n	800d852 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800d838:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800d83c:	3b30      	subs	r3, #48	; 0x30
 800d83e:	4a16      	ldr	r2, [pc, #88]	; (800d898 <RegionCommonUpdateBandTimeOff+0x108>)
 800d840:	fba2 2303 	umull	r2, r3, r2, r3
 800d844:	0c1b      	lsrs	r3, r3, #16
 800d846:	4a15      	ldr	r2, [pc, #84]	; (800d89c <RegionCommonUpdateBandTimeOff+0x10c>)
 800d848:	fb03 2202 	mla	r2, r3, r2, r2
 800d84c:	9b06      	ldr	r3, [sp, #24]
 800d84e:	4413      	add	r3, r2
 800d850:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800d852:	ad06      	add	r5, sp, #24
 800d854:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d85a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800d85e:	4628      	mov	r0, r5
 800d860:	f004 fe63 	bl	801252a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800d864:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d868:	f004 fed8 	bl	801261c <SysTimeToMs>
 800d86c:	9005      	str	r0, [sp, #20]
 800d86e:	e7a5      	b.n	800d7bc <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800d870:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d874:	9306      	str	r3, [sp, #24]
 800d876:	e7db      	b.n	800d830 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800d878:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800d87c:	9306      	str	r3, [sp, #24]
 800d87e:	e7d7      	b.n	800d830 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800d880:	b11e      	cbz	r6, 800d88a <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800d882:	9805      	ldr	r0, [sp, #20]
 800d884:	b009      	add	sp, #36	; 0x24
 800d886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800d88a:	f04f 33ff 	mov.w	r3, #4294967295
 800d88e:	9305      	str	r3, [sp, #20]
 800d890:	e7f7      	b.n	800d882 <RegionCommonUpdateBandTimeOff+0xf2>
 800d892:	bf00      	nop
 800d894:	0001ec30 	.word	0x0001ec30
 800d898:	c22e4507 	.word	0xc22e4507
 800d89c:	00015180 	.word	0x00015180

0800d8a0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d8a0:	7803      	ldrb	r3, [r0, #0]
 800d8a2:	2b03      	cmp	r3, #3
 800d8a4:	d001      	beq.n	800d8aa <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800d8a6:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800d8a8:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800d8aa:	7842      	ldrb	r2, [r0, #1]
 800d8ac:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d8b0:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d8b2:	f003 030f 	and.w	r3, r3, #15
 800d8b6:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d8b8:	0913      	lsrs	r3, r2, #4
 800d8ba:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d8bc:	7883      	ldrb	r3, [r0, #2]
 800d8be:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d8c0:	78c2      	ldrb	r2, [r0, #3]
 800d8c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8c6:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800d8c8:	7903      	ldrb	r3, [r0, #4]
 800d8ca:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d8cc:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800d8d0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d8d2:	f003 030f 	and.w	r3, r3, #15
 800d8d6:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800d8d8:	2005      	movs	r0, #5
 800d8da:	4770      	bx	lr

0800d8dc <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e0:	b085      	sub	sp, #20
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	4688      	mov	r8, r1
 800d8e6:	4617      	mov	r7, r2
 800d8e8:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800d8ea:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d8ec:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800d8f0:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d8f4:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d8f8:	7943      	ldrb	r3, [r0, #5]
 800d8fa:	b92b      	cbnz	r3, 800d908 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800d8fc:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800d900:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800d904:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800d908:	b355      	cbz	r5, 800d960 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800d90a:	f1ba 0f0f 	cmp.w	sl, #15
 800d90e:	d114      	bne.n	800d93a <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800d910:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800d914:	f1b9 0f0f 	cmp.w	r9, #15
 800d918:	d020      	beq.n	800d95c <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d91a:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800d91e:	9303      	str	r3, [sp, #12]
 800d920:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800d924:	461c      	mov	r4, r3
 800d926:	4619      	mov	r1, r3
 800d928:	4648      	mov	r0, r9
 800d92a:	f7ff fe98 	bl	800d65e <RegionCommonValueInRange>
 800d92e:	b9b8      	cbnz	r0, 800d960 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800d930:	454c      	cmp	r4, r9
 800d932:	dc21      	bgt.n	800d978 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800d934:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800d938:	e012      	b.n	800d960 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d93a:	69a3      	ldr	r3, [r4, #24]
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d948:	4652      	mov	r2, sl
 800d94a:	6921      	ldr	r1, [r4, #16]
 800d94c:	7b20      	ldrb	r0, [r4, #12]
 800d94e:	f7ff fe90 	bl	800d672 <RegionCommonChanVerifyDr>
 800d952:	2800      	cmp	r0, #0
 800d954:	d1de      	bne.n	800d914 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800d956:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800d95a:	e7db      	b.n	800d914 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800d95c:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800d960:	2d07      	cmp	r5, #7
 800d962:	d00c      	beq.n	800d97e <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800d964:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800d968:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800d96c:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800d970:	4628      	mov	r0, r5
 800d972:	b005      	add	sp, #20
 800d974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800d978:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d97c:	e7f0      	b.n	800d960 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800d97e:	f1bb 0f00 	cmp.w	fp, #0
 800d982:	d1ef      	bne.n	800d964 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800d984:	f04f 0b01 	mov.w	fp, #1
 800d988:	e7ec      	b.n	800d964 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800d98c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800d98c:	4b02      	ldr	r3, [pc, #8]	; (800d998 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800d98e:	fa03 f000 	lsl.w	r0, r3, r0
}
 800d992:	fbb0 f0f1 	udiv	r0, r0, r1
 800d996:	4770      	bx	lr
 800d998:	000f4240 	.word	0x000f4240

0800d99c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800d99c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800d9a0:	fbb3 f0f0 	udiv	r0, r3, r0
 800d9a4:	4770      	bx	lr
	...

0800d9a8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800d9a8:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800d9aa:	f1a1 0c04 	sub.w	ip, r1, #4
 800d9ae:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800d9b2:	fb0e f202 	mul.w	r2, lr, r2
 800d9b6:	fb00 220c 	mla	r2, r0, ip, r2
 800d9ba:	0052      	lsls	r2, r2, #1
 800d9bc:	d021      	beq.n	800da02 <RegionCommonComputeRxWindowParameters+0x5a>
 800d9be:	4402      	add	r2, r0
 800d9c0:	3a01      	subs	r2, #1
 800d9c2:	fbb2 f2f0 	udiv	r2, r2, r0
 800d9c6:	4291      	cmp	r1, r2
 800d9c8:	bf38      	it	cc
 800d9ca:	4611      	movcc	r1, r2
 800d9cc:	9a01      	ldr	r2, [sp, #4]
 800d9ce:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800d9d0:	0082      	lsls	r2, r0, #2
 800d9d2:	fb00 f101 	mul.w	r1, r0, r1
 800d9d6:	b1b9      	cbz	r1, 800da08 <RegionCommonComputeRxWindowParameters+0x60>
 800d9d8:	3101      	adds	r1, #1
 800d9da:	0849      	lsrs	r1, r1, #1
 800d9dc:	1a51      	subs	r1, r2, r1
 800d9de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d9e2:	fb02 1313 	mls	r3, r2, r3, r1
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	dd10      	ble.n	800da0c <RegionCommonComputeRxWindowParameters+0x64>
 800d9ea:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800d9ee:	4a0b      	ldr	r2, [pc, #44]	; (800da1c <RegionCommonComputeRxWindowParameters+0x74>)
 800d9f0:	fb82 1203 	smull	r1, r2, r2, r3
 800d9f4:	17db      	asrs	r3, r3, #31
 800d9f6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800d9fa:	9a02      	ldr	r2, [sp, #8]
 800d9fc:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800d9fe:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800da02:	fbb2 f2f0 	udiv	r2, r2, r0
 800da06:	e7de      	b.n	800d9c6 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800da08:	0849      	lsrs	r1, r1, #1
 800da0a:	e7e7      	b.n	800d9dc <RegionCommonComputeRxWindowParameters+0x34>
 800da0c:	4a03      	ldr	r2, [pc, #12]	; (800da1c <RegionCommonComputeRxWindowParameters+0x74>)
 800da0e:	fb82 1203 	smull	r1, r2, r2, r3
 800da12:	17db      	asrs	r3, r3, #31
 800da14:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800da18:	e7ef      	b.n	800d9fa <RegionCommonComputeRxWindowParameters+0x52>
 800da1a:	bf00      	nop
 800da1c:	10624dd3 	.word	0x10624dd3

0800da20 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	460d      	mov	r5, r1
 800da24:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800da26:	0040      	lsls	r0, r0, #1
 800da28:	f7f3 fa70 	bl	8000f0c <__aeabi_ui2f>
 800da2c:	4601      	mov	r1, r0
 800da2e:	4628      	mov	r0, r5
 800da30:	f7f3 f9ba 	bl	8000da8 <__aeabi_fsub>
 800da34:	4621      	mov	r1, r4
 800da36:	f7f3 f9b7 	bl	8000da8 <__aeabi_fsub>
 800da3a:	f7f2 fe11 	bl	8000660 <__aeabi_f2d>
 800da3e:	f00a f9e7 	bl	8017e10 <floor>
 800da42:	f7f3 f915 	bl	8000c70 <__aeabi_d2iz>

    return phyTxPower;
}
 800da46:	b240      	sxtb	r0, r0
 800da48:	bd38      	pop	{r3, r4, r5, pc}

0800da4a <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800da4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4e:	b083      	sub	sp, #12
 800da50:	4605      	mov	r5, r0
 800da52:	468b      	mov	fp, r1
 800da54:	9200      	str	r2, [sp, #0]
 800da56:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800da58:	2600      	movs	r6, #0
 800da5a:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800da5c:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800da5e:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800da60:	e04a      	b.n	800daf8 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800da62:	7a3a      	ldrb	r2, [r7, #8]
 800da64:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800da68:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800da6c:	b252      	sxtb	r2, r2
 800da6e:	b249      	sxtb	r1, r1
 800da70:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800da74:	f7ff fdf3 	bl	800d65e <RegionCommonValueInRange>
 800da78:	b178      	cbz	r0, 800da9a <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800da7a:	68ea      	ldr	r2, [r5, #12]
 800da7c:	7a7b      	ldrb	r3, [r7, #9]
 800da7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800da82:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da86:	7d1b      	ldrb	r3, [r3, #20]
 800da88:	b35b      	cbz	r3, 800dae2 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800da8a:	f109 0301 	add.w	r3, r9, #1
 800da8e:	eb08 0204 	add.w	r2, r8, r4
 800da92:	f80b 2009 	strb.w	r2, [fp, r9]
 800da96:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800da9a:	3401      	adds	r4, #1
 800da9c:	b2e4      	uxtb	r4, r4
 800da9e:	2c0f      	cmp	r4, #15
 800daa0:	d824      	bhi.n	800daec <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800daa2:	686b      	ldr	r3, [r5, #4]
 800daa4:	0072      	lsls	r2, r6, #1
 800daa6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800daaa:	4123      	asrs	r3, r4
 800daac:	f013 0f01 	tst.w	r3, #1
 800dab0:	d0f3      	beq.n	800da9a <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800dab2:	68a8      	ldr	r0, [r5, #8]
 800dab4:	eb08 0304 	add.w	r3, r8, r4
 800dab8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dabc:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800dac0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d0e8      	beq.n	800da9a <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800dac8:	782b      	ldrb	r3, [r5, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d1c9      	bne.n	800da62 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800dace:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d0c6      	beq.n	800da62 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800dad4:	5a9b      	ldrh	r3, [r3, r2]
 800dad6:	fa43 f104 	asr.w	r1, r3, r4
 800dada:	f011 0f01 	tst.w	r1, #1
 800dade:	d1c0      	bne.n	800da62 <RegionCommonCountNbOfEnabledChannels+0x18>
 800dae0:	e7db      	b.n	800da9a <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800dae2:	f10a 0a01 	add.w	sl, sl, #1
 800dae6:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800daea:	e7d6      	b.n	800da9a <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800daec:	f108 0810 	add.w	r8, r8, #16
 800daf0:	fa5f f888 	uxtb.w	r8, r8
 800daf4:	3601      	adds	r6, #1
 800daf6:	b2f6      	uxtb	r6, r6
 800daf8:	fa1f f388 	uxth.w	r3, r8
 800dafc:	8a2a      	ldrh	r2, [r5, #16]
 800dafe:	4293      	cmp	r3, r2
 800db00:	d201      	bcs.n	800db06 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800db02:	2400      	movs	r4, #0
 800db04:	e7cb      	b.n	800da9e <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800db06:	9b00      	ldr	r3, [sp, #0]
 800db08:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800db0c:	9b01      	ldr	r3, [sp, #4]
 800db0e:	f883 a000 	strb.w	sl, [r3]
}
 800db12:	b003      	add	sp, #12
 800db14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db18 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800db18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db1c:	b085      	sub	sp, #20
 800db1e:	4604      	mov	r4, r0
 800db20:	460f      	mov	r7, r1
 800db22:	4616      	mov	r6, r2
 800db24:	461d      	mov	r5, r3
 800db26:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800db2a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800db2e:	6840      	ldr	r0, [r0, #4]
 800db30:	f004 fdf4 	bl	801271c <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	1a1b      	subs	r3, r3, r0
 800db38:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800db3c:	2301      	movs	r3, #1
 800db3e:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800db42:	2300      	movs	r3, #0
 800db44:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800db46:	6863      	ldr	r3, [r4, #4]
 800db48:	b113      	cbz	r3, 800db50 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800db4a:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800db4c:	4283      	cmp	r3, r0
 800db4e:	d81e      	bhi.n	800db8e <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800db50:	2300      	movs	r3, #0
 800db52:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800db54:	69e3      	ldr	r3, [r4, #28]
 800db56:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800db5a:	781f      	ldrb	r7, [r3, #0]
 800db5c:	69a3      	ldr	r3, [r4, #24]
 800db5e:	9303      	str	r3, [sp, #12]
 800db60:	ab01      	add	r3, sp, #4
 800db62:	f104 020c 	add.w	r2, r4, #12
 800db66:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db6a:	e883 0003 	stmia.w	r3, {r0, r1}
 800db6e:	7d23      	ldrb	r3, [r4, #20]
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	7a23      	ldrb	r3, [r4, #8]
 800db74:	7a62      	ldrb	r2, [r4, #9]
 800db76:	4661      	mov	r1, ip
 800db78:	4638      	mov	r0, r7
 800db7a:	f7ff fe09 	bl	800d790 <RegionCommonUpdateBandTimeOff>
 800db7e:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800db82:	4643      	mov	r3, r8
 800db84:	462a      	mov	r2, r5
 800db86:	4631      	mov	r1, r6
 800db88:	69e0      	ldr	r0, [r4, #28]
 800db8a:	f7ff ff5e 	bl	800da4a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800db8e:	782b      	ldrb	r3, [r5, #0]
 800db90:	b923      	cbnz	r3, 800db9c <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800db92:	f898 3000 	ldrb.w	r3, [r8]
 800db96:	b13b      	cbz	r3, 800dba8 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800db98:	200b      	movs	r0, #11
 800db9a:	e002      	b.n	800dba2 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800db9c:	2000      	movs	r0, #0
 800db9e:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800dba2:	b005      	add	sp, #20
 800dba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800dba8:	200c      	movs	r0, #12
 800dbaa:	e7fa      	b.n	800dba2 <RegionCommonIdentifyChannels+0x8a>

0800dbac <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800dbac:	b570      	push	{r4, r5, r6, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800dbb2:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800dbb6:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800dbba:	42a6      	cmp	r6, r4
 800dbbc:	d011      	beq.n	800dbe2 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800dbbe:	3c01      	subs	r4, #1
 800dbc0:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800dbc2:	42a6      	cmp	r6, r4
 800dbc4:	d00e      	beq.n	800dbe4 <RegionCommonGetNextLowerTxDr+0x38>
 800dbc6:	68ab      	ldr	r3, [r5, #8]
 800dbc8:	9301      	str	r3, [sp, #4]
 800dbca:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	4633      	mov	r3, r6
 800dbd2:	4622      	mov	r2, r4
 800dbd4:	6869      	ldr	r1, [r5, #4]
 800dbd6:	78e8      	ldrb	r0, [r5, #3]
 800dbd8:	f7ff fd4b 	bl	800d672 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	d0ee      	beq.n	800dbbe <RegionCommonGetNextLowerTxDr+0x12>
 800dbe0:	e000      	b.n	800dbe4 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800dbe2:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	b002      	add	sp, #8
 800dbe8:	bd70      	pop	{r4, r5, r6, pc}

0800dbea <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800dbea:	4288      	cmp	r0, r1
 800dbec:	bfb8      	it	lt
 800dbee:	4608      	movlt	r0, r1
 800dbf0:	4770      	bx	lr
	...

0800dbf4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800dbf4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800dbf8:	4a05      	ldr	r2, [pc, #20]	; (800dc10 <RegionCommonGetBandwidth+0x1c>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d004      	beq.n	800dc08 <RegionCommonGetBandwidth+0x14>
 800dbfe:	4a05      	ldr	r2, [pc, #20]	; (800dc14 <RegionCommonGetBandwidth+0x20>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d103      	bne.n	800dc0c <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800dc04:	2002      	movs	r0, #2
 800dc06:	4770      	bx	lr
            return 1;
 800dc08:	2001      	movs	r0, #1
 800dc0a:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800dc0c:	2000      	movs	r0, #0
    }
}
 800dc0e:	4770      	bx	lr
 800dc10:	0003d090 	.word	0x0003d090
 800dc14:	0007a120 	.word	0x0007a120

0800dc18 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800dc18:	b500      	push	{lr}
 800dc1a:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800dc1c:	2805      	cmp	r0, #5
 800dc1e:	d80e      	bhi.n	800dc3e <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800dc20:	9202      	str	r2, [sp, #8]
 800dc22:	9101      	str	r1, [sp, #4]
 800dc24:	4b0a      	ldr	r3, [pc, #40]	; (800dc50 <RegionCommonRxConfigPrint+0x38>)
 800dc26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800dc2a:	9300      	str	r3, [sp, #0]
 800dc2c:	4b09      	ldr	r3, [pc, #36]	; (800dc54 <RegionCommonRxConfigPrint+0x3c>)
 800dc2e:	2201      	movs	r2, #1
 800dc30:	2100      	movs	r1, #0
 800dc32:	2002      	movs	r0, #2
 800dc34:	f004 fa54 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800dc38:	b005      	add	sp, #20
 800dc3a:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800dc3e:	9201      	str	r2, [sp, #4]
 800dc40:	9100      	str	r1, [sp, #0]
 800dc42:	4b05      	ldr	r3, [pc, #20]	; (800dc58 <RegionCommonRxConfigPrint+0x40>)
 800dc44:	2201      	movs	r2, #1
 800dc46:	2100      	movs	r1, #0
 800dc48:	2002      	movs	r0, #2
 800dc4a:	f004 fa49 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800dc4e:	e7f3      	b.n	800dc38 <RegionCommonRxConfigPrint+0x20>
 800dc50:	080187d4 	.word	0x080187d4
 800dc54:	0801876c 	.word	0x0801876c
 800dc58:	0801878c 	.word	0x0801878c

0800dc5c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800dc5c:	b500      	push	{lr}
 800dc5e:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800dc60:	9101      	str	r1, [sp, #4]
 800dc62:	9000      	str	r0, [sp, #0]
 800dc64:	4b04      	ldr	r3, [pc, #16]	; (800dc78 <RegionCommonTxConfigPrint+0x1c>)
 800dc66:	2201      	movs	r2, #1
 800dc68:	2100      	movs	r1, #0
 800dc6a:	2002      	movs	r0, #2
 800dc6c:	f004 fa38 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 800dc70:	b003      	add	sp, #12
 800dc72:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc76:	bf00      	nop
 800dc78:	080187a8 	.word	0x080187a8

0800dc7c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800dc7c:	b538      	push	{r3, r4, r5, lr}
 800dc7e:	4604      	mov	r4, r0
 800dc80:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800dc82:	4b1b      	ldr	r3, [pc, #108]	; (800dcf0 <VerifyRfFreq+0x74>)
 800dc84:	6a1b      	ldr	r3, [r3, #32]
 800dc86:	4798      	blx	r3
 800dc88:	b130      	cbz	r0, 800dc98 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800dc8a:	4b1a      	ldr	r3, [pc, #104]	; (800dcf4 <VerifyRfFreq+0x78>)
 800dc8c:	4423      	add	r3, r4
 800dc8e:	4a1a      	ldr	r2, [pc, #104]	; (800dcf8 <VerifyRfFreq+0x7c>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d802      	bhi.n	800dc9a <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800dc94:	2302      	movs	r3, #2
 800dc96:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800dc98:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800dc9a:	4b18      	ldr	r3, [pc, #96]	; (800dcfc <VerifyRfFreq+0x80>)
 800dc9c:	4423      	add	r3, r4
 800dc9e:	4a18      	ldr	r2, [pc, #96]	; (800dd00 <VerifyRfFreq+0x84>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d802      	bhi.n	800dcaa <VerifyRfFreq+0x2e>
        *band = 0;
 800dca4:	2300      	movs	r3, #0
 800dca6:	702b      	strb	r3, [r5, #0]
 800dca8:	e7f6      	b.n	800dc98 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800dcaa:	4b16      	ldr	r3, [pc, #88]	; (800dd04 <VerifyRfFreq+0x88>)
 800dcac:	4423      	add	r3, r4
 800dcae:	4a16      	ldr	r2, [pc, #88]	; (800dd08 <VerifyRfFreq+0x8c>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d802      	bhi.n	800dcba <VerifyRfFreq+0x3e>
        *band = 1;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	702b      	strb	r3, [r5, #0]
 800dcb8:	e7ee      	b.n	800dc98 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800dcba:	4b14      	ldr	r3, [pc, #80]	; (800dd0c <VerifyRfFreq+0x90>)
 800dcbc:	4423      	add	r3, r4
 800dcbe:	4a14      	ldr	r2, [pc, #80]	; (800dd10 <VerifyRfFreq+0x94>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d802      	bhi.n	800dcca <VerifyRfFreq+0x4e>
        *band = 5;
 800dcc4:	2305      	movs	r3, #5
 800dcc6:	702b      	strb	r3, [r5, #0]
 800dcc8:	e7e6      	b.n	800dc98 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800dcca:	4b12      	ldr	r3, [pc, #72]	; (800dd14 <VerifyRfFreq+0x98>)
 800dccc:	4423      	add	r3, r4
 800dcce:	4a12      	ldr	r2, [pc, #72]	; (800dd18 <VerifyRfFreq+0x9c>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d802      	bhi.n	800dcda <VerifyRfFreq+0x5e>
        *band = 3;
 800dcd4:	2303      	movs	r3, #3
 800dcd6:	702b      	strb	r3, [r5, #0]
 800dcd8:	e7de      	b.n	800dc98 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800dcda:	4b10      	ldr	r3, [pc, #64]	; (800dd1c <VerifyRfFreq+0xa0>)
 800dcdc:	4423      	add	r3, r4
 800dcde:	4a10      	ldr	r2, [pc, #64]	; (800dd20 <VerifyRfFreq+0xa4>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d802      	bhi.n	800dcea <VerifyRfFreq+0x6e>
        *band = 4;
 800dce4:	2304      	movs	r3, #4
 800dce6:	702b      	strb	r3, [r5, #0]
 800dce8:	e7d6      	b.n	800dc98 <VerifyRfFreq+0x1c>
        return false;
 800dcea:	2000      	movs	r0, #0
 800dcec:	e7d4      	b.n	800dc98 <VerifyRfFreq+0x1c>
 800dcee:	bf00      	nop
 800dcf0:	08018e34 	.word	0x08018e34
 800dcf4:	cc8faa40 	.word	0xcc8faa40
 800dcf8:	001e847f 	.word	0x001e847f
 800dcfc:	cc7125c0 	.word	0xcc7125c0
 800dd00:	002dc6c0 	.word	0x002dc6c0
 800dd04:	cc435eff 	.word	0xcc435eff
 800dd08:	000927bf 	.word	0x000927bf
 800dd0c:	cc38b0a0 	.word	0xcc38b0a0
 800dd10:	0007a120 	.word	0x0007a120
 800dd14:	cc2e0240 	.word	0xcc2e0240
 800dd18:	0003d090 	.word	0x0003d090
 800dd1c:	cc296e60 	.word	0xcc296e60
 800dd20:	000493e0 	.word	0x000493e0

0800dd24 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800dd24:	b570      	push	{r4, r5, r6, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	4605      	mov	r5, r0
 800dd2a:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800dd2c:	4b13      	ldr	r3, [pc, #76]	; (800dd7c <GetTimeOnAir+0x58>)
 800dd2e:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800dd30:	4913      	ldr	r1, [pc, #76]	; (800dd80 <GetTimeOnAir+0x5c>)
 800dd32:	f7ff ff5f 	bl	800dbf4 <RegionCommonGetBandwidth>
 800dd36:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800dd38:	2d07      	cmp	r5, #7
 800dd3a:	d00e      	beq.n	800dd5a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800dd3c:	4b11      	ldr	r3, [pc, #68]	; (800dd84 <GetTimeOnAir+0x60>)
 800dd3e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800dd40:	2001      	movs	r0, #1
 800dd42:	9003      	str	r0, [sp, #12]
 800dd44:	b2e4      	uxtb	r4, r4
 800dd46:	9402      	str	r4, [sp, #8]
 800dd48:	2300      	movs	r3, #0
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	2308      	movs	r3, #8
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	4603      	mov	r3, r0
 800dd52:	4632      	mov	r2, r6
 800dd54:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800dd56:	b004      	add	sp, #16
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800dd5a:	4b0a      	ldr	r3, [pc, #40]	; (800dd84 <GetTimeOnAir+0x60>)
 800dd5c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800dd5e:	2301      	movs	r3, #1
 800dd60:	9303      	str	r3, [sp, #12]
 800dd62:	b2e4      	uxtb	r4, r4
 800dd64:	9402      	str	r4, [sp, #8]
 800dd66:	2000      	movs	r0, #0
 800dd68:	9001      	str	r0, [sp, #4]
 800dd6a:	2305      	movs	r3, #5
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	4603      	mov	r3, r0
 800dd70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dd74:	fb06 f202 	mul.w	r2, r6, r2
 800dd78:	47a8      	blx	r5
 800dd7a:	e7ec      	b.n	800dd56 <GetTimeOnAir+0x32>
 800dd7c:	0801880c 	.word	0x0801880c
 800dd80:	080187ec 	.word	0x080187ec
 800dd84:	08018e34 	.word	0x08018e34

0800dd88 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800dd88:	b500      	push	{lr}
 800dd8a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800dd90:	7803      	ldrb	r3, [r0, #0]
 800dd92:	3b0b      	subs	r3, #11
 800dd94:	2b2d      	cmp	r3, #45	; 0x2d
 800dd96:	d82f      	bhi.n	800ddf8 <RegionEU868GetPhyParam+0x70>
 800dd98:	e8df f003 	tbb	[pc, r3]
 800dd9c:	3f393633 	.word	0x3f393633
 800dda0:	504c4845 	.word	0x504c4845
 800dda4:	2e5c5854 	.word	0x2e5c5854
 800dda8:	6e682e65 	.word	0x6e682e65
 800ddac:	2e2e7774 	.word	0x2e2e7774
 800ddb0:	2e177f7b 	.word	0x2e177f7b
 800ddb4:	2e2e2e2e 	.word	0x2e2e2e2e
 800ddb8:	2e2e2e2e 	.word	0x2e2e2e2e
 800ddbc:	2e2e2e2e 	.word	0x2e2e2e2e
 800ddc0:	2e8c8582 	.word	0x2e8c8582
 800ddc4:	2e928f2e 	.word	0x2e928f2e
 800ddc8:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800ddca:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ddce:	f88d 3004 	strb.w	r3, [sp, #4]
 800ddd2:	2307      	movs	r3, #7
 800ddd4:	f88d 3005 	strb.w	r3, [sp, #5]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	f88d 3006 	strb.w	r3, [sp, #6]
 800ddde:	2310      	movs	r3, #16
 800dde0:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800dde4:	4b3e      	ldr	r3, [pc, #248]	; (800dee0 <RegionEU868GetPhyParam+0x158>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ddec:	9202      	str	r2, [sp, #8]
 800ddee:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800ddf0:	a801      	add	r0, sp, #4
 800ddf2:	f7ff fedb 	bl	800dbac <RegionCommonGetNextLowerTxDr>
 800ddf6:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800ddf8:	9804      	ldr	r0, [sp, #16]
 800ddfa:	9005      	str	r0, [sp, #20]
}
 800ddfc:	b007      	add	sp, #28
 800ddfe:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800de02:	2340      	movs	r3, #64	; 0x40
 800de04:	9304      	str	r3, [sp, #16]
            break;
 800de06:	e7f7      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800de08:	2320      	movs	r3, #32
 800de0a:	9304      	str	r3, [sp, #16]
            break;
 800de0c:	e7f4      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800de0e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800de12:	4a34      	ldr	r2, [pc, #208]	; (800dee4 <RegionEU868GetPhyParam+0x15c>)
 800de14:	5cd3      	ldrb	r3, [r2, r3]
 800de16:	9304      	str	r3, [sp, #16]
            break;
 800de18:	e7ee      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800de1a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800de1e:	4a32      	ldr	r2, [pc, #200]	; (800dee8 <RegionEU868GetPhyParam+0x160>)
 800de20:	5cd3      	ldrb	r3, [r2, r3]
 800de22:	9304      	str	r3, [sp, #16]
            break;
 800de24:	e7e8      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800de26:	2301      	movs	r3, #1
 800de28:	9304      	str	r3, [sp, #16]
            break;
 800de2a:	e7e5      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800de2c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800de30:	9304      	str	r3, [sp, #16]
            break;
 800de32:	e7e1      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800de34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de38:	9304      	str	r3, [sp, #16]
            break;
 800de3a:	e7dd      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800de3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800de40:	9304      	str	r3, [sp, #16]
            break;
 800de42:	e7d9      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800de44:	f241 3388 	movw	r3, #5000	; 0x1388
 800de48:	9304      	str	r3, [sp, #16]
            break;
 800de4a:	e7d5      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800de4c:	f241 7370 	movw	r3, #6000	; 0x1770
 800de50:	9304      	str	r3, [sp, #16]
            break;
 800de52:	e7d1      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800de54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800de58:	4824      	ldr	r0, [pc, #144]	; (800deec <RegionEU868GetPhyParam+0x164>)
 800de5a:	f002 fa55 	bl	8010308 <randr>
 800de5e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800de62:	9004      	str	r0, [sp, #16]
            break;
 800de64:	e7c8      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800de66:	4b22      	ldr	r3, [pc, #136]	; (800def0 <RegionEU868GetPhyParam+0x168>)
 800de68:	9304      	str	r3, [sp, #16]
            break;
 800de6a:	e7c5      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800de6c:	4b1c      	ldr	r3, [pc, #112]	; (800dee0 <RegionEU868GetPhyParam+0x158>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800de74:	9304      	str	r3, [sp, #16]
            break;
 800de76:	e7bf      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800de78:	4b19      	ldr	r3, [pc, #100]	; (800dee0 <RegionEU868GetPhyParam+0x158>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800de80:	9304      	str	r3, [sp, #16]
            break;
 800de82:	e7b9      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800de84:	2310      	movs	r3, #16
 800de86:	9304      	str	r3, [sp, #16]
            break;
 800de88:	e7b6      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800de8a:	4b15      	ldr	r3, [pc, #84]	; (800dee0 <RegionEU868GetPhyParam+0x158>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	9304      	str	r3, [sp, #16]
            break;
 800de90:	e7b2      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800de92:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800de96:	9304      	str	r3, [sp, #16]
            break;
 800de98:	e7ae      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800de9a:	4b16      	ldr	r3, [pc, #88]	; (800def4 <RegionEU868GetPhyParam+0x16c>)
 800de9c:	9304      	str	r3, [sp, #16]
            break;
 800de9e:	e7ab      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800dea0:	4b13      	ldr	r3, [pc, #76]	; (800def0 <RegionEU868GetPhyParam+0x168>)
 800dea2:	9304      	str	r3, [sp, #16]
            break;
 800dea4:	e7a8      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800dea6:	2311      	movs	r3, #17
 800dea8:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800deac:	2301      	movs	r3, #1
 800deae:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800deb2:	e7a1      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800deb4:	2303      	movs	r3, #3
 800deb6:	9304      	str	r3, [sp, #16]
            break;
 800deb8:	e79e      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800deba:	4b0d      	ldr	r3, [pc, #52]	; (800def0 <RegionEU868GetPhyParam+0x168>)
 800debc:	9304      	str	r3, [sp, #16]
            break;
 800debe:	e79b      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800dec0:	2303      	movs	r3, #3
 800dec2:	9304      	str	r3, [sp, #16]
            break;
 800dec4:	e798      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800dec6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800deca:	4a0b      	ldr	r2, [pc, #44]	; (800def8 <RegionEU868GetPhyParam+0x170>)
 800decc:	5cd3      	ldrb	r3, [r2, r3]
 800dece:	9304      	str	r3, [sp, #16]
            break;
 800ded0:	e792      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800ded2:	490a      	ldr	r1, [pc, #40]	; (800defc <RegionEU868GetPhyParam+0x174>)
 800ded4:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ded8:	f7ff fe8c 	bl	800dbf4 <RegionCommonGetBandwidth>
 800dedc:	9004      	str	r0, [sp, #16]
            break;
 800dede:	e78b      	b.n	800ddf8 <RegionEU868GetPhyParam+0x70>
 800dee0:	2000119c 	.word	0x2000119c
 800dee4:	08018814 	.word	0x08018814
 800dee8:	0801881c 	.word	0x0801881c
 800deec:	fffffc18 	.word	0xfffffc18
 800def0:	33d3e608 	.word	0x33d3e608
 800def4:	4009999a 	.word	0x4009999a
 800def8:	0801880c 	.word	0x0801880c
 800defc:	080187ec 	.word	0x080187ec

0800df00 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800df00:	b510      	push	{r4, lr}
 800df02:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800df04:	4b0b      	ldr	r3, [pc, #44]	; (800df34 <RegionEU868SetBandTxDone+0x34>)
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	7803      	ldrb	r3, [r0, #0]
 800df0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800df0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df12:	7a5b      	ldrb	r3, [r3, #9]
 800df14:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800df18:	4b07      	ldr	r3, [pc, #28]	; (800df38 <RegionEU868SetBandTxDone+0x38>)
 800df1a:	681c      	ldr	r4, [r3, #0]
 800df1c:	6903      	ldr	r3, [r0, #16]
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	68c3      	ldr	r3, [r0, #12]
 800df22:	7842      	ldrb	r2, [r0, #1]
 800df24:	6881      	ldr	r1, [r0, #8]
 800df26:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800df2a:	f7ff fc18 	bl	800d75e <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800df2e:	b002      	add	sp, #8
 800df30:	bd10      	pop	{r4, pc}
 800df32:	bf00      	nop
 800df34:	2000119c 	.word	0x2000119c
 800df38:	20001198 	.word	0x20001198

0800df3c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800df3c:	b530      	push	{r4, r5, lr}
 800df3e:	b0a5      	sub	sp, #148	; 0x94
 800df40:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800df42:	2290      	movs	r2, #144	; 0x90
 800df44:	2100      	movs	r1, #0
 800df46:	4668      	mov	r0, sp
 800df48:	f004 fea8 	bl	8012c9c <memset>
 800df4c:	2364      	movs	r3, #100	; 0x64
 800df4e:	f8ad 3000 	strh.w	r3, [sp]
 800df52:	f8ad 3018 	strh.w	r3, [sp, #24]
 800df56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df5a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800df5e:	210a      	movs	r1, #10
 800df60:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800df64:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800df68:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800df6c:	7b23      	ldrb	r3, [r4, #12]
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d032      	beq.n	800dfd8 <RegionEU868InitDefaults+0x9c>
 800df72:	2b02      	cmp	r3, #2
 800df74:	d03e      	beq.n	800dff4 <RegionEU868InitDefaults+0xb8>
 800df76:	b10b      	cbz	r3, 800df7c <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800df78:	b025      	add	sp, #148	; 0x94
 800df7a:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800df7c:	6823      	ldr	r3, [r4, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d0fa      	beq.n	800df78 <RegionEU868InitDefaults+0x3c>
 800df82:	6863      	ldr	r3, [r4, #4]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d0f7      	beq.n	800df78 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800df88:	4d1f      	ldr	r5, [pc, #124]	; (800e008 <RegionEU868InitDefaults+0xcc>)
 800df8a:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800df8c:	68a0      	ldr	r0, [r4, #8]
 800df8e:	4b1f      	ldr	r3, [pc, #124]	; (800e00c <RegionEU868InitDefaults+0xd0>)
 800df90:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800df92:	2290      	movs	r2, #144	; 0x90
 800df94:	4669      	mov	r1, sp
 800df96:	f002 f9c4 	bl	8010322 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800df9a:	682c      	ldr	r4, [r5, #0]
 800df9c:	4b1c      	ldr	r3, [pc, #112]	; (800e010 <RegionEU868InitDefaults+0xd4>)
 800df9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dfa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800dfa6:	f104 0c0c 	add.w	ip, r4, #12
 800dfaa:	f103 020c 	add.w	r2, r3, #12
 800dfae:	ca07      	ldmia	r2, {r0, r1, r2}
 800dfb0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800dfb4:	f104 0c18 	add.w	ip, r4, #24
 800dfb8:	3318      	adds	r3, #24
 800dfba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dfbe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800dfc2:	2307      	movs	r3, #7
 800dfc4:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800dfce:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800dfd2:	f7ff fbb5 	bl	800d740 <RegionCommonChanMaskCopy>
            break;
 800dfd6:	e7cf      	b.n	800df78 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800dfd8:	4b0b      	ldr	r3, [pc, #44]	; (800e008 <RegionEU868InitDefaults+0xcc>)
 800dfda:	6818      	ldr	r0, [r3, #0]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800dfe0:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800dfe2:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800dfea:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800dfee:	f7ff fba7 	bl	800d740 <RegionCommonChanMaskCopy>
            break;
 800dff2:	e7c1      	b.n	800df78 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800dff4:	4b04      	ldr	r3, [pc, #16]	; (800e008 <RegionEU868InitDefaults+0xcc>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800dffc:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800e000:	430a      	orrs	r2, r1
 800e002:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800e006:	e7b7      	b.n	800df78 <RegionEU868InitDefaults+0x3c>
 800e008:	2000119c 	.word	0x2000119c
 800e00c:	20001198 	.word	0x20001198
 800e010:	08017f70 	.word	0x08017f70

0800e014 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800e014:	b500      	push	{lr}
 800e016:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800e018:	290f      	cmp	r1, #15
 800e01a:	d83c      	bhi.n	800e096 <RegionEU868Verify+0x82>
 800e01c:	e8df f001 	tbb	[pc, r1]
 800e020:	3b3b3b0a 	.word	0x3b3b3b0a
 800e024:	271d133b 	.word	0x271d133b
 800e028:	3b31313b 	.word	0x3b31313b
 800e02c:	083b3b3b 	.word	0x083b3b3b
 800e030:	2001      	movs	r0, #1
 800e032:	e031      	b.n	800e098 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800e03a:	f10d 0107 	add.w	r1, sp, #7
 800e03e:	6800      	ldr	r0, [r0, #0]
 800e040:	f7ff fe1c 	bl	800dc7c <VerifyRfFreq>
 800e044:	e028      	b.n	800e098 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800e046:	2207      	movs	r2, #7
 800e048:	2100      	movs	r1, #0
 800e04a:	f990 0000 	ldrsb.w	r0, [r0]
 800e04e:	f7ff fb06 	bl	800d65e <RegionCommonValueInRange>
 800e052:	3800      	subs	r0, #0
 800e054:	bf18      	it	ne
 800e056:	2001      	movne	r0, #1
 800e058:	e01e      	b.n	800e098 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800e05a:	2205      	movs	r2, #5
 800e05c:	2100      	movs	r1, #0
 800e05e:	f990 0000 	ldrsb.w	r0, [r0]
 800e062:	f7ff fafc 	bl	800d65e <RegionCommonValueInRange>
 800e066:	3800      	subs	r0, #0
 800e068:	bf18      	it	ne
 800e06a:	2001      	movne	r0, #1
 800e06c:	e014      	b.n	800e098 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800e06e:	2207      	movs	r2, #7
 800e070:	2100      	movs	r1, #0
 800e072:	f990 0000 	ldrsb.w	r0, [r0]
 800e076:	f7ff faf2 	bl	800d65e <RegionCommonValueInRange>
 800e07a:	3800      	subs	r0, #0
 800e07c:	bf18      	it	ne
 800e07e:	2001      	movne	r0, #1
 800e080:	e00a      	b.n	800e098 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800e082:	2207      	movs	r2, #7
 800e084:	2100      	movs	r1, #0
 800e086:	f990 0000 	ldrsb.w	r0, [r0]
 800e08a:	f7ff fae8 	bl	800d65e <RegionCommonValueInRange>
 800e08e:	3800      	subs	r0, #0
 800e090:	bf18      	it	ne
 800e092:	2001      	movne	r0, #1
 800e094:	e000      	b.n	800e098 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800e096:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800e098:	b003      	add	sp, #12
 800e09a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e0a0 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800e0a0:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800e0a2:	7903      	ldrb	r3, [r0, #4]
 800e0a4:	b11b      	cbz	r3, 800e0ae <RegionEU868ChanMaskSet+0xe>
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d00b      	beq.n	800e0c2 <RegionEU868ChanMaskSet+0x22>
 800e0aa:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800e0ac:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e0ae:	4b0a      	ldr	r3, [pc, #40]	; (800e0d8 <RegionEU868ChanMaskSet+0x38>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	6801      	ldr	r1, [r0, #0]
 800e0b6:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800e0ba:	f7ff fb41 	bl	800d740 <RegionCommonChanMaskCopy>
    return true;
 800e0be:	2001      	movs	r0, #1
            break;
 800e0c0:	e7f4      	b.n	800e0ac <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800e0c2:	4b05      	ldr	r3, [pc, #20]	; (800e0d8 <RegionEU868ChanMaskSet+0x38>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	6801      	ldr	r1, [r0, #0]
 800e0ca:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800e0ce:	f7ff fb37 	bl	800d740 <RegionCommonChanMaskCopy>
    return true;
 800e0d2:	2001      	movs	r0, #1
            break;
 800e0d4:	e7ea      	b.n	800e0ac <RegionEU868ChanMaskSet+0xc>
 800e0d6:	bf00      	nop
 800e0d8:	2000119c 	.word	0x2000119c

0800e0dc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	460e      	mov	r6, r1
 800e0e2:	4617      	mov	r7, r2
 800e0e4:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800e0e6:	2807      	cmp	r0, #7
 800e0e8:	bfa8      	it	ge
 800e0ea:	2007      	movge	r0, #7
 800e0ec:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800e0ee:	4913      	ldr	r1, [pc, #76]	; (800e13c <RegionEU868ComputeRxWindowParameters+0x60>)
 800e0f0:	f7ff fd80 	bl	800dbf4 <RegionCommonGetBandwidth>
 800e0f4:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800e0f6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e0fa:	2b07      	cmp	r3, #7
 800e0fc:	d017      	beq.n	800e12e <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800e0fe:	4a0f      	ldr	r2, [pc, #60]	; (800e13c <RegionEU868ComputeRxWindowParameters+0x60>)
 800e100:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e104:	4a0e      	ldr	r2, [pc, #56]	; (800e140 <RegionEU868ComputeRxWindowParameters+0x64>)
 800e106:	5cd0      	ldrb	r0, [r2, r3]
 800e108:	f7ff fc40 	bl	800d98c <RegionCommonComputeSymbolTimeLoRa>
 800e10c:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e10e:	4b0d      	ldr	r3, [pc, #52]	; (800e144 <RegionEU868ComputeRxWindowParameters+0x68>)
 800e110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e112:	4798      	blx	r3
 800e114:	4603      	mov	r3, r0
 800e116:	f104 020c 	add.w	r2, r4, #12
 800e11a:	9201      	str	r2, [sp, #4]
 800e11c:	3408      	adds	r4, #8
 800e11e:	9400      	str	r4, [sp, #0]
 800e120:	463a      	mov	r2, r7
 800e122:	4631      	mov	r1, r6
 800e124:	4628      	mov	r0, r5
 800e126:	f7ff fc3f 	bl	800d9a8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800e12a:	b003      	add	sp, #12
 800e12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800e12e:	4a04      	ldr	r2, [pc, #16]	; (800e140 <RegionEU868ComputeRxWindowParameters+0x64>)
 800e130:	5cd0      	ldrb	r0, [r2, r3]
 800e132:	f7ff fc33 	bl	800d99c <RegionCommonComputeSymbolTimeFsk>
 800e136:	4605      	mov	r5, r0
 800e138:	e7e9      	b.n	800e10e <RegionEU868ComputeRxWindowParameters+0x32>
 800e13a:	bf00      	nop
 800e13c:	080187ec 	.word	0x080187ec
 800e140:	0801880c 	.word	0x0801880c
 800e144:	08018e34 	.word	0x08018e34

0800e148 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e14c:	b08a      	sub	sp, #40	; 0x28
 800e14e:	4604      	mov	r4, r0
 800e150:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800e152:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e156:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e15a:	4b37      	ldr	r3, [pc, #220]	; (800e238 <RegionEU868RxConfig+0xf0>)
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	4798      	blx	r3
 800e160:	2800      	cmp	r0, #0
 800e162:	d167      	bne.n	800e234 <RegionEU868RxConfig+0xec>
 800e164:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e166:	7ce3      	ldrb	r3, [r4, #19]
 800e168:	b983      	cbnz	r3, 800e18c <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e16a:	4b34      	ldr	r3, [pc, #208]	; (800e23c <RegionEU868RxConfig+0xf4>)
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	7823      	ldrb	r3, [r4, #0]
 800e170:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e174:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800e178:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e17c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e180:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800e184:	f1b8 0f00 	cmp.w	r8, #0
 800e188:	d100      	bne.n	800e18c <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e18a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800e18c:	4b2c      	ldr	r3, [pc, #176]	; (800e240 <RegionEU868RxConfig+0xf8>)
 800e18e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800e192:	4b29      	ldr	r3, [pc, #164]	; (800e238 <RegionEU868RxConfig+0xf0>)
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	4640      	mov	r0, r8
 800e198:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800e19a:	2d07      	cmp	r5, #7
 800e19c:	d02b      	beq.n	800e1f6 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e19e:	4b26      	ldr	r3, [pc, #152]	; (800e238 <RegionEU868RxConfig+0xf0>)
 800e1a0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e1a4:	7ca3      	ldrb	r3, [r4, #18]
 800e1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e1a8:	2601      	movs	r6, #1
 800e1aa:	9608      	str	r6, [sp, #32]
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	9307      	str	r3, [sp, #28]
 800e1b0:	9306      	str	r3, [sp, #24]
 800e1b2:	9305      	str	r3, [sp, #20]
 800e1b4:	9304      	str	r3, [sp, #16]
 800e1b6:	9303      	str	r3, [sp, #12]
 800e1b8:	8922      	ldrh	r2, [r4, #8]
 800e1ba:	9202      	str	r2, [sp, #8]
 800e1bc:	2208      	movs	r2, #8
 800e1be:	9201      	str	r2, [sp, #4]
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	4633      	mov	r3, r6
 800e1c4:	464a      	mov	r2, r9
 800e1c6:	78a1      	ldrb	r1, [r4, #2]
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800e1cc:	7c63      	ldrb	r3, [r4, #17]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d02d      	beq.n	800e22e <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800e1d2:	4b1c      	ldr	r3, [pc, #112]	; (800e244 <RegionEU868RxConfig+0xfc>)
 800e1d4:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e1d6:	4b18      	ldr	r3, [pc, #96]	; (800e238 <RegionEU868RxConfig+0xf0>)
 800e1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1da:	310d      	adds	r1, #13
 800e1dc:	b2c9      	uxtb	r1, r1
 800e1de:	4630      	mov	r0, r6
 800e1e0:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e1e2:	462a      	mov	r2, r5
 800e1e4:	4641      	mov	r1, r8
 800e1e6:	7ce0      	ldrb	r0, [r4, #19]
 800e1e8:	f7ff fd16 	bl	800dc18 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800e1ec:	703d      	strb	r5, [r7, #0]
    return true;
 800e1ee:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800e1f0:	b00a      	add	sp, #40	; 0x28
 800e1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800e1f6:	4b10      	ldr	r3, [pc, #64]	; (800e238 <RegionEU868RxConfig+0xf0>)
 800e1f8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e1fc:	7ca3      	ldrb	r3, [r4, #18]
 800e1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e200:	2000      	movs	r0, #0
 800e202:	9008      	str	r0, [sp, #32]
 800e204:	9007      	str	r0, [sp, #28]
 800e206:	9006      	str	r0, [sp, #24]
 800e208:	2301      	movs	r3, #1
 800e20a:	9305      	str	r3, [sp, #20]
 800e20c:	9004      	str	r0, [sp, #16]
 800e20e:	9003      	str	r0, [sp, #12]
 800e210:	8923      	ldrh	r3, [r4, #8]
 800e212:	9302      	str	r3, [sp, #8]
 800e214:	2305      	movs	r3, #5
 800e216:	9301      	str	r3, [sp, #4]
 800e218:	4b0b      	ldr	r3, [pc, #44]	; (800e248 <RegionEU868RxConfig+0x100>)
 800e21a:	9300      	str	r3, [sp, #0]
 800e21c:	4603      	mov	r3, r0
 800e21e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e222:	fb02 f209 	mul.w	r2, r2, r9
 800e226:	f24c 3150 	movw	r1, #50000	; 0xc350
 800e22a:	47d0      	blx	sl
 800e22c:	e7ce      	b.n	800e1cc <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800e22e:	4b07      	ldr	r3, [pc, #28]	; (800e24c <RegionEU868RxConfig+0x104>)
 800e230:	5d59      	ldrb	r1, [r3, r5]
 800e232:	e7d0      	b.n	800e1d6 <RegionEU868RxConfig+0x8e>
        return false;
 800e234:	2000      	movs	r0, #0
 800e236:	e7db      	b.n	800e1f0 <RegionEU868RxConfig+0xa8>
 800e238:	08018e34 	.word	0x08018e34
 800e23c:	2000119c 	.word	0x2000119c
 800e240:	0801880c 	.word	0x0801880c
 800e244:	0801881c 	.word	0x0801881c
 800e248:	00014585 	.word	0x00014585
 800e24c:	08018814 	.word	0x08018814

0800e250 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	b08d      	sub	sp, #52	; 0x34
 800e256:	4604      	mov	r4, r0
 800e258:	460f      	mov	r7, r1
 800e25a:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800e25c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e260:	4a42      	ldr	r2, [pc, #264]	; (800e36c <RegionEU868TxConfig+0x11c>)
 800e262:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800e266:	4d42      	ldr	r5, [pc, #264]	; (800e370 <RegionEU868TxConfig+0x120>)
 800e268:	682a      	ldr	r2, [r5, #0]
 800e26a:	7803      	ldrb	r3, [r0, #0]
 800e26c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e270:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e274:	7a5b      	ldrb	r3, [r3, #9]
 800e276:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e27a:	4a3e      	ldr	r2, [pc, #248]	; (800e374 <RegionEU868TxConfig+0x124>)
 800e27c:	6812      	ldr	r2, [r2, #0]
 800e27e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e282:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e286:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e28a:	f7ff fcae 	bl	800dbea <RegionCommonLimitTxPower>
 800e28e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800e290:	4939      	ldr	r1, [pc, #228]	; (800e378 <RegionEU868TxConfig+0x128>)
 800e292:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e296:	f7ff fcad 	bl	800dbf4 <RegionCommonGetBandwidth>
 800e29a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e29c:	68a2      	ldr	r2, [r4, #8]
 800e29e:	6861      	ldr	r1, [r4, #4]
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f7ff fbbd 	bl	800da20 <RegionCommonComputeTxPower>
 800e2a6:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e2a8:	4b34      	ldr	r3, [pc, #208]	; (800e37c <RegionEU868TxConfig+0x12c>)
 800e2aa:	68da      	ldr	r2, [r3, #12]
 800e2ac:	6829      	ldr	r1, [r5, #0]
 800e2ae:	7823      	ldrb	r3, [r4, #0]
 800e2b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e2b4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e2b8:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800e2ba:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e2be:	2b07      	cmp	r3, #7
 800e2c0:	d031      	beq.n	800e326 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e2c2:	4b2e      	ldr	r3, [pc, #184]	; (800e37c <RegionEU868TxConfig+0x12c>)
 800e2c4:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800e2c8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e2cc:	9308      	str	r3, [sp, #32]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	9207      	str	r2, [sp, #28]
 800e2d2:	9206      	str	r2, [sp, #24]
 800e2d4:	9205      	str	r2, [sp, #20]
 800e2d6:	2501      	movs	r5, #1
 800e2d8:	9504      	str	r5, [sp, #16]
 800e2da:	9203      	str	r2, [sp, #12]
 800e2dc:	2308      	movs	r3, #8
 800e2de:	9302      	str	r3, [sp, #8]
 800e2e0:	9501      	str	r5, [sp, #4]
 800e2e2:	f8cd a000 	str.w	sl, [sp]
 800e2e6:	464b      	mov	r3, r9
 800e2e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e2ee:	4b20      	ldr	r3, [pc, #128]	; (800e370 <RegionEU868TxConfig+0x120>)
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	7823      	ldrb	r3, [r4, #0]
 800e2f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e2f8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e2fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e300:	f7ff fcac 	bl	800dc5c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e304:	89a1      	ldrh	r1, [r4, #12]
 800e306:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e30a:	f7ff fd0b 	bl	800dd24 <GetTimeOnAir>
 800e30e:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800e312:	4b1a      	ldr	r3, [pc, #104]	; (800e37c <RegionEU868TxConfig+0x12c>)
 800e314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e316:	7b21      	ldrb	r1, [r4, #12]
 800e318:	4628      	mov	r0, r5
 800e31a:	4798      	blx	r3

    *txPower = txPowerLimited;
 800e31c:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800e31e:	2001      	movs	r0, #1
 800e320:	b00d      	add	sp, #52	; 0x34
 800e322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800e326:	4b15      	ldr	r3, [pc, #84]	; (800e37c <RegionEU868TxConfig+0x12c>)
 800e328:	69dd      	ldr	r5, [r3, #28]
 800e32a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e32e:	fb03 f30a 	mul.w	r3, r3, sl
 800e332:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800e336:	9208      	str	r2, [sp, #32]
 800e338:	f04f 0b00 	mov.w	fp, #0
 800e33c:	f8cd b01c 	str.w	fp, [sp, #28]
 800e340:	f8cd b018 	str.w	fp, [sp, #24]
 800e344:	f8cd b014 	str.w	fp, [sp, #20]
 800e348:	2201      	movs	r2, #1
 800e34a:	9204      	str	r2, [sp, #16]
 800e34c:	f8cd b00c 	str.w	fp, [sp, #12]
 800e350:	2205      	movs	r2, #5
 800e352:	9202      	str	r2, [sp, #8]
 800e354:	f8cd b004 	str.w	fp, [sp, #4]
 800e358:	9300      	str	r3, [sp, #0]
 800e35a:	464b      	mov	r3, r9
 800e35c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800e360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e362:	4658      	mov	r0, fp
 800e364:	47a8      	blx	r5
        modem = MODEM_FSK;
 800e366:	465d      	mov	r5, fp
 800e368:	e7c1      	b.n	800e2ee <RegionEU868TxConfig+0x9e>
 800e36a:	bf00      	nop
 800e36c:	0801880c 	.word	0x0801880c
 800e370:	2000119c 	.word	0x2000119c
 800e374:	20001198 	.word	0x20001198
 800e378:	080187ec 	.word	0x080187ec
 800e37c:	08018e34 	.word	0x08018e34

0800e380 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e384:	b08f      	sub	sp, #60	; 0x3c
 800e386:	4605      	mov	r5, r0
 800e388:	4689      	mov	r9, r1
 800e38a:	4690      	mov	r8, r2
 800e38c:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e38e:	2400      	movs	r4, #0
 800e390:	940c      	str	r4, [sp, #48]	; 0x30
 800e392:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800e396:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800e39a:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e39c:	e030      	b.n	800e400 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800e39e:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800e3a2:	2607      	movs	r6, #7
 800e3a4:	e012      	b.n	800e3cc <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800e3a6:	4a57      	ldr	r2, [pc, #348]	; (800e504 <RegionEU868LinkAdrReq+0x184>)
 800e3a8:	6812      	ldr	r2, [r2, #0]
 800e3aa:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800e3ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e3b2:	b13a      	cbz	r2, 800e3c4 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	fa02 f20c 	lsl.w	r2, r2, ip
 800e3ba:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800e3be:	430a      	orrs	r2, r1
 800e3c0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800e3c4:	f10c 0c01 	add.w	ip, ip, #1
 800e3c8:	fa5f fc8c 	uxtb.w	ip, ip
 800e3cc:	f1bc 0f0f 	cmp.w	ip, #15
 800e3d0:	d816      	bhi.n	800e400 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800e3d2:	2b06      	cmp	r3, #6
 800e3d4:	d0e7      	beq.n	800e3a6 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e3d6:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800e3da:	fa4e fe0c 	asr.w	lr, lr, ip
 800e3de:	f01e 0f01 	tst.w	lr, #1
 800e3e2:	d0ef      	beq.n	800e3c4 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800e3e4:	4a47      	ldr	r2, [pc, #284]	; (800e504 <RegionEU868LinkAdrReq+0x184>)
 800e3e6:	6812      	ldr	r2, [r2, #0]
 800e3e8:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800e3ec:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e3f0:	2a00      	cmp	r2, #0
 800e3f2:	d1e7      	bne.n	800e3c4 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800e3f4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800e3f8:	e7e4      	b.n	800e3c4 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800e3fa:	2606      	movs	r6, #6
 800e3fc:	e000      	b.n	800e400 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800e3fe:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e400:	7a2b      	ldrb	r3, [r5, #8]
 800e402:	42a3      	cmp	r3, r4
 800e404:	d918      	bls.n	800e438 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e406:	6868      	ldr	r0, [r5, #4]
 800e408:	a90c      	add	r1, sp, #48	; 0x30
 800e40a:	4420      	add	r0, r4
 800e40c:	f7ff fa48 	bl	800d8a0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e410:	b190      	cbz	r0, 800e438 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800e412:	4404      	add	r4, r0
 800e414:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800e416:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e41a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800e41e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e422:	b90b      	cbnz	r3, 800e428 <RegionEU868LinkAdrReq+0xa8>
 800e424:	2a00      	cmp	r2, #0
 800e426:	d0e8      	beq.n	800e3fa <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800e428:	1e5a      	subs	r2, r3, #1
 800e42a:	b2d2      	uxtb	r2, r2
 800e42c:	2a04      	cmp	r2, #4
 800e42e:	d9e6      	bls.n	800e3fe <RegionEU868LinkAdrReq+0x7e>
 800e430:	2b06      	cmp	r3, #6
 800e432:	d9b4      	bls.n	800e39e <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800e434:	2606      	movs	r6, #6
 800e436:	e7e3      	b.n	800e400 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800e438:	2302      	movs	r3, #2
 800e43a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800e43e:	7a6b      	ldrb	r3, [r5, #9]
 800e440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800e444:	a80a      	add	r0, sp, #40	; 0x28
 800e446:	f7ff fc9f 	bl	800dd88 <RegionEU868GetPhyParam>
 800e44a:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800e44c:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800e450:	7aab      	ldrb	r3, [r5, #10]
 800e452:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800e456:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800e45a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800e45e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800e462:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800e466:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e46a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800e46e:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800e472:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800e476:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800e47a:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800e47e:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800e482:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800e486:	2310      	movs	r3, #16
 800e488:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800e48c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800e490:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800e492:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800e496:	2307      	movs	r3, #7
 800e498:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800e49c:	4a19      	ldr	r2, [pc, #100]	; (800e504 <RegionEU868LinkAdrReq+0x184>)
 800e49e:	6812      	ldr	r2, [r2, #0]
 800e4a0:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800e4a2:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800e4ac:	682b      	ldr	r3, [r5, #0]
 800e4ae:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800e4b0:	ab0c      	add	r3, sp, #48	; 0x30
 800e4b2:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800e4b6:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800e4ba:	a801      	add	r0, sp, #4
 800e4bc:	f7ff fa0e 	bl	800d8dc <RegionCommonLinkAdrReqVerifyParams>
 800e4c0:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800e4c2:	2807      	cmp	r0, #7
 800e4c4:	d010      	beq.n	800e4e8 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800e4c6:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800e4ca:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800e4ce:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800e4d2:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800e4d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e4da:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800e4dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e4de:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	b00f      	add	sp, #60	; 0x3c
 800e4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800e4e8:	4e06      	ldr	r6, [pc, #24]	; (800e504 <RegionEU868LinkAdrReq+0x184>)
 800e4ea:	6830      	ldr	r0, [r6, #0]
 800e4ec:	220c      	movs	r2, #12
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e4f4:	f001 ff2d 	bl	8010352 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800e4f8:	6833      	ldr	r3, [r6, #0]
 800e4fa:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800e4fe:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800e502:	e7e0      	b.n	800e4c6 <RegionEU868LinkAdrReq+0x146>
 800e504:	2000119c 	.word	0x2000119c

0800e508 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800e508:	b530      	push	{r4, r5, lr}
 800e50a:	b083      	sub	sp, #12
 800e50c:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800e50e:	2300      	movs	r3, #0
 800e510:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800e514:	f10d 0107 	add.w	r1, sp, #7
 800e518:	6840      	ldr	r0, [r0, #4]
 800e51a:	f7ff fbaf 	bl	800dc7c <VerifyRfFreq>
 800e51e:	b1a8      	cbz	r0, 800e54c <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800e520:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800e522:	2207      	movs	r2, #7
 800e524:	2100      	movs	r1, #0
 800e526:	f994 0000 	ldrsb.w	r0, [r4]
 800e52a:	f7ff f898 	bl	800d65e <RegionCommonValueInRange>
 800e52e:	b908      	cbnz	r0, 800e534 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800e530:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800e534:	2205      	movs	r2, #5
 800e536:	2100      	movs	r1, #0
 800e538:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e53c:	f7ff f88f 	bl	800d65e <RegionCommonValueInRange>
 800e540:	b908      	cbnz	r0, 800e546 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800e542:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800e546:	4628      	mov	r0, r5
 800e548:	b003      	add	sp, #12
 800e54a:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800e54c:	2506      	movs	r5, #6
 800e54e:	e7e8      	b.n	800e522 <RegionEU868RxParamSetupReq+0x1a>

0800e550 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800e550:	f04f 30ff 	mov.w	r0, #4294967295
 800e554:	4770      	bx	lr
	...

0800e558 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800e558:	b510      	push	{r4, lr}
 800e55a:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800e562:	7803      	ldrb	r3, [r0, #0]
 800e564:	2b0f      	cmp	r3, #15
 800e566:	d902      	bls.n	800e56e <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 800e568:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800e56a:	b002      	add	sp, #8
 800e56c:	bd10      	pop	{r4, pc}
 800e56e:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800e570:	f10d 0107 	add.w	r1, sp, #7
 800e574:	6840      	ldr	r0, [r0, #4]
 800e576:	f7ff fb81 	bl	800dc7c <VerifyRfFreq>
 800e57a:	b170      	cbz	r0, 800e59a <RegionEU868DlChannelReq+0x42>
    uint8_t status = 0x03;
 800e57c:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800e57e:	4b0b      	ldr	r3, [pc, #44]	; (800e5ac <RegionEU868DlChannelReq+0x54>)
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	7823      	ldrb	r3, [r4, #0]
 800e584:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e588:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800e58c:	b909      	cbnz	r1, 800e592 <RegionEU868DlChannelReq+0x3a>
        status &= 0xFD;
 800e58e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 800e592:	2803      	cmp	r0, #3
 800e594:	d003      	beq.n	800e59e <RegionEU868DlChannelReq+0x46>
    return status;
 800e596:	b240      	sxtb	r0, r0
 800e598:	e7e7      	b.n	800e56a <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 800e59a:	2002      	movs	r0, #2
 800e59c:	e7ef      	b.n	800e57e <RegionEU868DlChannelReq+0x26>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800e59e:	6861      	ldr	r1, [r4, #4]
 800e5a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e5a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5a8:	6059      	str	r1, [r3, #4]
 800e5aa:	e7f4      	b.n	800e596 <RegionEU868DlChannelReq+0x3e>
 800e5ac:	2000119c 	.word	0x2000119c

0800e5b0 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800e5b0:	4770      	bx	lr
	...

0800e5b4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800e5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5b6:	b097      	sub	sp, #92	; 0x5c
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	460f      	mov	r7, r1
 800e5bc:	4616      	mov	r6, r2
 800e5be:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800e5c6:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800e5ca:	9111      	str	r1, [sp, #68]	; 0x44
 800e5cc:	9112      	str	r1, [sp, #72]	; 0x48
 800e5ce:	9113      	str	r1, [sp, #76]	; 0x4c
 800e5d0:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800e5d2:	2307      	movs	r3, #7
 800e5d4:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800e5d8:	4b34      	ldr	r3, [pc, #208]	; (800e6ac <RegionEU868NextChannel+0xf8>)
 800e5da:	6818      	ldr	r0, [r3, #0]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e5e2:	f7ff f897 	bl	800d714 <RegionCommonCountChannels>
 800e5e6:	b938      	cbnz	r0, 800e5f8 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800e5e8:	4b30      	ldr	r3, [pc, #192]	; (800e6ac <RegionEU868NextChannel+0xf8>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800e5f0:	f043 0307 	orr.w	r3, r3, #7
 800e5f4:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800e5f8:	7a63      	ldrb	r3, [r4, #9]
 800e5fa:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800e5fe:	7a23      	ldrb	r3, [r4, #8]
 800e600:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e604:	4b29      	ldr	r3, [pc, #164]	; (800e6ac <RegionEU868NextChannel+0xf8>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800e60c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800e60e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800e610:	4b27      	ldr	r3, [pc, #156]	; (800e6b0 <RegionEU868NextChannel+0xfc>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800e616:	2310      	movs	r3, #16
 800e618:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800e61c:	f10d 030a 	add.w	r3, sp, #10
 800e620:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800e622:	6823      	ldr	r3, [r4, #0]
 800e624:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800e626:	6863      	ldr	r3, [r4, #4]
 800e628:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800e62a:	7aa3      	ldrb	r3, [r4, #10]
 800e62c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800e630:	2306      	movs	r3, #6
 800e632:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800e636:	ab0c      	add	r3, sp, #48	; 0x30
 800e638:	f104 020c 	add.w	r2, r4, #12
 800e63c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e640:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800e644:	7d23      	ldrb	r3, [r4, #20]
 800e646:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800e64a:	8ae1      	ldrh	r1, [r4, #22]
 800e64c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800e650:	f7ff fb68 	bl	800dd24 <GetTimeOnAir>
 800e654:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800e656:	ab03      	add	r3, sp, #12
 800e658:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800e65a:	9601      	str	r6, [sp, #4]
 800e65c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800e666:	aa11      	add	r2, sp, #68	; 0x44
 800e668:	4629      	mov	r1, r5
 800e66a:	a809      	add	r0, sp, #36	; 0x24
 800e66c:	f7ff fa54 	bl	800db18 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800e670:	4604      	mov	r4, r0
 800e672:	b120      	cbz	r0, 800e67e <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800e674:	280c      	cmp	r0, #12
 800e676:	d00f      	beq.n	800e698 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800e678:	4620      	mov	r0, r4
 800e67a:	b017      	add	sp, #92	; 0x5c
 800e67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800e67e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800e682:	3901      	subs	r1, #1
 800e684:	f001 fe40 	bl	8010308 <randr>
 800e688:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800e68c:	eb0d 0003 	add.w	r0, sp, r3
 800e690:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800e694:	703b      	strb	r3, [r7, #0]
 800e696:	e7ef      	b.n	800e678 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800e698:	4b04      	ldr	r3, [pc, #16]	; (800e6ac <RegionEU868NextChannel+0xf8>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800e6a0:	f043 0307 	orr.w	r3, r3, #7
 800e6a4:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800e6a8:	e7e6      	b.n	800e678 <RegionEU868NextChannel+0xc4>
 800e6aa:	bf00      	nop
 800e6ac:	2000119c 	.word	0x2000119c
 800e6b0:	20001198 	.word	0x20001198

0800e6b4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800e6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6b6:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800e6be:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800e6c0:	2d02      	cmp	r5, #2
 800e6c2:	d94f      	bls.n	800e764 <RegionEU868ChannelAdd+0xb0>
 800e6c4:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800e6c6:	2d0f      	cmp	r5, #15
 800e6c8:	d84e      	bhi.n	800e768 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800e6ca:	6803      	ldr	r3, [r0, #0]
 800e6cc:	7a18      	ldrb	r0, [r3, #8]
 800e6ce:	f340 0003 	sbfx	r0, r0, #0, #4
 800e6d2:	2207      	movs	r2, #7
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	b240      	sxtb	r0, r0
 800e6d8:	f7fe ffc1 	bl	800d65e <RegionCommonValueInRange>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d03d      	beq.n	800e75c <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800e6e0:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800e6e2:	6823      	ldr	r3, [r4, #0]
 800e6e4:	7a18      	ldrb	r0, [r3, #8]
 800e6e6:	f340 1003 	sbfx	r0, r0, #4, #4
 800e6ea:	2207      	movs	r2, #7
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	b240      	sxtb	r0, r0
 800e6f0:	f7fe ffb5 	bl	800d65e <RegionCommonValueInRange>
 800e6f4:	b900      	cbnz	r0, 800e6f8 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800e6f6:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800e6f8:	6820      	ldr	r0, [r4, #0]
 800e6fa:	7a03      	ldrb	r3, [r0, #8]
 800e6fc:	f343 0203 	sbfx	r2, r3, #0, #4
 800e700:	b252      	sxtb	r2, r2
 800e702:	f343 1303 	sbfx	r3, r3, #4, #4
 800e706:	b25b      	sxtb	r3, r3
 800e708:	429a      	cmp	r2, r3
 800e70a:	dd00      	ble.n	800e70e <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800e70c:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800e70e:	f10d 0107 	add.w	r1, sp, #7
 800e712:	6800      	ldr	r0, [r0, #0]
 800e714:	f7ff fab2 	bl	800dc7c <VerifyRfFreq>
 800e718:	b310      	cbz	r0, 800e760 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800e71a:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800e71c:	b106      	cbz	r6, 800e720 <RegionEU868ChannelAdd+0x6c>
 800e71e:	bb33      	cbnz	r3, 800e76e <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800e720:	bb3e      	cbnz	r6, 800e772 <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800e722:	bb43      	cbnz	r3, 800e776 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800e724:	4f15      	ldr	r7, [pc, #84]	; (800e77c <RegionEU868ChannelAdd+0xc8>)
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	006e      	lsls	r6, r5, #1
 800e72a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800e72e:	220c      	movs	r2, #12
 800e730:	6821      	ldr	r1, [r4, #0]
 800e732:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e736:	f001 fdf4 	bl	8010322 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800e73a:	683a      	ldr	r2, [r7, #0]
 800e73c:	442e      	add	r6, r5
 800e73e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e742:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e746:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800e748:	2301      	movs	r3, #1
 800e74a:	fa03 f505 	lsl.w	r5, r3, r5
 800e74e:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800e752:	431d      	orrs	r5, r3
 800e754:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800e758:	2000      	movs	r0, #0
 800e75a:	e006      	b.n	800e76a <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800e75c:	2601      	movs	r6, #1
 800e75e:	e7c0      	b.n	800e6e2 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800e760:	2301      	movs	r3, #1
 800e762:	e7db      	b.n	800e71c <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e764:	2006      	movs	r0, #6
 800e766:	e000      	b.n	800e76a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e768:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800e76a:	b003      	add	sp, #12
 800e76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800e76e:	2006      	movs	r0, #6
 800e770:	e7fb      	b.n	800e76a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800e772:	2005      	movs	r0, #5
 800e774:	e7f9      	b.n	800e76a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800e776:	2004      	movs	r0, #4
 800e778:	e7f7      	b.n	800e76a <RegionEU868ChannelAdd+0xb6>
 800e77a:	bf00      	nop
 800e77c:	2000119c 	.word	0x2000119c

0800e780 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800e780:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800e782:	2902      	cmp	r1, #2
 800e784:	d801      	bhi.n	800e78a <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800e786:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800e788:	4770      	bx	lr
{
 800e78a:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800e78c:	4b09      	ldr	r3, [pc, #36]	; (800e7b4 <RegionEU868ChannelsRemove+0x34>)
 800e78e:	6818      	ldr	r0, [r3, #0]
 800e790:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800e794:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800e798:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e79c:	2200      	movs	r2, #0
 800e79e:	f840 200c 	str.w	r2, [r0, ip]
 800e7a2:	605a      	str	r2, [r3, #4]
 800e7a4:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800e7a6:	2210      	movs	r2, #16
 800e7a8:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e7ac:	f7fe ff99 	bl	800d6e2 <RegionCommonChanDisable>
}
 800e7b0:	bd08      	pop	{r3, pc}
 800e7b2:	bf00      	nop
 800e7b4:	2000119c 	.word	0x2000119c

0800e7b8 <RegionEU868ApplyCFList>:
{
 800e7b8:	b570      	push	{r4, r5, r6, lr}
 800e7ba:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800e7bc:	2350      	movs	r3, #80	; 0x50
 800e7be:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800e7c2:	7a03      	ldrb	r3, [r0, #8]
 800e7c4:	2b10      	cmp	r3, #16
 800e7c6:	d136      	bne.n	800e836 <RegionEU868ApplyCFList+0x7e>
 800e7c8:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800e7ca:	6843      	ldr	r3, [r0, #4]
 800e7cc:	7bdd      	ldrb	r5, [r3, #15]
 800e7ce:	2d00      	cmp	r5, #0
 800e7d0:	d131      	bne.n	800e836 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e7d2:	2403      	movs	r4, #3
 800e7d4:	e01b      	b.n	800e80e <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800e7d6:	6872      	ldr	r2, [r6, #4]
 800e7d8:	5d53      	ldrb	r3, [r2, r5]
 800e7da:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800e7dc:	442a      	add	r2, r5
 800e7de:	7851      	ldrb	r1, [r2, #1]
 800e7e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e7e4:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800e7e6:	7892      	ldrb	r2, [r2, #2]
 800e7e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7ec:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800e7ee:	2264      	movs	r2, #100	; 0x64
 800e7f0:	fb02 f303 	mul.w	r3, r2, r3
 800e7f4:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	9304      	str	r3, [sp, #16]
 800e7fa:	e011      	b.n	800e820 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800e7fc:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800e800:	4668      	mov	r0, sp
 800e802:	f7ff ffbd 	bl	800e780 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e806:	3503      	adds	r5, #3
 800e808:	b2ed      	uxtb	r5, r5
 800e80a:	3401      	adds	r4, #1
 800e80c:	b2e4      	uxtb	r4, r4
 800e80e:	2c0f      	cmp	r4, #15
 800e810:	d811      	bhi.n	800e836 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800e812:	2c07      	cmp	r4, #7
 800e814:	d9df      	bls.n	800e7d6 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800e816:	2300      	movs	r3, #0
 800e818:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800e81a:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800e81e:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800e820:	9b03      	ldr	r3, [sp, #12]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d0ea      	beq.n	800e7fc <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800e826:	ab03      	add	r3, sp, #12
 800e828:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800e82a:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800e82e:	a801      	add	r0, sp, #4
 800e830:	f7ff ff40 	bl	800e6b4 <RegionEU868ChannelAdd>
 800e834:	e7e7      	b.n	800e806 <RegionEU868ApplyCFList+0x4e>
}
 800e836:	b006      	add	sp, #24
 800e838:	bd70      	pop	{r4, r5, r6, pc}

0800e83a <RegionEU868NewChannelReq>:
{
 800e83a:	b500      	push	{lr}
 800e83c:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800e83e:	6803      	ldr	r3, [r0, #0]
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	b952      	cbnz	r2, 800e85a <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800e844:	7903      	ldrb	r3, [r0, #4]
 800e846:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800e84a:	a801      	add	r0, sp, #4
 800e84c:	f7ff ff98 	bl	800e780 <RegionEU868ChannelsRemove>
 800e850:	b1d0      	cbz	r0, 800e888 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800e852:	2003      	movs	r0, #3
}
 800e854:	b005      	add	sp, #20
 800e856:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800e85a:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800e85c:	7903      	ldrb	r3, [r0, #4]
 800e85e:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800e862:	a802      	add	r0, sp, #8
 800e864:	f7ff ff26 	bl	800e6b4 <RegionEU868ChannelAdd>
 800e868:	2806      	cmp	r0, #6
 800e86a:	d80b      	bhi.n	800e884 <RegionEU868NewChannelReq+0x4a>
 800e86c:	e8df f000 	tbb	[pc, r0]
 800e870:	0a0a0a04 	.word	0x0a0a0a04
 800e874:	060e      	.short	0x060e
 800e876:	08          	.byte	0x08
 800e877:	00          	.byte	0x00
 800e878:	2003      	movs	r0, #3
 800e87a:	e7eb      	b.n	800e854 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800e87c:	2001      	movs	r0, #1
                break;
 800e87e:	e7e9      	b.n	800e854 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800e880:	2000      	movs	r0, #0
                break;
 800e882:	e7e7      	b.n	800e854 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800e884:	2000      	movs	r0, #0
                break;
 800e886:	e7e5      	b.n	800e854 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800e888:	2000      	movs	r0, #0
 800e88a:	e7e3      	b.n	800e854 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800e88c:	2002      	movs	r0, #2
 800e88e:	e7e1      	b.n	800e854 <RegionEU868NewChannelReq+0x1a>

0800e890 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800e890:	1a88      	subs	r0, r1, r2
 800e892:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800e894:	2800      	cmp	r0, #0
 800e896:	db01      	blt.n	800e89c <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800e898:	b2c0      	uxtb	r0, r0
 800e89a:	4770      	bx	lr
        datarate = DR_0;
 800e89c:	2000      	movs	r0, #0
 800e89e:	e7fb      	b.n	800e898 <RegionEU868ApplyDrOffset+0x8>

0800e8a0 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800e8a0:	b510      	push	{r4, lr}
 800e8a2:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e8a4:	4b10      	ldr	r3, [pc, #64]	; (800e8e8 <VerifyRfFreq+0x48>)
 800e8a6:	6a1b      	ldr	r3, [r3, #32]
 800e8a8:	4798      	blx	r3
 800e8aa:	b1c8      	cbz	r0, 800e8e0 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800e8ac:	4b0f      	ldr	r3, [pc, #60]	; (800e8ec <VerifyRfFreq+0x4c>)
 800e8ae:	4423      	add	r3, r4
 800e8b0:	4a0f      	ldr	r2, [pc, #60]	; (800e8f0 <VerifyRfFreq+0x50>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d813      	bhi.n	800e8de <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800e8b6:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800e8ba:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800e8be:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800e8c2:	fba2 1203 	umull	r1, r2, r2, r3
 800e8c6:	0c92      	lsrs	r2, r2, #18
 800e8c8:	490a      	ldr	r1, [pc, #40]	; (800e8f4 <VerifyRfFreq+0x54>)
 800e8ca:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800e8ce:	b942      	cbnz	r2, 800e8e2 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800e8d0:	4b09      	ldr	r3, [pc, #36]	; (800e8f8 <VerifyRfFreq+0x58>)
 800e8d2:	4423      	add	r3, r4
 800e8d4:	4a09      	ldr	r2, [pc, #36]	; (800e8fc <VerifyRfFreq+0x5c>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d902      	bls.n	800e8e0 <VerifyRfFreq+0x40>
    {
        return false;
 800e8da:	2000      	movs	r0, #0
 800e8dc:	e000      	b.n	800e8e0 <VerifyRfFreq+0x40>
        return false;
 800e8de:	2000      	movs	r0, #0
    }
    return true;
}
 800e8e0:	bd10      	pop	{r4, pc}
        return false;
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	e7fc      	b.n	800e8e0 <VerifyRfFreq+0x40>
 800e8e6:	bf00      	nop
 800e8e8:	08018e34 	.word	0x08018e34
 800e8ec:	c8f78f60 	.word	0xc8f78f60
 800e8f0:	00401640 	.word	0x00401640
 800e8f4:	000927c0 	.word	0x000927c0
 800e8f8:	ca37fea0 	.word	0xca37fea0
 800e8fc:	01808580 	.word	0x01808580

0800e900 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e900:	b570      	push	{r4, r5, r6, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800e906:	4b0a      	ldr	r3, [pc, #40]	; (800e930 <GetTimeOnAir+0x30>)
 800e908:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800e90a:	490a      	ldr	r1, [pc, #40]	; (800e934 <GetTimeOnAir+0x34>)
 800e90c:	f7ff f972 	bl	800dbf4 <RegionCommonGetBandwidth>
 800e910:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e912:	4b09      	ldr	r3, [pc, #36]	; (800e938 <GetTimeOnAir+0x38>)
 800e914:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e916:	2001      	movs	r0, #1
 800e918:	9003      	str	r0, [sp, #12]
 800e91a:	b2e4      	uxtb	r4, r4
 800e91c:	9402      	str	r4, [sp, #8]
 800e91e:	2200      	movs	r2, #0
 800e920:	9201      	str	r2, [sp, #4]
 800e922:	2208      	movs	r2, #8
 800e924:	9200      	str	r2, [sp, #0]
 800e926:	4603      	mov	r3, r0
 800e928:	4632      	mov	r2, r6
 800e92a:	47a8      	blx	r5
}
 800e92c:	b004      	add	sp, #16
 800e92e:	bd70      	pop	{r4, r5, r6, pc}
 800e930:	08018878 	.word	0x08018878
 800e934:	08018824 	.word	0x08018824
 800e938:	08018e34 	.word	0x08018e34

0800e93c <LimitTxPower>:
{
 800e93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e93e:	4606      	mov	r6, r0
 800e940:	4615      	mov	r5, r2
 800e942:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800e944:	f7ff f951 	bl	800dbea <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800e948:	2d04      	cmp	r5, #4
 800e94a:	d105      	bne.n	800e958 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800e94c:	4634      	mov	r4, r6
 800e94e:	2e02      	cmp	r6, #2
 800e950:	bfb8      	it	lt
 800e952:	2402      	movlt	r4, #2
}
 800e954:	4620      	mov	r0, r4
 800e956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e958:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800e95a:	2204      	movs	r2, #4
 800e95c:	2100      	movs	r1, #0
 800e95e:	4638      	mov	r0, r7
 800e960:	f7fe fed8 	bl	800d714 <RegionCommonCountChannels>
 800e964:	2831      	cmp	r0, #49	; 0x31
 800e966:	d8f5      	bhi.n	800e954 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800e968:	4634      	mov	r4, r6
 800e96a:	2e05      	cmp	r6, #5
 800e96c:	bfb8      	it	lt
 800e96e:	2405      	movlt	r4, #5
 800e970:	e7f0      	b.n	800e954 <LimitTxPower+0x18>
	...

0800e974 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800e974:	b500      	push	{lr}
 800e976:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e978:	2300      	movs	r3, #0
 800e97a:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800e97c:	7803      	ldrb	r3, [r0, #0]
 800e97e:	3b01      	subs	r3, #1
 800e980:	2b37      	cmp	r3, #55	; 0x37
 800e982:	d81f      	bhi.n	800e9c4 <RegionUS915GetPhyParam+0x50>
 800e984:	e8df f003 	tbb	[pc, r3]
 800e988:	1e1e1e1c 	.word	0x1e1e1e1c
 800e98c:	1e1e1e1e 	.word	0x1e1e1e1e
 800e990:	3e3b1e1e 	.word	0x3e3b1e1e
 800e994:	4d1e4741 	.word	0x4d1e4741
 800e998:	5d595551 	.word	0x5d595551
 800e99c:	6d6a1e61 	.word	0x6d6a1e61
 800e9a0:	7f7c7670 	.word	0x7f7c7670
 800e9a4:	86831e1e 	.word	0x86831e1e
 800e9a8:	1e1e1e23 	.word	0x1e1e1e23
 800e9ac:	1e1e1e1e 	.word	0x1e1e1e1e
 800e9b0:	1e1e1e1e 	.word	0x1e1e1e1e
 800e9b4:	90891e1e 	.word	0x90891e1e
 800e9b8:	a01e9d9a 	.word	0xa01e9d9a
 800e9bc:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800e9c0:	2308      	movs	r3, #8
 800e9c2:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800e9c4:	9804      	ldr	r0, [sp, #16]
 800e9c6:	9005      	str	r0, [sp, #20]
}
 800e9c8:	b007      	add	sp, #28
 800e9ca:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800e9ce:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e9d2:	f88d 3004 	strb.w	r3, [sp, #4]
 800e9d6:	2304      	movs	r3, #4
 800e9d8:	f88d 3005 	strb.w	r3, [sp, #5]
 800e9dc:	2300      	movs	r3, #0
 800e9de:	f88d 3006 	strb.w	r3, [sp, #6]
 800e9e2:	2348      	movs	r3, #72	; 0x48
 800e9e4:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e9e8:	4b44      	ldr	r3, [pc, #272]	; (800eafc <RegionUS915GetPhyParam+0x188>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e9f0:	9202      	str	r2, [sp, #8]
 800e9f2:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e9f4:	a801      	add	r0, sp, #4
 800e9f6:	f7ff f8d9 	bl	800dbac <RegionCommonGetNextLowerTxDr>
 800e9fa:	9004      	str	r0, [sp, #16]
            break;
 800e9fc:	e7e2      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e9fe:	2340      	movs	r3, #64	; 0x40
 800ea00:	9304      	str	r3, [sp, #16]
            break;
 800ea02:	e7df      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800ea04:	2320      	movs	r3, #32
 800ea06:	9304      	str	r3, [sp, #16]
            break;
 800ea08:	e7dc      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800ea0a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ea0e:	4a3c      	ldr	r2, [pc, #240]	; (800eb00 <RegionUS915GetPhyParam+0x18c>)
 800ea10:	5cd3      	ldrb	r3, [r2, r3]
 800ea12:	9304      	str	r3, [sp, #16]
            break;
 800ea14:	e7d6      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800ea16:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ea1a:	4a3a      	ldr	r2, [pc, #232]	; (800eb04 <RegionUS915GetPhyParam+0x190>)
 800ea1c:	5cd3      	ldrb	r3, [r2, r3]
 800ea1e:	9304      	str	r3, [sp, #16]
            break;
 800ea20:	e7d0      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800ea22:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ea26:	9304      	str	r3, [sp, #16]
            break;
 800ea28:	e7cc      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800ea2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ea2e:	9304      	str	r3, [sp, #16]
            break;
 800ea30:	e7c8      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800ea32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ea36:	9304      	str	r3, [sp, #16]
            break;
 800ea38:	e7c4      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800ea3a:	f241 3388 	movw	r3, #5000	; 0x1388
 800ea3e:	9304      	str	r3, [sp, #16]
            break;
 800ea40:	e7c0      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800ea42:	f241 7370 	movw	r3, #6000	; 0x1770
 800ea46:	9304      	str	r3, [sp, #16]
            break;
 800ea48:	e7bc      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800ea4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ea4e:	482e      	ldr	r0, [pc, #184]	; (800eb08 <RegionUS915GetPhyParam+0x194>)
 800ea50:	f001 fc5a 	bl	8010308 <randr>
 800ea54:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800ea58:	9004      	str	r0, [sp, #16]
            break;
 800ea5a:	e7b3      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800ea5c:	4b2b      	ldr	r3, [pc, #172]	; (800eb0c <RegionUS915GetPhyParam+0x198>)
 800ea5e:	9304      	str	r3, [sp, #16]
            break;
 800ea60:	e7b0      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800ea62:	2308      	movs	r3, #8
 800ea64:	9304      	str	r3, [sp, #16]
            break;
 800ea66:	e7ad      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ea68:	4b24      	ldr	r3, [pc, #144]	; (800eafc <RegionUS915GetPhyParam+0x188>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ea70:	9304      	str	r3, [sp, #16]
            break;
 800ea72:	e7a7      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ea74:	4b21      	ldr	r3, [pc, #132]	; (800eafc <RegionUS915GetPhyParam+0x188>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800ea7c:	9304      	str	r3, [sp, #16]
            break;
 800ea7e:	e7a1      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800ea80:	2348      	movs	r3, #72	; 0x48
 800ea82:	9304      	str	r3, [sp, #16]
            break;
 800ea84:	e79e      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ea86:	4b1d      	ldr	r3, [pc, #116]	; (800eafc <RegionUS915GetPhyParam+0x188>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	9304      	str	r3, [sp, #16]
            break;
 800ea8c:	e79a      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800ea8e:	4b20      	ldr	r3, [pc, #128]	; (800eb10 <RegionUS915GetPhyParam+0x19c>)
 800ea90:	9304      	str	r3, [sp, #16]
            break;
 800ea92:	e797      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800ea94:	2300      	movs	r3, #0
 800ea96:	9304      	str	r3, [sp, #16]
            break;
 800ea98:	e794      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800ea9a:	4a1e      	ldr	r2, [pc, #120]	; (800eb14 <RegionUS915GetPhyParam+0x1a0>)
 800ea9c:	491b      	ldr	r1, [pc, #108]	; (800eb0c <RegionUS915GetPhyParam+0x198>)
 800ea9e:	7900      	ldrb	r0, [r0, #4]
 800eaa0:	f7fe fd0e 	bl	800d4c0 <RegionBaseUSCalcDownlinkFrequency>
 800eaa4:	9004      	str	r0, [sp, #16]
            break;
 800eaa6:	e78d      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800eaa8:	2317      	movs	r3, #23
 800eaaa:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800eaae:	2304      	movs	r3, #4
 800eab0:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800eab4:	2303      	movs	r3, #3
 800eab6:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800eaba:	e783      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800eabc:	2308      	movs	r3, #8
 800eabe:	9304      	str	r3, [sp, #16]
            break;
 800eac0:	e780      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800eac2:	2308      	movs	r3, #8
 800eac4:	9304      	str	r3, [sp, #16]
            break;
 800eac6:	e77d      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800eac8:	4a12      	ldr	r2, [pc, #72]	; (800eb14 <RegionUS915GetPhyParam+0x1a0>)
 800eaca:	4910      	ldr	r1, [pc, #64]	; (800eb0c <RegionUS915GetPhyParam+0x198>)
 800eacc:	7900      	ldrb	r0, [r0, #4]
 800eace:	f7fe fcf7 	bl	800d4c0 <RegionBaseUSCalcDownlinkFrequency>
 800ead2:	9004      	str	r0, [sp, #16]
            break;
 800ead4:	e776      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800ead6:	2308      	movs	r3, #8
 800ead8:	9304      	str	r3, [sp, #16]
            break;
 800eada:	e773      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800eadc:	2308      	movs	r3, #8
 800eade:	9304      	str	r3, [sp, #16]
            break;
 800eae0:	e770      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800eae2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800eae6:	4a0c      	ldr	r2, [pc, #48]	; (800eb18 <RegionUS915GetPhyParam+0x1a4>)
 800eae8:	5cd3      	ldrb	r3, [r2, r3]
 800eaea:	9304      	str	r3, [sp, #16]
            break;
 800eaec:	e76a      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800eaee:	490b      	ldr	r1, [pc, #44]	; (800eb1c <RegionUS915GetPhyParam+0x1a8>)
 800eaf0:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800eaf4:	f7ff f87e 	bl	800dbf4 <RegionCommonGetBandwidth>
 800eaf8:	9004      	str	r0, [sp, #16]
            break;
 800eafa:	e763      	b.n	800e9c4 <RegionUS915GetPhyParam+0x50>
 800eafc:	200011a8 	.word	0x200011a8
 800eb00:	08018898 	.word	0x08018898
 800eb04:	08018888 	.word	0x08018888
 800eb08:	fffffc18 	.word	0xfffffc18
 800eb0c:	370870a0 	.word	0x370870a0
 800eb10:	4200999a 	.word	0x4200999a
 800eb14:	000927c0 	.word	0x000927c0
 800eb18:	08018878 	.word	0x08018878
 800eb1c:	08018824 	.word	0x08018824

0800eb20 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800eb20:	b510      	push	{r4, lr}
 800eb22:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800eb24:	4b0b      	ldr	r3, [pc, #44]	; (800eb54 <RegionUS915SetBandTxDone+0x34>)
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	7803      	ldrb	r3, [r0, #0]
 800eb2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eb2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb32:	7a5b      	ldrb	r3, [r3, #9]
 800eb34:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800eb38:	4b07      	ldr	r3, [pc, #28]	; (800eb58 <RegionUS915SetBandTxDone+0x38>)
 800eb3a:	681c      	ldr	r4, [r3, #0]
 800eb3c:	6903      	ldr	r3, [r0, #16]
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	68c3      	ldr	r3, [r0, #12]
 800eb42:	7842      	ldrb	r2, [r0, #1]
 800eb44:	6881      	ldr	r1, [r0, #8]
 800eb46:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800eb4a:	f7fe fe08 	bl	800d75e <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800eb4e:	b002      	add	sp, #8
 800eb50:	bd10      	pop	{r4, pc}
 800eb52:	bf00      	nop
 800eb54:	200011a8 	.word	0x200011a8
 800eb58:	200011a0 	.word	0x200011a0

0800eb5c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800eb5c:	b510      	push	{r4, lr}
 800eb5e:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800eb60:	2301      	movs	r3, #1
 800eb62:	f8ad 3000 	strh.w	r3, [sp]
 800eb66:	2300      	movs	r3, #0
 800eb68:	f88d 3002 	strb.w	r3, [sp, #2]
 800eb6c:	9301      	str	r3, [sp, #4]
 800eb6e:	9302      	str	r3, [sp, #8]
 800eb70:	9303      	str	r3, [sp, #12]
 800eb72:	9304      	str	r3, [sp, #16]
 800eb74:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800eb78:	7b04      	ldrb	r4, [r0, #12]
 800eb7a:	b174      	cbz	r4, 800eb9a <RegionUS915InitDefaults+0x3e>
 800eb7c:	3c01      	subs	r4, #1
 800eb7e:	b2e4      	uxtb	r4, r4
 800eb80:	2c01      	cmp	r4, #1
 800eb82:	d87e      	bhi.n	800ec82 <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800eb84:	4b40      	ldr	r3, [pc, #256]	; (800ec88 <RegionUS915InitDefaults+0x12c>)
 800eb86:	6818      	ldr	r0, [r3, #0]
 800eb88:	2206      	movs	r2, #6
 800eb8a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800eb8e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800eb92:	f7fe fdd5 	bl	800d740 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800eb96:	2300      	movs	r3, #0
 800eb98:	e071      	b.n	800ec7e <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800eb9a:	6803      	ldr	r3, [r0, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d070      	beq.n	800ec82 <RegionUS915InitDefaults+0x126>
 800eba0:	6842      	ldr	r2, [r0, #4]
 800eba2:	2a00      	cmp	r2, #0
 800eba4:	d06d      	beq.n	800ec82 <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800eba6:	4939      	ldr	r1, [pc, #228]	; (800ec8c <RegionUS915InitDefaults+0x130>)
 800eba8:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800ebaa:	4937      	ldr	r1, [pc, #220]	; (800ec88 <RegionUS915InitDefaults+0x12c>)
 800ebac:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800ebae:	6880      	ldr	r0, [r0, #8]
 800ebb0:	4a37      	ldr	r2, [pc, #220]	; (800ec90 <RegionUS915InitDefaults+0x134>)
 800ebb2:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800ebb8:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800ebba:	2218      	movs	r2, #24
 800ebbc:	4669      	mov	r1, sp
 800ebbe:	f001 fbb0 	bl	8010322 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800ebc2:	e011      	b.n	800ebe8 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800ebc4:	4b30      	ldr	r3, [pc, #192]	; (800ec88 <RegionUS915InitDefaults+0x12c>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4932      	ldr	r1, [pc, #200]	; (800ec94 <RegionUS915InitDefaults+0x138>)
 800ebca:	4a33      	ldr	r2, [pc, #204]	; (800ec98 <RegionUS915InitDefaults+0x13c>)
 800ebcc:	fb01 2204 	mla	r2, r1, r4, r2
 800ebd0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ebd4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800ebd8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800ebdc:	2230      	movs	r2, #48	; 0x30
 800ebde:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800ebe4:	3401      	adds	r4, #1
 800ebe6:	b2e4      	uxtb	r4, r4
 800ebe8:	2c3f      	cmp	r4, #63	; 0x3f
 800ebea:	d9eb      	bls.n	800ebc4 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800ebec:	2340      	movs	r3, #64	; 0x40
 800ebee:	2b47      	cmp	r3, #71	; 0x47
 800ebf0:	d814      	bhi.n	800ec1c <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800ebf2:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800ebf6:	4a24      	ldr	r2, [pc, #144]	; (800ec88 <RegionUS915InitDefaults+0x12c>)
 800ebf8:	6812      	ldr	r2, [r2, #0]
 800ebfa:	4c28      	ldr	r4, [pc, #160]	; (800ec9c <RegionUS915InitDefaults+0x140>)
 800ebfc:	4928      	ldr	r1, [pc, #160]	; (800eca0 <RegionUS915InitDefaults+0x144>)
 800ebfe:	fb04 1100 	mla	r1, r4, r0, r1
 800ec02:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800ec06:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800ec0a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800ec0e:	2144      	movs	r1, #68	; 0x44
 800ec10:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800ec12:	2100      	movs	r1, #0
 800ec14:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800ec16:	3301      	adds	r3, #1
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	e7e8      	b.n	800ebee <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800ec1c:	4c1a      	ldr	r4, [pc, #104]	; (800ec88 <RegionUS915InitDefaults+0x12c>)
 800ec1e:	6820      	ldr	r0, [r4, #0]
 800ec20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec24:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800ec28:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800ec2c:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800ec30:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800ec34:	23ff      	movs	r3, #255	; 0xff
 800ec36:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ec40:	2206      	movs	r2, #6
 800ec42:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800ec46:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800ec4a:	f7fe fd79 	bl	800d740 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800ec4e:	6821      	ldr	r1, [r4, #0]
 800ec50:	2206      	movs	r2, #6
 800ec52:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800ec56:	4b0d      	ldr	r3, [pc, #52]	; (800ec8c <RegionUS915InitDefaults+0x130>)
 800ec58:	6818      	ldr	r0, [r3, #0]
 800ec5a:	f7fe fd71 	bl	800d740 <RegionCommonChanMaskCopy>
            break;
 800ec5e:	e010      	b.n	800ec82 <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800ec60:	4a0a      	ldr	r2, [pc, #40]	; (800ec8c <RegionUS915InitDefaults+0x130>)
 800ec62:	6811      	ldr	r1, [r2, #0]
 800ec64:	4a08      	ldr	r2, [pc, #32]	; (800ec88 <RegionUS915InitDefaults+0x12c>)
 800ec66:	6812      	ldr	r2, [r2, #0]
 800ec68:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800ec6c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800ec70:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ec74:	4002      	ands	r2, r0
 800ec76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	2b05      	cmp	r3, #5
 800ec80:	d9ee      	bls.n	800ec60 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800ec82:	b006      	add	sp, #24
 800ec84:	bd10      	pop	{r4, pc}
 800ec86:	bf00      	nop
 800ec88:	200011a8 	.word	0x200011a8
 800ec8c:	200011a4 	.word	0x200011a4
 800ec90:	200011a0 	.word	0x200011a0
 800ec94:	00030d40 	.word	0x00030d40
 800ec98:	35c80160 	.word	0x35c80160
 800ec9c:	00186a00 	.word	0x00186a00
 800eca0:	35d2afc0 	.word	0x35d2afc0

0800eca4 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800eca4:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800eca6:	290a      	cmp	r1, #10
 800eca8:	d833      	bhi.n	800ed12 <RegionUS915Verify+0x6e>
 800ecaa:	e8df f001 	tbb	[pc, r1]
 800ecae:	3206      	.short	0x3206
 800ecb0:	0a323232 	.word	0x0a323232
 800ecb4:	28321e14 	.word	0x28321e14
 800ecb8:	28          	.byte	0x28
 800ecb9:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800ecba:	6800      	ldr	r0, [r0, #0]
 800ecbc:	f7ff fdf0 	bl	800e8a0 <VerifyRfFreq>
 800ecc0:	e028      	b.n	800ed14 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800ecc2:	2204      	movs	r2, #4
 800ecc4:	2100      	movs	r1, #0
 800ecc6:	f990 0000 	ldrsb.w	r0, [r0]
 800ecca:	f7fe fcc8 	bl	800d65e <RegionCommonValueInRange>
 800ecce:	3800      	subs	r0, #0
 800ecd0:	bf18      	it	ne
 800ecd2:	2001      	movne	r0, #1
 800ecd4:	e01e      	b.n	800ed14 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800ecd6:	2205      	movs	r2, #5
 800ecd8:	2100      	movs	r1, #0
 800ecda:	f990 0000 	ldrsb.w	r0, [r0]
 800ecde:	f7fe fcbe 	bl	800d65e <RegionCommonValueInRange>
 800ece2:	3800      	subs	r0, #0
 800ece4:	bf18      	it	ne
 800ece6:	2001      	movne	r0, #1
 800ece8:	e014      	b.n	800ed14 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800ecea:	220d      	movs	r2, #13
 800ecec:	2108      	movs	r1, #8
 800ecee:	f990 0000 	ldrsb.w	r0, [r0]
 800ecf2:	f7fe fcb4 	bl	800d65e <RegionCommonValueInRange>
 800ecf6:	3800      	subs	r0, #0
 800ecf8:	bf18      	it	ne
 800ecfa:	2001      	movne	r0, #1
 800ecfc:	e00a      	b.n	800ed14 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800ecfe:	220e      	movs	r2, #14
 800ed00:	2100      	movs	r1, #0
 800ed02:	f990 0000 	ldrsb.w	r0, [r0]
 800ed06:	f7fe fcaa 	bl	800d65e <RegionCommonValueInRange>
 800ed0a:	3800      	subs	r0, #0
 800ed0c:	bf18      	it	ne
 800ed0e:	2001      	movne	r0, #1
 800ed10:	e000      	b.n	800ed14 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800ed12:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800ed14:	bd08      	pop	{r3, pc}
	...

0800ed18 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800ed18:	7a03      	ldrb	r3, [r0, #8]
 800ed1a:	2b10      	cmp	r3, #16
 800ed1c:	d134      	bne.n	800ed88 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800ed1e:	6843      	ldr	r3, [r0, #4]
 800ed20:	7bdb      	ldrb	r3, [r3, #15]
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d130      	bne.n	800ed88 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800ed26:	2200      	movs	r2, #0
 800ed28:	4613      	mov	r3, r2
 800ed2a:	2a04      	cmp	r2, #4
 800ed2c:	d82b      	bhi.n	800ed86 <RegionUS915ApplyCFList+0x6e>
{
 800ed2e:	b530      	push	{r4, r5, lr}
 800ed30:	e010      	b.n	800ed54 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800ed32:	4916      	ldr	r1, [pc, #88]	; (800ed8c <RegionUS915ApplyCFList+0x74>)
 800ed34:	680d      	ldr	r5, [r1, #0]
 800ed36:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 800ed3a:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800ed3e:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 800ed42:	4021      	ands	r1, r4
 800ed44:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800ed48:	3301      	adds	r3, #1
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	3202      	adds	r2, #2
 800ed4e:	b2d2      	uxtb	r2, r2
 800ed50:	2b04      	cmp	r3, #4
 800ed52:	d817      	bhi.n	800ed84 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800ed54:	6841      	ldr	r1, [r0, #4]
 800ed56:	4c0e      	ldr	r4, [pc, #56]	; (800ed90 <RegionUS915ApplyCFList+0x78>)
 800ed58:	6824      	ldr	r4, [r4, #0]
 800ed5a:	469c      	mov	ip, r3
 800ed5c:	5c89      	ldrb	r1, [r1, r2]
 800ed5e:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800ed62:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800ed66:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800ed6a:	4496      	add	lr, r2
 800ed6c:	f89e e001 	ldrb.w	lr, [lr, #1]
 800ed70:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800ed74:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800ed78:	2b04      	cmp	r3, #4
 800ed7a:	d1da      	bne.n	800ed32 <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800ed7c:	b2c9      	uxtb	r1, r1
 800ed7e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800ed82:	e7d6      	b.n	800ed32 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800ed84:	bd30      	pop	{r4, r5, pc}
 800ed86:	4770      	bx	lr
 800ed88:	4770      	bx	lr
 800ed8a:	bf00      	nop
 800ed8c:	200011a4 	.word	0x200011a4
 800ed90:	200011a8 	.word	0x200011a8

0800ed94 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800ed94:	b570      	push	{r4, r5, r6, lr}
 800ed96:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800ed98:	2204      	movs	r2, #4
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	6800      	ldr	r0, [r0, #0]
 800ed9e:	f7fe fcb9 	bl	800d714 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800eda2:	2801      	cmp	r0, #1
 800eda4:	d031      	beq.n	800ee0a <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800eda6:	792c      	ldrb	r4, [r5, #4]
 800eda8:	b11c      	cbz	r4, 800edb2 <RegionUS915ChanMaskSet+0x1e>
 800edaa:	2c01      	cmp	r4, #1
 800edac:	d023      	beq.n	800edf6 <RegionUS915ChanMaskSet+0x62>
 800edae:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800edb0:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800edb2:	4e17      	ldr	r6, [pc, #92]	; (800ee10 <RegionUS915ChanMaskSet+0x7c>)
 800edb4:	6830      	ldr	r0, [r6, #0]
 800edb6:	2206      	movs	r2, #6
 800edb8:	6829      	ldr	r1, [r5, #0]
 800edba:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800edbe:	f7fe fcbf 	bl	800d740 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800edc2:	6830      	ldr	r0, [r6, #0]
 800edc4:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 800edc8:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800edcc:	2300      	movs	r3, #0
 800edce:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800edd2:	e00c      	b.n	800edee <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800edd4:	4b0f      	ldr	r3, [pc, #60]	; (800ee14 <RegionUS915ChanMaskSet+0x80>)
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800eddc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800ede0:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 800ede4:	400b      	ands	r3, r1
 800ede6:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800edea:	3401      	adds	r4, #1
 800edec:	b2e4      	uxtb	r4, r4
 800edee:	2c05      	cmp	r4, #5
 800edf0:	d9f0      	bls.n	800edd4 <RegionUS915ChanMaskSet+0x40>
    return true;
 800edf2:	2001      	movs	r0, #1
 800edf4:	e7dc      	b.n	800edb0 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800edf6:	4b06      	ldr	r3, [pc, #24]	; (800ee10 <RegionUS915ChanMaskSet+0x7c>)
 800edf8:	6818      	ldr	r0, [r3, #0]
 800edfa:	2206      	movs	r2, #6
 800edfc:	6829      	ldr	r1, [r5, #0]
 800edfe:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800ee02:	f7fe fc9d 	bl	800d740 <RegionCommonChanMaskCopy>
    return true;
 800ee06:	2001      	movs	r0, #1
            break;
 800ee08:	e7d2      	b.n	800edb0 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	e7d0      	b.n	800edb0 <RegionUS915ChanMaskSet+0x1c>
 800ee0e:	bf00      	nop
 800ee10:	200011a8 	.word	0x200011a8
 800ee14:	200011a4 	.word	0x200011a4

0800ee18 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ee18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	460e      	mov	r6, r1
 800ee1e:	4617      	mov	r7, r2
 800ee20:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800ee22:	280d      	cmp	r0, #13
 800ee24:	bfa8      	it	ge
 800ee26:	200d      	movge	r0, #13
 800ee28:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800ee2a:	4d0f      	ldr	r5, [pc, #60]	; (800ee68 <RegionUS915ComputeRxWindowParameters+0x50>)
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	f7fe fee1 	bl	800dbf4 <RegionCommonGetBandwidth>
 800ee32:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800ee34:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ee38:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800ee3c:	4a0b      	ldr	r2, [pc, #44]	; (800ee6c <RegionUS915ComputeRxWindowParameters+0x54>)
 800ee3e:	5cd0      	ldrb	r0, [r2, r3]
 800ee40:	f7fe fda4 	bl	800d98c <RegionCommonComputeSymbolTimeLoRa>
 800ee44:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800ee46:	4b0a      	ldr	r3, [pc, #40]	; (800ee70 <RegionUS915ComputeRxWindowParameters+0x58>)
 800ee48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee4a:	4798      	blx	r3
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	f104 020c 	add.w	r2, r4, #12
 800ee52:	9201      	str	r2, [sp, #4]
 800ee54:	3408      	adds	r4, #8
 800ee56:	9400      	str	r4, [sp, #0]
 800ee58:	463a      	mov	r2, r7
 800ee5a:	4631      	mov	r1, r6
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f7fe fda3 	bl	800d9a8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800ee62:	b003      	add	sp, #12
 800ee64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee66:	bf00      	nop
 800ee68:	08018824 	.word	0x08018824
 800ee6c:	08018878 	.word	0x08018878
 800ee70:	08018e34 	.word	0x08018e34

0800ee74 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ee74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee78:	b08b      	sub	sp, #44	; 0x2c
 800ee7a:	4604      	mov	r4, r0
 800ee7c:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800ee7e:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800ee82:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ee84:	4b22      	ldr	r3, [pc, #136]	; (800ef10 <RegionUS915RxConfig+0x9c>)
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	4798      	blx	r3
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d13d      	bne.n	800ef0a <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ee8e:	7ce3      	ldrb	r3, [r4, #19]
 800ee90:	b933      	cbnz	r3, 800eea0 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800ee92:	7827      	ldrb	r7, [r4, #0]
 800ee94:	f007 0307 	and.w	r3, r7, #7
 800ee98:	4a1e      	ldr	r2, [pc, #120]	; (800ef14 <RegionUS915RxConfig+0xa0>)
 800ee9a:	4f1f      	ldr	r7, [pc, #124]	; (800ef18 <RegionUS915RxConfig+0xa4>)
 800ee9c:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800eea0:	4b1e      	ldr	r3, [pc, #120]	; (800ef1c <RegionUS915RxConfig+0xa8>)
 800eea2:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 800eea6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800ef10 <RegionUS915RxConfig+0x9c>
 800eeaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eeae:	4638      	mov	r0, r7
 800eeb0:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800eeb2:	f8d8 8018 	ldr.w	r8, [r8, #24]
 800eeb6:	7ca3      	ldrb	r3, [r4, #18]
 800eeb8:	9309      	str	r3, [sp, #36]	; 0x24
 800eeba:	2001      	movs	r0, #1
 800eebc:	9008      	str	r0, [sp, #32]
 800eebe:	2200      	movs	r2, #0
 800eec0:	9207      	str	r2, [sp, #28]
 800eec2:	9206      	str	r2, [sp, #24]
 800eec4:	9205      	str	r2, [sp, #20]
 800eec6:	9204      	str	r2, [sp, #16]
 800eec8:	9203      	str	r2, [sp, #12]
 800eeca:	8923      	ldrh	r3, [r4, #8]
 800eecc:	9302      	str	r3, [sp, #8]
 800eece:	2308      	movs	r3, #8
 800eed0:	9301      	str	r3, [sp, #4]
 800eed2:	9200      	str	r2, [sp, #0]
 800eed4:	4603      	mov	r3, r0
 800eed6:	464a      	mov	r2, r9
 800eed8:	78a1      	ldrb	r1, [r4, #2]
 800eeda:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 800eedc:	7c63      	ldrb	r3, [r4, #17]
 800eede:	b18b      	cbz	r3, 800ef04 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800eee0:	4b0f      	ldr	r3, [pc, #60]	; (800ef20 <RegionUS915RxConfig+0xac>)
 800eee2:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800eee4:	4b0a      	ldr	r3, [pc, #40]	; (800ef10 <RegionUS915RxConfig+0x9c>)
 800eee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eee8:	310d      	adds	r1, #13
 800eeea:	b2c9      	uxtb	r1, r1
 800eeec:	2001      	movs	r0, #1
 800eeee:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800eef0:	4632      	mov	r2, r6
 800eef2:	4639      	mov	r1, r7
 800eef4:	7ce0      	ldrb	r0, [r4, #19]
 800eef6:	f7fe fe8f 	bl	800dc18 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800eefa:	702e      	strb	r6, [r5, #0]
    return true;
 800eefc:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800eefe:	b00b      	add	sp, #44	; 0x2c
 800ef00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800ef04:	4b07      	ldr	r3, [pc, #28]	; (800ef24 <RegionUS915RxConfig+0xb0>)
 800ef06:	5d99      	ldrb	r1, [r3, r6]
 800ef08:	e7ec      	b.n	800eee4 <RegionUS915RxConfig+0x70>
        return false;
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	e7f7      	b.n	800eefe <RegionUS915RxConfig+0x8a>
 800ef0e:	bf00      	nop
 800ef10:	08018e34 	.word	0x08018e34
 800ef14:	000927c0 	.word	0x000927c0
 800ef18:	370870a0 	.word	0x370870a0
 800ef1c:	08018878 	.word	0x08018878
 800ef20:	08018888 	.word	0x08018888
 800ef24:	08018898 	.word	0x08018898

0800ef28 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ef28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef2c:	b08d      	sub	sp, #52	; 0x34
 800ef2e:	4604      	mov	r4, r0
 800ef30:	468b      	mov	fp, r1
 800ef32:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800ef34:	f990 2001 	ldrsb.w	r2, [r0, #1]
 800ef38:	4b32      	ldr	r3, [pc, #200]	; (800f004 <RegionUS915TxConfig+0xdc>)
 800ef3a:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800ef3e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800f008 <RegionUS915TxConfig+0xe0>
 800ef42:	f8d9 3000 	ldr.w	r3, [r9]
 800ef46:	7801      	ldrb	r1, [r0, #0]
 800ef48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ef4c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ef50:	7a49      	ldrb	r1, [r1, #9]
 800ef52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ef56:	482d      	ldr	r0, [pc, #180]	; (800f00c <RegionUS915TxConfig+0xe4>)
 800ef58:	6800      	ldr	r0, [r0, #0]
 800ef5a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ef5e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ef62:	f991 1002 	ldrsb.w	r1, [r1, #2]
 800ef66:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800ef6a:	f7ff fce7 	bl	800e93c <LimitTxPower>
 800ef6e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800ef70:	4927      	ldr	r1, [pc, #156]	; (800f010 <RegionUS915TxConfig+0xe8>)
 800ef72:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ef76:	f7fe fe3d 	bl	800dbf4 <RegionCommonGetBandwidth>
 800ef7a:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	4925      	ldr	r1, [pc, #148]	; (800f014 <RegionUS915TxConfig+0xec>)
 800ef80:	4630      	mov	r0, r6
 800ef82:	f7fe fd4d 	bl	800da20 <RegionCommonComputeTxPower>
 800ef86:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ef88:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800f018 <RegionUS915TxConfig+0xf0>
 800ef8c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800ef90:	f8d9 1000 	ldr.w	r1, [r9]
 800ef94:	7823      	ldrb	r3, [r4, #0]
 800ef96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ef9a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ef9e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800efa0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800efa4:	9308      	str	r3, [sp, #32]
 800efa6:	2200      	movs	r2, #0
 800efa8:	9207      	str	r2, [sp, #28]
 800efaa:	9206      	str	r2, [sp, #24]
 800efac:	9205      	str	r2, [sp, #20]
 800efae:	2501      	movs	r5, #1
 800efb0:	9504      	str	r5, [sp, #16]
 800efb2:	9203      	str	r2, [sp, #12]
 800efb4:	2308      	movs	r3, #8
 800efb6:	9302      	str	r3, [sp, #8]
 800efb8:	9501      	str	r5, [sp, #4]
 800efba:	f8cd a000 	str.w	sl, [sp]
 800efbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efc2:	4628      	mov	r0, r5
 800efc4:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 800efc8:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800efca:	f8d9 2000 	ldr.w	r2, [r9]
 800efce:	7823      	ldrb	r3, [r4, #0]
 800efd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800efd4:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800efd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800efdc:	f7fe fe3e 	bl	800dc5c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800efe0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800efe4:	7b21      	ldrb	r1, [r4, #12]
 800efe6:	4628      	mov	r0, r5
 800efe8:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800efea:	89a1      	ldrh	r1, [r4, #12]
 800efec:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800eff0:	f7ff fc86 	bl	800e900 <GetTimeOnAir>
 800eff4:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 800eff6:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800effa:	4628      	mov	r0, r5
 800effc:	b00d      	add	sp, #52	; 0x34
 800effe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f002:	bf00      	nop
 800f004:	08018878 	.word	0x08018878
 800f008:	200011a8 	.word	0x200011a8
 800f00c:	200011a0 	.word	0x200011a0
 800f010:	08018824 	.word	0x08018824
 800f014:	41f00000 	.word	0x41f00000
 800f018:	08018e34 	.word	0x08018e34

0800f01c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800f01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f020:	b091      	sub	sp, #68	; 0x44
 800f022:	4605      	mov	r5, r0
 800f024:	4688      	mov	r8, r1
 800f026:	4617      	mov	r7, r2
 800f028:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800f02a:	2400      	movs	r4, #0
 800f02c:	940e      	str	r4, [sp, #56]	; 0x38
 800f02e:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800f032:	940b      	str	r4, [sp, #44]	; 0x2c
 800f034:	940c      	str	r4, [sp, #48]	; 0x30
 800f036:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800f038:	4b97      	ldr	r3, [pc, #604]	; (800f298 <RegionUS915LinkAdrReq+0x27c>)
 800f03a:	6819      	ldr	r1, [r3, #0]
 800f03c:	2206      	movs	r2, #6
 800f03e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800f042:	a80b      	add	r0, sp, #44	; 0x2c
 800f044:	f7fe fb7c 	bl	800d740 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f048:	e00d      	b.n	800f066 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 800f04a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f04e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 800f052:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 800f056:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 800f05a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800f05e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800f062:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f066:	7a2b      	ldrb	r3, [r5, #8]
 800f068:	42a3      	cmp	r3, r4
 800f06a:	f240 8081 	bls.w	800f170 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800f06e:	6868      	ldr	r0, [r5, #4]
 800f070:	a90e      	add	r1, sp, #56	; 0x38
 800f072:	4420      	add	r0, r4
 800f074:	f7fe fc14 	bl	800d8a0 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800f078:	2800      	cmp	r0, #0
 800f07a:	d079      	beq.n	800f170 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 800f07c:	4404      	add	r4, r0
 800f07e:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 800f080:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 800f084:	f1bc 0f06 	cmp.w	ip, #6
 800f088:	d0df      	beq.n	800f04a <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800f08a:	f1bc 0f07 	cmp.w	ip, #7
 800f08e:	d00a      	beq.n	800f0a6 <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800f090:	f1bc 0f05 	cmp.w	ip, #5
 800f094:	d068      	beq.n	800f168 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800f096:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800f09a:	aa10      	add	r2, sp, #64	; 0x40
 800f09c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 800f0a0:	f82c 3c14 	strh.w	r3, [ip, #-20]
 800f0a4:	e7df      	b.n	800f066 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 800f0ac:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 800f0b0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 800f0b4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800f0b8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800f0bc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f0c0:	e7d1      	b.n	800f066 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800f0c2:	aa10      	add	r2, sp, #64	; 0x40
 800f0c4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800f0c8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800f0cc:	f062 02ff 	orn	r2, r2, #255	; 0xff
 800f0d0:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800f0d4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800f0de:	3101      	adds	r1, #1
 800f0e0:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 800f0e2:	f10c 0c01 	add.w	ip, ip, #1
 800f0e6:	fa5f fc8c 	uxtb.w	ip, ip
 800f0ea:	f1bc 0f07 	cmp.w	ip, #7
 800f0ee:	d8ba      	bhi.n	800f066 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800f0f0:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	fa03 f30c 	lsl.w	r3, r3, ip
 800f0fa:	421a      	tst	r2, r3
 800f0fc:	d011      	beq.n	800f122 <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 800f0fe:	f01c 0f01 	tst.w	ip, #1
 800f102:	d1de      	bne.n	800f0c2 <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800f104:	aa10      	add	r2, sp, #64	; 0x40
 800f106:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800f10a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800f10e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800f112:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 800f116:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f11a:	4313      	orrs	r3, r2
 800f11c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f120:	e7df      	b.n	800f0e2 <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 800f122:	f01c 0f01 	tst.w	ip, #1
 800f126:	d10f      	bne.n	800f148 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800f128:	aa10      	add	r2, sp, #64	; 0x40
 800f12a:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 800f12e:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 800f132:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800f136:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800f13a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f13e:	ea22 0303 	bic.w	r3, r2, r3
 800f142:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f146:	e7cc      	b.n	800f0e2 <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800f148:	aa10      	add	r2, sp, #64	; 0x40
 800f14a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800f14e:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 800f152:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 800f156:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f15a:	ea22 0303 	bic.w	r3, r2, r3
 800f15e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 800f162:	3101      	adds	r1, #1
 800f164:	b2c9      	uxtb	r1, r1
 800f166:	e7bc      	b.n	800f0e2 <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 800f168:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 800f16c:	4661      	mov	r1, ip
 800f16e:	e7bc      	b.n	800f0ea <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800f170:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800f174:	2b03      	cmp	r3, #3
 800f176:	dd58      	ble.n	800f22a <RegionUS915LinkAdrReq+0x20e>
 800f178:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f17c:	2302      	movs	r3, #2
 800f17e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800f182:	7a6b      	ldrb	r3, [r5, #9]
 800f184:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 800f188:	a809      	add	r0, sp, #36	; 0x24
 800f18a:	f7ff fbf3 	bl	800e974 <RegionUS915GetPhyParam>
 800f18e:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 800f190:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800f194:	7aab      	ldrb	r3, [r5, #10]
 800f196:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800f19a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800f19e:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800f1a2:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800f1a6:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800f1aa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800f1ae:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800f1b2:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800f1b6:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800f1ba:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800f1be:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800f1c2:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800f1c6:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 800f1ca:	2348      	movs	r3, #72	; 0x48
 800f1cc:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800f1d0:	ab0b      	add	r3, sp, #44	; 0x2c
 800f1d2:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800f1d4:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 800f1d8:	2304      	movs	r3, #4
 800f1da:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800f1de:	4b2e      	ldr	r3, [pc, #184]	; (800f298 <RegionUS915LinkAdrReq+0x27c>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 800f1e4:	230e      	movs	r3, #14
 800f1e6:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800f1f0:	682b      	ldr	r3, [r5, #0]
 800f1f2:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800f1f4:	ab0e      	add	r3, sp, #56	; 0x38
 800f1f6:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800f1fa:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 800f1fe:	4668      	mov	r0, sp
 800f200:	f7fe fb6c 	bl	800d8dc <RegionCommonLinkAdrReqVerifyParams>
 800f204:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800f206:	2807      	cmp	r0, #7
 800f208:	d01c      	beq.n	800f244 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800f20a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 800f20e:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 800f212:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 800f216:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800f218:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800f21c:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 800f21e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f220:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 800f222:	4628      	mov	r0, r5
 800f224:	b011      	add	sp, #68	; 0x44
 800f226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800f22a:	2204      	movs	r2, #4
 800f22c:	2100      	movs	r1, #0
 800f22e:	a80b      	add	r0, sp, #44	; 0x2c
 800f230:	f7fe fa70 	bl	800d714 <RegionCommonCountChannels>
 800f234:	2801      	cmp	r0, #1
 800f236:	d902      	bls.n	800f23e <RegionUS915LinkAdrReq+0x222>
 800f238:	f04f 0907 	mov.w	r9, #7
 800f23c:	e79e      	b.n	800f17c <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 800f23e:	f04f 0906 	mov.w	r9, #6
 800f242:	e79b      	b.n	800f17c <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 800f244:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800f298 <RegionUS915LinkAdrReq+0x27c>
 800f248:	f8d9 0000 	ldr.w	r0, [r9]
 800f24c:	2206      	movs	r2, #6
 800f24e:	a90b      	add	r1, sp, #44	; 0x2c
 800f250:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f254:	f7fe fa74 	bl	800d740 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 800f258:	4b10      	ldr	r3, [pc, #64]	; (800f29c <RegionUS915LinkAdrReq+0x280>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f8d9 2000 	ldr.w	r2, [r9]
 800f260:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 800f264:	8818      	ldrh	r0, [r3, #0]
 800f266:	4001      	ands	r1, r0
 800f268:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 800f26a:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 800f26e:	8858      	ldrh	r0, [r3, #2]
 800f270:	4001      	ands	r1, r0
 800f272:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 800f274:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 800f278:	8898      	ldrh	r0, [r3, #4]
 800f27a:	4001      	ands	r1, r0
 800f27c:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 800f27e:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 800f282:	88d8      	ldrh	r0, [r3, #6]
 800f284:	4001      	ands	r1, r0
 800f286:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800f288:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 800f28c:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 800f28e:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 800f292:	815a      	strh	r2, [r3, #10]
 800f294:	e7b9      	b.n	800f20a <RegionUS915LinkAdrReq+0x1ee>
 800f296:	bf00      	nop
 800f298:	200011a8 	.word	0x200011a8
 800f29c:	200011a4 	.word	0x200011a4

0800f2a0 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f2a0:	b538      	push	{r3, r4, r5, lr}
 800f2a2:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800f2a4:	6840      	ldr	r0, [r0, #4]
 800f2a6:	f7ff fafb 	bl	800e8a0 <VerifyRfFreq>
 800f2aa:	b310      	cbz	r0, 800f2f2 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 800f2ac:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 800f2ae:	220d      	movs	r2, #13
 800f2b0:	2108      	movs	r1, #8
 800f2b2:	f994 0000 	ldrsb.w	r0, [r4]
 800f2b6:	f7fe f9d2 	bl	800d65e <RegionCommonValueInRange>
 800f2ba:	b908      	cbnz	r0, 800f2c0 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800f2bc:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800f2c0:	2207      	movs	r2, #7
 800f2c2:	2105      	movs	r1, #5
 800f2c4:	f994 0000 	ldrsb.w	r0, [r4]
 800f2c8:	f7fe f9c9 	bl	800d65e <RegionCommonValueInRange>
 800f2cc:	2801      	cmp	r0, #1
 800f2ce:	d003      	beq.n	800f2d8 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 800f2d0:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 800f2d4:	2b0d      	cmp	r3, #13
 800f2d6:	dd01      	ble.n	800f2dc <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 800f2d8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 800f2dc:	2203      	movs	r2, #3
 800f2de:	2100      	movs	r1, #0
 800f2e0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f2e4:	f7fe f9bb 	bl	800d65e <RegionCommonValueInRange>
 800f2e8:	b908      	cbnz	r0, 800f2ee <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800f2ea:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 800f2ee:	4628      	mov	r0, r5
 800f2f0:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800f2f2:	2506      	movs	r5, #6
 800f2f4:	e7db      	b.n	800f2ae <RegionUS915RxParamSetupReq+0xe>

0800f2f6 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 800f2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2fa:	4770      	bx	lr

0800f2fc <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800f2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f300:	4770      	bx	lr

0800f302 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 800f302:	f04f 30ff 	mov.w	r0, #4294967295
 800f306:	4770      	bx	lr

0800f308 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800f308:	b999      	cbnz	r1, 800f332 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800f30a:	4b0e      	ldr	r3, [pc, #56]	; (800f344 <RegionUS915AlternateDr+0x3c>)
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	7b53      	ldrb	r3, [r2, #13]
 800f310:	3301      	adds	r3, #1
 800f312:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800f314:	4b0b      	ldr	r3, [pc, #44]	; (800f344 <RegionUS915AlternateDr+0x3c>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	7b5a      	ldrb	r2, [r3, #13]
 800f31a:	4b0b      	ldr	r3, [pc, #44]	; (800f348 <RegionUS915AlternateDr+0x40>)
 800f31c:	fba3 1302 	umull	r1, r3, r3, r2
 800f320:	085b      	lsrs	r3, r3, #1
 800f322:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800f326:	1ad3      	subs	r3, r2, r3
 800f328:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f32c:	d007      	beq.n	800f33e <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 800f32e:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 800f330:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 800f332:	4b04      	ldr	r3, [pc, #16]	; (800f344 <RegionUS915AlternateDr+0x3c>)
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	7b53      	ldrb	r3, [r2, #13]
 800f338:	3b01      	subs	r3, #1
 800f33a:	7353      	strb	r3, [r2, #13]
 800f33c:	e7ea      	b.n	800f314 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 800f33e:	2004      	movs	r0, #4
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop
 800f344:	200011a4 	.word	0x200011a4
 800f348:	38e38e39 	.word	0x38e38e39

0800f34c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f350:	b0a4      	sub	sp, #144	; 0x90
 800f352:	4604      	mov	r4, r0
 800f354:	460e      	mov	r6, r1
 800f356:	4690      	mov	r8, r2
 800f358:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800f35a:	2500      	movs	r5, #0
 800f35c:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 800f360:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800f364:	9511      	str	r5, [sp, #68]	; 0x44
 800f366:	2244      	movs	r2, #68	; 0x44
 800f368:	4629      	mov	r1, r5
 800f36a:	a812      	add	r0, sp, #72	; 0x48
 800f36c:	f003 fc96 	bl	8012c9c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800f370:	2204      	movs	r2, #4
 800f372:	4629      	mov	r1, r5
 800f374:	4b49      	ldr	r3, [pc, #292]	; (800f49c <RegionUS915NextChannel+0x150>)
 800f376:	6818      	ldr	r0, [r3, #0]
 800f378:	f7fe f9cc 	bl	800d714 <RegionCommonCountChannels>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d052      	beq.n	800f426 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800f380:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800f384:	2b03      	cmp	r3, #3
 800f386:	dd08      	ble.n	800f39a <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800f388:	4b44      	ldr	r3, [pc, #272]	; (800f49c <RegionUS915NextChannel+0x150>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	7a1a      	ldrb	r2, [r3, #8]
 800f38e:	b922      	cbnz	r2, 800f39a <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800f390:	4a43      	ldr	r2, [pc, #268]	; (800f4a0 <RegionUS915NextChannel+0x154>)
 800f392:	6812      	ldr	r2, [r2, #0]
 800f394:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 800f398:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f39a:	7a63      	ldrb	r3, [r4, #9]
 800f39c:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f3a0:	7a23      	ldrb	r3, [r4, #8]
 800f3a2:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800f3a6:	4b3d      	ldr	r3, [pc, #244]	; (800f49c <RegionUS915NextChannel+0x150>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f3ac:	4b3c      	ldr	r3, [pc, #240]	; (800f4a0 <RegionUS915NextChannel+0x154>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800f3b2:	4b3c      	ldr	r3, [pc, #240]	; (800f4a4 <RegionUS915NextChannel+0x158>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800f3b8:	2348      	movs	r3, #72	; 0x48
 800f3ba:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f3c2:	6823      	ldr	r3, [r4, #0]
 800f3c4:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f3c6:	6863      	ldr	r3, [r4, #4]
 800f3c8:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f3ca:	7aa3      	ldrb	r3, [r4, #10]
 800f3cc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f3d6:	ab03      	add	r3, sp, #12
 800f3d8:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f3da:	ab0c      	add	r3, sp, #48	; 0x30
 800f3dc:	f104 020c 	add.w	r2, r4, #12
 800f3e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3e4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f3e8:	7d23      	ldrb	r3, [r4, #20]
 800f3ea:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f3ee:	8ae1      	ldrh	r1, [r4, #22]
 800f3f0:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f3f4:	f7ff fa84 	bl	800e900 <GetTimeOnAir>
 800f3f8:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f3fa:	f8cd 8004 	str.w	r8, [sp, #4]
 800f3fe:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 800f402:	9300      	str	r3, [sp, #0]
 800f404:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800f408:	aa11      	add	r2, sp, #68	; 0x44
 800f40a:	4639      	mov	r1, r7
 800f40c:	a809      	add	r0, sp, #36	; 0x24
 800f40e:	f7fe fb83 	bl	800db18 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f412:	4605      	mov	r5, r0
 800f414:	2800      	cmp	r0, #0
 800f416:	d13c      	bne.n	800f492 <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 800f418:	7a63      	ldrb	r3, [r4, #9]
 800f41a:	b98b      	cbnz	r3, 800f440 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800f41c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800f420:	b1db      	cbz	r3, 800f45a <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800f422:	4603      	mov	r3, r0
 800f424:	e026      	b.n	800f474 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800f426:	4d1d      	ldr	r5, [pc, #116]	; (800f49c <RegionUS915NextChannel+0x150>)
 800f428:	4b1d      	ldr	r3, [pc, #116]	; (800f4a0 <RegionUS915NextChannel+0x154>)
 800f42a:	6819      	ldr	r1, [r3, #0]
 800f42c:	2204      	movs	r2, #4
 800f42e:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800f432:	6828      	ldr	r0, [r5, #0]
 800f434:	f7fe f984 	bl	800d740 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800f438:	682b      	ldr	r3, [r5, #0]
 800f43a:	2200      	movs	r2, #0
 800f43c:	731a      	strb	r2, [r3, #12]
 800f43e:	e79f      	b.n	800f380 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f440:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 800f444:	3901      	subs	r1, #1
 800f446:	f000 ff5f 	bl	8010308 <randr>
 800f44a:	f100 0390 	add.w	r3, r0, #144	; 0x90
 800f44e:	eb0d 0003 	add.w	r0, sp, r3
 800f452:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 800f456:	7033      	strb	r3, [r6, #0]
 800f458:	e015      	b.n	800f486 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800f45a:	4b10      	ldr	r3, [pc, #64]	; (800f49c <RegionUS915NextChannel+0x150>)
 800f45c:	6818      	ldr	r0, [r3, #0]
 800f45e:	4632      	mov	r2, r6
 800f460:	f100 010c 	add.w	r1, r0, #12
 800f464:	f7fd ffde 	bl	800d424 <RegionBaseUSComputeNext125kHzJoinChannel>
 800f468:	2803      	cmp	r0, #3
 800f46a:	d10c      	bne.n	800f486 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800f46c:	4605      	mov	r5, r0
 800f46e:	e010      	b.n	800f492 <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 800f470:	3301      	adds	r3, #1
 800f472:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800f474:	4a09      	ldr	r2, [pc, #36]	; (800f49c <RegionUS915NextChannel+0x150>)
 800f476:	6812      	ldr	r2, [r2, #0]
 800f478:	7a10      	ldrb	r0, [r2, #8]
 800f47a:	4118      	asrs	r0, r3
 800f47c:	f010 0f01 	tst.w	r0, #1
 800f480:	d0f6      	beq.n	800f470 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 800f482:	3340      	adds	r3, #64	; 0x40
 800f484:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800f486:	2248      	movs	r2, #72	; 0x48
 800f488:	7831      	ldrb	r1, [r6, #0]
 800f48a:	4b04      	ldr	r3, [pc, #16]	; (800f49c <RegionUS915NextChannel+0x150>)
 800f48c:	6818      	ldr	r0, [r3, #0]
 800f48e:	f7fe f928 	bl	800d6e2 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800f492:	4628      	mov	r0, r5
 800f494:	b024      	add	sp, #144	; 0x90
 800f496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f49a:	bf00      	nop
 800f49c:	200011a4 	.word	0x200011a4
 800f4a0:	200011a8 	.word	0x200011a8
 800f4a4:	200011a0 	.word	0x200011a0

0800f4a8 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800f4a8:	4b04      	ldr	r3, [pc, #16]	; (800f4bc <RegionUS915ApplyDrOffset+0x14>)
 800f4aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f4ae:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 800f4b0:	2800      	cmp	r0, #0
 800f4b2:	db01      	blt.n	800f4b8 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 800f4b4:	b2c0      	uxtb	r0, r0
 800f4b6:	4770      	bx	lr
        datarate = DR_0;
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	e7fb      	b.n	800f4b4 <RegionUS915ApplyDrOffset+0xc>
 800f4bc:	08018864 	.word	0x08018864

0800f4c0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800f4c0:	b510      	push	{r4, lr}
 800f4c2:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800f4c4:	2210      	movs	r2, #16
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	30f1      	adds	r0, #241	; 0xf1
 800f4ca:	f000 ff42 	bl	8010352 <memset1>
    ctx->M_n = 0;
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800f4d4:	22f0      	movs	r2, #240	; 0xf0
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	f000 ff3b 	bl	8010352 <memset1>
}
 800f4dc:	bd10      	pop	{r4, pc}

0800f4de <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800f4de:	b508      	push	{r3, lr}
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800f4e4:	2110      	movs	r1, #16
 800f4e6:	f000 fb3b 	bl	800fb60 <lorawan_aes_set_key>
}
 800f4ea:	bd08      	pop	{r3, pc}

0800f4ec <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800f4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4f0:	b084      	sub	sp, #16
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	460d      	mov	r5, r1
 800f4f6:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800f4f8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d054      	beq.n	800f5aa <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800f500:	f1c3 0810 	rsb	r8, r3, #16
 800f504:	4647      	mov	r7, r8
 800f506:	4590      	cmp	r8, r2
 800f508:	bf28      	it	cs
 800f50a:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800f50c:	f200 1001 	addw	r0, r0, #257	; 0x101
 800f510:	b2ba      	uxth	r2, r7
 800f512:	4418      	add	r0, r3
 800f514:	f000 ff05 	bl	8010322 <memcpy1>
        ctx->M_n += mlen;
 800f518:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800f51c:	443b      	add	r3, r7
 800f51e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800f522:	2b0f      	cmp	r3, #15
 800f524:	d94d      	bls.n	800f5c2 <AES_CMAC_Update+0xd6>
 800f526:	45b0      	cmp	r8, r6
 800f528:	d24b      	bcs.n	800f5c2 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800f52a:	2300      	movs	r3, #0
 800f52c:	e008      	b.n	800f540 <AES_CMAC_Update+0x54>
 800f52e:	18e2      	adds	r2, r4, r3
 800f530:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800f534:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800f538:	4041      	eors	r1, r0
 800f53a:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800f53e:	3301      	adds	r3, #1
 800f540:	2b0f      	cmp	r3, #15
 800f542:	ddf4      	ble.n	800f52e <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f544:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800f548:	2210      	movs	r2, #16
 800f54a:	4641      	mov	r1, r8
 800f54c:	4668      	mov	r0, sp
 800f54e:	f000 fee8 	bl	8010322 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800f552:	4622      	mov	r2, r4
 800f554:	4669      	mov	r1, sp
 800f556:	4668      	mov	r0, sp
 800f558:	f000 fb84 	bl	800fc64 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800f55c:	2210      	movs	r2, #16
 800f55e:	4669      	mov	r1, sp
 800f560:	4640      	mov	r0, r8
 800f562:	f000 fede 	bl	8010322 <memcpy1>

        data += mlen;
 800f566:	443d      	add	r5, r7
        len -= mlen;
 800f568:	1bf6      	subs	r6, r6, r7
 800f56a:	e01e      	b.n	800f5aa <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800f56c:	eb04 0e03 	add.w	lr, r4, r3
 800f570:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800f574:	5cea      	ldrb	r2, [r5, r3]
 800f576:	ea8c 0c02 	eor.w	ip, ip, r2
 800f57a:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800f57e:	3301      	adds	r3, #1
 800f580:	2b0f      	cmp	r3, #15
 800f582:	ddf3      	ble.n	800f56c <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f584:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800f588:	2210      	movs	r2, #16
 800f58a:	4639      	mov	r1, r7
 800f58c:	4668      	mov	r0, sp
 800f58e:	f000 fec8 	bl	8010322 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800f592:	4622      	mov	r2, r4
 800f594:	4669      	mov	r1, sp
 800f596:	4668      	mov	r0, sp
 800f598:	f000 fb64 	bl	800fc64 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800f59c:	2210      	movs	r2, #16
 800f59e:	4669      	mov	r1, sp
 800f5a0:	4638      	mov	r0, r7
 800f5a2:	f000 febe 	bl	8010322 <memcpy1>

        data += 16;
 800f5a6:	3510      	adds	r5, #16
        len -= 16;
 800f5a8:	3e10      	subs	r6, #16
    while( len > 16 )
 800f5aa:	2e10      	cmp	r6, #16
 800f5ac:	d901      	bls.n	800f5b2 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	e7e6      	b.n	800f580 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800f5b2:	b2b2      	uxth	r2, r6
 800f5b4:	4629      	mov	r1, r5
 800f5b6:	f204 1001 	addw	r0, r4, #257	; 0x101
 800f5ba:	f000 feb2 	bl	8010322 <memcpy1>
    ctx->M_n = len;
 800f5be:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800f5c2:	b004      	add	sp, #16
 800f5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f5c8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800f5c8:	b530      	push	{r4, r5, lr}
 800f5ca:	b089      	sub	sp, #36	; 0x24
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800f5d0:	2210      	movs	r2, #16
 800f5d2:	2100      	movs	r1, #0
 800f5d4:	eb0d 0002 	add.w	r0, sp, r2
 800f5d8:	f000 febb 	bl	8010352 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800f5dc:	4622      	mov	r2, r4
 800f5de:	a904      	add	r1, sp, #16
 800f5e0:	4608      	mov	r0, r1
 800f5e2:	f000 fb3f 	bl	800fc64 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800f5e6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	db01      	blt.n	800f5f2 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e030      	b.n	800f654 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	2b0e      	cmp	r3, #14
 800f5f6:	dc11      	bgt.n	800f61c <AES_CMAC_Final+0x54>
 800f5f8:	f103 0220 	add.w	r2, r3, #32
 800f5fc:	eb0d 0102 	add.w	r1, sp, r2
 800f600:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800f604:	3301      	adds	r3, #1
 800f606:	f103 0220 	add.w	r2, r3, #32
 800f60a:	446a      	add	r2, sp
 800f60c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f610:	09d2      	lsrs	r2, r2, #7
 800f612:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800f616:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f61a:	e7eb      	b.n	800f5f4 <AES_CMAC_Final+0x2c>
 800f61c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f620:	005b      	lsls	r3, r3, #1
 800f622:	b2db      	uxtb	r3, r3
 800f624:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800f628:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800f62c:	f88d 301f 	strb.w	r3, [sp, #31]
 800f630:	e017      	b.n	800f662 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800f632:	f103 0220 	add.w	r2, r3, #32
 800f636:	eb0d 0102 	add.w	r1, sp, r2
 800f63a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800f63e:	3301      	adds	r3, #1
 800f640:	f103 0220 	add.w	r2, r3, #32
 800f644:	446a      	add	r2, sp
 800f646:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f64a:	09d2      	lsrs	r2, r2, #7
 800f64c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800f650:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f654:	2b0e      	cmp	r3, #14
 800f656:	ddec      	ble.n	800f632 <AES_CMAC_Final+0x6a>
 800f658:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f65c:	005b      	lsls	r3, r3, #1
 800f65e:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800f662:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800f666:	2810      	cmp	r0, #16
 800f668:	d014      	beq.n	800f694 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800f66a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	db30      	blt.n	800f6d4 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800f672:	2300      	movs	r3, #0
 800f674:	e041      	b.n	800f6fa <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800f676:	18e1      	adds	r1, r4, r3
 800f678:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800f67c:	f103 0020 	add.w	r0, r3, #32
 800f680:	4468      	add	r0, sp
 800f682:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800f686:	4042      	eors	r2, r0
 800f688:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800f68c:	3301      	adds	r3, #1
 800f68e:	2b0f      	cmp	r3, #15
 800f690:	ddf1      	ble.n	800f676 <AES_CMAC_Final+0xae>
 800f692:	e059      	b.n	800f748 <AES_CMAC_Final+0x180>
 800f694:	2300      	movs	r3, #0
 800f696:	e7fa      	b.n	800f68e <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800f698:	f103 0220 	add.w	r2, r3, #32
 800f69c:	eb0d 0102 	add.w	r1, sp, r2
 800f6a0:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	f103 0220 	add.w	r2, r3, #32
 800f6aa:	446a      	add	r2, sp
 800f6ac:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f6b0:	09d2      	lsrs	r2, r2, #7
 800f6b2:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800f6b6:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f6ba:	2b0e      	cmp	r3, #14
 800f6bc:	ddec      	ble.n	800f698 <AES_CMAC_Final+0xd0>
 800f6be:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800f6ca:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800f6ce:	f88d 301f 	strb.w	r3, [sp, #31]
 800f6d2:	e019      	b.n	800f708 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	e7f0      	b.n	800f6ba <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800f6d8:	f103 0220 	add.w	r2, r3, #32
 800f6dc:	eb0d 0102 	add.w	r1, sp, r2
 800f6e0:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	f103 0220 	add.w	r2, r3, #32
 800f6ea:	446a      	add	r2, sp
 800f6ec:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f6f0:	09d2      	lsrs	r2, r2, #7
 800f6f2:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800f6f6:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f6fa:	2b0e      	cmp	r3, #14
 800f6fc:	ddec      	ble.n	800f6d8 <AES_CMAC_Final+0x110>
 800f6fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f702:	005b      	lsls	r3, r3, #1
 800f704:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800f708:	4420      	add	r0, r4
 800f70a:	2380      	movs	r3, #128	; 0x80
 800f70c:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f710:	e003      	b.n	800f71a <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800f712:	4423      	add	r3, r4
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f71a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800f71e:	3301      	adds	r3, #1
 800f720:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800f724:	2b0f      	cmp	r3, #15
 800f726:	d9f4      	bls.n	800f712 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800f728:	2300      	movs	r3, #0
 800f72a:	e00b      	b.n	800f744 <AES_CMAC_Final+0x17c>
 800f72c:	18e1      	adds	r1, r4, r3
 800f72e:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800f732:	f103 0020 	add.w	r0, r3, #32
 800f736:	4468      	add	r0, sp
 800f738:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800f73c:	4042      	eors	r2, r0
 800f73e:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800f742:	3301      	adds	r3, #1
 800f744:	2b0f      	cmp	r3, #15
 800f746:	ddf1      	ble.n	800f72c <AES_CMAC_Final+0x164>
 800f748:	2300      	movs	r3, #0
 800f74a:	e009      	b.n	800f760 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800f74c:	18e2      	adds	r2, r4, r3
 800f74e:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800f752:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800f756:	ea8c 0c01 	eor.w	ip, ip, r1
 800f75a:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800f75e:	3301      	adds	r3, #1
 800f760:	2b0f      	cmp	r3, #15
 800f762:	ddf3      	ble.n	800f74c <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f764:	2210      	movs	r2, #16
 800f766:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800f76a:	4668      	mov	r0, sp
 800f76c:	f000 fdd9 	bl	8010322 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800f770:	4622      	mov	r2, r4
 800f772:	4629      	mov	r1, r5
 800f774:	4668      	mov	r0, sp
 800f776:	f000 fa75 	bl	800fc64 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800f77a:	2210      	movs	r2, #16
 800f77c:	2100      	movs	r1, #0
 800f77e:	eb0d 0002 	add.w	r0, sp, r2
 800f782:	f000 fde6 	bl	8010352 <memset1>
}
 800f786:	b009      	add	sp, #36	; 0x24
 800f788:	bd30      	pop	{r4, r5, pc}

0800f78a <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800f78a:	780b      	ldrb	r3, [r1, #0]
 800f78c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800f78e:	784b      	ldrb	r3, [r1, #1]
 800f790:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800f792:	788b      	ldrb	r3, [r1, #2]
 800f794:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800f796:	78cb      	ldrb	r3, [r1, #3]
 800f798:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800f79a:	790b      	ldrb	r3, [r1, #4]
 800f79c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800f79e:	794b      	ldrb	r3, [r1, #5]
 800f7a0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800f7a2:	798b      	ldrb	r3, [r1, #6]
 800f7a4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800f7a6:	79cb      	ldrb	r3, [r1, #7]
 800f7a8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800f7aa:	7a0b      	ldrb	r3, [r1, #8]
 800f7ac:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800f7ae:	7a4b      	ldrb	r3, [r1, #9]
 800f7b0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800f7b2:	7a8b      	ldrb	r3, [r1, #10]
 800f7b4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800f7b6:	7acb      	ldrb	r3, [r1, #11]
 800f7b8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800f7ba:	7b0b      	ldrb	r3, [r1, #12]
 800f7bc:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800f7be:	7b4b      	ldrb	r3, [r1, #13]
 800f7c0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800f7c2:	7b8b      	ldrb	r3, [r1, #14]
 800f7c4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800f7c6:	7bcb      	ldrb	r3, [r1, #15]
 800f7c8:	73c3      	strb	r3, [r0, #15]
#endif
}
 800f7ca:	4770      	bx	lr

0800f7cc <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800f7cc:	e004      	b.n	800f7d8 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800f7ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7d2:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	1e53      	subs	r3, r2, #1
 800f7da:	b2db      	uxtb	r3, r3
 800f7dc:	2a00      	cmp	r2, #0
 800f7de:	d1f6      	bne.n	800f7ce <copy_block_nn+0x2>
}
 800f7e0:	4770      	bx	lr

0800f7e2 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800f7e2:	780b      	ldrb	r3, [r1, #0]
 800f7e4:	7802      	ldrb	r2, [r0, #0]
 800f7e6:	4053      	eors	r3, r2
 800f7e8:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800f7ea:	784b      	ldrb	r3, [r1, #1]
 800f7ec:	7842      	ldrb	r2, [r0, #1]
 800f7ee:	4053      	eors	r3, r2
 800f7f0:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800f7f2:	788b      	ldrb	r3, [r1, #2]
 800f7f4:	7882      	ldrb	r2, [r0, #2]
 800f7f6:	4053      	eors	r3, r2
 800f7f8:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800f7fa:	78cb      	ldrb	r3, [r1, #3]
 800f7fc:	78c2      	ldrb	r2, [r0, #3]
 800f7fe:	4053      	eors	r3, r2
 800f800:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800f802:	790b      	ldrb	r3, [r1, #4]
 800f804:	7902      	ldrb	r2, [r0, #4]
 800f806:	4053      	eors	r3, r2
 800f808:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800f80a:	794b      	ldrb	r3, [r1, #5]
 800f80c:	7942      	ldrb	r2, [r0, #5]
 800f80e:	4053      	eors	r3, r2
 800f810:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800f812:	798b      	ldrb	r3, [r1, #6]
 800f814:	7982      	ldrb	r2, [r0, #6]
 800f816:	4053      	eors	r3, r2
 800f818:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800f81a:	79cb      	ldrb	r3, [r1, #7]
 800f81c:	79c2      	ldrb	r2, [r0, #7]
 800f81e:	4053      	eors	r3, r2
 800f820:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800f822:	7a0b      	ldrb	r3, [r1, #8]
 800f824:	7a02      	ldrb	r2, [r0, #8]
 800f826:	4053      	eors	r3, r2
 800f828:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800f82a:	7a4b      	ldrb	r3, [r1, #9]
 800f82c:	7a42      	ldrb	r2, [r0, #9]
 800f82e:	4053      	eors	r3, r2
 800f830:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800f832:	7a8b      	ldrb	r3, [r1, #10]
 800f834:	7a82      	ldrb	r2, [r0, #10]
 800f836:	4053      	eors	r3, r2
 800f838:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800f83a:	7acb      	ldrb	r3, [r1, #11]
 800f83c:	7ac2      	ldrb	r2, [r0, #11]
 800f83e:	4053      	eors	r3, r2
 800f840:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800f842:	7b0b      	ldrb	r3, [r1, #12]
 800f844:	7b02      	ldrb	r2, [r0, #12]
 800f846:	4053      	eors	r3, r2
 800f848:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800f84a:	7b4b      	ldrb	r3, [r1, #13]
 800f84c:	7b42      	ldrb	r2, [r0, #13]
 800f84e:	4053      	eors	r3, r2
 800f850:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800f852:	7b8b      	ldrb	r3, [r1, #14]
 800f854:	7b82      	ldrb	r2, [r0, #14]
 800f856:	4053      	eors	r3, r2
 800f858:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800f85a:	7bcb      	ldrb	r3, [r1, #15]
 800f85c:	7bc2      	ldrb	r2, [r0, #15]
 800f85e:	4053      	eors	r3, r2
 800f860:	73c3      	strb	r3, [r0, #15]
#endif
}
 800f862:	4770      	bx	lr

0800f864 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800f864:	780b      	ldrb	r3, [r1, #0]
 800f866:	f892 c000 	ldrb.w	ip, [r2]
 800f86a:	ea83 030c 	eor.w	r3, r3, ip
 800f86e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800f870:	784b      	ldrb	r3, [r1, #1]
 800f872:	f892 c001 	ldrb.w	ip, [r2, #1]
 800f876:	ea83 030c 	eor.w	r3, r3, ip
 800f87a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800f87c:	788b      	ldrb	r3, [r1, #2]
 800f87e:	f892 c002 	ldrb.w	ip, [r2, #2]
 800f882:	ea83 030c 	eor.w	r3, r3, ip
 800f886:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800f888:	78cb      	ldrb	r3, [r1, #3]
 800f88a:	f892 c003 	ldrb.w	ip, [r2, #3]
 800f88e:	ea83 030c 	eor.w	r3, r3, ip
 800f892:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800f894:	790b      	ldrb	r3, [r1, #4]
 800f896:	f892 c004 	ldrb.w	ip, [r2, #4]
 800f89a:	ea83 030c 	eor.w	r3, r3, ip
 800f89e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800f8a0:	794b      	ldrb	r3, [r1, #5]
 800f8a2:	f892 c005 	ldrb.w	ip, [r2, #5]
 800f8a6:	ea83 030c 	eor.w	r3, r3, ip
 800f8aa:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800f8ac:	798b      	ldrb	r3, [r1, #6]
 800f8ae:	f892 c006 	ldrb.w	ip, [r2, #6]
 800f8b2:	ea83 030c 	eor.w	r3, r3, ip
 800f8b6:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800f8b8:	79cb      	ldrb	r3, [r1, #7]
 800f8ba:	f892 c007 	ldrb.w	ip, [r2, #7]
 800f8be:	ea83 030c 	eor.w	r3, r3, ip
 800f8c2:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800f8c4:	7a0b      	ldrb	r3, [r1, #8]
 800f8c6:	f892 c008 	ldrb.w	ip, [r2, #8]
 800f8ca:	ea83 030c 	eor.w	r3, r3, ip
 800f8ce:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800f8d0:	7a4b      	ldrb	r3, [r1, #9]
 800f8d2:	f892 c009 	ldrb.w	ip, [r2, #9]
 800f8d6:	ea83 030c 	eor.w	r3, r3, ip
 800f8da:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800f8dc:	7a8b      	ldrb	r3, [r1, #10]
 800f8de:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800f8e2:	ea83 030c 	eor.w	r3, r3, ip
 800f8e6:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800f8e8:	7acb      	ldrb	r3, [r1, #11]
 800f8ea:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800f8ee:	ea83 030c 	eor.w	r3, r3, ip
 800f8f2:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800f8f4:	7b0b      	ldrb	r3, [r1, #12]
 800f8f6:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800f8fa:	ea83 030c 	eor.w	r3, r3, ip
 800f8fe:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800f900:	7b4b      	ldrb	r3, [r1, #13]
 800f902:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800f906:	ea83 030c 	eor.w	r3, r3, ip
 800f90a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800f90c:	7b8b      	ldrb	r3, [r1, #14]
 800f90e:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800f912:	ea83 030c 	eor.w	r3, r3, ip
 800f916:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800f918:	7bcb      	ldrb	r3, [r1, #15]
 800f91a:	7bd2      	ldrb	r2, [r2, #15]
 800f91c:	4053      	eors	r3, r2
 800f91e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800f920:	4770      	bx	lr

0800f922 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800f922:	b508      	push	{r3, lr}
    xor_block(d, k);
 800f924:	f7ff ff5d 	bl	800f7e2 <xor_block>
}
 800f928:	bd08      	pop	{r3, pc}
	...

0800f92c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800f92c:	7802      	ldrb	r2, [r0, #0]
 800f92e:	4b18      	ldr	r3, [pc, #96]	; (800f990 <shift_sub_rows+0x64>)
 800f930:	5c9a      	ldrb	r2, [r3, r2]
 800f932:	7002      	strb	r2, [r0, #0]
 800f934:	7902      	ldrb	r2, [r0, #4]
 800f936:	5c9a      	ldrb	r2, [r3, r2]
 800f938:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800f93a:	7a02      	ldrb	r2, [r0, #8]
 800f93c:	5c9a      	ldrb	r2, [r3, r2]
 800f93e:	7202      	strb	r2, [r0, #8]
 800f940:	7b02      	ldrb	r2, [r0, #12]
 800f942:	5c9a      	ldrb	r2, [r3, r2]
 800f944:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800f946:	7842      	ldrb	r2, [r0, #1]
 800f948:	7941      	ldrb	r1, [r0, #5]
 800f94a:	5c59      	ldrb	r1, [r3, r1]
 800f94c:	7041      	strb	r1, [r0, #1]
 800f94e:	7a41      	ldrb	r1, [r0, #9]
 800f950:	5c59      	ldrb	r1, [r3, r1]
 800f952:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800f954:	7b41      	ldrb	r1, [r0, #13]
 800f956:	5c59      	ldrb	r1, [r3, r1]
 800f958:	7241      	strb	r1, [r0, #9]
 800f95a:	5c9a      	ldrb	r2, [r3, r2]
 800f95c:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800f95e:	7882      	ldrb	r2, [r0, #2]
 800f960:	7a81      	ldrb	r1, [r0, #10]
 800f962:	5c59      	ldrb	r1, [r3, r1]
 800f964:	7081      	strb	r1, [r0, #2]
 800f966:	5c9a      	ldrb	r2, [r3, r2]
 800f968:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800f96a:	7982      	ldrb	r2, [r0, #6]
 800f96c:	7b81      	ldrb	r1, [r0, #14]
 800f96e:	5c59      	ldrb	r1, [r3, r1]
 800f970:	7181      	strb	r1, [r0, #6]
 800f972:	5c9a      	ldrb	r2, [r3, r2]
 800f974:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800f976:	7bc2      	ldrb	r2, [r0, #15]
 800f978:	7ac1      	ldrb	r1, [r0, #11]
 800f97a:	5c59      	ldrb	r1, [r3, r1]
 800f97c:	73c1      	strb	r1, [r0, #15]
 800f97e:	79c1      	ldrb	r1, [r0, #7]
 800f980:	5c59      	ldrb	r1, [r3, r1]
 800f982:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800f984:	78c1      	ldrb	r1, [r0, #3]
 800f986:	5c59      	ldrb	r1, [r3, r1]
 800f988:	71c1      	strb	r1, [r0, #7]
 800f98a:	5c9b      	ldrb	r3, [r3, r2]
 800f98c:	70c3      	strb	r3, [r0, #3]
}
 800f98e:	4770      	bx	lr
 800f990:	08018aa8 	.word	0x08018aa8

0800f994 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800f994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f998:	b084      	sub	sp, #16
 800f99a:	4604      	mov	r4, r0
    block_copy(st, dt);
 800f99c:	4601      	mov	r1, r0
 800f99e:	4668      	mov	r0, sp
 800f9a0:	f7ff fef3 	bl	800f78a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800f9a4:	f89d c000 	ldrb.w	ip, [sp]
 800f9a8:	4b6a      	ldr	r3, [pc, #424]	; (800fb54 <mix_sub_columns+0x1c0>)
 800f9aa:	f813 000c 	ldrb.w	r0, [r3, ip]
 800f9ae:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f9b2:	4a69      	ldr	r2, [pc, #420]	; (800fb58 <mix_sub_columns+0x1c4>)
 800f9b4:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f9b8:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800f9bc:	4967      	ldr	r1, [pc, #412]	; (800fb5c <mix_sub_columns+0x1c8>)
 800f9be:	f811 500e 	ldrb.w	r5, [r1, lr]
 800f9c2:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800f9c6:	5dce      	ldrb	r6, [r1, r7]
 800f9c8:	ea80 0009 	eor.w	r0, r0, r9
 800f9cc:	4068      	eors	r0, r5
 800f9ce:	4070      	eors	r0, r6
 800f9d0:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800f9d2:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f9d6:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f9da:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f9de:	ea80 0a0a 	eor.w	sl, r0, sl
 800f9e2:	ea89 090a 	eor.w	r9, r9, sl
 800f9e6:	ea86 0609 	eor.w	r6, r6, r9
 800f9ea:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800f9ec:	f811 8008 	ldrb.w	r8, [r1, r8]
 800f9f0:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800f9f4:	5dd6      	ldrb	r6, [r2, r7]
 800f9f6:	ea80 0008 	eor.w	r0, r0, r8
 800f9fa:	ea8e 0000 	eor.w	r0, lr, r0
 800f9fe:	4070      	eors	r0, r6
 800fa00:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800fa02:	f812 600c 	ldrb.w	r6, [r2, ip]
 800fa06:	5dd8      	ldrb	r0, [r3, r7]
 800fa08:	ea86 0608 	eor.w	r6, r6, r8
 800fa0c:	4075      	eors	r5, r6
 800fa0e:	4045      	eors	r5, r0
 800fa10:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800fa12:	f89d c004 	ldrb.w	ip, [sp, #4]
 800fa16:	f813 000c 	ldrb.w	r0, [r3, ip]
 800fa1a:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800fa1e:	f812 9008 	ldrb.w	r9, [r2, r8]
 800fa22:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800fa26:	f811 500e 	ldrb.w	r5, [r1, lr]
 800fa2a:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800fa2e:	5dce      	ldrb	r6, [r1, r7]
 800fa30:	ea80 0009 	eor.w	r0, r0, r9
 800fa34:	4068      	eors	r0, r5
 800fa36:	4070      	eors	r0, r6
 800fa38:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800fa3a:	f811 000c 	ldrb.w	r0, [r1, ip]
 800fa3e:	f813 a008 	ldrb.w	sl, [r3, r8]
 800fa42:	f812 900e 	ldrb.w	r9, [r2, lr]
 800fa46:	ea80 0a0a 	eor.w	sl, r0, sl
 800fa4a:	ea89 090a 	eor.w	r9, r9, sl
 800fa4e:	ea86 0609 	eor.w	r6, r6, r9
 800fa52:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800fa54:	f811 8008 	ldrb.w	r8, [r1, r8]
 800fa58:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800fa5c:	5dd6      	ldrb	r6, [r2, r7]
 800fa5e:	ea80 0008 	eor.w	r0, r0, r8
 800fa62:	ea8e 0000 	eor.w	r0, lr, r0
 800fa66:	4070      	eors	r0, r6
 800fa68:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800fa6a:	f812 600c 	ldrb.w	r6, [r2, ip]
 800fa6e:	5dd8      	ldrb	r0, [r3, r7]
 800fa70:	ea86 0608 	eor.w	r6, r6, r8
 800fa74:	4075      	eors	r5, r6
 800fa76:	4045      	eors	r5, r0
 800fa78:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800fa7a:	f89d c008 	ldrb.w	ip, [sp, #8]
 800fa7e:	f813 000c 	ldrb.w	r0, [r3, ip]
 800fa82:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800fa86:	f812 9008 	ldrb.w	r9, [r2, r8]
 800fa8a:	f89d e002 	ldrb.w	lr, [sp, #2]
 800fa8e:	f811 500e 	ldrb.w	r5, [r1, lr]
 800fa92:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800fa96:	5dce      	ldrb	r6, [r1, r7]
 800fa98:	ea80 0009 	eor.w	r0, r0, r9
 800fa9c:	4068      	eors	r0, r5
 800fa9e:	4070      	eors	r0, r6
 800faa0:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800faa2:	f811 000c 	ldrb.w	r0, [r1, ip]
 800faa6:	f813 a008 	ldrb.w	sl, [r3, r8]
 800faaa:	f812 900e 	ldrb.w	r9, [r2, lr]
 800faae:	ea80 0a0a 	eor.w	sl, r0, sl
 800fab2:	ea89 090a 	eor.w	r9, r9, sl
 800fab6:	ea86 0609 	eor.w	r6, r6, r9
 800faba:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800fabc:	f811 8008 	ldrb.w	r8, [r1, r8]
 800fac0:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800fac4:	5dd6      	ldrb	r6, [r2, r7]
 800fac6:	ea80 0008 	eor.w	r0, r0, r8
 800faca:	ea8e 0000 	eor.w	r0, lr, r0
 800face:	4070      	eors	r0, r6
 800fad0:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800fad2:	f812 600c 	ldrb.w	r6, [r2, ip]
 800fad6:	5dd8      	ldrb	r0, [r3, r7]
 800fad8:	ea86 0608 	eor.w	r6, r6, r8
 800fadc:	4075      	eors	r5, r6
 800fade:	4045      	eors	r5, r0
 800fae0:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800fae2:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800fae6:	5d98      	ldrb	r0, [r3, r6]
 800fae8:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800faec:	f812 9008 	ldrb.w	r9, [r2, r8]
 800faf0:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800faf4:	f811 c007 	ldrb.w	ip, [r1, r7]
 800faf8:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800fafc:	f811 e005 	ldrb.w	lr, [r1, r5]
 800fb00:	ea80 0009 	eor.w	r0, r0, r9
 800fb04:	ea8c 0000 	eor.w	r0, ip, r0
 800fb08:	ea8e 0000 	eor.w	r0, lr, r0
 800fb0c:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800fb0e:	5d88      	ldrb	r0, [r1, r6]
 800fb10:	f813 a008 	ldrb.w	sl, [r3, r8]
 800fb14:	f812 9007 	ldrb.w	r9, [r2, r7]
 800fb18:	ea80 0a0a 	eor.w	sl, r0, sl
 800fb1c:	ea89 090a 	eor.w	r9, r9, sl
 800fb20:	ea8e 0e09 	eor.w	lr, lr, r9
 800fb24:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800fb28:	f811 1008 	ldrb.w	r1, [r1, r8]
 800fb2c:	f813 e007 	ldrb.w	lr, [r3, r7]
 800fb30:	5d57      	ldrb	r7, [r2, r5]
 800fb32:	4048      	eors	r0, r1
 800fb34:	ea8e 0000 	eor.w	r0, lr, r0
 800fb38:	4078      	eors	r0, r7
 800fb3a:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800fb3c:	5d92      	ldrb	r2, [r2, r6]
 800fb3e:	5d5b      	ldrb	r3, [r3, r5]
 800fb40:	4051      	eors	r1, r2
 800fb42:	ea8c 0c01 	eor.w	ip, ip, r1
 800fb46:	ea83 0c0c 	eor.w	ip, r3, ip
 800fb4a:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 800fb4e:	b004      	add	sp, #16
 800fb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb54:	080188a8 	.word	0x080188a8
 800fb58:	080189a8 	.word	0x080189a8
 800fb5c:	08018aa8 	.word	0x08018aa8

0800fb60 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800fb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb64:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800fb66:	f1a1 0310 	sub.w	r3, r1, #16
 800fb6a:	b2da      	uxtb	r2, r3
 800fb6c:	2a10      	cmp	r2, #16
 800fb6e:	d807      	bhi.n	800fb80 <lorawan_aes_set_key+0x20>
 800fb70:	460d      	mov	r5, r1
 800fb72:	2301      	movs	r3, #1
 800fb74:	4093      	lsls	r3, r2
 800fb76:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800fb7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fb7e:	b92b      	cbnz	r3, 800fb8c <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800fb80:	2300      	movs	r3, #0
 800fb82:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800fb86:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800fb88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800fb8c:	460a      	mov	r2, r1
 800fb8e:	4601      	mov	r1, r0
 800fb90:	4620      	mov	r0, r4
 800fb92:	f7ff fe1b 	bl	800f7cc <copy_block_nn>
    hi = (keylen + 28) << 2;
 800fb96:	f105 031c 	add.w	r3, r5, #28
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800fba2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800fba6:	3b01      	subs	r3, #1
 800fba8:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fbac:	462b      	mov	r3, r5
 800fbae:	f04f 0c01 	mov.w	ip, #1
 800fbb2:	e023      	b.n	800fbfc <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 800fbb4:	2d18      	cmp	r5, #24
 800fbb6:	d901      	bls.n	800fbbc <lorawan_aes_set_key+0x5c>
 800fbb8:	2a10      	cmp	r2, #16
 800fbba:	d047      	beq.n	800fc4c <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800fbbc:	1b5a      	subs	r2, r3, r5
 800fbbe:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800fbc0:	f814 9002 	ldrb.w	r9, [r4, r2]
 800fbc4:	ea89 0808 	eor.w	r8, r9, r8
 800fbc8:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800fbcc:	f102 0801 	add.w	r8, r2, #1
 800fbd0:	f814 8008 	ldrb.w	r8, [r4, r8]
 800fbd4:	f100 0901 	add.w	r9, r0, #1
 800fbd8:	ea88 0707 	eor.w	r7, r8, r7
 800fbdc:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800fbe0:	1c97      	adds	r7, r2, #2
 800fbe2:	5de7      	ldrb	r7, [r4, r7]
 800fbe4:	f100 0802 	add.w	r8, r0, #2
 800fbe8:	407e      	eors	r6, r7
 800fbea:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800fbee:	3203      	adds	r2, #3
 800fbf0:	5ca6      	ldrb	r6, [r4, r2]
 800fbf2:	1cc2      	adds	r2, r0, #3
 800fbf4:	4071      	eors	r1, r6
 800fbf6:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fbf8:	3304      	adds	r3, #4
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	4573      	cmp	r3, lr
 800fbfe:	d22c      	bcs.n	800fc5a <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800fc00:	4618      	mov	r0, r3
 800fc02:	1f1a      	subs	r2, r3, #4
 800fc04:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800fc08:	1eda      	subs	r2, r3, #3
 800fc0a:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800fc0c:	1e9a      	subs	r2, r3, #2
 800fc0e:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800fc10:	1e5a      	subs	r2, r3, #1
 800fc12:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800fc14:	fbb3 f2f5 	udiv	r2, r3, r5
 800fc18:	fb05 3212 	mls	r2, r5, r2, r3
 800fc1c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800fc20:	d1c8      	bne.n	800fbb4 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 800fc22:	4a0f      	ldr	r2, [pc, #60]	; (800fc60 <lorawan_aes_set_key+0x100>)
 800fc24:	f812 9007 	ldrb.w	r9, [r2, r7]
 800fc28:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800fc2c:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800fc2e:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800fc30:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800fc34:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800fc38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fc3c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800fc40:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 800fc44:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 800fc48:	46c8      	mov	r8, r9
 800fc4a:	e7b7      	b.n	800fbbc <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 800fc4c:	4a04      	ldr	r2, [pc, #16]	; (800fc60 <lorawan_aes_set_key+0x100>)
 800fc4e:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800fc52:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800fc54:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800fc56:	5c51      	ldrb	r1, [r2, r1]
 800fc58:	e7b0      	b.n	800fbbc <lorawan_aes_set_key+0x5c>
    return 0;
 800fc5a:	2000      	movs	r0, #0
 800fc5c:	e794      	b.n	800fb88 <lorawan_aes_set_key+0x28>
 800fc5e:	bf00      	nop
 800fc60:	08018aa8 	.word	0x08018aa8

0800fc64 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800fc64:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800fc68:	b31b      	cbz	r3, 800fcb2 <lorawan_aes_encrypt+0x4e>
{
 800fc6a:	b570      	push	{r4, r5, r6, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	460e      	mov	r6, r1
 800fc70:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800fc72:	4601      	mov	r1, r0
 800fc74:	4668      	mov	r0, sp
 800fc76:	f7ff fdf5 	bl	800f864 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800fc7a:	2401      	movs	r4, #1
 800fc7c:	e009      	b.n	800fc92 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800fc7e:	4668      	mov	r0, sp
 800fc80:	f7ff fe88 	bl	800f994 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800fc84:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800fc88:	4668      	mov	r0, sp
 800fc8a:	f7ff fe4a 	bl	800f922 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800fc8e:	3401      	adds	r4, #1
 800fc90:	b2e4      	uxtb	r4, r4
 800fc92:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800fc96:	42a3      	cmp	r3, r4
 800fc98:	d8f1      	bhi.n	800fc7e <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800fc9a:	4668      	mov	r0, sp
 800fc9c:	f7ff fe46 	bl	800f92c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800fca0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800fca4:	4669      	mov	r1, sp
 800fca6:	4630      	mov	r0, r6
 800fca8:	f7ff fddc 	bl	800f864 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800fcac:	2000      	movs	r0, #0
}
 800fcae:	b004      	add	sp, #16
 800fcb0:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800fcb2:	20ff      	movs	r0, #255	; 0xff
}
 800fcb4:	4770      	bx	lr
	...

0800fcb8 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fcb8:	2300      	movs	r3, #0
 800fcba:	2b0a      	cmp	r3, #10
 800fcbc:	d817      	bhi.n	800fcee <GetKeyByID+0x36>
{
 800fcbe:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800fcc0:	4a0c      	ldr	r2, [pc, #48]	; (800fcf4 <GetKeyByID+0x3c>)
 800fcc2:	6814      	ldr	r4, [r2, #0]
 800fcc4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800fcc8:	4422      	add	r2, r4
 800fcca:	7e12      	ldrb	r2, [r2, #24]
 800fccc:	4282      	cmp	r2, r0
 800fcce:	d006      	beq.n	800fcde <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	2b0a      	cmp	r3, #10
 800fcd6:	d9f3      	bls.n	800fcc0 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fcd8:	2003      	movs	r0, #3
}
 800fcda:	bc10      	pop	{r4}
 800fcdc:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800fcde:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800fce2:	f10c 0c18 	add.w	ip, ip, #24
 800fce6:	4464      	add	r4, ip
 800fce8:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800fcea:	2000      	movs	r0, #0
 800fcec:	e7f5      	b.n	800fcda <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fcee:	2003      	movs	r0, #3
}
 800fcf0:	4770      	bx	lr
 800fcf2:	bf00      	nop
 800fcf4:	200011ac 	.word	0x200011ac

0800fcf8 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800fcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcfc:	b0cc      	sub	sp, #304	; 0x130
 800fcfe:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800fd00:	b3a9      	cbz	r1, 800fd6e <ComputeCmac+0x76>
 800fd02:	4607      	mov	r7, r0
 800fd04:	4616      	mov	r6, r2
 800fd06:	461c      	mov	r4, r3
 800fd08:	4688      	mov	r8, r1
 800fd0a:	b395      	cbz	r5, 800fd72 <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800fd0c:	a802      	add	r0, sp, #8
 800fd0e:	f7ff fbd7 	bl	800f4c0 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800fd12:	a901      	add	r1, sp, #4
 800fd14:	4620      	mov	r0, r4
 800fd16:	f7ff ffcf 	bl	800fcb8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	b118      	cbz	r0, 800fd26 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800fd1e:	4620      	mov	r0, r4
 800fd20:	b04c      	add	sp, #304	; 0x130
 800fd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800fd26:	9901      	ldr	r1, [sp, #4]
 800fd28:	3101      	adds	r1, #1
 800fd2a:	a802      	add	r0, sp, #8
 800fd2c:	f7ff fbd7 	bl	800f4de <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800fd30:	b127      	cbz	r7, 800fd3c <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800fd32:	2210      	movs	r2, #16
 800fd34:	4639      	mov	r1, r7
 800fd36:	a802      	add	r0, sp, #8
 800fd38:	f7ff fbd8 	bl	800f4ec <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800fd3c:	4632      	mov	r2, r6
 800fd3e:	4641      	mov	r1, r8
 800fd40:	a802      	add	r0, sp, #8
 800fd42:	f7ff fbd3 	bl	800f4ec <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800fd46:	a902      	add	r1, sp, #8
 800fd48:	a848      	add	r0, sp, #288	; 0x120
 800fd4a:	f7ff fc3d 	bl	800f5c8 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800fd4e:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 800fd52:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800fd56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fd5a:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 800fd5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd62:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800fd66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fd6a:	602b      	str	r3, [r5, #0]
 800fd6c:	e7d7      	b.n	800fd1e <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800fd6e:	2402      	movs	r4, #2
 800fd70:	e7d5      	b.n	800fd1e <ComputeCmac+0x26>
 800fd72:	2402      	movs	r4, #2
 800fd74:	e7d3      	b.n	800fd1e <ComputeCmac+0x26>
	...

0800fd78 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 800fd78:	b140      	cbz	r0, 800fd8c <SecureElementInit+0x14>
{
 800fd7a:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800fd7c:	4a04      	ldr	r2, [pc, #16]	; (800fd90 <SecureElementInit+0x18>)
 800fd7e:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800fd80:	22d8      	movs	r2, #216	; 0xd8
 800fd82:	4904      	ldr	r1, [pc, #16]	; (800fd94 <SecureElementInit+0x1c>)
 800fd84:	f000 facd 	bl	8010322 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800fd88:	2000      	movs	r0, #0
}
 800fd8a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800fd8c:	2002      	movs	r0, #2
}
 800fd8e:	4770      	bx	lr
 800fd90:	200011ac 	.word	0x200011ac
 800fd94:	0803e500 	.word	0x0803e500

0800fd98 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fd98:	2300      	movs	r3, #0
 800fd9a:	2b0a      	cmp	r3, #10
 800fd9c:	d817      	bhi.n	800fdce <SecureElementGetKeyByID+0x36>
{
 800fd9e:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800fda0:	4a0c      	ldr	r2, [pc, #48]	; (800fdd4 <SecureElementGetKeyByID+0x3c>)
 800fda2:	6814      	ldr	r4, [r2, #0]
 800fda4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800fda8:	4422      	add	r2, r4
 800fdaa:	7e12      	ldrb	r2, [r2, #24]
 800fdac:	4282      	cmp	r2, r0
 800fdae:	d006      	beq.n	800fdbe <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	2b0a      	cmp	r3, #10
 800fdb6:	d9f3      	bls.n	800fda0 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fdb8:	2003      	movs	r0, #3
}
 800fdba:	bc10      	pop	{r4}
 800fdbc:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800fdbe:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800fdc2:	f10c 0c18 	add.w	ip, ip, #24
 800fdc6:	4464      	add	r4, ip
 800fdc8:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800fdca:	2000      	movs	r0, #0
 800fdcc:	e7f5      	b.n	800fdba <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fdce:	2003      	movs	r0, #3
}
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	200011ac 	.word	0x200011ac

0800fdd8 <PrintKey>:
{
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	b099      	sub	sp, #100	; 0x64
 800fdde:	4605      	mov	r5, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800fde0:	a917      	add	r1, sp, #92	; 0x5c
 800fde2:	f7ff ffd9 	bl	800fd98 <SecureElementGetKeyByID>
 800fde6:	4602      	mov	r2, r0
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d043      	beq.n	800fe74 <PrintKey+0x9c>
}
 800fdec:	b019      	add	sp, #100	; 0x64
 800fdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 800fdf2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fdf4:	7851      	ldrb	r1, [r2, #1]
 800fdf6:	9113      	str	r1, [sp, #76]	; 0x4c
 800fdf8:	7890      	ldrb	r0, [r2, #2]
 800fdfa:	9014      	str	r0, [sp, #80]	; 0x50
 800fdfc:	78d4      	ldrb	r4, [r2, #3]
 800fdfe:	9415      	str	r4, [sp, #84]	; 0x54
 800fe00:	7911      	ldrb	r1, [r2, #4]
 800fe02:	7950      	ldrb	r0, [r2, #5]
 800fe04:	7994      	ldrb	r4, [r2, #6]
 800fe06:	79d5      	ldrb	r5, [r2, #7]
 800fe08:	7a16      	ldrb	r6, [r2, #8]
 800fe0a:	7a57      	ldrb	r7, [r2, #9]
 800fe0c:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800fe10:	f892 e00b 	ldrb.w	lr, [r2, #11]
 800fe14:	f892 800c 	ldrb.w	r8, [r2, #12]
 800fe18:	f892 900d 	ldrb.w	r9, [r2, #13]
 800fe1c:	f892 a00e 	ldrb.w	sl, [r2, #14]
 800fe20:	f892 b00f 	ldrb.w	fp, [r2, #15]
 800fe24:	7c12      	ldrb	r2, [r2, #16]
 800fe26:	9210      	str	r2, [sp, #64]	; 0x40
 800fe28:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800fe2c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fe30:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800fe34:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800fe38:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800fe3c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800fe40:	9709      	str	r7, [sp, #36]	; 0x24
 800fe42:	9608      	str	r6, [sp, #32]
 800fe44:	9507      	str	r5, [sp, #28]
 800fe46:	9406      	str	r4, [sp, #24]
 800fe48:	9005      	str	r0, [sp, #20]
 800fe4a:	9104      	str	r1, [sp, #16]
 800fe4c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800fe4e:	9403      	str	r4, [sp, #12]
 800fe50:	9814      	ldr	r0, [sp, #80]	; 0x50
 800fe52:	9002      	str	r0, [sp, #8]
 800fe54:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fe56:	9101      	str	r1, [sp, #4]
 800fe58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fe5c:	4a0c      	ldr	r2, [pc, #48]	; (800fe90 <PrintKey+0xb8>)
 800fe5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	9300      	str	r3, [sp, #0]
 800fe66:	4b0b      	ldr	r3, [pc, #44]	; (800fe94 <PrintKey+0xbc>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	2002      	movs	r0, #2
 800fe6e:	f002 f937 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800fe72:	e7bb      	b.n	800fdec <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fe74:	2a0a      	cmp	r2, #10
 800fe76:	d8b9      	bhi.n	800fdec <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 800fe78:	4613      	mov	r3, r2
 800fe7a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800fe7e:	4804      	ldr	r0, [pc, #16]	; (800fe90 <PrintKey+0xb8>)
 800fe80:	f810 1021 	ldrb.w	r1, [r0, r1, lsl #2]
 800fe84:	42a9      	cmp	r1, r5
 800fe86:	d0b4      	beq.n	800fdf2 <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fe88:	3201      	adds	r2, #1
 800fe8a:	b2d2      	uxtb	r2, r2
 800fe8c:	e7f2      	b.n	800fe74 <PrintKey+0x9c>
 800fe8e:	bf00      	nop
 800fe90:	08018d40 	.word	0x08018d40
 800fe94:	08018ba8 	.word	0x08018ba8

0800fe98 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 800fe98:	2b0b      	cmp	r3, #11
 800fe9a:	d80a      	bhi.n	800feb2 <SecureElementComputeAesCmac+0x1a>
{
 800fe9c:	b500      	push	{lr}
 800fe9e:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800fea0:	f8dd c010 	ldr.w	ip, [sp, #16]
 800fea4:	f8cd c000 	str.w	ip, [sp]
 800fea8:	f7ff ff26 	bl	800fcf8 <ComputeCmac>
}
 800feac:	b003      	add	sp, #12
 800feae:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800feb2:	2003      	movs	r0, #3
}
 800feb4:	4770      	bx	lr

0800feb6 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800feb6:	b190      	cbz	r0, 800fede <SecureElementVerifyAesCmac+0x28>
{
 800feb8:	b510      	push	{r4, lr}
 800feba:	b084      	sub	sp, #16
 800febc:	468c      	mov	ip, r1
 800febe:	4614      	mov	r4, r2
 800fec0:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800fec2:	2000      	movs	r0, #0
 800fec4:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800fec6:	aa03      	add	r2, sp, #12
 800fec8:	9200      	str	r2, [sp, #0]
 800feca:	4662      	mov	r2, ip
 800fecc:	f7ff ff14 	bl	800fcf8 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800fed0:	b918      	cbnz	r0, 800feda <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800fed2:	9b03      	ldr	r3, [sp, #12]
 800fed4:	42a3      	cmp	r3, r4
 800fed6:	d000      	beq.n	800feda <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800fed8:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800feda:	b004      	add	sp, #16
 800fedc:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800fede:	2002      	movs	r0, #2
}
 800fee0:	4770      	bx	lr

0800fee2 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800fee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee6:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800fee8:	b348      	cbz	r0, 800ff3e <SecureElementAesEncrypt+0x5c>
 800feea:	460d      	mov	r5, r1
 800feec:	4614      	mov	r4, r2
 800feee:	461e      	mov	r6, r3
 800fef0:	4607      	mov	r7, r0
 800fef2:	b33b      	cbz	r3, 800ff44 <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800fef4:	f011 0f0f 	tst.w	r1, #15
 800fef8:	d127      	bne.n	800ff4a <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800fefa:	22f0      	movs	r2, #240	; 0xf0
 800fefc:	2100      	movs	r1, #0
 800fefe:	a801      	add	r0, sp, #4
 800ff00:	f000 fa27 	bl	8010352 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ff04:	4669      	mov	r1, sp
 800ff06:	4620      	mov	r0, r4
 800ff08:	f7ff fed6 	bl	800fcb8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ff0c:	4680      	mov	r8, r0
 800ff0e:	b118      	cbz	r0, 800ff18 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800ff10:	4640      	mov	r0, r8
 800ff12:	b03e      	add	sp, #248	; 0xf8
 800ff14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800ff18:	aa01      	add	r2, sp, #4
 800ff1a:	2110      	movs	r1, #16
 800ff1c:	9800      	ldr	r0, [sp, #0]
 800ff1e:	3001      	adds	r0, #1
 800ff20:	f7ff fe1e 	bl	800fb60 <lorawan_aes_set_key>
        uint8_t block = 0;
 800ff24:	4644      	mov	r4, r8
        while( size != 0 )
 800ff26:	e007      	b.n	800ff38 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800ff28:	aa01      	add	r2, sp, #4
 800ff2a:	1931      	adds	r1, r6, r4
 800ff2c:	1938      	adds	r0, r7, r4
 800ff2e:	f7ff fe99 	bl	800fc64 <lorawan_aes_encrypt>
            block = block + 16;
 800ff32:	3410      	adds	r4, #16
 800ff34:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 800ff36:	3d10      	subs	r5, #16
        while( size != 0 )
 800ff38:	2d00      	cmp	r5, #0
 800ff3a:	d1f5      	bne.n	800ff28 <SecureElementAesEncrypt+0x46>
 800ff3c:	e7e8      	b.n	800ff10 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800ff3e:	f04f 0802 	mov.w	r8, #2
 800ff42:	e7e5      	b.n	800ff10 <SecureElementAesEncrypt+0x2e>
 800ff44:	f04f 0802 	mov.w	r8, #2
 800ff48:	e7e2      	b.n	800ff10 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ff4a:	f04f 0805 	mov.w	r8, #5
 800ff4e:	e7df      	b.n	800ff10 <SecureElementAesEncrypt+0x2e>

0800ff50 <SecureElementSetKey>:
{
 800ff50:	b530      	push	{r4, r5, lr}
 800ff52:	b085      	sub	sp, #20
    if( key == NULL )
 800ff54:	2900      	cmp	r1, #0
 800ff56:	d038      	beq.n	800ffca <SecureElementSetKey+0x7a>
 800ff58:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	2b0a      	cmp	r3, #10
 800ff5e:	d830      	bhi.n	800ffc2 <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ff60:	4a1b      	ldr	r2, [pc, #108]	; (800ffd0 <SecureElementSetKey+0x80>)
 800ff62:	6811      	ldr	r1, [r2, #0]
 800ff64:	461c      	mov	r4, r3
 800ff66:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800ff6a:	440a      	add	r2, r1
 800ff6c:	7e12      	ldrb	r2, [r2, #24]
 800ff6e:	4282      	cmp	r2, r0
 800ff70:	d002      	beq.n	800ff78 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ff72:	3301      	adds	r3, #1
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	e7f1      	b.n	800ff5c <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 800ff78:	280d      	cmp	r0, #13
 800ff7a:	d00a      	beq.n	800ff92 <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ff7c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800ff80:	3318      	adds	r3, #24
 800ff82:	440b      	add	r3, r1
 800ff84:	2210      	movs	r2, #16
 800ff86:	4661      	mov	r1, ip
 800ff88:	1c58      	adds	r0, r3, #1
 800ff8a:	f000 f9ca 	bl	8010322 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ff8e:	2500      	movs	r5, #0
 800ff90:	e018      	b.n	800ffc4 <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800ff92:	2300      	movs	r3, #0
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	9301      	str	r3, [sp, #4]
 800ff98:	9302      	str	r3, [sp, #8]
 800ff9a:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800ff9c:	466b      	mov	r3, sp
 800ff9e:	220c      	movs	r2, #12
 800ffa0:	2110      	movs	r1, #16
 800ffa2:	4660      	mov	r0, ip
 800ffa4:	f7ff ff9d 	bl	800fee2 <SecureElementAesEncrypt>
 800ffa8:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ffaa:	4b09      	ldr	r3, [pc, #36]	; (800ffd0 <SecureElementSetKey+0x80>)
 800ffac:	6818      	ldr	r0, [r3, #0]
 800ffae:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800ffb2:	3418      	adds	r4, #24
 800ffb4:	4420      	add	r0, r4
 800ffb6:	2210      	movs	r2, #16
 800ffb8:	4669      	mov	r1, sp
 800ffba:	3001      	adds	r0, #1
 800ffbc:	f000 f9b1 	bl	8010322 <memcpy1>
                return retval;
 800ffc0:	e000      	b.n	800ffc4 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ffc2:	2503      	movs	r5, #3
}
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	b005      	add	sp, #20
 800ffc8:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ffca:	2502      	movs	r5, #2
 800ffcc:	e7fa      	b.n	800ffc4 <SecureElementSetKey+0x74>
 800ffce:	bf00      	nop
 800ffd0:	200011ac 	.word	0x200011ac

0800ffd4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800ffd4:	b1d0      	cbz	r0, 801000c <SecureElementDeriveAndStoreKey+0x38>
{
 800ffd6:	b510      	push	{r4, lr}
 800ffd8:	b084      	sub	sp, #16
 800ffda:	4614      	mov	r4, r2
 800ffdc:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800ffde:	2a0c      	cmp	r2, #12
 800ffe0:	d101      	bne.n	800ffe6 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800ffe2:	290b      	cmp	r1, #11
 800ffe4:	d114      	bne.n	8010010 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	9301      	str	r3, [sp, #4]
 800ffec:	9302      	str	r3, [sp, #8]
 800ffee:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800fff0:	466b      	mov	r3, sp
 800fff2:	460a      	mov	r2, r1
 800fff4:	2110      	movs	r1, #16
 800fff6:	4660      	mov	r0, ip
 800fff8:	f7ff ff73 	bl	800fee2 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800fffc:	b108      	cbz	r0, 8010002 <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800fffe:	b004      	add	sp, #16
 8010000:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 8010002:	4669      	mov	r1, sp
 8010004:	4620      	mov	r0, r4
 8010006:	f7ff ffa3 	bl	800ff50 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 801000a:	e7f8      	b.n	800fffe <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 801000c:	2002      	movs	r0, #2
}
 801000e:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010010:	2003      	movs	r0, #3
 8010012:	e7f4      	b.n	800fffe <SecureElementDeriveAndStoreKey+0x2a>

08010014 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8010014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010016:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801001a:	9c07      	ldr	r4, [sp, #28]
 801001c:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 801001e:	b35b      	cbz	r3, 8010078 <SecureElementProcessJoinAccept+0x64>
 8010020:	461f      	mov	r7, r3
 8010022:	b35c      	cbz	r4, 801007c <SecureElementProcessJoinAccept+0x68>
 8010024:	b366      	cbz	r6, 8010080 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8010026:	2d21      	cmp	r5, #33	; 0x21
 8010028:	d82c      	bhi.n	8010084 <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 801002a:	462a      	mov	r2, r5
 801002c:	4619      	mov	r1, r3
 801002e:	4620      	mov	r0, r4
 8010030:	f000 f977 	bl	8010322 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8010034:	1c63      	adds	r3, r4, #1
 8010036:	2201      	movs	r2, #1
 8010038:	1e69      	subs	r1, r5, #1
 801003a:	18b8      	adds	r0, r7, r2
 801003c:	f7ff ff51 	bl	800fee2 <SecureElementAesEncrypt>
 8010040:	bb10      	cbnz	r0, 8010088 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8010042:	7ae3      	ldrb	r3, [r4, #11]
 8010044:	09db      	lsrs	r3, r3, #7
 8010046:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8010048:	1961      	adds	r1, r4, r5
 801004a:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801004e:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8010052:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8010056:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 801005a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 801005e:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8010062:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8010066:	b98b      	cbnz	r3, 801008c <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8010068:	2301      	movs	r3, #1
 801006a:	1f29      	subs	r1, r5, #4
 801006c:	4620      	mov	r0, r4
 801006e:	f7ff ff22 	bl	800feb6 <SecureElementVerifyAesCmac>
 8010072:	b140      	cbz	r0, 8010086 <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8010074:	2001      	movs	r0, #1
 8010076:	e006      	b.n	8010086 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8010078:	2002      	movs	r0, #2
 801007a:	e004      	b.n	8010086 <SecureElementProcessJoinAccept+0x72>
 801007c:	2002      	movs	r0, #2
 801007e:	e002      	b.n	8010086 <SecureElementProcessJoinAccept+0x72>
 8010080:	2002      	movs	r0, #2
 8010082:	e000      	b.n	8010086 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010084:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8010086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010088:	2007      	movs	r0, #7
 801008a:	e7fc      	b.n	8010086 <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 801008c:	2004      	movs	r0, #4
 801008e:	e7fa      	b.n	8010086 <SecureElementProcessJoinAccept+0x72>

08010090 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8010090:	b140      	cbz	r0, 80100a4 <SecureElementSetDevEui+0x14>
{
 8010092:	b508      	push	{r3, lr}
 8010094:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8010096:	2208      	movs	r2, #8
 8010098:	4b03      	ldr	r3, [pc, #12]	; (80100a8 <SecureElementSetDevEui+0x18>)
 801009a:	6818      	ldr	r0, [r3, #0]
 801009c:	f000 f941 	bl	8010322 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80100a0:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80100a2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80100a4:	2002      	movs	r0, #2
}
 80100a6:	4770      	bx	lr
 80100a8:	200011ac 	.word	0x200011ac

080100ac <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 80100ac:	b138      	cbz	r0, 80100be <SecureElementGetDevEui+0x12>
{
 80100ae:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 80100b0:	2208      	movs	r2, #8
 80100b2:	4904      	ldr	r1, [pc, #16]	; (80100c4 <SecureElementGetDevEui+0x18>)
 80100b4:	6809      	ldr	r1, [r1, #0]
 80100b6:	f000 f934 	bl	8010322 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80100ba:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80100bc:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80100be:	2002      	movs	r0, #2
}
 80100c0:	4770      	bx	lr
 80100c2:	bf00      	nop
 80100c4:	200011ac 	.word	0x200011ac

080100c8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 80100c8:	b148      	cbz	r0, 80100de <SecureElementSetJoinEui+0x16>
{
 80100ca:	b508      	push	{r3, lr}
 80100cc:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 80100ce:	4b05      	ldr	r3, [pc, #20]	; (80100e4 <SecureElementSetJoinEui+0x1c>)
 80100d0:	6818      	ldr	r0, [r3, #0]
 80100d2:	2208      	movs	r2, #8
 80100d4:	4410      	add	r0, r2
 80100d6:	f000 f924 	bl	8010322 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80100da:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80100dc:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80100de:	2002      	movs	r0, #2
}
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	200011ac 	.word	0x200011ac

080100e8 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 80100e8:	b140      	cbz	r0, 80100fc <SecureElementGetJoinEui+0x14>
{
 80100ea:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 80100ec:	4a04      	ldr	r2, [pc, #16]	; (8010100 <SecureElementGetJoinEui+0x18>)
 80100ee:	6811      	ldr	r1, [r2, #0]
 80100f0:	2208      	movs	r2, #8
 80100f2:	4411      	add	r1, r2
 80100f4:	f000 f915 	bl	8010322 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80100f8:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80100fa:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80100fc:	2002      	movs	r0, #2
}
 80100fe:	4770      	bx	lr
 8010100:	200011ac 	.word	0x200011ac

08010104 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8010104:	2802      	cmp	r0, #2
 8010106:	d004      	beq.n	8010112 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8010108:	4b04      	ldr	r3, [pc, #16]	; (801011c <SecureElementSetDevAddr+0x18>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 801010e:	2000      	movs	r0, #0
 8010110:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8010112:	4b02      	ldr	r3, [pc, #8]	; (801011c <SecureElementSetDevAddr+0x18>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	6119      	str	r1, [r3, #16]
 8010118:	e7f9      	b.n	801010e <SecureElementSetDevAddr+0xa>
 801011a:	bf00      	nop
 801011c:	200011ac 	.word	0x200011ac

08010120 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 8010120:	b169      	cbz	r1, 801013e <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8010122:	2802      	cmp	r0, #2
 8010124:	d005      	beq.n	8010132 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8010126:	4a07      	ldr	r2, [pc, #28]	; (8010144 <SecureElementGetDevAddr+0x24>)
 8010128:	6812      	ldr	r2, [r2, #0]
 801012a:	6952      	ldr	r2, [r2, #20]
 801012c:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 801012e:	2000      	movs	r0, #0
 8010130:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8010132:	4a04      	ldr	r2, [pc, #16]	; (8010144 <SecureElementGetDevAddr+0x24>)
 8010134:	6812      	ldr	r2, [r2, #0]
 8010136:	6912      	ldr	r2, [r2, #16]
 8010138:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 801013a:	2000      	movs	r0, #0
 801013c:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 801013e:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8010140:	4770      	bx	lr
 8010142:	bf00      	nop
 8010144:	200011ac 	.word	0x200011ac

08010148 <SecureElementInitMcuID>:
{
 8010148:	b530      	push	{r4, r5, lr}
 801014a:	b085      	sub	sp, #20
 801014c:	4605      	mov	r5, r0
 801014e:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 8010150:	2300      	movs	r3, #0
 8010152:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 8010154:	a802      	add	r0, sp, #8
 8010156:	f7ff ffa9 	bl	80100ac <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 801015a:	a901      	add	r1, sp, #4
 801015c:	2001      	movs	r0, #1
 801015e:	f7ff ffdf 	bl	8010120 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 8010162:	b195      	cbz	r5, 801018a <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8010164:	2300      	movs	r3, #0
 8010166:	2b07      	cmp	r3, #7
 8010168:	d808      	bhi.n	801017c <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 801016a:	f103 0210 	add.w	r2, r3, #16
 801016e:	446a      	add	r2, sp
 8010170:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8010174:	b9aa      	cbnz	r2, 80101a2 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8010176:	3301      	adds	r3, #1
 8010178:	b2db      	uxtb	r3, r3
 801017a:	e7f4      	b.n	8010166 <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 801017c:	2300      	movs	r3, #0
        if( id_init == false )
 801017e:	b923      	cbnz	r3, 801018a <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8010180:	a802      	add	r0, sp, #8
 8010182:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 8010184:	a802      	add	r0, sp, #8
 8010186:	f7ff ff83 	bl	8010090 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 801018a:	b13c      	cbz	r4, 801019c <SecureElementInitMcuID+0x54>
 801018c:	9b01      	ldr	r3, [sp, #4]
 801018e:	b92b      	cbnz	r3, 801019c <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8010190:	a801      	add	r0, sp, #4
 8010192:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8010194:	9901      	ldr	r1, [sp, #4]
 8010196:	2001      	movs	r0, #1
 8010198:	f7ff ffb4 	bl	8010104 <SecureElementSetDevAddr>
}
 801019c:	2000      	movs	r0, #0
 801019e:	b005      	add	sp, #20
 80101a0:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 80101a2:	2301      	movs	r3, #1
 80101a4:	e7eb      	b.n	801017e <SecureElementInitMcuID+0x36>
	...

080101a8 <PrintIds>:
{
 80101a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101aa:	b08f      	sub	sp, #60	; 0x3c
 80101ac:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 80101ae:	2400      	movs	r4, #0
 80101b0:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 80101b2:	a80a      	add	r0, sp, #40	; 0x28
 80101b4:	f7ff ff7a 	bl	80100ac <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 80101b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80101bc:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80101c0:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 80101c4:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 80101c8:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80101cc:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 80101d0:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 80101d4:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 80101d8:	f8cd e01c 	str.w	lr, [sp, #28]
 80101dc:	f8cd c018 	str.w	ip, [sp, #24]
 80101e0:	9705      	str	r7, [sp, #20]
 80101e2:	9604      	str	r6, [sp, #16]
 80101e4:	9003      	str	r0, [sp, #12]
 80101e6:	9102      	str	r1, [sp, #8]
 80101e8:	9201      	str	r2, [sp, #4]
 80101ea:	9300      	str	r3, [sp, #0]
 80101ec:	4b20      	ldr	r3, [pc, #128]	; (8010270 <PrintIds+0xc8>)
 80101ee:	4622      	mov	r2, r4
 80101f0:	4621      	mov	r1, r4
 80101f2:	2002      	movs	r0, #2
 80101f4:	f001 ff74 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 80101f8:	a80c      	add	r0, sp, #48	; 0x30
 80101fa:	f7ff ff75 	bl	80100e8 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 80101fe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010202:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8010206:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 801020a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 801020e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8010212:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 8010216:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 801021a:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 801021e:	f8cd e01c 	str.w	lr, [sp, #28]
 8010222:	f8cd c018 	str.w	ip, [sp, #24]
 8010226:	9705      	str	r7, [sp, #20]
 8010228:	9604      	str	r6, [sp, #16]
 801022a:	9003      	str	r0, [sp, #12]
 801022c:	9102      	str	r1, [sp, #8]
 801022e:	9201      	str	r2, [sp, #4]
 8010230:	9300      	str	r3, [sp, #0]
 8010232:	4b10      	ldr	r3, [pc, #64]	; (8010274 <PrintIds+0xcc>)
 8010234:	4622      	mov	r2, r4
 8010236:	4621      	mov	r1, r4
 8010238:	2002      	movs	r0, #2
 801023a:	f001 ff51 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 801023e:	a909      	add	r1, sp, #36	; 0x24
 8010240:	4628      	mov	r0, r5
 8010242:	f7ff ff6d 	bl	8010120 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8010246:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801024a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 801024e:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 8010252:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8010256:	9003      	str	r0, [sp, #12]
 8010258:	9102      	str	r1, [sp, #8]
 801025a:	9201      	str	r2, [sp, #4]
 801025c:	9300      	str	r3, [sp, #0]
 801025e:	4b06      	ldr	r3, [pc, #24]	; (8010278 <PrintIds+0xd0>)
 8010260:	4622      	mov	r2, r4
 8010262:	4621      	mov	r1, r4
 8010264:	2002      	movs	r0, #2
 8010266:	f001 ff3b 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 801026a:	b00f      	add	sp, #60	; 0x3c
 801026c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801026e:	bf00      	nop
 8010270:	08018c04 	.word	0x08018c04
 8010274:	08018c44 	.word	0x08018c44
 8010278:	08018c84 	.word	0x08018c84

0801027c <SecureElementPrintKeys>:
{
 801027c:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 801027e:	2000      	movs	r0, #0
 8010280:	f7ff fdaa 	bl	800fdd8 <PrintKey>
    PrintKey( NWK_KEY );
 8010284:	2001      	movs	r0, #1
 8010286:	f7ff fda7 	bl	800fdd8 <PrintKey>
    PrintKey( APP_S_KEY );
 801028a:	2009      	movs	r0, #9
 801028c:	f7ff fda4 	bl	800fdd8 <PrintKey>
    PrintKey( NWK_S_KEY );
 8010290:	2008      	movs	r0, #8
 8010292:	f7ff fda1 	bl	800fdd8 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 8010296:	2000      	movs	r0, #0
 8010298:	f7ff ff86 	bl	80101a8 <PrintIds>
}
 801029c:	2000      	movs	r0, #0
 801029e:	bd08      	pop	{r3, pc}

080102a0 <SecureElementPrintSessionKeys>:
{
 80102a0:	b510      	push	{r4, lr}
 80102a2:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 80102a4:	200b      	movs	r0, #11
 80102a6:	f7ff fd97 	bl	800fdd8 <PrintKey>
    PrintKey( MC_KE_KEY );
 80102aa:	200c      	movs	r0, #12
 80102ac:	f7ff fd94 	bl	800fdd8 <PrintKey>
    PrintKey( APP_S_KEY );
 80102b0:	2009      	movs	r0, #9
 80102b2:	f7ff fd91 	bl	800fdd8 <PrintKey>
    PrintKey( NWK_S_KEY );
 80102b6:	2008      	movs	r0, #8
 80102b8:	f7ff fd8e 	bl	800fdd8 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 80102bc:	200a      	movs	r0, #10
 80102be:	f7ff fd8b 	bl	800fdd8 <PrintKey>
    PrintIds( mode );
 80102c2:	4620      	mov	r0, r4
 80102c4:	f7ff ff70 	bl	80101a8 <PrintIds>
}
 80102c8:	2000      	movs	r0, #0
 80102ca:	bd10      	pop	{r4, pc}

080102cc <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80102cc:	4b09      	ldr	r3, [pc, #36]	; (80102f4 <rand1+0x28>)
 80102ce:	681a      	ldr	r2, [r3, #0]
 80102d0:	4909      	ldr	r1, [pc, #36]	; (80102f8 <rand1+0x2c>)
 80102d2:	f243 0039 	movw	r0, #12345	; 0x3039
 80102d6:	fb01 0002 	mla	r0, r1, r2, r0
 80102da:	6018      	str	r0, [r3, #0]
 80102dc:	2303      	movs	r3, #3
 80102de:	fba3 2300 	umull	r2, r3, r3, r0
 80102e2:	1ac2      	subs	r2, r0, r3
 80102e4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80102e8:	0f9b      	lsrs	r3, r3, #30
 80102ea:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 80102ee:	1ac0      	subs	r0, r0, r3
 80102f0:	4770      	bx	lr
 80102f2:	bf00      	nop
 80102f4:	200000f8 	.word	0x200000f8
 80102f8:	41c64e6d 	.word	0x41c64e6d

080102fc <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80102fc:	4b01      	ldr	r3, [pc, #4]	; (8010304 <srand1+0x8>)
 80102fe:	6018      	str	r0, [r3, #0]
}
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	200000f8 	.word	0x200000f8

08010308 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010308:	b538      	push	{r3, r4, r5, lr}
 801030a:	4605      	mov	r5, r0
 801030c:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801030e:	f7ff ffdd 	bl	80102cc <rand1>
 8010312:	1b61      	subs	r1, r4, r5
 8010314:	3101      	adds	r1, #1
 8010316:	fb90 f3f1 	sdiv	r3, r0, r1
 801031a:	fb01 0013 	mls	r0, r1, r3, r0
}
 801031e:	4428      	add	r0, r5
 8010320:	bd38      	pop	{r3, r4, r5, pc}

08010322 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8010322:	e004      	b.n	801032e <memcpy1+0xc>
    {
        *dst++ = *src++;
 8010324:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010328:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 801032c:	461a      	mov	r2, r3
 801032e:	1e53      	subs	r3, r2, #1
 8010330:	b29b      	uxth	r3, r3
 8010332:	2a00      	cmp	r2, #0
 8010334:	d1f6      	bne.n	8010324 <memcpy1+0x2>
    }
}
 8010336:	4770      	bx	lr

08010338 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8010338:	1e53      	subs	r3, r2, #1
 801033a:	4418      	add	r0, r3
    while( size-- )
 801033c:	e004      	b.n	8010348 <memcpyr+0x10>
    {
        *dst-- = *src++;
 801033e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010342:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8010346:	461a      	mov	r2, r3
 8010348:	1e53      	subs	r3, r2, #1
 801034a:	b29b      	uxth	r3, r3
 801034c:	2a00      	cmp	r2, #0
 801034e:	d1f6      	bne.n	801033e <memcpyr+0x6>
    }
}
 8010350:	4770      	bx	lr

08010352 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8010352:	e002      	b.n	801035a <memset1+0x8>
    {
        *dst++ = value;
 8010354:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8010358:	461a      	mov	r2, r3
 801035a:	1e53      	subs	r3, r2, #1
 801035c:	b29b      	uxth	r3, r3
 801035e:	2a00      	cmp	r2, #0
 8010360:	d1f8      	bne.n	8010354 <memset1+0x2>
    }
}
 8010362:	4770      	bx	lr

08010364 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8010364:	b1f0      	cbz	r0, 80103a4 <Crc32+0x40>
{
 8010366:	b510      	push	{r4, lr}
 8010368:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 801036a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 801036e:	f04f 30ff 	mov.w	r0, #4294967295
 8010372:	e00e      	b.n	8010392 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8010374:	f340 0c00 	sbfx	ip, r0, #0, #1
 8010378:	4a0b      	ldr	r2, [pc, #44]	; (80103a8 <Crc32+0x44>)
 801037a:	ea0c 0202 	and.w	r2, ip, r2
 801037e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8010382:	3301      	adds	r3, #1
 8010384:	b29b      	uxth	r3, r3
 8010386:	2b07      	cmp	r3, #7
 8010388:	d9f4      	bls.n	8010374 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 801038a:	f10e 0e01 	add.w	lr, lr, #1
 801038e:	fa1f fe8e 	uxth.w	lr, lr
 8010392:	458e      	cmp	lr, r1
 8010394:	d204      	bcs.n	80103a0 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8010396:	f814 300e 	ldrb.w	r3, [r4, lr]
 801039a:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 801039c:	2300      	movs	r3, #0
 801039e:	e7f2      	b.n	8010386 <Crc32+0x22>
        }
    }

    return ~crc;
 80103a0:	43c0      	mvns	r0, r0
}
 80103a2:	bd10      	pop	{r4, pc}
        return 0;
 80103a4:	2000      	movs	r0, #0
}
 80103a6:	4770      	bx	lr
 80103a8:	edb88320 	.word	0xedb88320

080103ac <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 80103ac:	2001      	movs	r0, #1
 80103ae:	4770      	bx	lr

080103b0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 80103b0:	280a      	cmp	r0, #10
 80103b2:	d807      	bhi.n	80103c4 <RadioGetLoRaBandwidthInHz+0x14>
 80103b4:	e8df f000 	tbb	[pc, r0]
 80103b8:	17110b20 	.word	0x17110b20
 80103bc:	061e1c1a 	.word	0x061e1c1a
 80103c0:	0e08      	.short	0x0e08
 80103c2:	14          	.byte	0x14
 80103c3:	00          	.byte	0x00
 80103c4:	2000      	movs	r0, #0
 80103c6:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80103c8:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 80103cc:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80103ce:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 80103d2:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80103d4:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 80103d8:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80103da:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 80103de:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80103e0:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 80103e4:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80103e6:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 80103ea:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80103ec:	4804      	ldr	r0, [pc, #16]	; (8010400 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 80103ee:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80103f0:	4804      	ldr	r0, [pc, #16]	; (8010404 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 80103f2:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80103f4:	4804      	ldr	r0, [pc, #16]	; (8010408 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 80103f6:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 80103f8:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	0001e848 	.word	0x0001e848
 8010404:	0003d090 	.word	0x0003d090
 8010408:	0007a120 	.word	0x0007a120

0801040c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801040c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8010410:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010412:	b953      	cbnz	r3, 801042a <RadioGetGfskTimeOnAirNumerator+0x1e>
 8010414:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8010416:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8010418:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801041a:	b141      	cbz	r1, 801042e <RadioGetGfskTimeOnAirNumerator+0x22>
 801041c:	2302      	movs	r3, #2
 801041e:	f89d 0000 	ldrb.w	r0, [sp]
 8010422:	4418      	add	r0, r3
}
 8010424:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8010428:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801042a:	2000      	movs	r0, #0
 801042c:	e7f3      	b.n	8010416 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801042e:	2300      	movs	r3, #0
 8010430:	e7f5      	b.n	801041e <RadioGetGfskTimeOnAirNumerator+0x12>

08010432 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010432:	b570      	push	{r4, r5, r6, lr}
 8010434:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8010438:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 801043c:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801043e:	f1a1 0c05 	sub.w	ip, r1, #5
 8010442:	f1bc 0f01 	cmp.w	ip, #1
 8010446:	d932      	bls.n	80104ae <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010448:	b918      	cbnz	r0, 8010452 <RadioGetLoRaTimeOnAirNumerator+0x20>
 801044a:	f1a1 060b 	sub.w	r6, r1, #11
 801044e:	2e01      	cmp	r6, #1
 8010450:	d935      	bls.n	80104be <RadioGetLoRaTimeOnAirNumerator+0x8c>
 8010452:	2801      	cmp	r0, #1
 8010454:	d02f      	beq.n	80104b6 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8010456:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010458:	f89d e014 	ldrb.w	lr, [sp, #20]
 801045c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8010460:	b38d      	cbz	r5, 80104c6 <RadioGetLoRaTimeOnAirNumerator+0x94>
 8010462:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010466:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8010468:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 801046a:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 801046e:	b36c      	cbz	r4, 80104cc <RadioGetLoRaTimeOnAirNumerator+0x9a>
 8010470:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8010474:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8010476:	2906      	cmp	r1, #6
 8010478:	d904      	bls.n	8010484 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 801047a:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 801047e:	b10e      	cbz	r6, 8010484 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8010480:	1e88      	subs	r0, r1, #2
 8010482:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8010484:	f1bc 0f00 	cmp.w	ip, #0
 8010488:	db23      	blt.n	80104d2 <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801048a:	4484      	add	ip, r0
 801048c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010490:	fb9c fcf0 	sdiv	ip, ip, r0
 8010494:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8010498:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 801049c:	2906      	cmp	r1, #6
 801049e:	d801      	bhi.n	80104a4 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 80104a0:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80104a4:	0080      	lsls	r0, r0, #2
 80104a6:	3001      	adds	r0, #1
 80104a8:	3902      	subs	r1, #2
}
 80104aa:	4088      	lsls	r0, r1
 80104ac:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 80104ae:	2b0b      	cmp	r3, #11
 80104b0:	d8ca      	bhi.n	8010448 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 80104b2:	230c      	movs	r3, #12
 80104b4:	e7c8      	b.n	8010448 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80104b6:	290c      	cmp	r1, #12
 80104b8:	d003      	beq.n	80104c2 <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 80104ba:	2600      	movs	r6, #0
 80104bc:	e7cc      	b.n	8010458 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 80104be:	2601      	movs	r6, #1
 80104c0:	e7ca      	b.n	8010458 <RadioGetLoRaTimeOnAirNumerator+0x26>
 80104c2:	2601      	movs	r6, #1
 80104c4:	e7c8      	b.n	8010458 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 80104c6:	f04f 0c00 	mov.w	ip, #0
 80104ca:	e7cc      	b.n	8010466 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 80104cc:	f04f 0c14 	mov.w	ip, #20
 80104d0:	e7d0      	b.n	8010474 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 80104d2:	f04f 0c00 	mov.w	ip, #0
 80104d6:	e7d8      	b.n	801048a <RadioGetLoRaTimeOnAirNumerator+0x58>

080104d8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80104d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104da:	b085      	sub	sp, #20
 80104dc:	460e      	mov	r6, r1
 80104de:	4615      	mov	r5, r2
 80104e0:	4619      	mov	r1, r3
 80104e2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80104e6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80104ea:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80104ee:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 80104f2:	b148      	cbz	r0, 8010508 <RadioTimeOnAir+0x30>
 80104f4:	2801      	cmp	r0, #1
 80104f6:	d012      	beq.n	801051e <RadioTimeOnAir+0x46>
 80104f8:	2501      	movs	r5, #1
 80104fa:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80104fc:	442c      	add	r4, r5
 80104fe:	1e60      	subs	r0, r4, #1
}
 8010500:	fbb0 f0f5 	udiv	r0, r0, r5
 8010504:	b005      	add	sp, #20
 8010506:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8010508:	f8cd c004 	str.w	ip, [sp, #4]
 801050c:	9700      	str	r7, [sp, #0]
 801050e:	4628      	mov	r0, r5
 8010510:	f7ff ff7c 	bl	801040c <RadioGetGfskTimeOnAirNumerator>
 8010514:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010518:	fb00 f404 	mul.w	r4, r0, r4
        break;
 801051c:	e7ee      	b.n	80104fc <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801051e:	f8cd c008 	str.w	ip, [sp, #8]
 8010522:	9701      	str	r7, [sp, #4]
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	4613      	mov	r3, r2
 8010528:	460a      	mov	r2, r1
 801052a:	4629      	mov	r1, r5
 801052c:	4630      	mov	r0, r6
 801052e:	f7ff ff80 	bl	8010432 <RadioGetLoRaTimeOnAirNumerator>
 8010532:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010536:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801053a:	4b03      	ldr	r3, [pc, #12]	; (8010548 <RadioTimeOnAir+0x70>)
 801053c:	5d98      	ldrb	r0, [r3, r6]
 801053e:	f7ff ff37 	bl	80103b0 <RadioGetLoRaBandwidthInHz>
 8010542:	4605      	mov	r5, r0
        break;
 8010544:	e7da      	b.n	80104fc <RadioTimeOnAir+0x24>
 8010546:	bf00      	nop
 8010548:	08018e30 	.word	0x08018e30

0801054c <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 801054c:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 801054e:	4b05      	ldr	r3, [pc, #20]	; (8010564 <RadioOnTxTimeoutProcess+0x18>)
 8010550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010554:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8010556:	4b04      	ldr	r3, [pc, #16]	; (8010568 <RadioOnTxTimeoutProcess+0x1c>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	b113      	cbz	r3, 8010562 <RadioOnTxTimeoutProcess+0x16>
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	b103      	cbz	r3, 8010562 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8010560:	4798      	blx	r3
    }
}
 8010562:	bd08      	pop	{r3, pc}
 8010564:	48000400 	.word	0x48000400
 8010568:	200012b0 	.word	0x200012b0

0801056c <RadioOnTxTimeoutIrq>:
{
 801056c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 801056e:	f7ff ffed 	bl	801054c <RadioOnTxTimeoutProcess>
}
 8010572:	bd08      	pop	{r3, pc}

08010574 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8010574:	b508      	push	{r3, lr}
 8010576:	4b05      	ldr	r3, [pc, #20]	; (801058c <RadioOnRxTimeoutProcess+0x18>)
 8010578:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801057c:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801057e:	4b04      	ldr	r3, [pc, #16]	; (8010590 <RadioOnRxTimeoutProcess+0x1c>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	b113      	cbz	r3, 801058a <RadioOnRxTimeoutProcess+0x16>
 8010584:	68db      	ldr	r3, [r3, #12]
 8010586:	b103      	cbz	r3, 801058a <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8010588:	4798      	blx	r3
    }
}
 801058a:	bd08      	pop	{r3, pc}
 801058c:	48000400 	.word	0x48000400
 8010590:	200012b0 	.word	0x200012b0

08010594 <RadioOnRxTimeoutIrq>:
{
 8010594:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8010596:	f7ff ffed 	bl	8010574 <RadioOnRxTimeoutProcess>
}
 801059a:	bd08      	pop	{r3, pc}

0801059c <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801059c:	f04f 30ff 	mov.w	r0, #4294967295
 80105a0:	4770      	bx	lr

080105a2 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80105a2:	f04f 30ff 	mov.w	r0, #4294967295
 80105a6:	4770      	bx	lr

080105a8 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 80105a8:	2001      	movs	r0, #1
 80105aa:	4770      	bx	lr

080105ac <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 80105ac:	2001      	movs	r0, #1
 80105ae:	4770      	bx	lr

080105b0 <RadioWrite>:
{
 80105b0:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 80105b2:	f000 fe37 	bl	8011224 <SUBGRF_WriteRegister>
}
 80105b6:	bd08      	pop	{r3, pc}

080105b8 <RadioTxCw>:
{
 80105b8:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80105ba:	f001 fbcf 	bl	8011d5c <SUBGRF_SetRfTxPower>
 80105be:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80105c0:	210e      	movs	r1, #14
 80105c2:	f640 101f 	movw	r0, #2335	; 0x91f
 80105c6:	f000 fe2d 	bl	8011224 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80105ca:	2101      	movs	r1, #1
 80105cc:	4620      	mov	r0, r4
 80105ce:	f001 fbb1 	bl	8011d34 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80105d2:	f000 fff7 	bl	80115c4 <SUBGRF_SetTxContinuousWave>
}
 80105d6:	bd10      	pop	{r4, pc}

080105d8 <RadioTxPrbs>:
{
 80105d8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80105da:	2101      	movs	r1, #1
 80105dc:	4b07      	ldr	r3, [pc, #28]	; (80105fc <RadioTxPrbs+0x24>)
 80105de:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80105e2:	f001 fba7 	bl	8011d34 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80105e6:	212d      	movs	r1, #45	; 0x2d
 80105e8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80105ec:	f7ff ffe0 	bl	80105b0 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80105f0:	f000 ffef 	bl	80115d2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80105f4:	4802      	ldr	r0, [pc, #8]	; (8010600 <RadioTxPrbs+0x28>)
 80105f6:	f000 ff25 	bl	8011444 <SUBGRF_SetTx>
}
 80105fa:	bd08      	pop	{r3, pc}
 80105fc:	200012cc 	.word	0x200012cc
 8010600:	000fffff 	.word	0x000fffff

08010604 <RadioSetRxDutyCycle>:
{
 8010604:	b570      	push	{r4, r5, r6, lr}
 8010606:	4604      	mov	r4, r0
 8010608:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801060a:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 801060e:	4e09      	ldr	r6, [pc, #36]	; (8010634 <RadioSetRxDutyCycle+0x30>)
 8010610:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010612:	2300      	movs	r3, #0
 8010614:	461a      	mov	r2, r3
 8010616:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801061a:	4608      	mov	r0, r1
 801061c:	f001 f8a5 	bl	801176a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010620:	2100      	movs	r1, #0
 8010622:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8010626:	f001 fb85 	bl	8011d34 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801062a:	4629      	mov	r1, r5
 801062c:	4620      	mov	r0, r4
 801062e:	f000 ff99 	bl	8011564 <SUBGRF_SetRxDutyCycle>
}
 8010632:	bd70      	pop	{r4, r5, r6, pc}
 8010634:	200012cc 	.word	0x200012cc

08010638 <RadioRxBoosted>:
{
 8010638:	b538      	push	{r3, r4, r5, lr}
 801063a:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 801063c:	f001 fc69 	bl	8011f12 <RFW_Is_Init>
 8010640:	2801      	cmp	r0, #1
 8010642:	d019      	beq.n	8010678 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010644:	2300      	movs	r3, #0
 8010646:	461a      	mov	r2, r3
 8010648:	f240 2162 	movw	r1, #610	; 0x262
 801064c:	4608      	mov	r0, r1
 801064e:	f001 f88c 	bl	801176a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8010652:	b9a4      	cbnz	r4, 801067e <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010654:	4c11      	ldr	r4, [pc, #68]	; (801069c <RadioRxBoosted+0x64>)
 8010656:	2100      	movs	r1, #0
 8010658:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 801065a:	4b11      	ldr	r3, [pc, #68]	; (80106a0 <RadioRxBoosted+0x68>)
 801065c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010660:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010662:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8010666:	f001 fb65 	bl	8011d34 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 801066a:	7863      	ldrb	r3, [r4, #1]
 801066c:	b183      	cbz	r3, 8010690 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801066e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010672:	f000 ff59 	bl	8011528 <SUBGRF_SetRxBoosted>
}
 8010676:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8010678:	f001 fc53 	bl	8011f22 <RFW_ReceiveInit>
 801067c:	e7e9      	b.n	8010652 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 801067e:	4d09      	ldr	r5, [pc, #36]	; (80106a4 <RadioRxBoosted+0x6c>)
 8010680:	4621      	mov	r1, r4
 8010682:	4628      	mov	r0, r5
 8010684:	f002 f920 	bl	80128c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010688:	4628      	mov	r0, r5
 801068a:	f002 f8d7 	bl	801283c <UTIL_TIMER_Start>
 801068e:	e7e1      	b.n	8010654 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8010690:	4b02      	ldr	r3, [pc, #8]	; (801069c <RadioRxBoosted+0x64>)
 8010692:	6898      	ldr	r0, [r3, #8]
 8010694:	0180      	lsls	r0, r0, #6
 8010696:	f000 ff47 	bl	8011528 <SUBGRF_SetRxBoosted>
}
 801069a:	e7ec      	b.n	8010676 <RadioRxBoosted+0x3e>
 801069c:	200012cc 	.word	0x200012cc
 80106a0:	48000400 	.word	0x48000400
 80106a4:	200012b4 	.word	0x200012b4

080106a8 <RadioStandby>:
{
 80106a8:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80106aa:	2000      	movs	r0, #0
 80106ac:	f000 feb0 	bl	8011410 <SUBGRF_SetStandby>
}
 80106b0:	bd08      	pop	{r3, pc}

080106b2 <RadioRead>:
{
 80106b2:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 80106b4:	f000 fdc6 	bl	8011244 <SUBGRF_ReadRegister>
}
 80106b8:	bd08      	pop	{r3, pc}

080106ba <RadioGetStatus>:
{
 80106ba:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80106bc:	f000 fda6 	bl	801120c <SUBGRF_GetOperatingMode>
 80106c0:	2805      	cmp	r0, #5
 80106c2:	d007      	beq.n	80106d4 <RadioGetStatus+0x1a>
 80106c4:	2807      	cmp	r0, #7
 80106c6:	d007      	beq.n	80106d8 <RadioGetStatus+0x1e>
 80106c8:	2804      	cmp	r0, #4
 80106ca:	d001      	beq.n	80106d0 <RadioGetStatus+0x16>
            return RF_IDLE;
 80106cc:	2000      	movs	r0, #0
}
 80106ce:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80106d0:	2002      	movs	r0, #2
 80106d2:	e7fc      	b.n	80106ce <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80106d4:	2001      	movs	r0, #1
 80106d6:	e7fa      	b.n	80106ce <RadioGetStatus+0x14>
            return RF_CAD;
 80106d8:	2003      	movs	r0, #3
 80106da:	e7f8      	b.n	80106ce <RadioGetStatus+0x14>

080106dc <RadioIrqProcess>:
{
 80106dc:	b530      	push	{r4, r5, lr}
 80106de:	b083      	sub	sp, #12
    uint8_t size = 0;
 80106e0:	2300      	movs	r3, #0
 80106e2:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80106e6:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80106e8:	4ba5      	ldr	r3, [pc, #660]	; (8010980 <RadioIrqProcess+0x2a4>)
 80106ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80106ee:	2b20      	cmp	r3, #32
 80106f0:	d829      	bhi.n	8010746 <RadioIrqProcess+0x6a>
 80106f2:	b21a      	sxth	r2, r3
 80106f4:	2a00      	cmp	r2, #0
 80106f6:	f000 8140 	beq.w	801097a <RadioIrqProcess+0x29e>
 80106fa:	3b01      	subs	r3, #1
 80106fc:	2b1f      	cmp	r3, #31
 80106fe:	f200 813c 	bhi.w	801097a <RadioIrqProcess+0x29e>
 8010702:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010706:	0063      	.short	0x0063
 8010708:	013a007f 	.word	0x013a007f
 801070c:	013a00f7 	.word	0x013a00f7
 8010710:	013a013a 	.word	0x013a013a
 8010714:	013a0127 	.word	0x013a0127
 8010718:	013a013a 	.word	0x013a013a
 801071c:	013a013a 	.word	0x013a013a
 8010720:	013a013a 	.word	0x013a013a
 8010724:	013a0134 	.word	0x013a0134
 8010728:	013a013a 	.word	0x013a013a
 801072c:	013a013a 	.word	0x013a013a
 8010730:	013a013a 	.word	0x013a013a
 8010734:	013a013a 	.word	0x013a013a
 8010738:	013a013a 	.word	0x013a013a
 801073c:	013a013a 	.word	0x013a013a
 8010740:	013a013a 	.word	0x013a013a
 8010744:	0155      	.short	0x0155
 8010746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801074a:	f000 80b3 	beq.w	80108b4 <RadioIrqProcess+0x1d8>
 801074e:	d928      	bls.n	80107a2 <RadioIrqProcess+0xc6>
 8010750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010754:	f040 8111 	bne.w	801097a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8010758:	4b8a      	ldr	r3, [pc, #552]	; (8010984 <RadioIrqProcess+0x2a8>)
 801075a:	2201      	movs	r2, #1
 801075c:	2100      	movs	r1, #0
 801075e:	2002      	movs	r0, #2
 8010760:	f001 fcbe 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8010764:	f000 fd52 	bl	801120c <SUBGRF_GetOperatingMode>
 8010768:	2804      	cmp	r0, #4
 801076a:	f000 80b0 	beq.w	80108ce <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801076e:	f000 fd4d 	bl	801120c <SUBGRF_GetOperatingMode>
 8010772:	2805      	cmp	r0, #5
 8010774:	f040 8101 	bne.w	801097a <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8010778:	4b83      	ldr	r3, [pc, #524]	; (8010988 <RadioIrqProcess+0x2ac>)
 801077a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801077e:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8010780:	4882      	ldr	r0, [pc, #520]	; (801098c <RadioIrqProcess+0x2b0>)
 8010782:	f002 f801 	bl	8012788 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8010786:	2000      	movs	r0, #0
 8010788:	f000 fe42 	bl	8011410 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801078c:	4b80      	ldr	r3, [pc, #512]	; (8010990 <RadioIrqProcess+0x2b4>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	f000 80f2 	beq.w	801097a <RadioIrqProcess+0x29e>
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	2b00      	cmp	r3, #0
 801079a:	f000 80ee 	beq.w	801097a <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 801079e:	4798      	blx	r3
 80107a0:	e0eb      	b.n	801097a <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 80107a2:	2b40      	cmp	r3, #64	; 0x40
 80107a4:	f000 811d 	beq.w	80109e2 <RadioIrqProcess+0x306>
 80107a8:	2b80      	cmp	r3, #128	; 0x80
 80107aa:	f040 80e6 	bne.w	801097a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80107ae:	2000      	movs	r0, #0
 80107b0:	f000 fe2e 	bl	8011410 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80107b4:	4b76      	ldr	r3, [pc, #472]	; (8010990 <RadioIrqProcess+0x2b4>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f000 80de 	beq.w	801097a <RadioIrqProcess+0x29e>
 80107be:	699b      	ldr	r3, [r3, #24]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f000 80da 	beq.w	801097a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 80107c6:	2000      	movs	r0, #0
 80107c8:	4798      	blx	r3
 80107ca:	e0d6      	b.n	801097a <RadioIrqProcess+0x29e>
 80107cc:	4b6e      	ldr	r3, [pc, #440]	; (8010988 <RadioIrqProcess+0x2ac>)
 80107ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80107d2:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80107d4:	486f      	ldr	r0, [pc, #444]	; (8010994 <RadioIrqProcess+0x2b8>)
 80107d6:	f001 ffd7 	bl	8012788 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80107da:	2000      	movs	r0, #0
 80107dc:	f000 fe18 	bl	8011410 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80107e0:	f001 fb99 	bl	8011f16 <RFW_Is_LongPacketModeEnabled>
 80107e4:	2801      	cmp	r0, #1
 80107e6:	d00a      	beq.n	80107fe <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80107e8:	4b69      	ldr	r3, [pc, #420]	; (8010990 <RadioIrqProcess+0x2b4>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	f000 80c4 	beq.w	801097a <RadioIrqProcess+0x29e>
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	f000 80c0 	beq.w	801097a <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80107fa:	4798      	blx	r3
 80107fc:	e0bd      	b.n	801097a <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80107fe:	f001 fb93 	bl	8011f28 <RFW_DeInit_TxLongPacket>
 8010802:	e7f1      	b.n	80107e8 <RadioIrqProcess+0x10c>
 8010804:	4b60      	ldr	r3, [pc, #384]	; (8010988 <RadioIrqProcess+0x2ac>)
 8010806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801080a:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 801080c:	485f      	ldr	r0, [pc, #380]	; (801098c <RadioIrqProcess+0x2b0>)
 801080e:	f001 ffbb 	bl	8012788 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8010812:	4b5b      	ldr	r3, [pc, #364]	; (8010980 <RadioIrqProcess+0x2a4>)
 8010814:	785b      	ldrb	r3, [r3, #1]
 8010816:	b303      	cbz	r3, 801085a <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8010818:	22ff      	movs	r2, #255	; 0xff
 801081a:	f10d 0107 	add.w	r1, sp, #7
 801081e:	485e      	ldr	r0, [pc, #376]	; (8010998 <RadioIrqProcess+0x2bc>)
 8010820:	f001 fa32 	bl	8011c88 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8010824:	485d      	ldr	r0, [pc, #372]	; (801099c <RadioIrqProcess+0x2c0>)
 8010826:	f001 fa49 	bl	8011cbc <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801082a:	4b59      	ldr	r3, [pc, #356]	; (8010990 <RadioIrqProcess+0x2b4>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	f000 80a3 	beq.w	801097a <RadioIrqProcess+0x29e>
 8010834:	689c      	ldr	r4, [r3, #8]
 8010836:	2c00      	cmp	r4, #0
 8010838:	f000 809f 	beq.w	801097a <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 801083c:	4b50      	ldr	r3, [pc, #320]	; (8010980 <RadioIrqProcess+0x2a4>)
 801083e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010842:	2b01      	cmp	r3, #1
 8010844:	d11d      	bne.n	8010882 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8010846:	4a4e      	ldr	r2, [pc, #312]	; (8010980 <RadioIrqProcess+0x2a4>)
 8010848:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 801084c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8010850:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010854:	4850      	ldr	r0, [pc, #320]	; (8010998 <RadioIrqProcess+0x2bc>)
 8010856:	47a0      	blx	r4
                break;
 8010858:	e08f      	b.n	801097a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801085a:	2000      	movs	r0, #0
 801085c:	f000 fdd8 	bl	8011410 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8010860:	2100      	movs	r1, #0
 8010862:	f640 1002 	movw	r0, #2306	; 0x902
 8010866:	f000 fcdd 	bl	8011224 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801086a:	f640 1044 	movw	r0, #2372	; 0x944
 801086e:	f000 fce9 	bl	8011244 <SUBGRF_ReadRegister>
 8010872:	f040 0102 	orr.w	r1, r0, #2
 8010876:	b2c9      	uxtb	r1, r1
 8010878:	f640 1044 	movw	r0, #2372	; 0x944
 801087c:	f000 fcd2 	bl	8011224 <SUBGRF_WriteRegister>
 8010880:	e7ca      	b.n	8010818 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8010882:	4c3f      	ldr	r4, [pc, #252]	; (8010980 <RadioIrqProcess+0x2a4>)
 8010884:	4669      	mov	r1, sp
 8010886:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010888:	f001 faf8 	bl	8011e7c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801088c:	4b40      	ldr	r3, [pc, #256]	; (8010990 <RadioIrqProcess+0x2b4>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	689d      	ldr	r5, [r3, #8]
 8010892:	9b00      	ldr	r3, [sp, #0]
 8010894:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8010898:	4a41      	ldr	r2, [pc, #260]	; (80109a0 <RadioIrqProcess+0x2c4>)
 801089a:	fb82 1203 	smull	r1, r2, r2, r3
 801089e:	17db      	asrs	r3, r3, #31
 80108a0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80108a4:	b25b      	sxtb	r3, r3
 80108a6:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 80108aa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80108ae:	483a      	ldr	r0, [pc, #232]	; (8010998 <RadioIrqProcess+0x2bc>)
 80108b0:	47a8      	blx	r5
                break;
 80108b2:	e062      	b.n	801097a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80108b4:	2000      	movs	r0, #0
 80108b6:	f000 fdab 	bl	8011410 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80108ba:	4b35      	ldr	r3, [pc, #212]	; (8010990 <RadioIrqProcess+0x2b4>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d05b      	beq.n	801097a <RadioIrqProcess+0x29e>
 80108c2:	699b      	ldr	r3, [r3, #24]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d058      	beq.n	801097a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 80108c8:	2001      	movs	r0, #1
 80108ca:	4798      	blx	r3
 80108cc:	e055      	b.n	801097a <RadioIrqProcess+0x29e>
 80108ce:	4b2e      	ldr	r3, [pc, #184]	; (8010988 <RadioIrqProcess+0x2ac>)
 80108d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80108d4:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80108d6:	482f      	ldr	r0, [pc, #188]	; (8010994 <RadioIrqProcess+0x2b8>)
 80108d8:	f001 ff56 	bl	8012788 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80108dc:	2000      	movs	r0, #0
 80108de:	f000 fd97 	bl	8011410 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80108e2:	4b2b      	ldr	r3, [pc, #172]	; (8010990 <RadioIrqProcess+0x2b4>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d047      	beq.n	801097a <RadioIrqProcess+0x29e>
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d044      	beq.n	801097a <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80108f0:	4798      	blx	r3
 80108f2:	e042      	b.n	801097a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80108f4:	4b2b      	ldr	r3, [pc, #172]	; (80109a4 <RadioIrqProcess+0x2c8>)
 80108f6:	2201      	movs	r2, #1
 80108f8:	2100      	movs	r1, #0
 80108fa:	2002      	movs	r0, #2
 80108fc:	f001 fbf0 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8010900:	4b1f      	ldr	r3, [pc, #124]	; (8010980 <RadioIrqProcess+0x2a4>)
 8010902:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010904:	b3c9      	cbz	r1, 801097a <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8010906:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801090a:	f640 1003 	movw	r0, #2307	; 0x903
 801090e:	f7ff fe4f 	bl	80105b0 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8010912:	4c1b      	ldr	r4, [pc, #108]	; (8010980 <RadioIrqProcess+0x2a4>)
 8010914:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8010918:	f640 1004 	movw	r0, #2308	; 0x904
 801091c:	f7ff fe48 	bl	80105b0 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8010920:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8010924:	f640 1005 	movw	r0, #2309	; 0x905
 8010928:	f7ff fe42 	bl	80105b0 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801092c:	f640 1002 	movw	r0, #2306	; 0x902
 8010930:	f7ff febf 	bl	80106b2 <RadioRead>
 8010934:	f040 0101 	orr.w	r1, r0, #1
 8010938:	b2c9      	uxtb	r1, r1
 801093a:	f640 1002 	movw	r0, #2306	; 0x902
 801093e:	f7ff fe37 	bl	80105b0 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8010942:	2200      	movs	r2, #0
 8010944:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010946:	4613      	mov	r3, r2
 8010948:	f240 2162 	movw	r1, #610	; 0x262
 801094c:	4608      	mov	r0, r1
 801094e:	f000 ff0c 	bl	801176a <SUBGRF_SetDioIrqParams>
 8010952:	e012      	b.n	801097a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8010954:	4b14      	ldr	r3, [pc, #80]	; (80109a8 <RadioIrqProcess+0x2cc>)
 8010956:	2201      	movs	r2, #1
 8010958:	2100      	movs	r1, #0
 801095a:	2002      	movs	r0, #2
 801095c:	f001 fbc0 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8010960:	f001 fad7 	bl	8011f12 <RFW_Is_Init>
 8010964:	2801      	cmp	r0, #1
 8010966:	d108      	bne.n	801097a <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8010968:	f001 fadf 	bl	8011f2a <RFW_ReceivePayload>
 801096c:	e005      	b.n	801097a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801096e:	4b0f      	ldr	r3, [pc, #60]	; (80109ac <RadioIrqProcess+0x2d0>)
 8010970:	2201      	movs	r2, #1
 8010972:	2100      	movs	r1, #0
 8010974:	2002      	movs	r0, #2
 8010976:	f001 fbb3 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
}
 801097a:	b003      	add	sp, #12
 801097c:	bd30      	pop	{r4, r5, pc}
 801097e:	bf00      	nop
 8010980:	200012cc 	.word	0x200012cc
 8010984:	08018dc4 	.word	0x08018dc4
 8010988:	48000400 	.word	0x48000400
 801098c:	200012b4 	.word	0x200012b4
 8010990:	200012b0 	.word	0x200012b0
 8010994:	20001328 	.word	0x20001328
 8010998:	200011b0 	.word	0x200011b0
 801099c:	200012f0 	.word	0x200012f0
 80109a0:	10624dd3 	.word	0x10624dd3
 80109a4:	08018dd8 	.word	0x08018dd8
 80109a8:	08018de4 	.word	0x08018de4
 80109ac:	08018df0 	.word	0x08018df0
        TimerStop( &RxTimeoutTimer );
 80109b0:	4817      	ldr	r0, [pc, #92]	; (8010a10 <RadioIrqProcess+0x334>)
 80109b2:	f001 fee9 	bl	8012788 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80109b6:	4b17      	ldr	r3, [pc, #92]	; (8010a14 <RadioIrqProcess+0x338>)
 80109b8:	785b      	ldrb	r3, [r3, #1]
 80109ba:	b173      	cbz	r3, 80109da <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80109bc:	4b16      	ldr	r3, [pc, #88]	; (8010a18 <RadioIrqProcess+0x33c>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d0da      	beq.n	801097a <RadioIrqProcess+0x29e>
 80109c4:	68db      	ldr	r3, [r3, #12]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d0d7      	beq.n	801097a <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 80109ca:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80109cc:	4b13      	ldr	r3, [pc, #76]	; (8010a1c <RadioIrqProcess+0x340>)
 80109ce:	2201      	movs	r2, #1
 80109d0:	2100      	movs	r1, #0
 80109d2:	2002      	movs	r0, #2
 80109d4:	f001 fb84 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
 80109d8:	e7cf      	b.n	801097a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80109da:	2000      	movs	r0, #0
 80109dc:	f000 fd18 	bl	8011410 <SUBGRF_SetStandby>
 80109e0:	e7ec      	b.n	80109bc <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80109e2:	4b0f      	ldr	r3, [pc, #60]	; (8010a20 <RadioIrqProcess+0x344>)
 80109e4:	2201      	movs	r2, #1
 80109e6:	2100      	movs	r1, #0
 80109e8:	2002      	movs	r0, #2
 80109ea:	f001 fb79 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80109ee:	4b09      	ldr	r3, [pc, #36]	; (8010a14 <RadioIrqProcess+0x338>)
 80109f0:	785b      	ldrb	r3, [r3, #1]
 80109f2:	b143      	cbz	r3, 8010a06 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80109f4:	4b08      	ldr	r3, [pc, #32]	; (8010a18 <RadioIrqProcess+0x33c>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d0be      	beq.n	801097a <RadioIrqProcess+0x29e>
 80109fc:	691b      	ldr	r3, [r3, #16]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d0bb      	beq.n	801097a <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8010a02:	4798      	blx	r3
}
 8010a04:	e7b9      	b.n	801097a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8010a06:	2000      	movs	r0, #0
 8010a08:	f000 fd02 	bl	8011410 <SUBGRF_SetStandby>
 8010a0c:	e7f2      	b.n	80109f4 <RadioIrqProcess+0x318>
 8010a0e:	bf00      	nop
 8010a10:	200012b4 	.word	0x200012b4
 8010a14:	200012cc 	.word	0x200012cc
 8010a18:	200012b0 	.word	0x200012b0
 8010a1c:	08018dfc 	.word	0x08018dfc
 8010a20:	08018e08 	.word	0x08018e08

08010a24 <RadioOnDioIrq>:
{
 8010a24:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8010a26:	4b03      	ldr	r3, [pc, #12]	; (8010a34 <RadioOnDioIrq+0x10>)
 8010a28:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8010a2c:	f7ff fe56 	bl	80106dc <RadioIrqProcess>
}
 8010a30:	bd08      	pop	{r3, pc}
 8010a32:	bf00      	nop
 8010a34:	200012cc 	.word	0x200012cc

08010a38 <RadioGetWakeupTime>:
{
 8010a38:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8010a3a:	f001 f9a6 	bl	8011d8a <SUBGRF_GetRadioWakeUpTime>
}
 8010a3e:	3003      	adds	r0, #3
 8010a40:	bd08      	pop	{r3, pc}
	...

08010a44 <RadioSetMaxPayloadLength>:
{
 8010a44:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8010a46:	2801      	cmp	r0, #1
 8010a48:	d004      	beq.n	8010a54 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8010a4a:	4b0a      	ldr	r3, [pc, #40]	; (8010a74 <RadioSetMaxPayloadLength+0x30>)
 8010a4c:	7d5b      	ldrb	r3, [r3, #21]
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d008      	beq.n	8010a64 <RadioSetMaxPayloadLength+0x20>
}
 8010a52:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8010a54:	4b08      	ldr	r3, [pc, #32]	; (8010a78 <RadioSetMaxPayloadLength+0x34>)
 8010a56:	7019      	strb	r1, [r3, #0]
 8010a58:	4806      	ldr	r0, [pc, #24]	; (8010a74 <RadioSetMaxPayloadLength+0x30>)
 8010a5a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010a5c:	300e      	adds	r0, #14
 8010a5e:	f001 f853 	bl	8011b08 <SUBGRF_SetPacketParams>
 8010a62:	e7f6      	b.n	8010a52 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8010a64:	4b04      	ldr	r3, [pc, #16]	; (8010a78 <RadioSetMaxPayloadLength+0x34>)
 8010a66:	7019      	strb	r1, [r3, #0]
 8010a68:	4802      	ldr	r0, [pc, #8]	; (8010a74 <RadioSetMaxPayloadLength+0x30>)
 8010a6a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010a6c:	300e      	adds	r0, #14
 8010a6e:	f001 f84b 	bl	8011b08 <SUBGRF_SetPacketParams>
}
 8010a72:	e7ee      	b.n	8010a52 <RadioSetMaxPayloadLength+0xe>
 8010a74:	200012cc 	.word	0x200012cc
 8010a78:	200000fc 	.word	0x200000fc

08010a7c <RadioReadRegisters>:
{
 8010a7c:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8010a7e:	f000 fc5f 	bl	8011340 <SUBGRF_ReadRegisters>
}
 8010a82:	bd08      	pop	{r3, pc}

08010a84 <RadioWriteRegisters>:
{
 8010a84:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8010a86:	f000 fc19 	bl	80112bc <SUBGRF_WriteRegisters>
}
 8010a8a:	bd08      	pop	{r3, pc}

08010a8c <RadioRssi>:
{
 8010a8c:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8010a8e:	f001 f8cb 	bl	8011c28 <SUBGRF_GetRssiInst>
}
 8010a92:	b200      	sxth	r0, r0
 8010a94:	bd08      	pop	{r3, pc}
	...

08010a98 <RadioSetTxContinuousWave>:
{
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8010a9c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010aa0:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8010aa4:	f000 fed4 	bl	8011850 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	f001 f957 	bl	8011d5c <SUBGRF_SetRfTxPower>
 8010aae:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010ab0:	210e      	movs	r1, #14
 8010ab2:	f640 101f 	movw	r0, #2335	; 0x91f
 8010ab6:	f000 fbb5 	bl	8011224 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8010aba:	2101      	movs	r1, #1
 8010abc:	4628      	mov	r0, r5
 8010abe:	f001 f939 	bl	8011d34 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010ac2:	f000 fd7f 	bl	80115c4 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8010ac6:	4d04      	ldr	r5, [pc, #16]	; (8010ad8 <RadioSetTxContinuousWave+0x40>)
 8010ac8:	4621      	mov	r1, r4
 8010aca:	4628      	mov	r0, r5
 8010acc:	f001 fefc 	bl	80128c8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	f001 feb3 	bl	801283c <UTIL_TIMER_Start>
}
 8010ad6:	bd38      	pop	{r3, r4, r5, pc}
 8010ad8:	20001328 	.word	0x20001328

08010adc <RadioSetChannel>:
{
 8010adc:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8010ade:	f000 feb7 	bl	8011850 <SUBGRF_SetRfFrequency>
}
 8010ae2:	bd08      	pop	{r3, pc}

08010ae4 <RadioStartCad>:
{
 8010ae4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	4b07      	ldr	r3, [pc, #28]	; (8010b08 <RadioStartCad+0x24>)
 8010aea:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8010aee:	f001 f921 	bl	8011d34 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8010af2:	2300      	movs	r3, #0
 8010af4:	461a      	mov	r2, r3
 8010af6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8010afa:	4608      	mov	r0, r1
 8010afc:	f000 fe35 	bl	801176a <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8010b00:	f000 fd54 	bl	80115ac <SUBGRF_SetCad>
}
 8010b04:	bd08      	pop	{r3, pc}
 8010b06:	bf00      	nop
 8010b08:	200012cc 	.word	0x200012cc

08010b0c <RadioRx>:
{
 8010b0c:	b538      	push	{r3, r4, r5, lr}
 8010b0e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8010b10:	f001 f9ff 	bl	8011f12 <RFW_Is_Init>
 8010b14:	2801      	cmp	r0, #1
 8010b16:	d019      	beq.n	8010b4c <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010b18:	2300      	movs	r3, #0
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	f240 2162 	movw	r1, #610	; 0x262
 8010b20:	4608      	mov	r0, r1
 8010b22:	f000 fe22 	bl	801176a <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8010b26:	b9a4      	cbnz	r4, 8010b52 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8010b28:	4c11      	ldr	r4, [pc, #68]	; (8010b70 <RadioRx+0x64>)
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8010b2e:	4b11      	ldr	r3, [pc, #68]	; (8010b74 <RadioRx+0x68>)
 8010b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010b34:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8010b36:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8010b3a:	f001 f8fb 	bl	8011d34 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8010b3e:	7863      	ldrb	r3, [r4, #1]
 8010b40:	b183      	cbz	r3, 8010b64 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010b42:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010b46:	f000 fc9f 	bl	8011488 <SUBGRF_SetRx>
}
 8010b4a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8010b4c:	f001 f9e9 	bl	8011f22 <RFW_ReceiveInit>
 8010b50:	e7e9      	b.n	8010b26 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8010b52:	4d09      	ldr	r5, [pc, #36]	; (8010b78 <RadioRx+0x6c>)
 8010b54:	4621      	mov	r1, r4
 8010b56:	4628      	mov	r0, r5
 8010b58:	f001 feb6 	bl	80128c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	f001 fe6d 	bl	801283c <UTIL_TIMER_Start>
 8010b62:	e7e1      	b.n	8010b28 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8010b64:	4b02      	ldr	r3, [pc, #8]	; (8010b70 <RadioRx+0x64>)
 8010b66:	6898      	ldr	r0, [r3, #8]
 8010b68:	0180      	lsls	r0, r0, #6
 8010b6a:	f000 fc8d 	bl	8011488 <SUBGRF_SetRx>
}
 8010b6e:	e7ec      	b.n	8010b4a <RadioRx+0x3e>
 8010b70:	200012cc 	.word	0x200012cc
 8010b74:	48000400 	.word	0x48000400
 8010b78:	200012b4 	.word	0x200012b4

08010b7c <RadioSleep>:
{
 8010b7c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8010b7e:	f04f 0004 	mov.w	r0, #4
 8010b82:	f000 fc25 	bl	80113d0 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8010b86:	2002      	movs	r0, #2
 8010b88:	f7f1 f9c8 	bl	8001f1c <HAL_Delay>
}
 8010b8c:	bd08      	pop	{r3, pc}
	...

08010b90 <RadioSend>:
{
 8010b90:	b570      	push	{r4, r5, r6, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	4605      	mov	r5, r0
 8010b96:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8010b98:	2300      	movs	r3, #0
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	f240 2101 	movw	r1, #513	; 0x201
 8010ba0:	4608      	mov	r0, r1
 8010ba2:	f000 fde2 	bl	801176a <SUBGRF_SetDioIrqParams>
 8010ba6:	4b3f      	ldr	r3, [pc, #252]	; (8010ca4 <RadioSend+0x114>)
 8010ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010bac:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010bae:	4e3e      	ldr	r6, [pc, #248]	; (8010ca8 <RadioSend+0x118>)
 8010bb0:	2101      	movs	r1, #1
 8010bb2:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8010bb6:	f001 f8bd 	bl	8011d34 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8010bba:	7833      	ldrb	r3, [r6, #0]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d103      	bne.n	8010bc8 <RadioSend+0x38>
 8010bc0:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8010bc4:	2b06      	cmp	r3, #6
 8010bc6:	d012      	beq.n	8010bee <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8010bc8:	f640 0089 	movw	r0, #2185	; 0x889
 8010bcc:	f000 fb3a 	bl	8011244 <SUBGRF_ReadRegister>
 8010bd0:	f040 0104 	orr.w	r1, r0, #4
 8010bd4:	b2c9      	uxtb	r1, r1
 8010bd6:	f640 0089 	movw	r0, #2185	; 0x889
 8010bda:	f000 fb23 	bl	8011224 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8010bde:	4b32      	ldr	r3, [pc, #200]	; (8010ca8 <RadioSend+0x118>)
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	2b03      	cmp	r3, #3
 8010be4:	d818      	bhi.n	8010c18 <RadioSend+0x88>
 8010be6:	e8df f003 	tbb	[pc, r3]
 8010bea:	0d23      	.short	0x0d23
 8010bec:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8010bee:	f640 0089 	movw	r0, #2185	; 0x889
 8010bf2:	f000 fb27 	bl	8011244 <SUBGRF_ReadRegister>
 8010bf6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010bfa:	f640 0089 	movw	r0, #2185	; 0x889
 8010bfe:	f000 fb11 	bl	8011224 <SUBGRF_WriteRegister>
 8010c02:	e7ec      	b.n	8010bde <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8010c04:	4828      	ldr	r0, [pc, #160]	; (8010ca8 <RadioSend+0x118>)
 8010c06:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010c08:	300e      	adds	r0, #14
 8010c0a:	f000 ff7d 	bl	8011b08 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8010c0e:	2200      	movs	r2, #0
 8010c10:	4621      	mov	r1, r4
 8010c12:	4628      	mov	r0, r5
 8010c14:	f000 fc30 	bl	8011478 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8010c18:	4c24      	ldr	r4, [pc, #144]	; (8010cac <RadioSend+0x11c>)
 8010c1a:	4b23      	ldr	r3, [pc, #140]	; (8010ca8 <RadioSend+0x118>)
 8010c1c:	6859      	ldr	r1, [r3, #4]
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f001 fe52 	bl	80128c8 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8010c24:	4620      	mov	r0, r4
 8010c26:	f001 fe09 	bl	801283c <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8010c2a:	2000      	movs	r0, #0
}
 8010c2c:	b002      	add	sp, #8
 8010c2e:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8010c30:	f001 f96f 	bl	8011f12 <RFW_Is_Init>
 8010c34:	2801      	cmp	r0, #1
 8010c36:	d00a      	beq.n	8010c4e <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8010c38:	481b      	ldr	r0, [pc, #108]	; (8010ca8 <RadioSend+0x118>)
 8010c3a:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010c3c:	300e      	adds	r0, #14
 8010c3e:	f000 ff63 	bl	8011b08 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8010c42:	2200      	movs	r2, #0
 8010c44:	4621      	mov	r1, r4
 8010c46:	4628      	mov	r0, r5
 8010c48:	f000 fc16 	bl	8011478 <SUBGRF_SendPayload>
 8010c4c:	e7e4      	b.n	8010c18 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8010c4e:	f10d 0207 	add.w	r2, sp, #7
 8010c52:	4621      	mov	r1, r4
 8010c54:	4628      	mov	r0, r5
 8010c56:	f001 f961 	bl	8011f1c <RFW_TransmitInit>
 8010c5a:	b968      	cbnz	r0, 8010c78 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8010c5c:	4812      	ldr	r0, [pc, #72]	; (8010ca8 <RadioSend+0x118>)
 8010c5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010c62:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010c64:	300e      	adds	r0, #14
 8010c66:	f000 ff4f 	bl	8011b08 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010c70:	4628      	mov	r0, r5
 8010c72:	f000 fc01 	bl	8011478 <SUBGRF_SendPayload>
 8010c76:	e7cf      	b.n	8010c18 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8010c78:	4b0d      	ldr	r3, [pc, #52]	; (8010cb0 <RadioSend+0x120>)
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	2100      	movs	r1, #0
 8010c7e:	2002      	movs	r0, #2
 8010c80:	f001 fa2e 	bl	80120e0 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8010c84:	2003      	movs	r0, #3
 8010c86:	e7d1      	b.n	8010c2c <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8010c88:	4807      	ldr	r0, [pc, #28]	; (8010ca8 <RadioSend+0x118>)
 8010c8a:	2302      	movs	r3, #2
 8010c8c:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8010c8e:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010c90:	300e      	adds	r0, #14
 8010c92:	f000 ff39 	bl	8011b08 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8010c96:	2200      	movs	r2, #0
 8010c98:	4621      	mov	r1, r4
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f000 fbec 	bl	8011478 <SUBGRF_SendPayload>
            break;
 8010ca0:	e7ba      	b.n	8010c18 <RadioSend+0x88>
 8010ca2:	bf00      	nop
 8010ca4:	48000400 	.word	0x48000400
 8010ca8:	200012cc 	.word	0x200012cc
 8010cac:	20001328 	.word	0x20001328
 8010cb0:	08018e18 	.word	0x08018e18

08010cb4 <RadioRandom>:
{
 8010cb4:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	461a      	mov	r2, r3
 8010cba:	4619      	mov	r1, r3
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f000 fd54 	bl	801176a <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8010cc2:	f000 fbfb 	bl	80114bc <SUBGRF_GetRandom>
}
 8010cc6:	bd08      	pop	{r3, pc}

08010cc8 <RadioSetModem>:
{
 8010cc8:	b510      	push	{r4, lr}
 8010cca:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8010ccc:	4b14      	ldr	r3, [pc, #80]	; (8010d20 <RadioSetModem+0x58>)
 8010cce:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8010cd0:	f001 f92c 	bl	8011f2c <RFW_SetRadioModem>
    switch( modem )
 8010cd4:	2c01      	cmp	r4, #1
 8010cd6:	d010      	beq.n	8010cfa <RadioSetModem+0x32>
 8010cd8:	2c03      	cmp	r4, #3
 8010cda:	d01a      	beq.n	8010d12 <RadioSetModem+0x4a>
 8010cdc:	b134      	cbz	r4, 8010cec <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8010cde:	2003      	movs	r0, #3
 8010ce0:	f000 fde2 	bl	80118a8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010ce4:	4b0e      	ldr	r3, [pc, #56]	; (8010d20 <RadioSetModem+0x58>)
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	735a      	strb	r2, [r3, #13]
}
 8010cea:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8010cec:	2000      	movs	r0, #0
 8010cee:	f000 fddb 	bl	80118a8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010cf2:	4b0b      	ldr	r3, [pc, #44]	; (8010d20 <RadioSetModem+0x58>)
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	735a      	strb	r2, [r3, #13]
        break;
 8010cf8:	e7f7      	b.n	8010cea <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8010cfa:	2001      	movs	r0, #1
 8010cfc:	f000 fdd4 	bl	80118a8 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8010d00:	4b07      	ldr	r3, [pc, #28]	; (8010d20 <RadioSetModem+0x58>)
 8010d02:	7b5a      	ldrb	r2, [r3, #13]
 8010d04:	7b18      	ldrb	r0, [r3, #12]
 8010d06:	4282      	cmp	r2, r0
 8010d08:	d0ef      	beq.n	8010cea <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8010d0a:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8010d0c:	f000 f80a 	bl	8010d24 <RadioSetPublicNetwork>
 8010d10:	e7eb      	b.n	8010cea <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8010d12:	2002      	movs	r0, #2
 8010d14:	f000 fdc8 	bl	80118a8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010d18:	4b01      	ldr	r3, [pc, #4]	; (8010d20 <RadioSetModem+0x58>)
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	735a      	strb	r2, [r3, #13]
}
 8010d1e:	e7e4      	b.n	8010cea <RadioSetModem+0x22>
 8010d20:	200012cc 	.word	0x200012cc

08010d24 <RadioSetPublicNetwork>:
{
 8010d24:	b510      	push	{r4, lr}
 8010d26:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8010d28:	4b0e      	ldr	r3, [pc, #56]	; (8010d64 <RadioSetPublicNetwork+0x40>)
 8010d2a:	7318      	strb	r0, [r3, #12]
 8010d2c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8010d2e:	2001      	movs	r0, #1
 8010d30:	f7ff ffca 	bl	8010cc8 <RadioSetModem>
    if( enable == true )
 8010d34:	b154      	cbz	r4, 8010d4c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8010d36:	2134      	movs	r1, #52	; 0x34
 8010d38:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8010d3c:	f000 fa72 	bl	8011224 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8010d40:	2144      	movs	r1, #68	; 0x44
 8010d42:	f240 7041 	movw	r0, #1857	; 0x741
 8010d46:	f000 fa6d 	bl	8011224 <SUBGRF_WriteRegister>
}
 8010d4a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8010d4c:	2114      	movs	r1, #20
 8010d4e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8010d52:	f000 fa67 	bl	8011224 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8010d56:	2124      	movs	r1, #36	; 0x24
 8010d58:	f240 7041 	movw	r0, #1857	; 0x741
 8010d5c:	f000 fa62 	bl	8011224 <SUBGRF_WriteRegister>
}
 8010d60:	e7f3      	b.n	8010d4a <RadioSetPublicNetwork+0x26>
 8010d62:	bf00      	nop
 8010d64:	200012cc 	.word	0x200012cc

08010d68 <RadioSetTxConfig>:
{
 8010d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d6c:	b083      	sub	sp, #12
 8010d6e:	4604      	mov	r4, r0
 8010d70:	460e      	mov	r6, r1
 8010d72:	4617      	mov	r7, r2
 8010d74:	461d      	mov	r5, r3
 8010d76:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8010d7a:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8010d7e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8010d82:	f001 f8c5 	bl	8011f10 <RFW_DeInit>
    switch( modem )
 8010d86:	b1ac      	cbz	r4, 8010db4 <RadioSetTxConfig+0x4c>
 8010d88:	2c01      	cmp	r4, #1
 8010d8a:	d05a      	beq.n	8010e42 <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	f000 ffe5 	bl	8011d5c <SUBGRF_SetRfTxPower>
 8010d92:	4c55      	ldr	r4, [pc, #340]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010d94:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8010d98:	210e      	movs	r1, #14
 8010d9a:	f640 101f 	movw	r0, #2335	; 0x91f
 8010d9e:	f000 fa41 	bl	8011224 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8010da2:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8010da6:	f001 f8b8 	bl	8011f1a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8010daa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010dac:	6063      	str	r3, [r4, #4]
}
 8010dae:	b003      	add	sp, #12
 8010db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010db4:	4c4c      	ldr	r4, [pc, #304]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010db6:	f04f 0b00 	mov.w	fp, #0
 8010dba:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dc0:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010dc2:	230b      	movs	r3, #11
 8010dc4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010dc8:	4628      	mov	r0, r5
 8010dca:	f001 f83f 	bl	8011e4c <SUBGRF_GetFskBandwidthRegValue>
 8010dce:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8010dd2:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010dd4:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010dd8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8010ddc:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010de0:	2304      	movs	r3, #4
 8010de2:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8010de4:	2318      	movs	r3, #24
 8010de6:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010de8:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010dec:	f089 0901 	eor.w	r9, r9, #1
 8010df0:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8010df4:	f1ba 0f00 	cmp.w	sl, #0
 8010df8:	d01f      	beq.n	8010e3a <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8010dfa:	22f2      	movs	r2, #242	; 0xf2
 8010dfc:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010dfe:	4c3a      	ldr	r4, [pc, #232]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010e00:	2301      	movs	r3, #1
 8010e02:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010e04:	f7ff fc50 	bl	80106a8 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8010e08:	2000      	movs	r0, #0
 8010e0a:	f7ff ff5d 	bl	8010cc8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010e0e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010e12:	f000 fdf1 	bl	80119f8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010e16:	f104 000e 	add.w	r0, r4, #14
 8010e1a:	f000 fe75 	bl	8011b08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010e1e:	4a33      	ldr	r2, [pc, #204]	; (8010eec <RadioSetTxConfig+0x184>)
 8010e20:	466b      	mov	r3, sp
 8010e22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e26:	e883 0003 	stmia.w	r3, {r0, r1}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f000 fa56 	bl	80112dc <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010e30:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010e34:	f000 fa29 	bl	801128a <SUBGRF_SetWhiteningSeed>
            break;
 8010e38:	e7a8      	b.n	8010d8c <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010e3a:	4b2b      	ldr	r3, [pc, #172]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	75da      	strb	r2, [r3, #23]
 8010e40:	e7dd      	b.n	8010dfe <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010e42:	4a29      	ldr	r2, [pc, #164]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010e44:	2301      	movs	r3, #1
 8010e46:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8010e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8010e52:	4927      	ldr	r1, [pc, #156]	; (8010ef0 <RadioSetTxConfig+0x188>)
 8010e54:	5d49      	ldrb	r1, [r1, r5]
 8010e56:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8010e5a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8010e5e:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010e62:	b91d      	cbnz	r5, 8010e6c <RadioSetTxConfig+0x104>
 8010e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e66:	3a0b      	subs	r2, #11
 8010e68:	2a01      	cmp	r2, #1
 8010e6a:	d92c      	bls.n	8010ec6 <RadioSetTxConfig+0x15e>
 8010e6c:	2d01      	cmp	r5, #1
 8010e6e:	d027      	beq.n	8010ec0 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010e70:	4a1d      	ldr	r2, [pc, #116]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010e72:	2100      	movs	r1, #0
 8010e74:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010e78:	4a1b      	ldr	r2, [pc, #108]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010e7a:	2101      	movs	r1, #1
 8010e7c:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010e7e:	3b05      	subs	r3, #5
 8010e80:	b2db      	uxtb	r3, r3
 8010e82:	428b      	cmp	r3, r1
 8010e84:	d924      	bls.n	8010ed0 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010e86:	4b18      	ldr	r3, [pc, #96]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010e88:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010e8c:	4c16      	ldr	r4, [pc, #88]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010e8e:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010e92:	4b18      	ldr	r3, [pc, #96]	; (8010ef4 <RadioSetTxConfig+0x18c>)
 8010e94:	781b      	ldrb	r3, [r3, #0]
 8010e96:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010e98:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010e9c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010ea0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010ea4:	f7ff fc00 	bl	80106a8 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010ea8:	2001      	movs	r0, #1
 8010eaa:	f7ff ff0d 	bl	8010cc8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010eae:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010eb2:	f000 fda1 	bl	80119f8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010eb6:	f104 000e 	add.w	r0, r4, #14
 8010eba:	f000 fe25 	bl	8011b08 <SUBGRF_SetPacketParams>
            break;
 8010ebe:	e765      	b.n	8010d8c <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ec2:	2a0c      	cmp	r2, #12
 8010ec4:	d1d4      	bne.n	8010e70 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010ec6:	4a08      	ldr	r2, [pc, #32]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010ec8:	2101      	movs	r1, #1
 8010eca:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8010ece:	e7d3      	b.n	8010e78 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 8010ed0:	f1b8 0f0b 	cmp.w	r8, #11
 8010ed4:	d803      	bhi.n	8010ede <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	220c      	movs	r2, #12
 8010eda:	839a      	strh	r2, [r3, #28]
 8010edc:	e7d6      	b.n	8010e8c <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010ede:	4b02      	ldr	r3, [pc, #8]	; (8010ee8 <RadioSetTxConfig+0x180>)
 8010ee0:	f8a3 801c 	strh.w	r8, [r3, #28]
 8010ee4:	e7d2      	b.n	8010e8c <RadioSetTxConfig+0x124>
 8010ee6:	bf00      	nop
 8010ee8:	200012cc 	.word	0x200012cc
 8010eec:	08017f94 	.word	0x08017f94
 8010ef0:	08018e30 	.word	0x08018e30
 8010ef4:	200000fc 	.word	0x200000fc

08010ef8 <RadioSetRxConfig>:
{
 8010ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010efc:	b085      	sub	sp, #20
 8010efe:	4604      	mov	r4, r0
 8010f00:	460d      	mov	r5, r1
 8010f02:	4616      	mov	r6, r2
 8010f04:	9301      	str	r3, [sp, #4]
 8010f06:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8010f0a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8010f0e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8010f12:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8010f16:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8010f1a:	4b73      	ldr	r3, [pc, #460]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 8010f1c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8010f20:	f000 fff6 	bl	8011f10 <RFW_DeInit>
    if( rxContinuous == true )
 8010f24:	f1b8 0f00 	cmp.w	r8, #0
 8010f28:	d001      	beq.n	8010f2e <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8010f2a:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8010f2e:	b14f      	cbz	r7, 8010f44 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8010f30:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8010f34:	4b6d      	ldr	r3, [pc, #436]	; (80110ec <RadioSetRxConfig+0x1f4>)
 8010f36:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8010f38:	b144      	cbz	r4, 8010f4c <RadioSetRxConfig+0x54>
 8010f3a:	2c01      	cmp	r4, #1
 8010f3c:	d057      	beq.n	8010fee <RadioSetRxConfig+0xf6>
}
 8010f3e:	b005      	add	sp, #20
 8010f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8010f44:	4b69      	ldr	r3, [pc, #420]	; (80110ec <RadioSetRxConfig+0x1f4>)
 8010f46:	22ff      	movs	r2, #255	; 0xff
 8010f48:	701a      	strb	r2, [r3, #0]
 8010f4a:	e7f5      	b.n	8010f38 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	f000 fb47 	bl	80115e0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010f52:	4c65      	ldr	r4, [pc, #404]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 8010f54:	f04f 0800 	mov.w	r8, #0
 8010f58:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010f5c:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010f5e:	230b      	movs	r3, #11
 8010f60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010f64:	4628      	mov	r0, r5
 8010f66:	f000 ff71 	bl	8011e4c <SUBGRF_GetFskBandwidthRegValue>
 8010f6a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010f6e:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010f72:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8010f76:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010f7a:	2304      	movs	r3, #4
 8010f7c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8010f7e:	2318      	movs	r3, #24
 8010f80:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010f82:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010f86:	f087 0701 	eor.w	r7, r7, #1
 8010f8a:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8010f8c:	4b57      	ldr	r3, [pc, #348]	; (80110ec <RadioSetRxConfig+0x1f4>)
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8010f92:	f1bb 0f00 	cmp.w	fp, #0
 8010f96:	d026      	beq.n	8010fe6 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8010f98:	22f2      	movs	r2, #242	; 0xf2
 8010f9a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010f9c:	4c52      	ldr	r4, [pc, #328]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010fa2:	f7ff fb81 	bl	80106a8 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8010fa6:	2000      	movs	r0, #0
 8010fa8:	f7ff fe8e 	bl	8010cc8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010fac:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010fb0:	f000 fd22 	bl	80119f8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010fb4:	f104 000e 	add.w	r0, r4, #14
 8010fb8:	f000 fda6 	bl	8011b08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010fbc:	4a4c      	ldr	r2, [pc, #304]	; (80110f0 <RadioSetRxConfig+0x1f8>)
 8010fbe:	ab02      	add	r3, sp, #8
 8010fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f000 f987 	bl	80112dc <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010fd2:	f000 f95a 	bl	801128a <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8010fd6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8010fda:	fb02 fa0a 	mul.w	sl, r2, sl
 8010fde:	fbba f6f6 	udiv	r6, sl, r6
 8010fe2:	60a6      	str	r6, [r4, #8]
            break;
 8010fe4:	e7ab      	b.n	8010f3e <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010fe6:	4b40      	ldr	r3, [pc, #256]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 8010fe8:	2201      	movs	r2, #1
 8010fea:	75da      	strb	r2, [r3, #23]
 8010fec:	e7d6      	b.n	8010f9c <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010fee:	2000      	movs	r0, #0
 8010ff0:	f000 faf6 	bl	80115e0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010ff4:	4a3c      	ldr	r2, [pc, #240]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8010ffc:	b2f3      	uxtb	r3, r6
 8010ffe:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8011002:	493c      	ldr	r1, [pc, #240]	; (80110f4 <RadioSetRxConfig+0x1fc>)
 8011004:	5d49      	ldrb	r1, [r1, r5]
 8011006:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801100a:	9901      	ldr	r1, [sp, #4]
 801100c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011010:	b91d      	cbnz	r5, 801101a <RadioSetRxConfig+0x122>
 8011012:	f1a6 020b 	sub.w	r2, r6, #11
 8011016:	2a01      	cmp	r2, #1
 8011018:	d94b      	bls.n	80110b2 <RadioSetRxConfig+0x1ba>
 801101a:	2d01      	cmp	r5, #1
 801101c:	d047      	beq.n	80110ae <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801101e:	4a32      	ldr	r2, [pc, #200]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 8011020:	2100      	movs	r1, #0
 8011022:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8011026:	4a30      	ldr	r2, [pc, #192]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 8011028:	2101      	movs	r1, #1
 801102a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801102c:	3b05      	subs	r3, #5
 801102e:	b2db      	uxtb	r3, r3
 8011030:	428b      	cmp	r3, r1
 8011032:	d943      	bls.n	80110bc <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8011034:	4b2c      	ldr	r3, [pc, #176]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 8011036:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801103a:	4c2b      	ldr	r4, [pc, #172]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 801103c:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801103e:	4b2b      	ldr	r3, [pc, #172]	; (80110ec <RadioSetRxConfig+0x1f4>)
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8011044:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8011048:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801104c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8011050:	f7ff fb2a 	bl	80106a8 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8011054:	2001      	movs	r0, #1
 8011056:	f7ff fe37 	bl	8010cc8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801105a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801105e:	f000 fccb 	bl	80119f8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011062:	f104 000e 	add.w	r0, r4, #14
 8011066:	f000 fd4f 	bl	8011b08 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801106a:	fa5f f08a 	uxtb.w	r0, sl
 801106e:	f000 fac4 	bl	80115fa <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8011072:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8011076:	f000 f8e5 	bl	8011244 <SUBGRF_ReadRegister>
 801107a:	f000 0101 	and.w	r1, r0, #1
 801107e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8011082:	f000 f8cf 	bl	8011224 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8011086:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801108a:	2b01      	cmp	r3, #1
 801108c:	d021      	beq.n	80110d2 <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801108e:	f240 7036 	movw	r0, #1846	; 0x736
 8011092:	f000 f8d7 	bl	8011244 <SUBGRF_ReadRegister>
 8011096:	f040 0104 	orr.w	r1, r0, #4
 801109a:	b2c9      	uxtb	r1, r1
 801109c:	f240 7036 	movw	r0, #1846	; 0x736
 80110a0:	f000 f8c0 	bl	8011224 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80110a4:	4b10      	ldr	r3, [pc, #64]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 80110a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110aa:	609a      	str	r2, [r3, #8]
}
 80110ac:	e747      	b.n	8010f3e <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80110ae:	2e0c      	cmp	r6, #12
 80110b0:	d1b5      	bne.n	801101e <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80110b2:	4a0d      	ldr	r2, [pc, #52]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 80110b4:	2101      	movs	r1, #1
 80110b6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80110ba:	e7b4      	b.n	8011026 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 80110bc:	f1b9 0f0b 	cmp.w	r9, #11
 80110c0:	d803      	bhi.n	80110ca <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80110c2:	4613      	mov	r3, r2
 80110c4:	220c      	movs	r2, #12
 80110c6:	839a      	strh	r2, [r3, #28]
 80110c8:	e7b7      	b.n	801103a <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80110ca:	4b07      	ldr	r3, [pc, #28]	; (80110e8 <RadioSetRxConfig+0x1f0>)
 80110cc:	f8a3 901c 	strh.w	r9, [r3, #28]
 80110d0:	e7b3      	b.n	801103a <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80110d2:	f240 7036 	movw	r0, #1846	; 0x736
 80110d6:	f000 f8b5 	bl	8011244 <SUBGRF_ReadRegister>
 80110da:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80110de:	f240 7036 	movw	r0, #1846	; 0x736
 80110e2:	f000 f89f 	bl	8011224 <SUBGRF_WriteRegister>
 80110e6:	e7dd      	b.n	80110a4 <RadioSetRxConfig+0x1ac>
 80110e8:	200012cc 	.word	0x200012cc
 80110ec:	200000fc 	.word	0x200000fc
 80110f0:	08017f94 	.word	0x08017f94
 80110f4:	08018e30 	.word	0x08018e30

080110f8 <RadioIsChannelFree>:
{
 80110f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110fa:	b08b      	sub	sp, #44	; 0x2c
 80110fc:	4604      	mov	r4, r0
 80110fe:	460f      	mov	r7, r1
 8011100:	4616      	mov	r6, r2
 8011102:	461d      	mov	r5, r3
    RadioStandby( );
 8011104:	f7ff fad0 	bl	80106a8 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8011108:	2000      	movs	r0, #0
 801110a:	f7ff fddd 	bl	8010cc8 <RadioSetModem>
    RadioSetChannel( freq );
 801110e:	4620      	mov	r0, r4
 8011110:	f7ff fce4 	bl	8010adc <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8011114:	2301      	movs	r3, #1
 8011116:	9309      	str	r3, [sp, #36]	; 0x24
 8011118:	2400      	movs	r4, #0
 801111a:	9408      	str	r4, [sp, #32]
 801111c:	9407      	str	r4, [sp, #28]
 801111e:	9406      	str	r4, [sp, #24]
 8011120:	9405      	str	r4, [sp, #20]
 8011122:	9404      	str	r4, [sp, #16]
 8011124:	9403      	str	r4, [sp, #12]
 8011126:	9402      	str	r4, [sp, #8]
 8011128:	2303      	movs	r3, #3
 801112a:	9301      	str	r3, [sp, #4]
 801112c:	9700      	str	r7, [sp, #0]
 801112e:	4623      	mov	r3, r4
 8011130:	f44f 7216 	mov.w	r2, #600	; 0x258
 8011134:	4639      	mov	r1, r7
 8011136:	4620      	mov	r0, r4
 8011138:	f7ff fede 	bl	8010ef8 <RadioSetRxConfig>
    RadioRx( 0 );
 801113c:	4620      	mov	r0, r4
 801113e:	f7ff fce5 	bl	8010b0c <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8011142:	f7ff fc79 	bl	8010a38 <RadioGetWakeupTime>
 8011146:	f7f0 fee9 	bl	8001f1c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 801114a:	f001 fadd 	bl	8012708 <UTIL_TIMER_GetCurrentTime>
 801114e:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8011150:	4620      	mov	r0, r4
 8011152:	f001 fae3 	bl	801271c <UTIL_TIMER_GetElapsedTime>
 8011156:	42a8      	cmp	r0, r5
 8011158:	d206      	bcs.n	8011168 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 801115a:	2000      	movs	r0, #0
 801115c:	f7ff fc96 	bl	8010a8c <RadioRssi>
        if( rssi > rssiThresh )
 8011160:	42b0      	cmp	r0, r6
 8011162:	ddf5      	ble.n	8011150 <RadioIsChannelFree+0x58>
            status = false;
 8011164:	2400      	movs	r4, #0
 8011166:	e000      	b.n	801116a <RadioIsChannelFree+0x72>
    bool status = true;
 8011168:	2401      	movs	r4, #1
    RadioStandby( );
 801116a:	f7ff fa9d 	bl	80106a8 <RadioStandby>
}
 801116e:	4620      	mov	r0, r4
 8011170:	b00b      	add	sp, #44	; 0x2c
 8011172:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011174 <RadioInit>:
{
 8011174:	b570      	push	{r4, r5, r6, lr}
 8011176:	b082      	sub	sp, #8
    RadioEvents = events;
 8011178:	4b1d      	ldr	r3, [pc, #116]	; (80111f0 <RadioInit+0x7c>)
 801117a:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 801117c:	4d1d      	ldr	r5, [pc, #116]	; (80111f4 <RadioInit+0x80>)
 801117e:	2400      	movs	r4, #0
 8011180:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8011182:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8011184:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011186:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8011188:	481b      	ldr	r0, [pc, #108]	; (80111f8 <RadioInit+0x84>)
 801118a:	f000 fb27 	bl	80117dc <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 801118e:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8011190:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8011192:	f000 fa53 	bl	801163c <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8011196:	4621      	mov	r1, r4
 8011198:	4620      	mov	r0, r4
 801119a:	f000 fd27 	bl	8011bec <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801119e:	2204      	movs	r2, #4
 80111a0:	4621      	mov	r1, r4
 80111a2:	2001      	movs	r0, #1
 80111a4:	f000 fb9a 	bl	80118dc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80111a8:	4623      	mov	r3, r4
 80111aa:	4622      	mov	r2, r4
 80111ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111b0:	4608      	mov	r0, r1
 80111b2:	f000 fada 	bl	801176a <SUBGRF_SetDioIrqParams>
    RadioSleep();
 80111b6:	f7ff fce1 	bl	8010b7c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80111ba:	4e10      	ldr	r6, [pc, #64]	; (80111fc <RadioInit+0x88>)
 80111bc:	9400      	str	r4, [sp, #0]
 80111be:	4b10      	ldr	r3, [pc, #64]	; (8011200 <RadioInit+0x8c>)
 80111c0:	4622      	mov	r2, r4
 80111c2:	f04f 31ff 	mov.w	r1, #4294967295
 80111c6:	4630      	mov	r0, r6
 80111c8:	f001 fa80 	bl	80126cc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80111cc:	4d0d      	ldr	r5, [pc, #52]	; (8011204 <RadioInit+0x90>)
 80111ce:	9400      	str	r4, [sp, #0]
 80111d0:	4b0d      	ldr	r3, [pc, #52]	; (8011208 <RadioInit+0x94>)
 80111d2:	4622      	mov	r2, r4
 80111d4:	f04f 31ff 	mov.w	r1, #4294967295
 80111d8:	4628      	mov	r0, r5
 80111da:	f001 fa77 	bl	80126cc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80111de:	4630      	mov	r0, r6
 80111e0:	f001 fad2 	bl	8012788 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80111e4:	4628      	mov	r0, r5
 80111e6:	f001 facf 	bl	8012788 <UTIL_TIMER_Stop>
}
 80111ea:	b002      	add	sp, #8
 80111ec:	bd70      	pop	{r4, r5, r6, pc}
 80111ee:	bf00      	nop
 80111f0:	200012b0 	.word	0x200012b0
 80111f4:	200012cc 	.word	0x200012cc
 80111f8:	08010a25 	.word	0x08010a25
 80111fc:	20001328 	.word	0x20001328
 8011200:	0801056d 	.word	0x0801056d
 8011204:	200012b4 	.word	0x200012b4
 8011208:	08010595 	.word	0x08010595

0801120c <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 801120c:	4b01      	ldr	r3, [pc, #4]	; (8011214 <SUBGRF_GetOperatingMode+0x8>)
 801120e:	7818      	ldrb	r0, [r3, #0]
 8011210:	4770      	bx	lr
 8011212:	bf00      	nop
 8011214:	20001346 	.word	0x20001346

08011218 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8011218:	4b01      	ldr	r3, [pc, #4]	; (8011220 <SUBGRF_GetPacketType+0x8>)
 801121a:	7818      	ldrb	r0, [r3, #0]
 801121c:	4770      	bx	lr
 801121e:	bf00      	nop
 8011220:	20001347 	.word	0x20001347

08011224 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8011224:	b500      	push	{lr}
 8011226:	b083      	sub	sp, #12
 8011228:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801122c:	2301      	movs	r3, #1
 801122e:	f10d 0207 	add.w	r2, sp, #7
 8011232:	4601      	mov	r1, r0
 8011234:	4802      	ldr	r0, [pc, #8]	; (8011240 <SUBGRF_WriteRegister+0x1c>)
 8011236:	f7f4 ff73 	bl	8006120 <HAL_SUBGHZ_WriteRegisters>
}
 801123a:	b003      	add	sp, #12
 801123c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011240:	200003a0 	.word	0x200003a0

08011244 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8011244:	b500      	push	{lr}
 8011246:	b083      	sub	sp, #12
 8011248:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801124a:	2301      	movs	r3, #1
 801124c:	f10d 0207 	add.w	r2, sp, #7
 8011250:	4803      	ldr	r0, [pc, #12]	; (8011260 <SUBGRF_ReadRegister+0x1c>)
 8011252:	f7f4 ffb5 	bl	80061c0 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 8011256:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801125a:	b003      	add	sp, #12
 801125c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011260:	200003a0 	.word	0x200003a0

08011264 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8011264:	b510      	push	{r4, lr}
 8011266:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8011268:	f7f2 f8ac 	bl	80033c4 <RBI_IsDCDC>
 801126c:	2801      	cmp	r0, #1
 801126e:	d000      	beq.n	8011272 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8011270:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8011272:	f640 1023 	movw	r0, #2339	; 0x923
 8011276:	f7ff ffe5 	bl	8011244 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 801127a:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801127e:	4321      	orrs	r1, r4
 8011280:	f640 1023 	movw	r0, #2339	; 0x923
 8011284:	f7ff ffce 	bl	8011224 <SUBGRF_WriteRegister>
}
 8011288:	e7f2      	b.n	8011270 <Radio_SMPS_Set+0xc>

0801128a <SUBGRF_SetWhiteningSeed>:
{
 801128a:	b510      	push	{r4, lr}
 801128c:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 801128e:	f7ff ffc3 	bl	8011218 <SUBGRF_GetPacketType>
 8011292:	b100      	cbz	r0, 8011296 <SUBGRF_SetWhiteningSeed+0xc>
}
 8011294:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8011296:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801129a:	f7ff ffd3 	bl	8011244 <SUBGRF_ReadRegister>
 801129e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80112a2:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80112a6:	4301      	orrs	r1, r0
 80112a8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80112ac:	f7ff ffba 	bl	8011224 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80112b0:	b2e1      	uxtb	r1, r4
 80112b2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80112b6:	f7ff ffb5 	bl	8011224 <SUBGRF_WriteRegister>
}
 80112ba:	e7eb      	b.n	8011294 <SUBGRF_SetWhiteningSeed+0xa>

080112bc <SUBGRF_WriteRegisters>:
{
 80112bc:	b510      	push	{r4, lr}
 80112be:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112c0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80112c4:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80112c6:	460a      	mov	r2, r1
 80112c8:	4601      	mov	r1, r0
 80112ca:	4803      	ldr	r0, [pc, #12]	; (80112d8 <SUBGRF_WriteRegisters+0x1c>)
 80112cc:	f7f4 ff28 	bl	8006120 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80112d0:	f384 8810 	msr	PRIMASK, r4
}
 80112d4:	bd10      	pop	{r4, pc}
 80112d6:	bf00      	nop
 80112d8:	200003a0 	.word	0x200003a0

080112dc <SUBGRF_SetSyncWord>:
{
 80112dc:	b508      	push	{r3, lr}
 80112de:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80112e0:	2208      	movs	r2, #8
 80112e2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80112e6:	f7ff ffe9 	bl	80112bc <SUBGRF_WriteRegisters>
}
 80112ea:	2000      	movs	r0, #0
 80112ec:	bd08      	pop	{r3, pc}

080112ee <SUBGRF_SetCrcSeed>:
{
 80112ee:	b500      	push	{lr}
 80112f0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80112f2:	0a03      	lsrs	r3, r0, #8
 80112f4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80112f8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80112fc:	f7ff ff8c 	bl	8011218 <SUBGRF_GetPacketType>
 8011300:	b110      	cbz	r0, 8011308 <SUBGRF_SetCrcSeed+0x1a>
}
 8011302:	b003      	add	sp, #12
 8011304:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8011308:	2202      	movs	r2, #2
 801130a:	a901      	add	r1, sp, #4
 801130c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8011310:	f7ff ffd4 	bl	80112bc <SUBGRF_WriteRegisters>
}
 8011314:	e7f5      	b.n	8011302 <SUBGRF_SetCrcSeed+0x14>

08011316 <SUBGRF_SetCrcPolynomial>:
{
 8011316:	b500      	push	{lr}
 8011318:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801131a:	0a03      	lsrs	r3, r0, #8
 801131c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8011320:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8011324:	f7ff ff78 	bl	8011218 <SUBGRF_GetPacketType>
 8011328:	b110      	cbz	r0, 8011330 <SUBGRF_SetCrcPolynomial+0x1a>
}
 801132a:	b003      	add	sp, #12
 801132c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8011330:	2202      	movs	r2, #2
 8011332:	a901      	add	r1, sp, #4
 8011334:	f240 60be 	movw	r0, #1726	; 0x6be
 8011338:	f7ff ffc0 	bl	80112bc <SUBGRF_WriteRegisters>
}
 801133c:	e7f5      	b.n	801132a <SUBGRF_SetCrcPolynomial+0x14>
	...

08011340 <SUBGRF_ReadRegisters>:
{
 8011340:	b510      	push	{r4, lr}
 8011342:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011344:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011348:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801134a:	460a      	mov	r2, r1
 801134c:	4601      	mov	r1, r0
 801134e:	4803      	ldr	r0, [pc, #12]	; (801135c <SUBGRF_ReadRegisters+0x1c>)
 8011350:	f7f4 ff36 	bl	80061c0 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011354:	f384 8810 	msr	PRIMASK, r4
}
 8011358:	bd10      	pop	{r4, pc}
 801135a:	bf00      	nop
 801135c:	200003a0 	.word	0x200003a0

08011360 <SUBGRF_WriteBuffer>:
{
 8011360:	b510      	push	{r4, lr}
 8011362:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011364:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011368:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801136a:	460a      	mov	r2, r1
 801136c:	4601      	mov	r1, r0
 801136e:	4803      	ldr	r0, [pc, #12]	; (801137c <SUBGRF_WriteBuffer+0x1c>)
 8011370:	f7f5 f884 	bl	800647c <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011374:	f384 8810 	msr	PRIMASK, r4
}
 8011378:	bd10      	pop	{r4, pc}
 801137a:	bf00      	nop
 801137c:	200003a0 	.word	0x200003a0

08011380 <SUBGRF_SetPayload>:
{
 8011380:	b508      	push	{r3, lr}
 8011382:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8011384:	4601      	mov	r1, r0
 8011386:	2000      	movs	r0, #0
 8011388:	f7ff ffea 	bl	8011360 <SUBGRF_WriteBuffer>
}
 801138c:	bd08      	pop	{r3, pc}
	...

08011390 <SUBGRF_ReadBuffer>:
{
 8011390:	b510      	push	{r4, lr}
 8011392:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011394:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011398:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801139a:	460a      	mov	r2, r1
 801139c:	4601      	mov	r1, r0
 801139e:	4803      	ldr	r0, [pc, #12]	; (80113ac <SUBGRF_ReadBuffer+0x1c>)
 80113a0:	f7f5 f8b6 	bl	8006510 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113a4:	f384 8810 	msr	PRIMASK, r4
}
 80113a8:	bd10      	pop	{r4, pc}
 80113aa:	bf00      	nop
 80113ac:	200003a0 	.word	0x200003a0

080113b0 <SUBGRF_WriteCommand>:
{
 80113b0:	b510      	push	{r4, lr}
 80113b2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113b4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80113b8:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80113ba:	460a      	mov	r2, r1
 80113bc:	4601      	mov	r1, r0
 80113be:	4803      	ldr	r0, [pc, #12]	; (80113cc <SUBGRF_WriteCommand+0x1c>)
 80113c0:	f7f4 ff52 	bl	8006268 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113c4:	f384 8810 	msr	PRIMASK, r4
}
 80113c8:	bd10      	pop	{r4, pc}
 80113ca:	bf00      	nop
 80113cc:	200003a0 	.word	0x200003a0

080113d0 <SUBGRF_SetSleep>:
{
 80113d0:	b510      	push	{r4, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80113d6:	2000      	movs	r0, #0
 80113d8:	f7f1 ffe8 	bl	80033ac <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80113dc:	2002      	movs	r0, #2
 80113de:	f7ff ff41 	bl	8011264 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80113e2:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80113e6:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80113ea:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80113ec:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80113f0:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80113f2:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80113f6:	2201      	movs	r2, #1
 80113f8:	f10d 0107 	add.w	r1, sp, #7
 80113fc:	2084      	movs	r0, #132	; 0x84
 80113fe:	f7ff ffd7 	bl	80113b0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8011402:	4b02      	ldr	r3, [pc, #8]	; (801140c <SUBGRF_SetSleep+0x3c>)
 8011404:	2200      	movs	r2, #0
 8011406:	701a      	strb	r2, [r3, #0]
}
 8011408:	b002      	add	sp, #8
 801140a:	bd10      	pop	{r4, pc}
 801140c:	20001346 	.word	0x20001346

08011410 <SUBGRF_SetStandby>:
{
 8011410:	b500      	push	{lr}
 8011412:	b083      	sub	sp, #12
 8011414:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8011418:	2201      	movs	r2, #1
 801141a:	f10d 0107 	add.w	r1, sp, #7
 801141e:	2080      	movs	r0, #128	; 0x80
 8011420:	f7ff ffc6 	bl	80113b0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8011424:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011428:	b92b      	cbnz	r3, 8011436 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 801142a:	4b05      	ldr	r3, [pc, #20]	; (8011440 <SUBGRF_SetStandby+0x30>)
 801142c:	2201      	movs	r2, #1
 801142e:	701a      	strb	r2, [r3, #0]
}
 8011430:	b003      	add	sp, #12
 8011432:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8011436:	4b02      	ldr	r3, [pc, #8]	; (8011440 <SUBGRF_SetStandby+0x30>)
 8011438:	2202      	movs	r2, #2
 801143a:	701a      	strb	r2, [r3, #0]
}
 801143c:	e7f8      	b.n	8011430 <SUBGRF_SetStandby+0x20>
 801143e:	bf00      	nop
 8011440:	20001346 	.word	0x20001346

08011444 <SUBGRF_SetTx>:
{
 8011444:	b500      	push	{lr}
 8011446:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8011448:	4b0a      	ldr	r3, [pc, #40]	; (8011474 <SUBGRF_SetTx+0x30>)
 801144a:	2204      	movs	r2, #4
 801144c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801144e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011452:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011456:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801145a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801145e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8011462:	2203      	movs	r2, #3
 8011464:	a901      	add	r1, sp, #4
 8011466:	2083      	movs	r0, #131	; 0x83
 8011468:	f7ff ffa2 	bl	80113b0 <SUBGRF_WriteCommand>
}
 801146c:	b003      	add	sp, #12
 801146e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011472:	bf00      	nop
 8011474:	20001346 	.word	0x20001346

08011478 <SUBGRF_SendPayload>:
{
 8011478:	b510      	push	{r4, lr}
 801147a:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 801147c:	f7ff ff80 	bl	8011380 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8011480:	4620      	mov	r0, r4
 8011482:	f7ff ffdf 	bl	8011444 <SUBGRF_SetTx>
}
 8011486:	bd10      	pop	{r4, pc}

08011488 <SUBGRF_SetRx>:
{
 8011488:	b500      	push	{lr}
 801148a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 801148c:	4b0a      	ldr	r3, [pc, #40]	; (80114b8 <SUBGRF_SetRx+0x30>)
 801148e:	2205      	movs	r2, #5
 8011490:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011492:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011496:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801149a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801149e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80114a2:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80114a6:	2203      	movs	r2, #3
 80114a8:	a901      	add	r1, sp, #4
 80114aa:	2082      	movs	r0, #130	; 0x82
 80114ac:	f7ff ff80 	bl	80113b0 <SUBGRF_WriteCommand>
}
 80114b0:	b003      	add	sp, #12
 80114b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80114b6:	bf00      	nop
 80114b8:	20001346 	.word	0x20001346

080114bc <SUBGRF_GetRandom>:
{
 80114bc:	b570      	push	{r4, r5, r6, lr}
 80114be:	b082      	sub	sp, #8
    uint32_t number = 0;
 80114c0:	2600      	movs	r6, #0
 80114c2:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80114c4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80114c8:	f7ff febc 	bl	8011244 <SUBGRF_ReadRegister>
 80114cc:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80114ce:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 80114d2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80114d6:	f7ff fea5 	bl	8011224 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80114da:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80114de:	f7ff feb1 	bl	8011244 <SUBGRF_ReadRegister>
 80114e2:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80114e4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80114e8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80114ec:	f7ff fe9a 	bl	8011224 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80114f0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80114f4:	f7ff ffc8 	bl	8011488 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80114f8:	2204      	movs	r2, #4
 80114fa:	eb0d 0102 	add.w	r1, sp, r2
 80114fe:	f640 0019 	movw	r0, #2073	; 0x819
 8011502:	f7ff ff1d 	bl	8011340 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8011506:	4630      	mov	r0, r6
 8011508:	f7ff ff82 	bl	8011410 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801150c:	4629      	mov	r1, r5
 801150e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011512:	f7ff fe87 	bl	8011224 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8011516:	4621      	mov	r1, r4
 8011518:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801151c:	f7ff fe82 	bl	8011224 <SUBGRF_WriteRegister>
}
 8011520:	9801      	ldr	r0, [sp, #4]
 8011522:	b002      	add	sp, #8
 8011524:	bd70      	pop	{r4, r5, r6, pc}
	...

08011528 <SUBGRF_SetRxBoosted>:
{
 8011528:	b510      	push	{r4, lr}
 801152a:	b082      	sub	sp, #8
 801152c:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 801152e:	4b0c      	ldr	r3, [pc, #48]	; (8011560 <SUBGRF_SetRxBoosted+0x38>)
 8011530:	2205      	movs	r2, #5
 8011532:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8011534:	2197      	movs	r1, #151	; 0x97
 8011536:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801153a:	f7ff fe73 	bl	8011224 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801153e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8011542:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011546:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801154a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801154e:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8011552:	2203      	movs	r2, #3
 8011554:	a901      	add	r1, sp, #4
 8011556:	2082      	movs	r0, #130	; 0x82
 8011558:	f7ff ff2a 	bl	80113b0 <SUBGRF_WriteCommand>
}
 801155c:	b002      	add	sp, #8
 801155e:	bd10      	pop	{r4, pc}
 8011560:	20001346 	.word	0x20001346

08011564 <SUBGRF_SetRxDutyCycle>:
{
 8011564:	b500      	push	{lr}
 8011566:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8011568:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801156c:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8011570:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011574:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8011578:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801157c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011580:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8011584:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011588:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801158c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8011590:	2206      	movs	r2, #6
 8011592:	4669      	mov	r1, sp
 8011594:	2094      	movs	r0, #148	; 0x94
 8011596:	f7ff ff0b 	bl	80113b0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801159a:	4b03      	ldr	r3, [pc, #12]	; (80115a8 <SUBGRF_SetRxDutyCycle+0x44>)
 801159c:	2206      	movs	r2, #6
 801159e:	701a      	strb	r2, [r3, #0]
}
 80115a0:	b003      	add	sp, #12
 80115a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80115a6:	bf00      	nop
 80115a8:	20001346 	.word	0x20001346

080115ac <SUBGRF_SetCad>:
{
 80115ac:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80115ae:	2200      	movs	r2, #0
 80115b0:	4611      	mov	r1, r2
 80115b2:	20c5      	movs	r0, #197	; 0xc5
 80115b4:	f7ff fefc 	bl	80113b0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80115b8:	4b01      	ldr	r3, [pc, #4]	; (80115c0 <SUBGRF_SetCad+0x14>)
 80115ba:	2207      	movs	r2, #7
 80115bc:	701a      	strb	r2, [r3, #0]
}
 80115be:	bd08      	pop	{r3, pc}
 80115c0:	20001346 	.word	0x20001346

080115c4 <SUBGRF_SetTxContinuousWave>:
{
 80115c4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80115c6:	2200      	movs	r2, #0
 80115c8:	4611      	mov	r1, r2
 80115ca:	20d1      	movs	r0, #209	; 0xd1
 80115cc:	f7ff fef0 	bl	80113b0 <SUBGRF_WriteCommand>
}
 80115d0:	bd08      	pop	{r3, pc}

080115d2 <SUBGRF_SetTxInfinitePreamble>:
{
 80115d2:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80115d4:	2200      	movs	r2, #0
 80115d6:	4611      	mov	r1, r2
 80115d8:	20d2      	movs	r0, #210	; 0xd2
 80115da:	f7ff fee9 	bl	80113b0 <SUBGRF_WriteCommand>
}
 80115de:	bd08      	pop	{r3, pc}

080115e0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80115e0:	b500      	push	{lr}
 80115e2:	b083      	sub	sp, #12
 80115e4:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80115e8:	2201      	movs	r2, #1
 80115ea:	f10d 0107 	add.w	r1, sp, #7
 80115ee:	209f      	movs	r0, #159	; 0x9f
 80115f0:	f7ff fede 	bl	80113b0 <SUBGRF_WriteCommand>
}
 80115f4:	b003      	add	sp, #12
 80115f6:	f85d fb04 	ldr.w	pc, [sp], #4

080115fa <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80115fa:	b500      	push	{lr}
 80115fc:	b083      	sub	sp, #12
 80115fe:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8011602:	2201      	movs	r2, #1
 8011604:	f10d 0107 	add.w	r1, sp, #7
 8011608:	20a0      	movs	r0, #160	; 0xa0
 801160a:	f7ff fed1 	bl	80113b0 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 801160e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011612:	2b3f      	cmp	r3, #63	; 0x3f
 8011614:	d90f      	bls.n	8011636 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8011616:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8011618:	2200      	movs	r2, #0
        while( mant > 31 )
 801161a:	e002      	b.n	8011622 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 801161c:	089b      	lsrs	r3, r3, #2
            exp++;
 801161e:	1c51      	adds	r1, r2, #1
 8011620:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8011622:	2b1f      	cmp	r3, #31
 8011624:	d8fa      	bhi.n	801161c <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8011626:	00d9      	lsls	r1, r3, #3
 8011628:	b2c9      	uxtb	r1, r1
 801162a:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801162c:	b2c9      	uxtb	r1, r1
 801162e:	f240 7006 	movw	r0, #1798	; 0x706
 8011632:	f7ff fdf7 	bl	8011224 <SUBGRF_WriteRegister>
}
 8011636:	b003      	add	sp, #12
 8011638:	f85d fb04 	ldr.w	pc, [sp], #4

0801163c <SUBGRF_SetRegulatorMode>:
{
 801163c:	b500      	push	{lr}
 801163e:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8011640:	f7f1 fec0 	bl	80033c4 <RBI_IsDCDC>
 8011644:	2801      	cmp	r0, #1
 8011646:	d00b      	beq.n	8011660 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8011648:	2300      	movs	r3, #0
 801164a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801164e:	2201      	movs	r2, #1
 8011650:	f10d 0107 	add.w	r1, sp, #7
 8011654:	2096      	movs	r0, #150	; 0x96
 8011656:	f7ff feab 	bl	80113b0 <SUBGRF_WriteCommand>
}
 801165a:	b003      	add	sp, #12
 801165c:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8011660:	2301      	movs	r3, #1
 8011662:	f88d 3007 	strb.w	r3, [sp, #7]
 8011666:	e7f2      	b.n	801164e <SUBGRF_SetRegulatorMode+0x12>

08011668 <SUBGRF_Calibrate>:
{
 8011668:	b500      	push	{lr}
 801166a:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801166c:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8011670:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011674:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8011676:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801167a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801167c:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8011680:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8011682:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8011686:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8011688:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801168c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801168e:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8011692:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011694:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8011698:	2201      	movs	r2, #1
 801169a:	f10d 0107 	add.w	r1, sp, #7
 801169e:	2089      	movs	r0, #137	; 0x89
 80116a0:	f7ff fe86 	bl	80113b0 <SUBGRF_WriteCommand>
}
 80116a4:	b003      	add	sp, #12
 80116a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080116ac <SUBGRF_CalibrateImage>:
{
 80116ac:	b500      	push	{lr}
 80116ae:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80116b0:	4b1f      	ldr	r3, [pc, #124]	; (8011730 <SUBGRF_CalibrateImage+0x84>)
 80116b2:	4298      	cmp	r0, r3
 80116b4:	d90d      	bls.n	80116d2 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 80116b6:	23e1      	movs	r3, #225	; 0xe1
 80116b8:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80116bc:	23e9      	movs	r3, #233	; 0xe9
 80116be:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80116c2:	2202      	movs	r2, #2
 80116c4:	a901      	add	r1, sp, #4
 80116c6:	2098      	movs	r0, #152	; 0x98
 80116c8:	f7ff fe72 	bl	80113b0 <SUBGRF_WriteCommand>
}
 80116cc:	b003      	add	sp, #12
 80116ce:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80116d2:	4b18      	ldr	r3, [pc, #96]	; (8011734 <SUBGRF_CalibrateImage+0x88>)
 80116d4:	4298      	cmp	r0, r3
 80116d6:	d906      	bls.n	80116e6 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80116d8:	23d7      	movs	r3, #215	; 0xd7
 80116da:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80116de:	23db      	movs	r3, #219	; 0xdb
 80116e0:	f88d 3005 	strb.w	r3, [sp, #5]
 80116e4:	e7ed      	b.n	80116c2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80116e6:	4b14      	ldr	r3, [pc, #80]	; (8011738 <SUBGRF_CalibrateImage+0x8c>)
 80116e8:	4298      	cmp	r0, r3
 80116ea:	d906      	bls.n	80116fa <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80116ec:	23c1      	movs	r3, #193	; 0xc1
 80116ee:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80116f2:	23c5      	movs	r3, #197	; 0xc5
 80116f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80116f8:	e7e3      	b.n	80116c2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80116fa:	4b10      	ldr	r3, [pc, #64]	; (801173c <SUBGRF_CalibrateImage+0x90>)
 80116fc:	4298      	cmp	r0, r3
 80116fe:	d906      	bls.n	801170e <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8011700:	2375      	movs	r3, #117	; 0x75
 8011702:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8011706:	2381      	movs	r3, #129	; 0x81
 8011708:	f88d 3005 	strb.w	r3, [sp, #5]
 801170c:	e7d9      	b.n	80116c2 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 801170e:	4b0c      	ldr	r3, [pc, #48]	; (8011740 <SUBGRF_CalibrateImage+0x94>)
 8011710:	4298      	cmp	r0, r3
 8011712:	d906      	bls.n	8011722 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8011714:	236b      	movs	r3, #107	; 0x6b
 8011716:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 801171a:	236f      	movs	r3, #111	; 0x6f
 801171c:	f88d 3005 	strb.w	r3, [sp, #5]
 8011720:	e7cf      	b.n	80116c2 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8011722:	2329      	movs	r3, #41	; 0x29
 8011724:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8011728:	232b      	movs	r3, #43	; 0x2b
 801172a:	f88d 3005 	strb.w	r3, [sp, #5]
 801172e:	e7c8      	b.n	80116c2 <SUBGRF_CalibrateImage+0x16>
 8011730:	35a4e900 	.word	0x35a4e900
 8011734:	32a9f880 	.word	0x32a9f880
 8011738:	2de54480 	.word	0x2de54480
 801173c:	1b6b0b00 	.word	0x1b6b0b00
 8011740:	1954fc40 	.word	0x1954fc40

08011744 <SUBGRF_SetPaConfig>:
{
 8011744:	b500      	push	{lr}
 8011746:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8011748:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 801174c:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8011750:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8011754:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8011758:	2204      	movs	r2, #4
 801175a:	eb0d 0102 	add.w	r1, sp, r2
 801175e:	2095      	movs	r0, #149	; 0x95
 8011760:	f7ff fe26 	bl	80113b0 <SUBGRF_WriteCommand>
}
 8011764:	b003      	add	sp, #12
 8011766:	f85d fb04 	ldr.w	pc, [sp], #4

0801176a <SUBGRF_SetDioIrqParams>:
{
 801176a:	b500      	push	{lr}
 801176c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801176e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8011772:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8011776:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801177a:	0a08      	lsrs	r0, r1, #8
 801177c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8011780:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8011784:	0a11      	lsrs	r1, r2, #8
 8011786:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801178a:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801178e:	0a1a      	lsrs	r2, r3, #8
 8011790:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8011794:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8011798:	2208      	movs	r2, #8
 801179a:	4669      	mov	r1, sp
 801179c:	4610      	mov	r0, r2
 801179e:	f7ff fe07 	bl	80113b0 <SUBGRF_WriteCommand>
}
 80117a2:	b003      	add	sp, #12
 80117a4:	f85d fb04 	ldr.w	pc, [sp], #4

080117a8 <SUBGRF_SetTcxoMode>:
{
 80117a8:	b500      	push	{lr}
 80117aa:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 80117ac:	f000 0007 	and.w	r0, r0, #7
 80117b0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80117b4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80117b8:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80117bc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80117c0:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80117c4:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80117c8:	2204      	movs	r2, #4
 80117ca:	eb0d 0102 	add.w	r1, sp, r2
 80117ce:	2097      	movs	r0, #151	; 0x97
 80117d0:	f7ff fdee 	bl	80113b0 <SUBGRF_WriteCommand>
}
 80117d4:	b003      	add	sp, #12
 80117d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080117dc <SUBGRF_Init>:
{
 80117dc:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80117de:	b108      	cbz	r0, 80117e4 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80117e0:	4a18      	ldr	r2, [pc, #96]	; (8011844 <SUBGRF_Init+0x68>)
 80117e2:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80117e4:	f7f0 fa8a 	bl	8001cfc <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80117e8:	2002      	movs	r0, #2
 80117ea:	f7ff fd3b 	bl	8011264 <Radio_SMPS_Set>
    ImageCalibrated = false;
 80117ee:	2000      	movs	r0, #0
 80117f0:	4b15      	ldr	r3, [pc, #84]	; (8011848 <SUBGRF_Init+0x6c>)
 80117f2:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80117f4:	f7ff fe0c 	bl	8011410 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80117f8:	f7f1 fde0 	bl	80033bc <RBI_IsTCXO>
 80117fc:	2801      	cmp	r0, #1
 80117fe:	d014      	beq.n	801182a <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8011800:	2120      	movs	r1, #32
 8011802:	f640 1011 	movw	r0, #2321	; 0x911
 8011806:	f7ff fd0d 	bl	8011224 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801180a:	2120      	movs	r1, #32
 801180c:	f640 1012 	movw	r0, #2322	; 0x912
 8011810:	f7ff fd08 	bl	8011224 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011814:	210e      	movs	r1, #14
 8011816:	f640 101f 	movw	r0, #2335	; 0x91f
 801181a:	f7ff fd03 	bl	8011224 <SUBGRF_WriteRegister>
    RBI_Init();
 801181e:	f7f1 fdc1 	bl	80033a4 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8011822:	4b0a      	ldr	r3, [pc, #40]	; (801184c <SUBGRF_Init+0x70>)
 8011824:	2201      	movs	r2, #1
 8011826:	701a      	strb	r2, [r3, #0]
}
 8011828:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801182a:	2140      	movs	r1, #64	; 0x40
 801182c:	f7ff ffbc 	bl	80117a8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8011830:	2100      	movs	r1, #0
 8011832:	f640 1011 	movw	r0, #2321	; 0x911
 8011836:	f7ff fcf5 	bl	8011224 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 801183a:	f04f 007f 	mov.w	r0, #127	; 0x7f
 801183e:	f7ff ff13 	bl	8011668 <SUBGRF_Calibrate>
 8011842:	e7e7      	b.n	8011814 <SUBGRF_Init+0x38>
 8011844:	20001348 	.word	0x20001348
 8011848:	20001344 	.word	0x20001344
 801184c:	20001346 	.word	0x20001346

08011850 <SUBGRF_SetRfFrequency>:
{
 8011850:	b510      	push	{r4, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8011856:	4b12      	ldr	r3, [pc, #72]	; (80118a0 <SUBGRF_SetRfFrequency+0x50>)
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	b1d3      	cbz	r3, 8011892 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801185c:	4a11      	ldr	r2, [pc, #68]	; (80118a4 <SUBGRF_SetRfFrequency+0x54>)
 801185e:	2300      	movs	r3, #0
 8011860:	0660      	lsls	r0, r4, #25
 8011862:	09e1      	lsrs	r1, r4, #7
 8011864:	f7ef fbf0 	bl	8001048 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8011868:	0e03      	lsrs	r3, r0, #24
 801186a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801186e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011872:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8011876:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801187a:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801187e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8011882:	2204      	movs	r2, #4
 8011884:	eb0d 0102 	add.w	r1, sp, r2
 8011888:	2086      	movs	r0, #134	; 0x86
 801188a:	f7ff fd91 	bl	80113b0 <SUBGRF_WriteCommand>
}
 801188e:	b002      	add	sp, #8
 8011890:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8011892:	f7ff ff0b 	bl	80116ac <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8011896:	4b02      	ldr	r3, [pc, #8]	; (80118a0 <SUBGRF_SetRfFrequency+0x50>)
 8011898:	2201      	movs	r2, #1
 801189a:	701a      	strb	r2, [r3, #0]
 801189c:	e7de      	b.n	801185c <SUBGRF_SetRfFrequency+0xc>
 801189e:	bf00      	nop
 80118a0:	20001344 	.word	0x20001344
 80118a4:	01e84800 	.word	0x01e84800

080118a8 <SUBGRF_SetPacketType>:
{
 80118a8:	b500      	push	{lr}
 80118aa:	b083      	sub	sp, #12
 80118ac:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 80118b0:	b2c3      	uxtb	r3, r0
 80118b2:	4a09      	ldr	r2, [pc, #36]	; (80118d8 <SUBGRF_SetPacketType+0x30>)
 80118b4:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 80118b6:	b143      	cbz	r3, 80118ca <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80118b8:	2201      	movs	r2, #1
 80118ba:	f10d 0107 	add.w	r1, sp, #7
 80118be:	208a      	movs	r0, #138	; 0x8a
 80118c0:	f7ff fd76 	bl	80113b0 <SUBGRF_WriteCommand>
}
 80118c4:	b003      	add	sp, #12
 80118c6:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80118ca:	2100      	movs	r1, #0
 80118cc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80118d0:	f7ff fca8 	bl	8011224 <SUBGRF_WriteRegister>
 80118d4:	e7f0      	b.n	80118b8 <SUBGRF_SetPacketType+0x10>
 80118d6:	bf00      	nop
 80118d8:	20001347 	.word	0x20001347

080118dc <SUBGRF_SetTxParams>:
{
 80118dc:	b570      	push	{r4, r5, r6, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	460c      	mov	r4, r1
 80118e2:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80118e4:	2801      	cmp	r0, #1
 80118e6:	d035      	beq.n	8011954 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80118e8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80118ec:	f7ff fcaa 	bl	8011244 <SUBGRF_ReadRegister>
 80118f0:	f040 011e 	orr.w	r1, r0, #30
 80118f4:	b2c9      	uxtb	r1, r1
 80118f6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80118fa:	f7ff fc93 	bl	8011224 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80118fe:	2001      	movs	r0, #1
 8011900:	f7f1 fd64 	bl	80033cc <RBI_GetRFOMaxPowerConfig>
 8011904:	4605      	mov	r5, r0
        if (power > max_power)
 8011906:	4284      	cmp	r4, r0
 8011908:	dd00      	ble.n	801190c <SUBGRF_SetTxParams+0x30>
            power = max_power;
 801190a:	b244      	sxtb	r4, r0
        if (max_power == 20)
 801190c:	2d14      	cmp	r5, #20
 801190e:	d054      	beq.n	80119ba <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8011910:	2d11      	cmp	r5, #17
 8011912:	d05c      	beq.n	80119ce <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8011914:	2d0e      	cmp	r5, #14
 8011916:	d064      	beq.n	80119e2 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8011918:	2301      	movs	r3, #1
 801191a:	2200      	movs	r2, #0
 801191c:	2107      	movs	r1, #7
 801191e:	2004      	movs	r0, #4
 8011920:	f7ff ff10 	bl	8011744 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8011924:	1b64      	subs	r4, r4, r5
 8011926:	3416      	adds	r4, #22
 8011928:	b264      	sxtb	r4, r4
        if (power < -9)
 801192a:	f114 0f09 	cmn.w	r4, #9
 801192e:	da01      	bge.n	8011934 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8011930:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8011934:	2138      	movs	r1, #56	; 0x38
 8011936:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801193a:	f7ff fc73 	bl	8011224 <SUBGRF_WriteRegister>
    buf[0] = power;
 801193e:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8011942:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8011946:	2202      	movs	r2, #2
 8011948:	a901      	add	r1, sp, #4
 801194a:	208e      	movs	r0, #142	; 0x8e
 801194c:	f7ff fd30 	bl	80113b0 <SUBGRF_WriteCommand>
}
 8011950:	b002      	add	sp, #8
 8011952:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8011954:	2000      	movs	r0, #0
 8011956:	f7f1 fd39 	bl	80033cc <RBI_GetRFOMaxPowerConfig>
 801195a:	4605      	mov	r5, r0
        if (power >  max_power)
 801195c:	4284      	cmp	r4, r0
 801195e:	dd00      	ble.n	8011962 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8011960:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8011962:	2d0e      	cmp	r5, #14
 8011964:	d015      	beq.n	8011992 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8011966:	2d0a      	cmp	r5, #10
 8011968:	d01d      	beq.n	80119a6 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801196a:	2301      	movs	r3, #1
 801196c:	461a      	mov	r2, r3
 801196e:	2100      	movs	r1, #0
 8011970:	2007      	movs	r0, #7
 8011972:	f7ff fee7 	bl	8011744 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8011976:	1b64      	subs	r4, r4, r5
 8011978:	340e      	adds	r4, #14
 801197a:	b264      	sxtb	r4, r4
        if (power < -17)
 801197c:	f114 0f11 	cmn.w	r4, #17
 8011980:	da01      	bge.n	8011986 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8011982:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8011986:	2118      	movs	r1, #24
 8011988:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801198c:	f7ff fc4a 	bl	8011224 <SUBGRF_WriteRegister>
 8011990:	e7d5      	b.n	801193e <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8011992:	2301      	movs	r3, #1
 8011994:	461a      	mov	r2, r3
 8011996:	2100      	movs	r1, #0
 8011998:	2004      	movs	r0, #4
 801199a:	f7ff fed3 	bl	8011744 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801199e:	1b64      	subs	r4, r4, r5
 80119a0:	340e      	adds	r4, #14
 80119a2:	b264      	sxtb	r4, r4
 80119a4:	e7ea      	b.n	801197c <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80119a6:	2301      	movs	r3, #1
 80119a8:	461a      	mov	r2, r3
 80119aa:	2100      	movs	r1, #0
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7ff fec9 	bl	8011744 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80119b2:	1b64      	subs	r4, r4, r5
 80119b4:	340d      	adds	r4, #13
 80119b6:	b264      	sxtb	r4, r4
 80119b8:	e7e0      	b.n	801197c <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80119ba:	2301      	movs	r3, #1
 80119bc:	2200      	movs	r2, #0
 80119be:	2105      	movs	r1, #5
 80119c0:	2003      	movs	r0, #3
 80119c2:	f7ff febf 	bl	8011744 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80119c6:	1b64      	subs	r4, r4, r5
 80119c8:	3416      	adds	r4, #22
 80119ca:	b264      	sxtb	r4, r4
 80119cc:	e7ad      	b.n	801192a <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80119ce:	2301      	movs	r3, #1
 80119d0:	2200      	movs	r2, #0
 80119d2:	2103      	movs	r1, #3
 80119d4:	2002      	movs	r0, #2
 80119d6:	f7ff feb5 	bl	8011744 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80119da:	1b64      	subs	r4, r4, r5
 80119dc:	3416      	adds	r4, #22
 80119de:	b264      	sxtb	r4, r4
 80119e0:	e7a3      	b.n	801192a <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80119e2:	2301      	movs	r3, #1
 80119e4:	2200      	movs	r2, #0
 80119e6:	2102      	movs	r1, #2
 80119e8:	4608      	mov	r0, r1
 80119ea:	f7ff feab 	bl	8011744 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80119ee:	1b64      	subs	r4, r4, r5
 80119f0:	340e      	adds	r4, #14
 80119f2:	b264      	sxtb	r4, r4
 80119f4:	e799      	b.n	801192a <SUBGRF_SetTxParams+0x4e>
	...

080119f8 <SUBGRF_SetModulationParams>:
{
 80119f8:	b510      	push	{r4, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80119fe:	4b3e      	ldr	r3, [pc, #248]	; (8011af8 <SUBGRF_SetModulationParams+0x100>)
 8011a00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011a04:	ab02      	add	r3, sp, #8
 8011a06:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8011a0a:	7820      	ldrb	r0, [r4, #0]
 8011a0c:	4b3b      	ldr	r3, [pc, #236]	; (8011afc <SUBGRF_SetModulationParams+0x104>)
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	4298      	cmp	r0, r3
 8011a12:	d106      	bne.n	8011a22 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8011a14:	7823      	ldrb	r3, [r4, #0]
 8011a16:	2b03      	cmp	r3, #3
 8011a18:	d82c      	bhi.n	8011a74 <SUBGRF_SetModulationParams+0x7c>
 8011a1a:	e8df f003 	tbb	[pc, r3]
 8011a1e:	4205      	.short	0x4205
 8011a20:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8011a22:	f7ff ff41 	bl	80118a8 <SUBGRF_SetPacketType>
 8011a26:	e7f5      	b.n	8011a14 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8011a28:	6862      	ldr	r2, [r4, #4]
 8011a2a:	4b35      	ldr	r3, [pc, #212]	; (8011b00 <SUBGRF_SetModulationParams+0x108>)
 8011a2c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011a30:	0c1a      	lsrs	r2, r3, #16
 8011a32:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011a36:	0a1a      	lsrs	r2, r3, #8
 8011a38:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011a3c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8011a40:	7b23      	ldrb	r3, [r4, #12]
 8011a42:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011a46:	7b63      	ldrb	r3, [r4, #13]
 8011a48:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8011a4c:	68a1      	ldr	r1, [r4, #8]
 8011a4e:	4a2d      	ldr	r2, [pc, #180]	; (8011b04 <SUBGRF_SetModulationParams+0x10c>)
 8011a50:	2300      	movs	r3, #0
 8011a52:	0648      	lsls	r0, r1, #25
 8011a54:	09c9      	lsrs	r1, r1, #7
 8011a56:	f7ef faf7 	bl	8001048 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8011a5a:	0c03      	lsrs	r3, r0, #16
 8011a5c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8011a60:	0a03      	lsrs	r3, r0, #8
 8011a62:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8011a66:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011a6a:	2208      	movs	r2, #8
 8011a6c:	4669      	mov	r1, sp
 8011a6e:	208b      	movs	r0, #139	; 0x8b
 8011a70:	f7ff fc9e 	bl	80113b0 <SUBGRF_WriteCommand>
}
 8011a74:	b002      	add	sp, #8
 8011a76:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8011a78:	6922      	ldr	r2, [r4, #16]
 8011a7a:	4b21      	ldr	r3, [pc, #132]	; (8011b00 <SUBGRF_SetModulationParams+0x108>)
 8011a7c:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011a80:	0c1a      	lsrs	r2, r3, #16
 8011a82:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011a86:	0a1a      	lsrs	r2, r3, #8
 8011a88:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011a8c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8011a90:	7d23      	ldrb	r3, [r4, #20]
 8011a92:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011a96:	2204      	movs	r2, #4
 8011a98:	4669      	mov	r1, sp
 8011a9a:	208b      	movs	r0, #139	; 0x8b
 8011a9c:	f7ff fc88 	bl	80113b0 <SUBGRF_WriteCommand>
        break;
 8011aa0:	e7e8      	b.n	8011a74 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8011aa2:	7e23      	ldrb	r3, [r4, #24]
 8011aa4:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8011aa8:	7e63      	ldrb	r3, [r4, #25]
 8011aaa:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8011aae:	7ea3      	ldrb	r3, [r4, #26]
 8011ab0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8011ab4:	7ee3      	ldrb	r3, [r4, #27]
 8011ab6:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011aba:	2204      	movs	r2, #4
 8011abc:	4669      	mov	r1, sp
 8011abe:	208b      	movs	r0, #139	; 0x8b
 8011ac0:	f7ff fc76 	bl	80113b0 <SUBGRF_WriteCommand>
        break;
 8011ac4:	e7d6      	b.n	8011a74 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8011ac6:	6862      	ldr	r2, [r4, #4]
 8011ac8:	4b0d      	ldr	r3, [pc, #52]	; (8011b00 <SUBGRF_SetModulationParams+0x108>)
 8011aca:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011ace:	0c1a      	lsrs	r2, r3, #16
 8011ad0:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011ad4:	0a1a      	lsrs	r2, r3, #8
 8011ad6:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011ada:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8011ade:	7b23      	ldrb	r3, [r4, #12]
 8011ae0:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8011ae4:	7b63      	ldrb	r3, [r4, #13]
 8011ae6:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011aea:	2205      	movs	r2, #5
 8011aec:	4669      	mov	r1, sp
 8011aee:	208b      	movs	r0, #139	; 0x8b
 8011af0:	f7ff fc5e 	bl	80113b0 <SUBGRF_WriteCommand>
}
 8011af4:	e7be      	b.n	8011a74 <SUBGRF_SetModulationParams+0x7c>
 8011af6:	bf00      	nop
 8011af8:	08017f9c 	.word	0x08017f9c
 8011afc:	20001347 	.word	0x20001347
 8011b00:	3d090000 	.word	0x3d090000
 8011b04:	01e84800 	.word	0x01e84800

08011b08 <SUBGRF_SetPacketParams>:
{
 8011b08:	b510      	push	{r4, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011b0e:	ab01      	add	r3, sp, #4
 8011b10:	4a33      	ldr	r2, [pc, #204]	; (8011be0 <SUBGRF_SetPacketParams+0xd8>)
 8011b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8011b14:	c303      	stmia	r3!, {r0, r1}
 8011b16:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8011b18:	7820      	ldrb	r0, [r4, #0]
 8011b1a:	4b32      	ldr	r3, [pc, #200]	; (8011be4 <SUBGRF_SetPacketParams+0xdc>)
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	4298      	cmp	r0, r3
 8011b20:	d106      	bne.n	8011b30 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8011b22:	7823      	ldrb	r3, [r4, #0]
 8011b24:	2b03      	cmp	r3, #3
 8011b26:	d82a      	bhi.n	8011b7e <SUBGRF_SetPacketParams+0x76>
 8011b28:	e8df f003 	tbb	[pc, r3]
 8011b2c:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8011b30:	f7ff feba 	bl	80118a8 <SUBGRF_SetPacketType>
 8011b34:	e7f5      	b.n	8011b22 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8011b36:	7a63      	ldrb	r3, [r4, #9]
 8011b38:	2bf1      	cmp	r3, #241	; 0xf1
 8011b3a:	d022      	beq.n	8011b82 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8011b3c:	2bf2      	cmp	r3, #242	; 0xf2
 8011b3e:	d02a      	beq.n	8011b96 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8011b40:	8862      	ldrh	r2, [r4, #2]
 8011b42:	0a11      	lsrs	r1, r2, #8
 8011b44:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8011b48:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8011b4c:	7922      	ldrb	r2, [r4, #4]
 8011b4e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8011b52:	7962      	ldrb	r2, [r4, #5]
 8011b54:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8011b58:	79a2      	ldrb	r2, [r4, #6]
 8011b5a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8011b5e:	79e2      	ldrb	r2, [r4, #7]
 8011b60:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8011b64:	7a22      	ldrb	r2, [r4, #8]
 8011b66:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8011b6a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8011b6e:	7aa3      	ldrb	r3, [r4, #10]
 8011b70:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8011b74:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8011b76:	a901      	add	r1, sp, #4
 8011b78:	208c      	movs	r0, #140	; 0x8c
 8011b7a:	f7ff fc19 	bl	80113b0 <SUBGRF_WriteCommand>
}
 8011b7e:	b004      	add	sp, #16
 8011b80:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8011b82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011b86:	f7ff fbb2 	bl	80112ee <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8011b8a:	f248 0005 	movw	r0, #32773	; 0x8005
 8011b8e:	f7ff fbc2 	bl	8011316 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8011b92:	2302      	movs	r3, #2
 8011b94:	e7d4      	b.n	8011b40 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8011b96:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8011b9a:	f7ff fba8 	bl	80112ee <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8011b9e:	f241 0021 	movw	r0, #4129	; 0x1021
 8011ba2:	f7ff fbb8 	bl	8011316 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8011ba6:	2306      	movs	r3, #6
 8011ba8:	e7ca      	b.n	8011b40 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8011baa:	7b23      	ldrb	r3, [r4, #12]
 8011bac:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8011bb0:	2201      	movs	r2, #1
        break;
 8011bb2:	e7e0      	b.n	8011b76 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8011bb4:	89e3      	ldrh	r3, [r4, #14]
 8011bb6:	0a1a      	lsrs	r2, r3, #8
 8011bb8:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8011bbc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8011bc0:	7c23      	ldrb	r3, [r4, #16]
 8011bc2:	4a09      	ldr	r2, [pc, #36]	; (8011be8 <SUBGRF_SetPacketParams+0xe0>)
 8011bc4:	7013      	strb	r3, [r2, #0]
 8011bc6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8011bca:	7c63      	ldrb	r3, [r4, #17]
 8011bcc:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8011bd0:	7ca3      	ldrb	r3, [r4, #18]
 8011bd2:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8011bd6:	7ce3      	ldrb	r3, [r4, #19]
 8011bd8:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8011bdc:	2206      	movs	r2, #6
        break;
 8011bde:	e7ca      	b.n	8011b76 <SUBGRF_SetPacketParams+0x6e>
 8011be0:	08017fa4 	.word	0x08017fa4
 8011be4:	20001347 	.word	0x20001347
 8011be8:	20001345 	.word	0x20001345

08011bec <SUBGRF_SetBufferBaseAddress>:
{
 8011bec:	b500      	push	{lr}
 8011bee:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8011bf0:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011bf4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8011bf8:	2202      	movs	r2, #2
 8011bfa:	a901      	add	r1, sp, #4
 8011bfc:	208f      	movs	r0, #143	; 0x8f
 8011bfe:	f7ff fbd7 	bl	80113b0 <SUBGRF_WriteCommand>
}
 8011c02:	b003      	add	sp, #12
 8011c04:	f85d fb04 	ldr.w	pc, [sp], #4

08011c08 <SUBGRF_ReadCommand>:
{
 8011c08:	b510      	push	{r4, lr}
 8011c0a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c0c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011c10:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8011c12:	460a      	mov	r2, r1
 8011c14:	4601      	mov	r1, r0
 8011c16:	4803      	ldr	r0, [pc, #12]	; (8011c24 <SUBGRF_ReadCommand+0x1c>)
 8011c18:	f7f4 fb7c 	bl	8006314 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c1c:	f384 8810 	msr	PRIMASK, r4
}
 8011c20:	bd10      	pop	{r4, pc}
 8011c22:	bf00      	nop
 8011c24:	200003a0 	.word	0x200003a0

08011c28 <SUBGRF_GetRssiInst>:
{
 8011c28:	b500      	push	{lr}
 8011c2a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	a901      	add	r1, sp, #4
 8011c30:	2015      	movs	r0, #21
 8011c32:	f7ff ffe9 	bl	8011c08 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8011c36:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8011c3a:	4240      	negs	r0, r0
}
 8011c3c:	1040      	asrs	r0, r0, #1
 8011c3e:	b003      	add	sp, #12
 8011c40:	f85d fb04 	ldr.w	pc, [sp], #4

08011c44 <SUBGRF_GetRxBufferStatus>:
{
 8011c44:	b530      	push	{r4, r5, lr}
 8011c46:	b083      	sub	sp, #12
 8011c48:	4605      	mov	r5, r0
 8011c4a:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8011c4c:	2202      	movs	r2, #2
 8011c4e:	a901      	add	r1, sp, #4
 8011c50:	2013      	movs	r0, #19
 8011c52:	f7ff ffd9 	bl	8011c08 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8011c56:	f7ff fadf 	bl	8011218 <SUBGRF_GetPacketType>
 8011c5a:	2801      	cmp	r0, #1
 8011c5c:	d007      	beq.n	8011c6e <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8011c5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011c62:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8011c64:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011c68:	7023      	strb	r3, [r4, #0]
}
 8011c6a:	b003      	add	sp, #12
 8011c6c:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8011c6e:	4b05      	ldr	r3, [pc, #20]	; (8011c84 <SUBGRF_GetRxBufferStatus+0x40>)
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	d1f2      	bne.n	8011c5e <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8011c78:	f240 7002 	movw	r0, #1794	; 0x702
 8011c7c:	f7ff fae2 	bl	8011244 <SUBGRF_ReadRegister>
 8011c80:	7028      	strb	r0, [r5, #0]
 8011c82:	e7ef      	b.n	8011c64 <SUBGRF_GetRxBufferStatus+0x20>
 8011c84:	20001345 	.word	0x20001345

08011c88 <SUBGRF_GetPayload>:
{
 8011c88:	b570      	push	{r4, r5, r6, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	4606      	mov	r6, r0
 8011c8e:	460c      	mov	r4, r1
 8011c90:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8011c92:	2300      	movs	r3, #0
 8011c94:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8011c98:	f10d 0107 	add.w	r1, sp, #7
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	f7ff ffd1 	bl	8011c44 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8011ca2:	7822      	ldrb	r2, [r4, #0]
 8011ca4:	42aa      	cmp	r2, r5
 8011ca6:	d902      	bls.n	8011cae <SUBGRF_GetPayload+0x26>
        return 1;
 8011ca8:	2001      	movs	r0, #1
}
 8011caa:	b002      	add	sp, #8
 8011cac:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8011cae:	4631      	mov	r1, r6
 8011cb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011cb4:	f7ff fb6c 	bl	8011390 <SUBGRF_ReadBuffer>
    return 0;
 8011cb8:	2000      	movs	r0, #0
 8011cba:	e7f6      	b.n	8011caa <SUBGRF_GetPayload+0x22>

08011cbc <SUBGRF_GetPacketStatus>:
{
 8011cbc:	b510      	push	{r4, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8011cc2:	2203      	movs	r2, #3
 8011cc4:	a901      	add	r1, sp, #4
 8011cc6:	2014      	movs	r0, #20
 8011cc8:	f7ff ff9e 	bl	8011c08 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8011ccc:	f7ff faa4 	bl	8011218 <SUBGRF_GetPacketType>
 8011cd0:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8011cd2:	b148      	cbz	r0, 8011ce8 <SUBGRF_GetPacketStatus+0x2c>
 8011cd4:	2801      	cmp	r0, #1
 8011cd6:	d018      	beq.n	8011d0a <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8011cd8:	2214      	movs	r2, #20
 8011cda:	2100      	movs	r1, #0
 8011cdc:	4620      	mov	r0, r4
 8011cde:	f000 fb20 	bl	8012322 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8011ce2:	230f      	movs	r3, #15
 8011ce4:	7023      	strb	r3, [r4, #0]
}
 8011ce6:	e00e      	b.n	8011d06 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8011ce8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011cec:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8011cee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011cf2:	425b      	negs	r3, r3
 8011cf4:	105b      	asrs	r3, r3, #1
 8011cf6:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8011cf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011cfc:	425b      	negs	r3, r3
 8011cfe:	105b      	asrs	r3, r3, #1
 8011d00:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8011d02:	2300      	movs	r3, #0
 8011d04:	60a3      	str	r3, [r4, #8]
}
 8011d06:	b002      	add	sp, #8
 8011d08:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8011d0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011d0e:	425b      	negs	r3, r3
 8011d10:	105b      	asrs	r3, r3, #1
 8011d12:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8011d14:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8011d18:	3302      	adds	r3, #2
 8011d1a:	109b      	asrs	r3, r3, #2
 8011d1c:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8011d1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011d22:	425b      	negs	r3, r3
 8011d24:	105b      	asrs	r3, r3, #1
 8011d26:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8011d28:	4b01      	ldr	r3, [pc, #4]	; (8011d30 <SUBGRF_GetPacketStatus+0x74>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	6123      	str	r3, [r4, #16]
            break;
 8011d2e:	e7ea      	b.n	8011d06 <SUBGRF_GetPacketStatus+0x4a>
 8011d30:	20001340 	.word	0x20001340

08011d34 <SUBGRF_SetSwitch>:
{
 8011d34:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8011d36:	2901      	cmp	r1, #1
 8011d38:	d003      	beq.n	8011d42 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8011d3a:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8011d3c:	f7f1 fb36 	bl	80033ac <RBI_ConfigRFSwitch>
}
 8011d40:	bd10      	pop	{r4, pc}
 8011d42:	4604      	mov	r4, r0
 8011d44:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8011d46:	2c01      	cmp	r4, #1
 8011d48:	d003      	beq.n	8011d52 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8011d4a:	2c02      	cmp	r4, #2
 8011d4c:	d1f6      	bne.n	8011d3c <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8011d4e:	2003      	movs	r0, #3
 8011d50:	e7f4      	b.n	8011d3c <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8011d52:	2004      	movs	r0, #4
 8011d54:	f7ff fa86 	bl	8011264 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8011d58:	2002      	movs	r0, #2
 8011d5a:	e7f6      	b.n	8011d4a <SUBGRF_SetSwitch+0x16>

08011d5c <SUBGRF_SetRfTxPower>:
{
 8011d5c:	b538      	push	{r3, r4, r5, lr}
 8011d5e:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8011d60:	f7f1 fb28 	bl	80033b4 <RBI_GetTxConfig>
    switch (TxConfig)
 8011d64:	b148      	cbz	r0, 8011d7a <SUBGRF_SetRfTxPower+0x1e>
 8011d66:	2802      	cmp	r0, #2
 8011d68:	d10d      	bne.n	8011d86 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8011d6a:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8011d6c:	2202      	movs	r2, #2
 8011d6e:	4621      	mov	r1, r4
 8011d70:	4628      	mov	r0, r5
 8011d72:	f7ff fdb3 	bl	80118dc <SUBGRF_SetTxParams>
}
 8011d76:	4628      	mov	r0, r5
 8011d78:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8011d7a:	2c0f      	cmp	r4, #15
 8011d7c:	dc01      	bgt.n	8011d82 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8011d7e:	2501      	movs	r5, #1
 8011d80:	e7f4      	b.n	8011d6c <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8011d82:	2502      	movs	r5, #2
 8011d84:	e7f2      	b.n	8011d6c <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8011d86:	2501      	movs	r5, #1
 8011d88:	e7f0      	b.n	8011d6c <SUBGRF_SetRfTxPower+0x10>

08011d8a <SUBGRF_GetRadioWakeUpTime>:
}
 8011d8a:	2001      	movs	r0, #1
 8011d8c:	4770      	bx	lr
	...

08011d90 <HAL_SUBGHZ_TxCpltCallback>:
{
 8011d90:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8011d92:	4b02      	ldr	r3, [pc, #8]	; (8011d9c <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2001      	movs	r0, #1
 8011d98:	4798      	blx	r3
}
 8011d9a:	bd08      	pop	{r3, pc}
 8011d9c:	20001348 	.word	0x20001348

08011da0 <HAL_SUBGHZ_RxCpltCallback>:
{
 8011da0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8011da2:	4b02      	ldr	r3, [pc, #8]	; (8011dac <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2002      	movs	r0, #2
 8011da8:	4798      	blx	r3
}
 8011daa:	bd08      	pop	{r3, pc}
 8011dac:	20001348 	.word	0x20001348

08011db0 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8011db0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8011db2:	4b02      	ldr	r3, [pc, #8]	; (8011dbc <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	2040      	movs	r0, #64	; 0x40
 8011db8:	4798      	blx	r3
}
 8011dba:	bd08      	pop	{r3, pc}
 8011dbc:	20001348 	.word	0x20001348

08011dc0 <HAL_SUBGHZ_CADStatusCallback>:
{
 8011dc0:	b508      	push	{r3, lr}
    switch (cadstatus)
 8011dc2:	b111      	cbz	r1, 8011dca <HAL_SUBGHZ_CADStatusCallback+0xa>
 8011dc4:	2901      	cmp	r1, #1
 8011dc6:	d005      	beq.n	8011dd4 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8011dc8:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8011dca:	4b05      	ldr	r3, [pc, #20]	; (8011de0 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2080      	movs	r0, #128	; 0x80
 8011dd0:	4798      	blx	r3
            break;
 8011dd2:	e7f9      	b.n	8011dc8 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8011dd4:	4b02      	ldr	r3, [pc, #8]	; (8011de0 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011ddc:	4798      	blx	r3
}
 8011dde:	e7f3      	b.n	8011dc8 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8011de0:	20001348 	.word	0x20001348

08011de4 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8011de4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8011de6:	4b03      	ldr	r3, [pc, #12]	; (8011df4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011dee:	4798      	blx	r3
}
 8011df0:	bd08      	pop	{r3, pc}
 8011df2:	bf00      	nop
 8011df4:	20001348 	.word	0x20001348

08011df8 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8011df8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8011dfa:	4b02      	ldr	r3, [pc, #8]	; (8011e04 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2020      	movs	r0, #32
 8011e00:	4798      	blx	r3
}
 8011e02:	bd08      	pop	{r3, pc}
 8011e04:	20001348 	.word	0x20001348

08011e08 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8011e08:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8011e0a:	4b02      	ldr	r3, [pc, #8]	; (8011e14 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	2004      	movs	r0, #4
 8011e10:	4798      	blx	r3
}
 8011e12:	bd08      	pop	{r3, pc}
 8011e14:	20001348 	.word	0x20001348

08011e18 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8011e18:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8011e1a:	4b02      	ldr	r3, [pc, #8]	; (8011e24 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2008      	movs	r0, #8
 8011e20:	4798      	blx	r3
}
 8011e22:	bd08      	pop	{r3, pc}
 8011e24:	20001348 	.word	0x20001348

08011e28 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8011e28:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8011e2a:	4b02      	ldr	r3, [pc, #8]	; (8011e34 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2010      	movs	r0, #16
 8011e30:	4798      	blx	r3
}
 8011e32:	bd08      	pop	{r3, pc}
 8011e34:	20001348 	.word	0x20001348

08011e38 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8011e38:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8011e3a:	4b03      	ldr	r3, [pc, #12]	; (8011e48 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011e42:	4798      	blx	r3
}
 8011e44:	bd08      	pop	{r3, pc}
 8011e46:	bf00      	nop
 8011e48:	20001348 	.word	0x20001348

08011e4c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8011e4c:	4601      	mov	r1, r0
 8011e4e:	b188      	cbz	r0, 8011e74 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011e50:	2300      	movs	r3, #0
 8011e52:	2b15      	cmp	r3, #21
 8011e54:	d80d      	bhi.n	8011e72 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8011e56:	4618      	mov	r0, r3
 8011e58:	4a07      	ldr	r2, [pc, #28]	; (8011e78 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011e5a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011e5e:	428a      	cmp	r2, r1
 8011e60:	d802      	bhi.n	8011e68 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011e62:	3301      	adds	r3, #1
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	e7f4      	b.n	8011e52 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8011e68:	4b03      	ldr	r3, [pc, #12]	; (8011e78 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011e6a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011e6e:	7900      	ldrb	r0, [r0, #4]
 8011e70:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8011e72:	e7fe      	b.n	8011e72 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8011e74:	201f      	movs	r0, #31
}
 8011e76:	4770      	bx	lr
 8011e78:	08018ec0 	.word	0x08018ec0

08011e7c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8011e7c:	b570      	push	{r4, r5, r6, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	4606      	mov	r6, r0
 8011e82:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8011e84:	4b1d      	ldr	r3, [pc, #116]	; (8011efc <SUBGRF_GetCFO+0x80>)
 8011e86:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8011e88:	f640 0007 	movw	r0, #2055	; 0x807
 8011e8c:	f7ff f9da 	bl	8011244 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8011e90:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8011e94:	3308      	adds	r3, #8
 8011e96:	446b      	add	r3, sp
 8011e98:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8011e9c:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	fa05 f303 	lsl.w	r3, r5, r3
 8011ea6:	4d16      	ldr	r5, [pc, #88]	; (8011f00 <SUBGRF_GetCFO+0x84>)
 8011ea8:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8011eac:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8011eb0:	2a07      	cmp	r2, #7
 8011eb2:	d921      	bls.n	8011ef8 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8011eb4:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8011eb6:	fb00 f202 	mul.w	r2, r0, r2
 8011eba:	2a03      	cmp	r2, #3
 8011ebc:	d800      	bhi.n	8011ec0 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8011ebe:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8011ec0:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8011ec4:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8011ec8:	f7ff f9bc 	bl	8011244 <SUBGRF_ReadRegister>
 8011ecc:	0200      	lsls	r0, r0, #8
 8011ece:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8011ed2:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8011ed6:	f7ff f9b5 	bl	8011244 <SUBGRF_ReadRegister>
 8011eda:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8011edc:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8011ee0:	d003      	beq.n	8011eea <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8011ee2:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8011ee6:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8011eea:	096d      	lsrs	r5, r5, #5
 8011eec:	fb05 f000 	mul.w	r0, r5, r0
 8011ef0:	11c0      	asrs	r0, r0, #7
 8011ef2:	6020      	str	r0, [r4, #0]
}
 8011ef4:	b002      	add	sp, #8
 8011ef6:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8011ef8:	2002      	movs	r0, #2
 8011efa:	e7dc      	b.n	8011eb6 <SUBGRF_GetCFO+0x3a>
 8011efc:	0c0a0804 	.word	0x0c0a0804
 8011f00:	01e84800 	.word	0x01e84800

08011f04 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8011f04:	f04f 30ff 	mov.w	r0, #4294967295
 8011f08:	4770      	bx	lr

08011f0a <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8011f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f0e:	4770      	bx	lr

08011f10 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8011f10:	4770      	bx	lr

08011f12 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8011f12:	2000      	movs	r0, #0
 8011f14:	4770      	bx	lr

08011f16 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8011f16:	2000      	movs	r0, #0
 8011f18:	4770      	bx	lr

08011f1a <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8011f1a:	4770      	bx	lr

08011f1c <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8011f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f20:	4770      	bx	lr

08011f22 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8011f22:	f04f 30ff 	mov.w	r0, #4294967295
 8011f26:	4770      	bx	lr

08011f28 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8011f28:	4770      	bx	lr

08011f2a <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8011f2a:	4770      	bx	lr

08011f2c <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8011f2c:	4770      	bx	lr
	...

08011f30 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8011f30:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f32:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011f36:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8011f38:	4b1e      	ldr	r3, [pc, #120]	; (8011fb4 <TRACE_AllocateBufer+0x84>)
 8011f3a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8011f3e:	8a1a      	ldrh	r2, [r3, #16]
 8011f40:	4594      	cmp	ip, r2
 8011f42:	d011      	beq.n	8011f68 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011f44:	4594      	cmp	ip, r2
 8011f46:	d921      	bls.n	8011f8c <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011f48:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8011f4c:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8011f4e:	4283      	cmp	r3, r0
 8011f50:	d81f      	bhi.n	8011f92 <TRACE_AllocateBufer+0x62>
 8011f52:	4282      	cmp	r2, r0
 8011f54:	d91d      	bls.n	8011f92 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011f56:	4b17      	ldr	r3, [pc, #92]	; (8011fb4 <TRACE_AllocateBufer+0x84>)
 8011f58:	2401      	movs	r4, #1
 8011f5a:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011f5c:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011f60:	2400      	movs	r4, #0
 8011f62:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011f64:	4613      	mov	r3, r2
 8011f66:	e014      	b.n	8011f92 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011f68:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8011f6c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8011f6e:	4298      	cmp	r0, r3
 8011f70:	d30f      	bcc.n	8011f92 <TRACE_AllocateBufer+0x62>
 8011f72:	4282      	cmp	r2, r0
 8011f74:	d90d      	bls.n	8011f92 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011f76:	4b0f      	ldr	r3, [pc, #60]	; (8011fb4 <TRACE_AllocateBufer+0x84>)
 8011f78:	2401      	movs	r4, #1
 8011f7a:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011f7c:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011f80:	f04f 0c00 	mov.w	ip, #0
 8011f84:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011f88:	4613      	mov	r3, r2
 8011f8a:	e002      	b.n	8011f92 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8011f8c:	eba2 030c 	sub.w	r3, r2, ip
 8011f90:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8011f92:	4283      	cmp	r3, r0
 8011f94:	d90a      	bls.n	8011fac <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8011f96:	4a07      	ldr	r2, [pc, #28]	; (8011fb4 <TRACE_AllocateBufer+0x84>)
 8011f98:	8a53      	ldrh	r3, [r2, #18]
 8011f9a:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011f9c:	4403      	add	r3, r0
 8011f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011fa2:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8011fa4:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fa6:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8011faa:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8011fac:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb0:	e7f9      	b.n	8011fa6 <TRACE_AllocateBufer+0x76>
 8011fb2:	bf00      	nop
 8011fb4:	2000174c 	.word	0x2000174c

08011fb8 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fb8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011fbc:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8011fbe:	4a03      	ldr	r2, [pc, #12]	; (8011fcc <TRACE_Lock+0x14>)
 8011fc0:	8ad3      	ldrh	r3, [r2, #22]
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fc6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011fca:	4770      	bx	lr
 8011fcc:	2000174c 	.word	0x2000174c

08011fd0 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fd0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011fd4:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8011fd6:	4a03      	ldr	r2, [pc, #12]	; (8011fe4 <TRACE_UnLock+0x14>)
 8011fd8:	8ad3      	ldrh	r3, [r2, #22]
 8011fda:	3b01      	subs	r3, #1
 8011fdc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fde:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011fe2:	4770      	bx	lr
 8011fe4:	2000174c 	.word	0x2000174c

08011fe8 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8011fe8:	4b02      	ldr	r3, [pc, #8]	; (8011ff4 <TRACE_IsLocked+0xc>)
 8011fea:	8ad8      	ldrh	r0, [r3, #22]
}
 8011fec:	3800      	subs	r0, #0
 8011fee:	bf18      	it	ne
 8011ff0:	2001      	movne	r0, #1
 8011ff2:	4770      	bx	lr
 8011ff4:	2000174c 	.word	0x2000174c

08011ff8 <UTIL_ADV_TRACE_Init>:
{
 8011ff8:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8011ffa:	2218      	movs	r2, #24
 8011ffc:	2100      	movs	r1, #0
 8011ffe:	4807      	ldr	r0, [pc, #28]	; (801201c <UTIL_ADV_TRACE_Init+0x24>)
 8012000:	f000 f98f 	bl	8012322 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8012004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012008:	2100      	movs	r1, #0
 801200a:	4805      	ldr	r0, [pc, #20]	; (8012020 <UTIL_ADV_TRACE_Init+0x28>)
 801200c:	f000 f989 	bl	8012322 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8012010:	4b04      	ldr	r3, [pc, #16]	; (8012024 <UTIL_ADV_TRACE_Init+0x2c>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	4804      	ldr	r0, [pc, #16]	; (8012028 <UTIL_ADV_TRACE_Init+0x30>)
 8012016:	4798      	blx	r3
}
 8012018:	bd08      	pop	{r3, pc}
 801201a:	bf00      	nop
 801201c:	2000174c 	.word	0x2000174c
 8012020:	2000134c 	.word	0x2000134c
 8012024:	08018148 	.word	0x08018148
 8012028:	080121ad 	.word	0x080121ad

0801202c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801202c:	4b01      	ldr	r3, [pc, #4]	; (8012034 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801202e:	6058      	str	r0, [r3, #4]
}
 8012030:	4770      	bx	lr
 8012032:	bf00      	nop
 8012034:	2000174c 	.word	0x2000174c

08012038 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8012038:	4b01      	ldr	r3, [pc, #4]	; (8012040 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801203a:	7218      	strb	r0, [r3, #8]
}
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	2000174c 	.word	0x2000174c

08012044 <TRACE_Send>:
{
 8012044:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012046:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801204a:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 801204c:	f7ff ffcc 	bl	8011fe8 <TRACE_IsLocked>
 8012050:	b118      	cbz	r0, 801205a <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012052:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8012056:	2000      	movs	r0, #0
}
 8012058:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 801205a:	f7ff ffad 	bl	8011fb8 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801205e:	4b1d      	ldr	r3, [pc, #116]	; (80120d4 <TRACE_Send+0x90>)
 8012060:	8a1a      	ldrh	r2, [r3, #16]
 8012062:	8a5b      	ldrh	r3, [r3, #18]
 8012064:	429a      	cmp	r2, r3
 8012066:	d02e      	beq.n	80120c6 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012068:	491a      	ldr	r1, [pc, #104]	; (80120d4 <TRACE_Send+0x90>)
 801206a:	7889      	ldrb	r1, [r1, #2]
 801206c:	2901      	cmp	r1, #1
 801206e:	d017      	beq.n	80120a0 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012070:	4a18      	ldr	r2, [pc, #96]	; (80120d4 <TRACE_Send+0x90>)
 8012072:	7892      	ldrb	r2, [r2, #2]
 8012074:	b932      	cbnz	r2, 8012084 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012076:	4a17      	ldr	r2, [pc, #92]	; (80120d4 <TRACE_Send+0x90>)
 8012078:	8a12      	ldrh	r2, [r2, #16]
 801207a:	4293      	cmp	r3, r2
 801207c:	d91e      	bls.n	80120bc <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801207e:	1a9b      	subs	r3, r3, r2
 8012080:	4a14      	ldr	r2, [pc, #80]	; (80120d4 <TRACE_Send+0x90>)
 8012082:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012084:	4e13      	ldr	r6, [pc, #76]	; (80120d4 <TRACE_Send+0x90>)
 8012086:	8a33      	ldrh	r3, [r6, #16]
 8012088:	4d13      	ldr	r5, [pc, #76]	; (80120d8 <TRACE_Send+0x94>)
 801208a:	441d      	add	r5, r3
 801208c:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8012090:	f7ef ff2a 	bl	8001ee8 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012094:	4b11      	ldr	r3, [pc, #68]	; (80120dc <TRACE_Send+0x98>)
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	8ab1      	ldrh	r1, [r6, #20]
 801209a:	4628      	mov	r0, r5
 801209c:	4798      	blx	r3
 801209e:	e7db      	b.n	8012058 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80120a0:	480c      	ldr	r0, [pc, #48]	; (80120d4 <TRACE_Send+0x90>)
 80120a2:	8801      	ldrh	r1, [r0, #0]
 80120a4:	1a8a      	subs	r2, r1, r2
 80120a6:	b292      	uxth	r2, r2
 80120a8:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80120aa:	2102      	movs	r1, #2
 80120ac:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80120ae:	2100      	movs	r1, #0
 80120b0:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80120b2:	2a00      	cmp	r2, #0
 80120b4:	d1dc      	bne.n	8012070 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80120b6:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80120b8:	8201      	strh	r1, [r0, #16]
 80120ba:	e7d9      	b.n	8012070 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80120bc:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80120c0:	4a04      	ldr	r2, [pc, #16]	; (80120d4 <TRACE_Send+0x90>)
 80120c2:	8293      	strh	r3, [r2, #20]
 80120c4:	e7de      	b.n	8012084 <TRACE_Send+0x40>
      TRACE_UnLock();
 80120c6:	f7ff ff83 	bl	8011fd0 <TRACE_UnLock>
 80120ca:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80120ce:	2000      	movs	r0, #0
}
 80120d0:	e7c2      	b.n	8012058 <TRACE_Send+0x14>
 80120d2:	bf00      	nop
 80120d4:	2000174c 	.word	0x2000174c
 80120d8:	2000134c 	.word	0x2000134c
 80120dc:	08018148 	.word	0x08018148

080120e0 <UTIL_ADV_TRACE_COND_FSend>:
{
 80120e0:	b408      	push	{r3}
 80120e2:	b530      	push	{r4, r5, lr}
 80120e4:	b086      	sub	sp, #24
 80120e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 80120e8:	2300      	movs	r3, #0
 80120ea:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80120ee:	4b2c      	ldr	r3, [pc, #176]	; (80121a0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80120f0:	7a1b      	ldrb	r3, [r3, #8]
 80120f2:	4283      	cmp	r3, r0
 80120f4:	d34d      	bcc.n	8012192 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80120f6:	4b2a      	ldr	r3, [pc, #168]	; (80121a0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80120f8:	68db      	ldr	r3, [r3, #12]
 80120fa:	ea31 0303 	bics.w	r3, r1, r3
 80120fe:	d14b      	bne.n	8012198 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8012100:	4b27      	ldr	r3, [pc, #156]	; (80121a0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	b123      	cbz	r3, 8012110 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8012106:	b11a      	cbz	r2, 8012110 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8012108:	f10d 0102 	add.w	r1, sp, #2
 801210c:	a801      	add	r0, sp, #4
 801210e:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8012110:	ab0a      	add	r3, sp, #40	; 0x28
 8012112:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012114:	4622      	mov	r2, r4
 8012116:	f44f 7100 	mov.w	r1, #512	; 0x200
 801211a:	4822      	ldr	r0, [pc, #136]	; (80121a4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 801211c:	f000 fcd0 	bl	8012ac0 <tiny_vsnprintf_like>
 8012120:	b285      	uxth	r5, r0
  TRACE_Lock();
 8012122:	f7ff ff49 	bl	8011fb8 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8012126:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801212a:	4428      	add	r0, r5
 801212c:	4669      	mov	r1, sp
 801212e:	b280      	uxth	r0, r0
 8012130:	f7ff fefe 	bl	8011f30 <TRACE_AllocateBufer>
 8012134:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012138:	d026      	beq.n	8012188 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 801213a:	2300      	movs	r3, #0
 801213c:	e00d      	b.n	801215a <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801213e:	f8bd 2000 	ldrh.w	r2, [sp]
 8012142:	f103 0118 	add.w	r1, r3, #24
 8012146:	4469      	add	r1, sp
 8012148:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 801214c:	4916      	ldr	r1, [pc, #88]	; (80121a8 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 801214e:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8012150:	3201      	adds	r2, #1
 8012152:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8012156:	3301      	adds	r3, #1
 8012158:	b29b      	uxth	r3, r3
 801215a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801215e:	429a      	cmp	r2, r3
 8012160:	d8ed      	bhi.n	801213e <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012162:	f8bd 0000 	ldrh.w	r0, [sp]
 8012166:	9b05      	ldr	r3, [sp, #20]
 8012168:	4622      	mov	r2, r4
 801216a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801216e:	4c0e      	ldr	r4, [pc, #56]	; (80121a8 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8012170:	4420      	add	r0, r4
 8012172:	f000 fca5 	bl	8012ac0 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8012176:	f7ff ff2b 	bl	8011fd0 <TRACE_UnLock>
    return TRACE_Send();
 801217a:	f7ff ff63 	bl	8012044 <TRACE_Send>
}
 801217e:	b006      	add	sp, #24
 8012180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012184:	b001      	add	sp, #4
 8012186:	4770      	bx	lr
  TRACE_UnLock();
 8012188:	f7ff ff22 	bl	8011fd0 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 801218c:	f06f 0002 	mvn.w	r0, #2
 8012190:	e7f5      	b.n	801217e <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8012192:	f06f 0004 	mvn.w	r0, #4
 8012196:	e7f2      	b.n	801217e <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8012198:	f06f 0005 	mvn.w	r0, #5
 801219c:	e7ef      	b.n	801217e <UTIL_ADV_TRACE_COND_FSend+0x9e>
 801219e:	bf00      	nop
 80121a0:	2000174c 	.word	0x2000174c
 80121a4:	20001764 	.word	0x20001764
 80121a8:	2000134c 	.word	0x2000134c

080121ac <TRACE_TxCpltCallback>:
{
 80121ac:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80121b2:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80121b4:	4b25      	ldr	r3, [pc, #148]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 80121b6:	789b      	ldrb	r3, [r3, #2]
 80121b8:	2b02      	cmp	r3, #2
 80121ba:	d016      	beq.n	80121ea <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80121bc:	4a23      	ldr	r2, [pc, #140]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 80121be:	8a13      	ldrh	r3, [r2, #16]
 80121c0:	8a90      	ldrh	r0, [r2, #20]
 80121c2:	4403      	add	r3, r0
 80121c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80121c8:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80121ca:	4b20      	ldr	r3, [pc, #128]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 80121cc:	8a1a      	ldrh	r2, [r3, #16]
 80121ce:	8a5b      	ldrh	r3, [r3, #18]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d003      	beq.n	80121dc <TRACE_TxCpltCallback+0x30>
 80121d4:	481d      	ldr	r0, [pc, #116]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 80121d6:	8ac0      	ldrh	r0, [r0, #22]
 80121d8:	2801      	cmp	r0, #1
 80121da:	d00b      	beq.n	80121f4 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121dc:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80121e0:	f7ef fe88 	bl	8001ef4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80121e4:	f7ff fef4 	bl	8011fd0 <TRACE_UnLock>
}
 80121e8:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80121ea:	4b18      	ldr	r3, [pc, #96]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80121f0:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80121f2:	e7ea      	b.n	80121ca <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80121f4:	4815      	ldr	r0, [pc, #84]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 80121f6:	7880      	ldrb	r0, [r0, #2]
 80121f8:	2801      	cmp	r0, #1
 80121fa:	d014      	beq.n	8012226 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80121fc:	4a13      	ldr	r2, [pc, #76]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 80121fe:	7892      	ldrb	r2, [r2, #2]
 8012200:	b932      	cbnz	r2, 8012210 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012202:	4a12      	ldr	r2, [pc, #72]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 8012204:	8a12      	ldrh	r2, [r2, #16]
 8012206:	4293      	cmp	r3, r2
 8012208:	d91b      	bls.n	8012242 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801220a:	1a9b      	subs	r3, r3, r2
 801220c:	4a0f      	ldr	r2, [pc, #60]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 801220e:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012210:	4b0e      	ldr	r3, [pc, #56]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 8012212:	8a1a      	ldrh	r2, [r3, #16]
 8012214:	480e      	ldr	r0, [pc, #56]	; (8012250 <TRACE_TxCpltCallback+0xa4>)
 8012216:	4410      	add	r0, r2
 8012218:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801221c:	4a0d      	ldr	r2, [pc, #52]	; (8012254 <TRACE_TxCpltCallback+0xa8>)
 801221e:	68d2      	ldr	r2, [r2, #12]
 8012220:	8a99      	ldrh	r1, [r3, #20]
 8012222:	4790      	blx	r2
 8012224:	e7e0      	b.n	80121e8 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8012226:	4c09      	ldr	r4, [pc, #36]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 8012228:	8820      	ldrh	r0, [r4, #0]
 801222a:	1a82      	subs	r2, r0, r2
 801222c:	b292      	uxth	r2, r2
 801222e:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8012230:	2002      	movs	r0, #2
 8012232:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012234:	2000      	movs	r0, #0
 8012236:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012238:	2a00      	cmp	r2, #0
 801223a:	d1df      	bne.n	80121fc <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801223c:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801223e:	8220      	strh	r0, [r4, #16]
 8012240:	e7dc      	b.n	80121fc <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012242:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8012246:	4a01      	ldr	r2, [pc, #4]	; (801224c <TRACE_TxCpltCallback+0xa0>)
 8012248:	8293      	strh	r3, [r2, #20]
 801224a:	e7e1      	b.n	8012210 <TRACE_TxCpltCallback+0x64>
 801224c:	2000174c 	.word	0x2000174c
 8012250:	2000134c 	.word	0x2000134c
 8012254:	08018148 	.word	0x08018148

08012258 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012258:	2300      	movs	r3, #0
 801225a:	4a02      	ldr	r2, [pc, #8]	; (8012264 <UTIL_LPM_Init+0xc>)
 801225c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801225e:	4a02      	ldr	r2, [pc, #8]	; (8012268 <UTIL_LPM_Init+0x10>)
 8012260:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012262:	4770      	bx	lr
 8012264:	20001968 	.word	0x20001968
 8012268:	20001964 	.word	0x20001964

0801226c <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801226c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012270:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8012272:	b141      	cbz	r1, 8012286 <UTIL_LPM_SetStopMode+0x1a>
 8012274:	2901      	cmp	r1, #1
 8012276:	d103      	bne.n	8012280 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8012278:	4906      	ldr	r1, [pc, #24]	; (8012294 <UTIL_LPM_SetStopMode+0x28>)
 801227a:	680a      	ldr	r2, [r1, #0]
 801227c:	4310      	orrs	r0, r2
 801227e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012280:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012284:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8012286:	4903      	ldr	r1, [pc, #12]	; (8012294 <UTIL_LPM_SetStopMode+0x28>)
 8012288:	680a      	ldr	r2, [r1, #0]
 801228a:	ea22 0000 	bic.w	r0, r2, r0
 801228e:	6008      	str	r0, [r1, #0]
      break;
 8012290:	e7f6      	b.n	8012280 <UTIL_LPM_SetStopMode+0x14>
 8012292:	bf00      	nop
 8012294:	20001968 	.word	0x20001968

08012298 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012298:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801229c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 801229e:	b141      	cbz	r1, 80122b2 <UTIL_LPM_SetOffMode+0x1a>
 80122a0:	2901      	cmp	r1, #1
 80122a2:	d103      	bne.n	80122ac <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80122a4:	4906      	ldr	r1, [pc, #24]	; (80122c0 <UTIL_LPM_SetOffMode+0x28>)
 80122a6:	680a      	ldr	r2, [r1, #0]
 80122a8:	4310      	orrs	r0, r2
 80122aa:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122ac:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80122b0:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 80122b2:	4903      	ldr	r1, [pc, #12]	; (80122c0 <UTIL_LPM_SetOffMode+0x28>)
 80122b4:	680a      	ldr	r2, [r1, #0]
 80122b6:	ea22 0000 	bic.w	r0, r2, r0
 80122ba:	6008      	str	r0, [r1, #0]
      break;
 80122bc:	e7f6      	b.n	80122ac <UTIL_LPM_SetOffMode+0x14>
 80122be:	bf00      	nop
 80122c0:	20001964 	.word	0x20001964

080122c4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80122c4:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80122ca:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80122cc:	4b0c      	ldr	r3, [pc, #48]	; (8012300 <UTIL_LPM_EnterLowPower+0x3c>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	b13b      	cbz	r3, 80122e2 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80122d2:	4d0c      	ldr	r5, [pc, #48]	; (8012304 <UTIL_LPM_EnterLowPower+0x40>)
 80122d4:	682b      	ldr	r3, [r5, #0]
 80122d6:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80122d8:	686b      	ldr	r3, [r5, #4]
 80122da:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122dc:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80122e0:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80122e2:	4b09      	ldr	r3, [pc, #36]	; (8012308 <UTIL_LPM_EnterLowPower+0x44>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	b12b      	cbz	r3, 80122f4 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80122e8:	4d06      	ldr	r5, [pc, #24]	; (8012304 <UTIL_LPM_EnterLowPower+0x40>)
 80122ea:	68ab      	ldr	r3, [r5, #8]
 80122ec:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80122ee:	68eb      	ldr	r3, [r5, #12]
 80122f0:	4798      	blx	r3
 80122f2:	e7f3      	b.n	80122dc <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80122f4:	4d03      	ldr	r5, [pc, #12]	; (8012304 <UTIL_LPM_EnterLowPower+0x40>)
 80122f6:	692b      	ldr	r3, [r5, #16]
 80122f8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80122fa:	696b      	ldr	r3, [r5, #20]
 80122fc:	4798      	blx	r3
 80122fe:	e7ed      	b.n	80122dc <UTIL_LPM_EnterLowPower+0x18>
 8012300:	20001968 	.word	0x20001968
 8012304:	08017fbc 	.word	0x08017fbc
 8012308:	20001964 	.word	0x20001964

0801230c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 801230c:	e004      	b.n	8012318 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 801230e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012312:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8012316:	461a      	mov	r2, r3
 8012318:	1e53      	subs	r3, r2, #1
 801231a:	b29b      	uxth	r3, r3
 801231c:	2a00      	cmp	r2, #0
 801231e:	d1f6      	bne.n	801230e <UTIL_MEM_cpy_8+0x2>
    }
}
 8012320:	4770      	bx	lr

08012322 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8012322:	e002      	b.n	801232a <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8012324:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8012328:	461a      	mov	r2, r3
 801232a:	1e53      	subs	r3, r2, #1
 801232c:	b29b      	uxth	r3, r3
 801232e:	2a00      	cmp	r2, #0
 8012330:	d1f8      	bne.n	8012324 <UTIL_MEM_set_8+0x2>
  }
}
 8012332:	4770      	bx	lr

08012334 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012334:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012338:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 801233a:	4a06      	ldr	r2, [pc, #24]	; (8012354 <UTIL_SEQ_SetTask+0x20>)
 801233c:	6813      	ldr	r3, [r2, #0]
 801233e:	4303      	orrs	r3, r0
 8012340:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012342:	4a05      	ldr	r2, [pc, #20]	; (8012358 <UTIL_SEQ_SetTask+0x24>)
 8012344:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8012348:	4318      	orrs	r0, r3
 801234a:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801234e:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8012352:	4770      	bx	lr
 8012354:	20001990 	.word	0x20001990
 8012358:	20001988 	.word	0x20001988

0801235c <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 801235c:	4770      	bx	lr

0801235e <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 801235e:	4770      	bx	lr

08012360 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8012360:	0c03      	lsrs	r3, r0, #16
 8012362:	041b      	lsls	r3, r3, #16
 8012364:	b9b3      	cbnz	r3, 8012394 <SEQ_BitPosition+0x34>
 8012366:	0400      	lsls	r0, r0, #16
 8012368:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801236a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801236e:	d102      	bne.n	8012376 <SEQ_BitPosition+0x16>
 8012370:	3308      	adds	r3, #8
 8012372:	b2db      	uxtb	r3, r3
 8012374:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8012376:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801237a:	d102      	bne.n	8012382 <SEQ_BitPosition+0x22>
 801237c:	3304      	adds	r3, #4
 801237e:	b2db      	uxtb	r3, r3
 8012380:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8012382:	0f00      	lsrs	r0, r0, #28
 8012384:	4a04      	ldr	r2, [pc, #16]	; (8012398 <SEQ_BitPosition+0x38>)
 8012386:	5c10      	ldrb	r0, [r2, r0]
 8012388:	4418      	add	r0, r3
 801238a:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 801238c:	f1c0 001f 	rsb	r0, r0, #31
}
 8012390:	b2c0      	uxtb	r0, r0
 8012392:	4770      	bx	lr
uint8_t n = 0U;
 8012394:	2300      	movs	r3, #0
 8012396:	e7e8      	b.n	801236a <SEQ_BitPosition+0xa>
 8012398:	08018f70 	.word	0x08018f70

0801239c <UTIL_SEQ_Run>:
{
 801239c:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 801239e:	4b43      	ldr	r3, [pc, #268]	; (80124ac <UTIL_SEQ_Run+0x110>)
 80123a0:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 80123a2:	4020      	ands	r0, r4
 80123a4:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 80123a6:	4b42      	ldr	r3, [pc, #264]	; (80124b0 <UTIL_SEQ_Run+0x114>)
 80123a8:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 80123aa:	4b42      	ldr	r3, [pc, #264]	; (80124b4 <UTIL_SEQ_Run+0x118>)
 80123ac:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 80123ae:	4a42      	ldr	r2, [pc, #264]	; (80124b8 <UTIL_SEQ_Run+0x11c>)
 80123b0:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 80123b2:	4a42      	ldr	r2, [pc, #264]	; (80124bc <UTIL_SEQ_Run+0x120>)
 80123b4:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80123b6:	e030      	b.n	801241a <UTIL_SEQ_Run+0x7e>
      counter++;
 80123b8:	3301      	adds	r3, #1
 80123ba:	e035      	b.n	8012428 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80123bc:	4d40      	ldr	r5, [pc, #256]	; (80124c0 <UTIL_SEQ_Run+0x124>)
 80123be:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80123c2:	6868      	ldr	r0, [r5, #4]
 80123c4:	4010      	ands	r0, r2
 80123c6:	f7ff ffcb 	bl	8012360 <SEQ_BitPosition>
 80123ca:	493e      	ldr	r1, [pc, #248]	; (80124c4 <UTIL_SEQ_Run+0x128>)
 80123cc:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80123ce:	686a      	ldr	r2, [r5, #4]
 80123d0:	2301      	movs	r3, #1
 80123d2:	fa03 f000 	lsl.w	r0, r3, r0
 80123d6:	ea22 0000 	bic.w	r0, r2, r0
 80123da:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80123dc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80123e0:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80123e2:	680a      	ldr	r2, [r1, #0]
 80123e4:	fa03 f202 	lsl.w	r2, r3, r2
 80123e8:	ea6f 0c02 	mvn.w	ip, r2
 80123ec:	4830      	ldr	r0, [pc, #192]	; (80124b0 <UTIL_SEQ_Run+0x114>)
 80123ee:	6801      	ldr	r1, [r0, #0]
 80123f0:	ea21 0202 	bic.w	r2, r1, r2
 80123f4:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d12d      	bne.n	8012456 <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80123fa:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 80123fe:	4b31      	ldr	r3, [pc, #196]	; (80124c4 <UTIL_SEQ_Run+0x128>)
 8012400:	681a      	ldr	r2, [r3, #0]
 8012402:	4b31      	ldr	r3, [pc, #196]	; (80124c8 <UTIL_SEQ_Run+0x12c>)
 8012404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012408:	4798      	blx	r3
    local_taskset = TaskSet;
 801240a:	4b29      	ldr	r3, [pc, #164]	; (80124b0 <UTIL_SEQ_Run+0x114>)
 801240c:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 801240e:	4b29      	ldr	r3, [pc, #164]	; (80124b4 <UTIL_SEQ_Run+0x118>)
 8012410:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8012412:	4a29      	ldr	r2, [pc, #164]	; (80124b8 <UTIL_SEQ_Run+0x11c>)
 8012414:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 8012416:	4a29      	ldr	r2, [pc, #164]	; (80124bc <UTIL_SEQ_Run+0x120>)
 8012418:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801241a:	4001      	ands	r1, r0
 801241c:	4d23      	ldr	r5, [pc, #140]	; (80124ac <UTIL_SEQ_Run+0x110>)
 801241e:	682d      	ldr	r5, [r5, #0]
 8012420:	4229      	tst	r1, r5
 8012422:	d021      	beq.n	8012468 <UTIL_SEQ_Run+0xcc>
 8012424:	4013      	ands	r3, r2
 8012426:	d11f      	bne.n	8012468 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012428:	4a25      	ldr	r2, [pc, #148]	; (80124c0 <UTIL_SEQ_Run+0x124>)
 801242a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801242e:	4002      	ands	r2, r0
 8012430:	422a      	tst	r2, r5
 8012432:	d0c1      	beq.n	80123b8 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8012434:	4922      	ldr	r1, [pc, #136]	; (80124c0 <UTIL_SEQ_Run+0x124>)
 8012436:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 801243a:	4002      	ands	r2, r0
 801243c:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801243e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012442:	6849      	ldr	r1, [r1, #4]
 8012444:	4211      	tst	r1, r2
 8012446:	d1b9      	bne.n	80123bc <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8012448:	491d      	ldr	r1, [pc, #116]	; (80124c0 <UTIL_SEQ_Run+0x124>)
 801244a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801244e:	f04f 30ff 	mov.w	r0, #4294967295
 8012452:	6048      	str	r0, [r1, #4]
 8012454:	e7b2      	b.n	80123bc <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8012456:	3b01      	subs	r3, #1
 8012458:	4919      	ldr	r1, [pc, #100]	; (80124c0 <UTIL_SEQ_Run+0x124>)
 801245a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 801245e:	ea0c 0202 	and.w	r2, ip, r2
 8012462:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012466:	e7c6      	b.n	80123f6 <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012468:	4b16      	ldr	r3, [pc, #88]	; (80124c4 <UTIL_SEQ_Run+0x128>)
 801246a:	f04f 32ff 	mov.w	r2, #4294967295
 801246e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012470:	f7ff ff74 	bl	801235c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012474:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012478:	b672      	cpsid	i
  local_taskset = TaskSet;
 801247a:	4b0d      	ldr	r3, [pc, #52]	; (80124b0 <UTIL_SEQ_Run+0x114>)
 801247c:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 801247e:	4a0d      	ldr	r2, [pc, #52]	; (80124b4 <UTIL_SEQ_Run+0x118>)
 8012480:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8012482:	4a0d      	ldr	r2, [pc, #52]	; (80124b8 <UTIL_SEQ_Run+0x11c>)
 8012484:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012486:	4013      	ands	r3, r2
 8012488:	4a08      	ldr	r2, [pc, #32]	; (80124ac <UTIL_SEQ_Run+0x110>)
 801248a:	6812      	ldr	r2, [r2, #0]
 801248c:	4213      	tst	r3, r2
 801248e:	d103      	bne.n	8012498 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8012490:	4b0a      	ldr	r3, [pc, #40]	; (80124bc <UTIL_SEQ_Run+0x120>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	420b      	tst	r3, r1
 8012496:	d006      	beq.n	80124a6 <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012498:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 801249c:	f7ff ff5f 	bl	801235e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80124a0:	4b02      	ldr	r3, [pc, #8]	; (80124ac <UTIL_SEQ_Run+0x110>)
 80124a2:	601c      	str	r4, [r3, #0]
}
 80124a4:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 80124a6:	f7ef fca5 	bl	8001df4 <UTIL_SEQ_Idle>
 80124aa:	e7f5      	b.n	8012498 <UTIL_SEQ_Run+0xfc>
 80124ac:	20000100 	.word	0x20000100
 80124b0:	20001990 	.word	0x20001990
 80124b4:	20001970 	.word	0x20001970
 80124b8:	20000104 	.word	0x20000104
 80124bc:	20001974 	.word	0x20001974
 80124c0:	20001988 	.word	0x20001988
 80124c4:	2000196c 	.word	0x2000196c
 80124c8:	20001978 	.word	0x20001978

080124cc <UTIL_SEQ_RegTask>:
{
 80124cc:	b538      	push	{r3, r4, r5, lr}
 80124ce:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124d0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80124d4:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80124d6:	f7ff ff43 	bl	8012360 <SEQ_BitPosition>
 80124da:	4b03      	ldr	r3, [pc, #12]	; (80124e8 <UTIL_SEQ_RegTask+0x1c>)
 80124dc:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124e0:	f385 8810 	msr	PRIMASK, r5
}
 80124e4:	bd38      	pop	{r3, r4, r5, pc}
 80124e6:	bf00      	nop
 80124e8:	20001978 	.word	0x20001978

080124ec <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80124ec:	b082      	sub	sp, #8
 80124ee:	b082      	sub	sp, #8
 80124f0:	f10d 0c08 	add.w	ip, sp, #8
 80124f4:	e90c 0006 	stmdb	ip, {r1, r2}
 80124f8:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80124fa:	2200      	movs	r2, #0
 80124fc:	6002      	str	r2, [r0, #0]
 80124fe:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8012500:	440b      	add	r3, r1
 8012502:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012504:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012508:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801250c:	440a      	add	r2, r1
 801250e:	b291      	uxth	r1, r2
 8012510:	b212      	sxth	r2, r2
 8012512:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8012514:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8012518:	db04      	blt.n	8012524 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 801251a:	3301      	adds	r3, #1
 801251c:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 801251e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8012522:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8012524:	b002      	add	sp, #8
 8012526:	b002      	add	sp, #8
 8012528:	4770      	bx	lr

0801252a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801252a:	b082      	sub	sp, #8
 801252c:	b082      	sub	sp, #8
 801252e:	f10d 0c08 	add.w	ip, sp, #8
 8012532:	e90c 0006 	stmdb	ip, {r1, r2}
 8012536:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8012538:	2200      	movs	r2, #0
 801253a:	6002      	str	r2, [r0, #0]
 801253c:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801253e:	1acb      	subs	r3, r1, r3
 8012540:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8012542:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012546:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801254a:	1a52      	subs	r2, r2, r1
 801254c:	b291      	uxth	r1, r2
 801254e:	b212      	sxth	r2, r2
 8012550:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8012552:	2a00      	cmp	r2, #0
 8012554:	db02      	blt.n	801255c <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8012556:	b002      	add	sp, #8
 8012558:	b002      	add	sp, #8
 801255a:	4770      	bx	lr
    c.Seconds--;
 801255c:	3b01      	subs	r3, #1
 801255e:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8012560:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8012564:	8081      	strh	r1, [r0, #4]
  return c;
 8012566:	e7f6      	b.n	8012556 <SysTimeSub+0x2c>

08012568 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8012568:	b530      	push	{r4, r5, lr}
 801256a:	b089      	sub	sp, #36	; 0x24
 801256c:	ac02      	add	r4, sp, #8
 801256e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012572:	2300      	movs	r3, #0
 8012574:	9304      	str	r3, [sp, #16]
 8012576:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801257a:	4d0b      	ldr	r5, [pc, #44]	; (80125a8 <SysTimeSet+0x40>)
 801257c:	692b      	ldr	r3, [r5, #16]
 801257e:	a805      	add	r0, sp, #20
 8012580:	4798      	blx	r3
 8012582:	4603      	mov	r3, r0
 8012584:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8012586:	9a05      	ldr	r2, [sp, #20]
 8012588:	9200      	str	r2, [sp, #0]
 801258a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801258e:	a806      	add	r0, sp, #24
 8012590:	f7ff ffcb 	bl	801252a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8012594:	682b      	ldr	r3, [r5, #0]
 8012596:	9806      	ldr	r0, [sp, #24]
 8012598:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801259a:	68ab      	ldr	r3, [r5, #8]
 801259c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80125a0:	4798      	blx	r3
}
 80125a2:	b009      	add	sp, #36	; 0x24
 80125a4:	bd30      	pop	{r4, r5, pc}
 80125a6:	bf00      	nop
 80125a8:	08017fe0 	.word	0x08017fe0

080125ac <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80125ac:	b530      	push	{r4, r5, lr}
 80125ae:	b087      	sub	sp, #28
 80125b0:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80125b2:	2300      	movs	r3, #0
 80125b4:	9304      	str	r3, [sp, #16]
 80125b6:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80125ba:	6003      	str	r3, [r0, #0]
 80125bc:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80125be:	4d0b      	ldr	r5, [pc, #44]	; (80125ec <SysTimeGet+0x40>)
 80125c0:	692b      	ldr	r3, [r5, #16]
 80125c2:	a805      	add	r0, sp, #20
 80125c4:	4798      	blx	r3
 80125c6:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80125c8:	68eb      	ldr	r3, [r5, #12]
 80125ca:	4798      	blx	r3
 80125cc:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80125d0:	686b      	ldr	r3, [r5, #4]
 80125d2:	4798      	blx	r3
 80125d4:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80125d6:	9b05      	ldr	r3, [sp, #20]
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	9b04      	ldr	r3, [sp, #16]
 80125dc:	aa02      	add	r2, sp, #8
 80125de:	ca06      	ldmia	r2, {r1, r2}
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7ff ff83 	bl	80124ec <SysTimeAdd>

  return sysTime;
}
 80125e6:	4620      	mov	r0, r4
 80125e8:	b007      	add	sp, #28
 80125ea:	bd30      	pop	{r4, r5, pc}
 80125ec:	08017fe0 	.word	0x08017fe0

080125f0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80125f0:	b530      	push	{r4, r5, lr}
 80125f2:	b083      	sub	sp, #12
 80125f4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80125f6:	2300      	movs	r3, #0
 80125f8:	9300      	str	r3, [sp, #0]
 80125fa:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80125fe:	4b06      	ldr	r3, [pc, #24]	; (8012618 <SysTimeGetMcuTime+0x28>)
 8012600:	691b      	ldr	r3, [r3, #16]
 8012602:	466d      	mov	r5, sp
 8012604:	a801      	add	r0, sp, #4
 8012606:	4798      	blx	r3
 8012608:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801260a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801260e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8012612:	4620      	mov	r0, r4
 8012614:	b003      	add	sp, #12
 8012616:	bd30      	pop	{r4, r5, pc}
 8012618:	08017fe0 	.word	0x08017fe0

0801261c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801261c:	b530      	push	{r4, r5, lr}
 801261e:	b089      	sub	sp, #36	; 0x24
 8012620:	ac02      	add	r4, sp, #8
 8012622:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012626:	4d0c      	ldr	r5, [pc, #48]	; (8012658 <SysTimeToMs+0x3c>)
 8012628:	68eb      	ldr	r3, [r5, #12]
 801262a:	4798      	blx	r3
 801262c:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012630:	686b      	ldr	r3, [r5, #4]
 8012632:	4798      	blx	r3
 8012634:	4603      	mov	r3, r0
 8012636:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8012638:	9a07      	ldr	r2, [sp, #28]
 801263a:	9200      	str	r2, [sp, #0]
 801263c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012640:	a804      	add	r0, sp, #16
 8012642:	f7ff ff72 	bl	801252a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8012646:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 801264a:	9a04      	ldr	r2, [sp, #16]
 801264c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012650:	fb00 3002 	mla	r0, r0, r2, r3
 8012654:	b009      	add	sp, #36	; 0x24
 8012656:	bd30      	pop	{r4, r5, pc}
 8012658:	08017fe0 	.word	0x08017fe0

0801265c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801265c:	b530      	push	{r4, r5, lr}
 801265e:	b087      	sub	sp, #28
 8012660:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8012662:	4b12      	ldr	r3, [pc, #72]	; (80126ac <SysTimeFromMs+0x50>)
 8012664:	fba3 2301 	umull	r2, r3, r3, r1
 8012668:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801266a:	9304      	str	r3, [sp, #16]
 801266c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8012670:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012674:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8012678:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 801267c:	2300      	movs	r3, #0
 801267e:	9302      	str	r3, [sp, #8]
 8012680:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8012682:	4d0b      	ldr	r5, [pc, #44]	; (80126b0 <SysTimeFromMs+0x54>)
 8012684:	68eb      	ldr	r3, [r5, #12]
 8012686:	4798      	blx	r3
 8012688:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801268c:	686b      	ldr	r3, [r5, #4]
 801268e:	4798      	blx	r3
 8012690:	4603      	mov	r3, r0
 8012692:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8012694:	9a03      	ldr	r2, [sp, #12]
 8012696:	9200      	str	r2, [sp, #0]
 8012698:	aa06      	add	r2, sp, #24
 801269a:	e912 0006 	ldmdb	r2, {r1, r2}
 801269e:	4620      	mov	r0, r4
 80126a0:	f7ff ff24 	bl	80124ec <SysTimeAdd>
}
 80126a4:	4620      	mov	r0, r4
 80126a6:	b007      	add	sp, #28
 80126a8:	bd30      	pop	{r4, r5, pc}
 80126aa:	bf00      	nop
 80126ac:	10624dd3 	.word	0x10624dd3
 80126b0:	08017fe0 	.word	0x08017fe0

080126b4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80126b4:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80126b6:	4b03      	ldr	r3, [pc, #12]	; (80126c4 <UTIL_TIMER_Init+0x10>)
 80126b8:	2200      	movs	r2, #0
 80126ba:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80126bc:	4b02      	ldr	r3, [pc, #8]	; (80126c8 <UTIL_TIMER_Init+0x14>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	4798      	blx	r3
}
 80126c2:	bd08      	pop	{r3, pc}
 80126c4:	20001994 	.word	0x20001994
 80126c8:	08017ff4 	.word	0x08017ff4

080126cc <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80126cc:	b1a8      	cbz	r0, 80126fa <UTIL_TIMER_Create+0x2e>
{
 80126ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126d0:	4617      	mov	r7, r2
 80126d2:	461e      	mov	r6, r3
 80126d4:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80126d6:	b193      	cbz	r3, 80126fe <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80126d8:	2500      	movs	r5, #0
 80126da:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80126dc:	4b09      	ldr	r3, [pc, #36]	; (8012704 <UTIL_TIMER_Create+0x38>)
 80126de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e0:	4608      	mov	r0, r1
 80126e2:	4798      	blx	r3
 80126e4:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80126e6:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80126e8:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80126ea:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80126ec:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80126ee:	9b06      	ldr	r3, [sp, #24]
 80126f0:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80126f2:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80126f4:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80126f6:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80126f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80126fa:	2001      	movs	r0, #1
}
 80126fc:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80126fe:	2001      	movs	r0, #1
 8012700:	e7fa      	b.n	80126f8 <UTIL_TIMER_Create+0x2c>
 8012702:	bf00      	nop
 8012704:	08017ff4 	.word	0x08017ff4

08012708 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8012708:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801270a:	4c03      	ldr	r4, [pc, #12]	; (8012718 <UTIL_TIMER_GetCurrentTime+0x10>)
 801270c:	69e3      	ldr	r3, [r4, #28]
 801270e:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8012710:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012712:	4798      	blx	r3
}
 8012714:	bd10      	pop	{r4, pc}
 8012716:	bf00      	nop
 8012718:	08017ff4 	.word	0x08017ff4

0801271c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801271c:	b570      	push	{r4, r5, r6, lr}
 801271e:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8012720:	4d05      	ldr	r5, [pc, #20]	; (8012738 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8012722:	69eb      	ldr	r3, [r5, #28]
 8012724:	4798      	blx	r3
 8012726:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8012728:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801272a:	4630      	mov	r0, r6
 801272c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801272e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8012730:	1a20      	subs	r0, r4, r0
 8012732:	4798      	blx	r3
}
 8012734:	bd70      	pop	{r4, r5, r6, pc}
 8012736:	bf00      	nop
 8012738:	08017ff4 	.word	0x08017ff4

0801273c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801273c:	4b05      	ldr	r3, [pc, #20]	; (8012754 <TimerExists+0x18>)
 801273e:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8012740:	e000      	b.n	8012744 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8012742:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8012744:	b11b      	cbz	r3, 801274e <TimerExists+0x12>
    if( cur == TimerObject )
 8012746:	4283      	cmp	r3, r0
 8012748:	d1fb      	bne.n	8012742 <TimerExists+0x6>
      return true;
 801274a:	2001      	movs	r0, #1
  }
  return false;
}
 801274c:	4770      	bx	lr
  return false;
 801274e:	2000      	movs	r0, #0
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	20001994 	.word	0x20001994

08012758 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8012758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801275a:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801275c:	4e09      	ldr	r6, [pc, #36]	; (8012784 <TimerSetTimeout+0x2c>)
 801275e:	6a33      	ldr	r3, [r6, #32]
 8012760:	4798      	blx	r3
 8012762:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8012764:	2301      	movs	r3, #1
 8012766:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8012768:	6827      	ldr	r7, [r4, #0]
 801276a:	69b6      	ldr	r6, [r6, #24]
 801276c:	47b0      	blx	r6
 801276e:	4428      	add	r0, r5
 8012770:	4287      	cmp	r7, r0
 8012772:	d202      	bcs.n	801277a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8012774:	47b0      	blx	r6
 8012776:	4405      	add	r5, r0
 8012778:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801277a:	4b02      	ldr	r3, [pc, #8]	; (8012784 <TimerSetTimeout+0x2c>)
 801277c:	689b      	ldr	r3, [r3, #8]
 801277e:	6820      	ldr	r0, [r4, #0]
 8012780:	4798      	blx	r3
}
 8012782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012784:	08017ff4 	.word	0x08017ff4

08012788 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8012788:	b368      	cbz	r0, 80127e6 <UTIL_TIMER_Stop+0x5e>
{
 801278a:	b510      	push	{r4, lr}
 801278c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801278e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012792:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8012794:	4b15      	ldr	r3, [pc, #84]	; (80127ec <UTIL_TIMER_Stop+0x64>)
 8012796:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8012798:	2301      	movs	r3, #1
 801279a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 801279c:	b1e1      	cbz	r1, 80127d8 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 801279e:	2300      	movs	r3, #0
 80127a0:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80127a2:	4288      	cmp	r0, r1
 80127a4:	d006      	beq.n	80127b4 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80127a6:	460b      	mov	r3, r1
        while( cur != NULL )
 80127a8:	b1b3      	cbz	r3, 80127d8 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80127aa:	4293      	cmp	r3, r2
 80127ac:	d011      	beq.n	80127d2 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80127ae:	4619      	mov	r1, r3
            cur = cur->Next;
 80127b0:	695b      	ldr	r3, [r3, #20]
 80127b2:	e7f9      	b.n	80127a8 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80127b4:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80127b6:	6948      	ldr	r0, [r1, #20]
 80127b8:	b120      	cbz	r0, 80127c4 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80127ba:	4b0c      	ldr	r3, [pc, #48]	; (80127ec <UTIL_TIMER_Stop+0x64>)
 80127bc:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80127be:	f7ff ffcb 	bl	8012758 <TimerSetTimeout>
 80127c2:	e009      	b.n	80127d8 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80127c4:	4b0a      	ldr	r3, [pc, #40]	; (80127f0 <UTIL_TIMER_Stop+0x68>)
 80127c6:	68db      	ldr	r3, [r3, #12]
 80127c8:	4798      	blx	r3
            TimerListHead = NULL;
 80127ca:	4b08      	ldr	r3, [pc, #32]	; (80127ec <UTIL_TIMER_Stop+0x64>)
 80127cc:	2200      	movs	r2, #0
 80127ce:	601a      	str	r2, [r3, #0]
 80127d0:	e002      	b.n	80127d8 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80127d2:	695b      	ldr	r3, [r3, #20]
 80127d4:	b123      	cbz	r3, 80127e0 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80127d6:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127d8:	f384 8810 	msr	PRIMASK, r4
}
 80127dc:	2000      	movs	r0, #0
}
 80127de:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80127e0:	2300      	movs	r3, #0
 80127e2:	614b      	str	r3, [r1, #20]
 80127e4:	e7f8      	b.n	80127d8 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80127e6:	2001      	movs	r0, #1
}
 80127e8:	4770      	bx	lr
 80127ea:	bf00      	nop
 80127ec:	20001994 	.word	0x20001994
 80127f0:	08017ff4 	.word	0x08017ff4

080127f4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80127f4:	4b09      	ldr	r3, [pc, #36]	; (801281c <TimerInsertTimer+0x28>)
 80127f6:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80127f8:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80127fa:	e001      	b.n	8012800 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 80127fc:	461a      	mov	r2, r3
        next = next->Next;
 80127fe:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8012800:	6951      	ldr	r1, [r2, #20]
 8012802:	b139      	cbz	r1, 8012814 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8012804:	6819      	ldr	r1, [r3, #0]
 8012806:	f8d0 c000 	ldr.w	ip, [r0]
 801280a:	458c      	cmp	ip, r1
 801280c:	d8f6      	bhi.n	80127fc <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 801280e:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8012810:	6143      	str	r3, [r0, #20]
        return;
 8012812:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8012814:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8012816:	2300      	movs	r3, #0
 8012818:	6143      	str	r3, [r0, #20]
}
 801281a:	4770      	bx	lr
 801281c:	20001994 	.word	0x20001994

08012820 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8012820:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012822:	4b05      	ldr	r3, [pc, #20]	; (8012838 <TimerInsertNewHeadTimer+0x18>)
 8012824:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8012826:	b10b      	cbz	r3, 801282c <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8012828:	2200      	movs	r2, #0
 801282a:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801282c:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 801282e:	4b02      	ldr	r3, [pc, #8]	; (8012838 <TimerInsertNewHeadTimer+0x18>)
 8012830:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8012832:	f7ff ff91 	bl	8012758 <TimerSetTimeout>
}
 8012836:	bd08      	pop	{r3, pc}
 8012838:	20001994 	.word	0x20001994

0801283c <UTIL_TIMER_Start>:
{
 801283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801283e:	2800      	cmp	r0, #0
 8012840:	d036      	beq.n	80128b0 <UTIL_TIMER_Start+0x74>
 8012842:	4604      	mov	r4, r0
 8012844:	f7ff ff7a 	bl	801273c <TimerExists>
 8012848:	2800      	cmp	r0, #0
 801284a:	d134      	bne.n	80128b6 <UTIL_TIMER_Start+0x7a>
 801284c:	7a65      	ldrb	r5, [r4, #9]
 801284e:	2d00      	cmp	r5, #0
 8012850:	d133      	bne.n	80128ba <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012852:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012856:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8012858:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801285a:	4b19      	ldr	r3, [pc, #100]	; (80128c0 <UTIL_TIMER_Start+0x84>)
 801285c:	6a1b      	ldr	r3, [r3, #32]
 801285e:	4798      	blx	r3
    if( ticks < minValue )
 8012860:	4287      	cmp	r7, r0
 8012862:	d300      	bcc.n	8012866 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8012864:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8012866:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8012868:	2300      	movs	r3, #0
 801286a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 801286c:	2201      	movs	r2, #1
 801286e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8012870:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8012872:	4b14      	ldr	r3, [pc, #80]	; (80128c4 <UTIL_TIMER_Start+0x88>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	b183      	cbz	r3, 801289a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8012878:	4b11      	ldr	r3, [pc, #68]	; (80128c0 <UTIL_TIMER_Start+0x84>)
 801287a:	699b      	ldr	r3, [r3, #24]
 801287c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801287e:	6823      	ldr	r3, [r4, #0]
 8012880:	4418      	add	r0, r3
 8012882:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8012884:	4b0f      	ldr	r3, [pc, #60]	; (80128c4 <UTIL_TIMER_Start+0x88>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4298      	cmp	r0, r3
 801288c:	d20c      	bcs.n	80128a8 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801288e:	4620      	mov	r0, r4
 8012890:	f7ff ffc6 	bl	8012820 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012894:	f386 8810 	msr	PRIMASK, r6
}
 8012898:	e00b      	b.n	80128b2 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 801289a:	4b09      	ldr	r3, [pc, #36]	; (80128c0 <UTIL_TIMER_Start+0x84>)
 801289c:	691b      	ldr	r3, [r3, #16]
 801289e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80128a0:	4620      	mov	r0, r4
 80128a2:	f7ff ffbd 	bl	8012820 <TimerInsertNewHeadTimer>
 80128a6:	e7f5      	b.n	8012894 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80128a8:	4620      	mov	r0, r4
 80128aa:	f7ff ffa3 	bl	80127f4 <TimerInsertTimer>
 80128ae:	e7f1      	b.n	8012894 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80128b0:	2501      	movs	r5, #1
}
 80128b2:	4628      	mov	r0, r5
 80128b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80128b6:	2501      	movs	r5, #1
 80128b8:	e7fb      	b.n	80128b2 <UTIL_TIMER_Start+0x76>
 80128ba:	2501      	movs	r5, #1
 80128bc:	e7f9      	b.n	80128b2 <UTIL_TIMER_Start+0x76>
 80128be:	bf00      	nop
 80128c0:	08017ff4 	.word	0x08017ff4
 80128c4:	20001994 	.word	0x20001994

080128c8 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80128c8:	b198      	cbz	r0, 80128f2 <UTIL_TIMER_SetPeriod+0x2a>
{
 80128ca:	b510      	push	{r4, lr}
 80128cc:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80128ce:	4b0a      	ldr	r3, [pc, #40]	; (80128f8 <UTIL_TIMER_SetPeriod+0x30>)
 80128d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128d2:	4608      	mov	r0, r1
 80128d4:	4798      	blx	r3
 80128d6:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80128d8:	4620      	mov	r0, r4
 80128da:	f7ff ff2f 	bl	801273c <TimerExists>
 80128de:	b908      	cbnz	r0, 80128e4 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80128e0:	2000      	movs	r0, #0
}
 80128e2:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80128e4:	4620      	mov	r0, r4
 80128e6:	f7ff ff4f 	bl	8012788 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80128ea:	4620      	mov	r0, r4
 80128ec:	f7ff ffa6 	bl	801283c <UTIL_TIMER_Start>
 80128f0:	e7f7      	b.n	80128e2 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80128f2:	2001      	movs	r0, #1
}
 80128f4:	4770      	bx	lr
 80128f6:	bf00      	nop
 80128f8:	08017ff4 	.word	0x08017ff4

080128fc <UTIL_TIMER_IRQ_Handler>:
{
 80128fc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128fe:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012902:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8012904:	4c1e      	ldr	r4, [pc, #120]	; (8012980 <UTIL_TIMER_IRQ_Handler+0x84>)
 8012906:	6963      	ldr	r3, [r4, #20]
 8012908:	4798      	blx	r3
 801290a:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801290c:	6923      	ldr	r3, [r4, #16]
 801290e:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8012910:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8012912:	4b1c      	ldr	r3, [pc, #112]	; (8012984 <UTIL_TIMER_IRQ_Handler+0x88>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	b923      	cbnz	r3, 8012922 <UTIL_TIMER_IRQ_Handler+0x26>
 8012918:	e018      	b.n	801294c <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 801291a:	2200      	movs	r2, #0
 801291c:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 801291e:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8012920:	b1a3      	cbz	r3, 801294c <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8012922:	681a      	ldr	r2, [r3, #0]
 8012924:	42a2      	cmp	r2, r4
 8012926:	d9f8      	bls.n	801291a <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8012928:	1a31      	subs	r1, r6, r0
 801292a:	440a      	add	r2, r1
 801292c:	601a      	str	r2, [r3, #0]
 801292e:	e7f6      	b.n	801291e <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8012930:	4b14      	ldr	r3, [pc, #80]	; (8012984 <UTIL_TIMER_IRQ_Handler+0x88>)
 8012932:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8012934:	6962      	ldr	r2, [r4, #20]
 8012936:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8012938:	2300      	movs	r3, #0
 801293a:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 801293c:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 801293e:	68e3      	ldr	r3, [r4, #12]
 8012940:	6920      	ldr	r0, [r4, #16]
 8012942:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8012944:	8963      	ldrh	r3, [r4, #10]
 8012946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801294a:	d012      	beq.n	8012972 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801294c:	4b0d      	ldr	r3, [pc, #52]	; (8012984 <UTIL_TIMER_IRQ_Handler+0x88>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	b13b      	cbz	r3, 8012962 <UTIL_TIMER_IRQ_Handler+0x66>
 8012952:	681c      	ldr	r4, [r3, #0]
 8012954:	2c00      	cmp	r4, #0
 8012956:	d0eb      	beq.n	8012930 <UTIL_TIMER_IRQ_Handler+0x34>
 8012958:	4b09      	ldr	r3, [pc, #36]	; (8012980 <UTIL_TIMER_IRQ_Handler+0x84>)
 801295a:	699b      	ldr	r3, [r3, #24]
 801295c:	4798      	blx	r3
 801295e:	4284      	cmp	r4, r0
 8012960:	d3e6      	bcc.n	8012930 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8012962:	4b08      	ldr	r3, [pc, #32]	; (8012984 <UTIL_TIMER_IRQ_Handler+0x88>)
 8012964:	6818      	ldr	r0, [r3, #0]
 8012966:	b108      	cbz	r0, 801296c <UTIL_TIMER_IRQ_Handler+0x70>
 8012968:	7a03      	ldrb	r3, [r0, #8]
 801296a:	b133      	cbz	r3, 801297a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801296c:	f385 8810 	msr	PRIMASK, r5
}
 8012970:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8012972:	4620      	mov	r0, r4
 8012974:	f7ff ff62 	bl	801283c <UTIL_TIMER_Start>
 8012978:	e7e8      	b.n	801294c <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 801297a:	f7ff feed 	bl	8012758 <TimerSetTimeout>
 801297e:	e7f5      	b.n	801296c <UTIL_TIMER_IRQ_Handler+0x70>
 8012980:	08017ff4 	.word	0x08017ff4
 8012984:	20001994 	.word	0x20001994

08012988 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8012988:	4601      	mov	r1, r0
  int i = 0;
 801298a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801298c:	e007      	b.n	801299e <ee_skip_atoi+0x16>
 801298e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012992:	1c53      	adds	r3, r2, #1
 8012994:	600b      	str	r3, [r1, #0]
 8012996:	7813      	ldrb	r3, [r2, #0]
 8012998:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801299c:	3830      	subs	r0, #48	; 0x30
 801299e:	680a      	ldr	r2, [r1, #0]
 80129a0:	7813      	ldrb	r3, [r2, #0]
 80129a2:	3b30      	subs	r3, #48	; 0x30
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	2b09      	cmp	r3, #9
 80129a8:	d9f1      	bls.n	801298e <ee_skip_atoi+0x6>
  return i;
}
 80129aa:	4770      	bx	lr

080129ac <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80129ac:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80129b0:	b093      	sub	sp, #76	; 0x4c
 80129b2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80129b4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80129b6:	f016 0f40 	tst.w	r6, #64	; 0x40
 80129ba:	d110      	bne.n	80129de <ee_number+0x32>
  char *dig = lower_digits;
 80129bc:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8012ab8 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80129c0:	1e9f      	subs	r7, r3, #2
 80129c2:	2f22      	cmp	r7, #34	; 0x22
 80129c4:	d875      	bhi.n	8012ab2 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80129c6:	f016 0401 	ands.w	r4, r6, #1
 80129ca:	d00b      	beq.n	80129e4 <ee_number+0x38>
 80129cc:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 80129d0:	f016 0f02 	tst.w	r6, #2
 80129d4:	d00f      	beq.n	80129f6 <ee_number+0x4a>
  {
    if (num < 0)
 80129d6:	2a00      	cmp	r2, #0
 80129d8:	db07      	blt.n	80129ea <ee_number+0x3e>
  sign = 0;
 80129da:	2700      	movs	r7, #0
 80129dc:	e00c      	b.n	80129f8 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80129de:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8012abc <ee_number+0x110>
 80129e2:	e7ed      	b.n	80129c0 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80129e4:	f04f 0e20 	mov.w	lr, #32
 80129e8:	e7f2      	b.n	80129d0 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80129ea:	4252      	negs	r2, r2
      size--;
 80129ec:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80129ee:	3e01      	subs	r6, #1
 80129f0:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 80129f2:	272d      	movs	r7, #45	; 0x2d
 80129f4:	e000      	b.n	80129f8 <ee_number+0x4c>
  sign = 0;
 80129f6:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 80129f8:	bb5a      	cbnz	r2, 8012a52 <ee_number+0xa6>
    tmp[i++] = '0';
 80129fa:	2330      	movs	r3, #48	; 0x30
 80129fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8012a00:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8012a04:	45ac      	cmp	ip, r5
 8012a06:	dd00      	ble.n	8012a0a <ee_number+0x5e>
 8012a08:	4665      	mov	r5, ip
  size -= precision;
 8012a0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012a0c:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8012a0e:	b31c      	cbz	r4, 8012a58 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8012a10:	b11f      	cbz	r7, 8012a1a <ee_number+0x6e>
 8012a12:	f800 7b01 	strb.w	r7, [r0], #1
 8012a16:	3901      	subs	r1, #1
 8012a18:	d007      	beq.n	8012a2a <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a20:	dd24      	ble.n	8012a6c <ee_number+0xc0>
 8012a22:	f800 eb01 	strb.w	lr, [r0], #1
 8012a26:	3901      	subs	r1, #1
 8012a28:	d1f7      	bne.n	8012a1a <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8012a2a:	b013      	add	sp, #76	; 0x4c
 8012a2c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8012a30:	fbb2 f6f3 	udiv	r6, r2, r3
 8012a34:	fb03 2216 	mls	r2, r3, r6, r2
 8012a38:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8012a3c:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8012a40:	446a      	add	r2, sp
 8012a42:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8012a46:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8012a48:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8012a4c:	2a00      	cmp	r2, #0
 8012a4e:	d1ef      	bne.n	8012a30 <ee_number+0x84>
 8012a50:	e7d8      	b.n	8012a04 <ee_number+0x58>
  i = 0;
 8012a52:	f04f 0c00 	mov.w	ip, #0
 8012a56:	e7f9      	b.n	8012a4c <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8012a5e:	ddd7      	ble.n	8012a10 <ee_number+0x64>
 8012a60:	2220      	movs	r2, #32
 8012a62:	f800 2b01 	strb.w	r2, [r0], #1
 8012a66:	3901      	subs	r1, #1
 8012a68:	d1f6      	bne.n	8012a58 <ee_number+0xac>
 8012a6a:	e7de      	b.n	8012a2a <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8012a6c:	4565      	cmp	r5, ip
 8012a6e:	f105 35ff 	add.w	r5, r5, #4294967295
 8012a72:	dd05      	ble.n	8012a80 <ee_number+0xd4>
 8012a74:	2230      	movs	r2, #48	; 0x30
 8012a76:	f800 2b01 	strb.w	r2, [r0], #1
 8012a7a:	3901      	subs	r1, #1
 8012a7c:	d1f6      	bne.n	8012a6c <ee_number+0xc0>
 8012a7e:	e7d4      	b.n	8012a2a <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8012a80:	4662      	mov	r2, ip
 8012a82:	2a00      	cmp	r2, #0
 8012a84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012a88:	dd09      	ble.n	8012a9e <ee_number+0xf2>
 8012a8a:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8012a8e:	446a      	add	r2, sp
 8012a90:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8012a94:	f800 2b01 	strb.w	r2, [r0], #1
 8012a98:	3901      	subs	r1, #1
 8012a9a:	d1f1      	bne.n	8012a80 <ee_number+0xd4>
 8012a9c:	e7c5      	b.n	8012a2a <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	f103 33ff 	add.w	r3, r3, #4294967295
 8012aa4:	ddc1      	ble.n	8012a2a <ee_number+0x7e>
 8012aa6:	2220      	movs	r2, #32
 8012aa8:	f800 2b01 	strb.w	r2, [r0], #1
 8012aac:	3901      	subs	r1, #1
 8012aae:	d1f6      	bne.n	8012a9e <ee_number+0xf2>
 8012ab0:	e7bb      	b.n	8012a2a <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8012ab2:	2000      	movs	r0, #0
 8012ab4:	e7b9      	b.n	8012a2a <ee_number+0x7e>
 8012ab6:	bf00      	nop
 8012ab8:	08018fa8 	.word	0x08018fa8
 8012abc:	08018f80 	.word	0x08018f80

08012ac0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8012ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ac4:	b087      	sub	sp, #28
 8012ac6:	9205      	str	r2, [sp, #20]
 8012ac8:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8012aca:	1e0f      	subs	r7, r1, #0
 8012acc:	f340 80b8 	ble.w	8012c40 <tiny_vsnprintf_like+0x180>
 8012ad0:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	e004      	b.n	8012ae0 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8012ad6:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8012ada:	9b05      	ldr	r3, [sp, #20]
 8012adc:	3301      	adds	r3, #1
 8012ade:	9305      	str	r3, [sp, #20]
 8012ae0:	9905      	ldr	r1, [sp, #20]
 8012ae2:	780a      	ldrb	r2, [r1, #0]
 8012ae4:	b922      	cbnz	r2, 8012af0 <tiny_vsnprintf_like+0x30>
 8012ae6:	1ba3      	subs	r3, r4, r6
 8012ae8:	1e78      	subs	r0, r7, #1
 8012aea:	4283      	cmp	r3, r0
 8012aec:	f2c0 80a2 	blt.w	8012c34 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8012af0:	1ba3      	subs	r3, r4, r6
 8012af2:	f107 38ff 	add.w	r8, r7, #4294967295
 8012af6:	4543      	cmp	r3, r8
 8012af8:	f280 809c 	bge.w	8012c34 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8012afc:	2a25      	cmp	r2, #37	; 0x25
 8012afe:	d1ea      	bne.n	8012ad6 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8012b00:	1c4b      	adds	r3, r1, #1
 8012b02:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8012b04:	784b      	ldrb	r3, [r1, #1]
 8012b06:	2b30      	cmp	r3, #48	; 0x30
 8012b08:	d020      	beq.n	8012b4c <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8012b0a:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8012b0e:	3b30      	subs	r3, #48	; 0x30
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	2b09      	cmp	r3, #9
 8012b14:	d91d      	bls.n	8012b52 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8012b16:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8012b1a:	9b05      	ldr	r3, [sp, #20]
 8012b1c:	781a      	ldrb	r2, [r3, #0]
 8012b1e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8012b22:	2b20      	cmp	r3, #32
 8012b24:	d867      	bhi.n	8012bf6 <tiny_vsnprintf_like+0x136>
 8012b26:	e8df f003 	tbb	[pc, r3]
 8012b2a:	664a      	.short	0x664a
 8012b2c:	66666666 	.word	0x66666666
 8012b30:	66666666 	.word	0x66666666
 8012b34:	66621e66 	.word	0x66621e66
 8012b38:	62666666 	.word	0x62666666
 8012b3c:	66666666 	.word	0x66666666
 8012b40:	66666666 	.word	0x66666666
 8012b44:	19662866 	.word	0x19662866
 8012b48:	6666      	.short	0x6666
 8012b4a:	7c          	.byte	0x7c
 8012b4b:	00          	.byte	0x00
      flags |= ZEROPAD;
 8012b4c:	f04f 0901 	mov.w	r9, #1
 8012b50:	e7dd      	b.n	8012b0e <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8012b52:	a805      	add	r0, sp, #20
 8012b54:	f7ff ff18 	bl	8012988 <ee_skip_atoi>
 8012b58:	4605      	mov	r5, r0
 8012b5a:	e7de      	b.n	8012b1a <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8012b5c:	230a      	movs	r3, #10
 8012b5e:	e031      	b.n	8012bc4 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8012b60:	2320      	movs	r3, #32
 8012b62:	f804 3b01 	strb.w	r3, [r4], #1
 8012b66:	3d01      	subs	r5, #1
 8012b68:	2d00      	cmp	r5, #0
 8012b6a:	dcf9      	bgt.n	8012b60 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8012b6c:	9b04      	ldr	r3, [sp, #16]
 8012b6e:	1d1a      	adds	r2, r3, #4
 8012b70:	9204      	str	r2, [sp, #16]
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8012b78:	e7af      	b.n	8012ada <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8012b7a:	9b04      	ldr	r3, [sp, #16]
 8012b7c:	1d1a      	adds	r2, r3, #4
 8012b7e:	9204      	str	r2, [sp, #16]
 8012b80:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8012b84:	f1b8 0f00 	cmp.w	r8, #0
 8012b88:	d003      	beq.n	8012b92 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8012b8a:	4640      	mov	r0, r8
 8012b8c:	f7ed faf8 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8012b90:	e006      	b.n	8012ba0 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8012b92:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8012c44 <tiny_vsnprintf_like+0x184>
 8012b96:	e7f8      	b.n	8012b8a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8012b98:	2220      	movs	r2, #32
 8012b9a:	f804 2b01 	strb.w	r2, [r4], #1
 8012b9e:	461d      	mov	r5, r3
 8012ba0:	1e6b      	subs	r3, r5, #1
 8012ba2:	4285      	cmp	r5, r0
 8012ba4:	dcf8      	bgt.n	8012b98 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	e006      	b.n	8012bb8 <tiny_vsnprintf_like+0xf8>
 8012baa:	4643      	mov	r3, r8
 8012bac:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012bb0:	f804 1b01 	strb.w	r1, [r4], #1
 8012bb4:	3201      	adds	r2, #1
 8012bb6:	4698      	mov	r8, r3
 8012bb8:	4282      	cmp	r2, r0
 8012bba:	dbf6      	blt.n	8012baa <tiny_vsnprintf_like+0xea>
 8012bbc:	e78d      	b.n	8012ada <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8012bbe:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8012bc2:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8012bc4:	f019 0f02 	tst.w	r9, #2
 8012bc8:	d02f      	beq.n	8012c2a <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8012bca:	9a04      	ldr	r2, [sp, #16]
 8012bcc:	1d11      	adds	r1, r2, #4
 8012bce:	9104      	str	r1, [sp, #16]
 8012bd0:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8012bd2:	1ba1      	subs	r1, r4, r6
 8012bd4:	f8cd 9008 	str.w	r9, [sp, #8]
 8012bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bdc:	9001      	str	r0, [sp, #4]
 8012bde:	9500      	str	r5, [sp, #0]
 8012be0:	eba8 0101 	sub.w	r1, r8, r1
 8012be4:	4620      	mov	r0, r4
 8012be6:	f7ff fee1 	bl	80129ac <ee_number>
 8012bea:	4604      	mov	r4, r0
 8012bec:	e775      	b.n	8012ada <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8012bee:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8012bf2:	230a      	movs	r3, #10
 8012bf4:	e7e6      	b.n	8012bc4 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8012bf6:	2a25      	cmp	r2, #37	; 0x25
 8012bf8:	d002      	beq.n	8012c00 <tiny_vsnprintf_like+0x140>
 8012bfa:	2325      	movs	r3, #37	; 0x25
 8012bfc:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012c00:	1ba3      	subs	r3, r4, r6
 8012c02:	4598      	cmp	r8, r3
 8012c04:	dd0f      	ble.n	8012c26 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8012c06:	9b05      	ldr	r3, [sp, #20]
 8012c08:	781a      	ldrb	r2, [r3, #0]
 8012c0a:	b13a      	cbz	r2, 8012c1c <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8012c0c:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012c10:	1ba3      	subs	r3, r4, r6
 8012c12:	4598      	cmp	r8, r3
 8012c14:	f73f af61 	bgt.w	8012ada <tiny_vsnprintf_like+0x1a>
    base = 10;
 8012c18:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8012c1a:	e7d3      	b.n	8012bc4 <tiny_vsnprintf_like+0x104>
          --fmt;
 8012c1c:	3b01      	subs	r3, #1
 8012c1e:	9305      	str	r3, [sp, #20]
 8012c20:	e7f6      	b.n	8012c10 <tiny_vsnprintf_like+0x150>
        base = 16;
 8012c22:	2310      	movs	r3, #16
 8012c24:	e7ce      	b.n	8012bc4 <tiny_vsnprintf_like+0x104>
    base = 10;
 8012c26:	230a      	movs	r3, #10
 8012c28:	e7cc      	b.n	8012bc4 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8012c2a:	9a04      	ldr	r2, [sp, #16]
 8012c2c:	1d11      	adds	r1, r2, #4
 8012c2e:	9104      	str	r1, [sp, #16]
 8012c30:	6812      	ldr	r2, [r2, #0]
 8012c32:	e7ce      	b.n	8012bd2 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8012c34:	2300      	movs	r3, #0
 8012c36:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8012c38:	1ba0      	subs	r0, r4, r6
}
 8012c3a:	b007      	add	sp, #28
 8012c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8012c40:	2000      	movs	r0, #0
 8012c42:	e7fa      	b.n	8012c3a <tiny_vsnprintf_like+0x17a>
 8012c44:	08018fd0 	.word	0x08018fd0

08012c48 <__errno>:
 8012c48:	4b01      	ldr	r3, [pc, #4]	; (8012c50 <__errno+0x8>)
 8012c4a:	6818      	ldr	r0, [r3, #0]
 8012c4c:	4770      	bx	lr
 8012c4e:	bf00      	nop
 8012c50:	20000108 	.word	0x20000108

08012c54 <__libc_init_array>:
 8012c54:	b570      	push	{r4, r5, r6, lr}
 8012c56:	4d0d      	ldr	r5, [pc, #52]	; (8012c8c <__libc_init_array+0x38>)
 8012c58:	4c0d      	ldr	r4, [pc, #52]	; (8012c90 <__libc_init_array+0x3c>)
 8012c5a:	1b64      	subs	r4, r4, r5
 8012c5c:	10a4      	asrs	r4, r4, #2
 8012c5e:	2600      	movs	r6, #0
 8012c60:	42a6      	cmp	r6, r4
 8012c62:	d109      	bne.n	8012c78 <__libc_init_array+0x24>
 8012c64:	4d0b      	ldr	r5, [pc, #44]	; (8012c94 <__libc_init_array+0x40>)
 8012c66:	4c0c      	ldr	r4, [pc, #48]	; (8012c98 <__libc_init_array+0x44>)
 8012c68:	f005 f952 	bl	8017f10 <_init>
 8012c6c:	1b64      	subs	r4, r4, r5
 8012c6e:	10a4      	asrs	r4, r4, #2
 8012c70:	2600      	movs	r6, #0
 8012c72:	42a6      	cmp	r6, r4
 8012c74:	d105      	bne.n	8012c82 <__libc_init_array+0x2e>
 8012c76:	bd70      	pop	{r4, r5, r6, pc}
 8012c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c7c:	4798      	blx	r3
 8012c7e:	3601      	adds	r6, #1
 8012c80:	e7ee      	b.n	8012c60 <__libc_init_array+0xc>
 8012c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c86:	4798      	blx	r3
 8012c88:	3601      	adds	r6, #1
 8012c8a:	e7f2      	b.n	8012c72 <__libc_init_array+0x1e>
 8012c8c:	080194a0 	.word	0x080194a0
 8012c90:	080194a0 	.word	0x080194a0
 8012c94:	080194a0 	.word	0x080194a0
 8012c98:	080194a4 	.word	0x080194a4

08012c9c <memset>:
 8012c9c:	4402      	add	r2, r0
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d100      	bne.n	8012ca6 <memset+0xa>
 8012ca4:	4770      	bx	lr
 8012ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8012caa:	e7f9      	b.n	8012ca0 <memset+0x4>

08012cac <__cvt>:
 8012cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cb0:	b088      	sub	sp, #32
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	461f      	mov	r7, r3
 8012cb6:	4614      	mov	r4, r2
 8012cb8:	bfb8      	it	lt
 8012cba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8012cbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012cc0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012cc2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8012cc6:	bfb6      	itet	lt
 8012cc8:	461f      	movlt	r7, r3
 8012cca:	2300      	movge	r3, #0
 8012ccc:	232d      	movlt	r3, #45	; 0x2d
 8012cce:	7013      	strb	r3, [r2, #0]
 8012cd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012cd2:	f023 0820 	bic.w	r8, r3, #32
 8012cd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012cda:	d005      	beq.n	8012ce8 <__cvt+0x3c>
 8012cdc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012ce0:	d100      	bne.n	8012ce4 <__cvt+0x38>
 8012ce2:	3501      	adds	r5, #1
 8012ce4:	2302      	movs	r3, #2
 8012ce6:	e000      	b.n	8012cea <__cvt+0x3e>
 8012ce8:	2303      	movs	r3, #3
 8012cea:	aa07      	add	r2, sp, #28
 8012cec:	9204      	str	r2, [sp, #16]
 8012cee:	aa06      	add	r2, sp, #24
 8012cf0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8012cf4:	e9cd 3500 	strd	r3, r5, [sp]
 8012cf8:	4622      	mov	r2, r4
 8012cfa:	463b      	mov	r3, r7
 8012cfc:	f001 fe74 	bl	80149e8 <_dtoa_r>
 8012d00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012d04:	4606      	mov	r6, r0
 8012d06:	d102      	bne.n	8012d0e <__cvt+0x62>
 8012d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012d0a:	07db      	lsls	r3, r3, #31
 8012d0c:	d522      	bpl.n	8012d54 <__cvt+0xa8>
 8012d0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012d12:	eb06 0905 	add.w	r9, r6, r5
 8012d16:	d110      	bne.n	8012d3a <__cvt+0x8e>
 8012d18:	7833      	ldrb	r3, [r6, #0]
 8012d1a:	2b30      	cmp	r3, #48	; 0x30
 8012d1c:	d10a      	bne.n	8012d34 <__cvt+0x88>
 8012d1e:	2200      	movs	r2, #0
 8012d20:	2300      	movs	r3, #0
 8012d22:	4620      	mov	r0, r4
 8012d24:	4639      	mov	r1, r7
 8012d26:	f7ed ff5b 	bl	8000be0 <__aeabi_dcmpeq>
 8012d2a:	b918      	cbnz	r0, 8012d34 <__cvt+0x88>
 8012d2c:	f1c5 0501 	rsb	r5, r5, #1
 8012d30:	f8ca 5000 	str.w	r5, [sl]
 8012d34:	f8da 3000 	ldr.w	r3, [sl]
 8012d38:	4499      	add	r9, r3
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	4620      	mov	r0, r4
 8012d40:	4639      	mov	r1, r7
 8012d42:	f7ed ff4d 	bl	8000be0 <__aeabi_dcmpeq>
 8012d46:	b108      	cbz	r0, 8012d4c <__cvt+0xa0>
 8012d48:	f8cd 901c 	str.w	r9, [sp, #28]
 8012d4c:	2230      	movs	r2, #48	; 0x30
 8012d4e:	9b07      	ldr	r3, [sp, #28]
 8012d50:	454b      	cmp	r3, r9
 8012d52:	d307      	bcc.n	8012d64 <__cvt+0xb8>
 8012d54:	9b07      	ldr	r3, [sp, #28]
 8012d56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012d58:	1b9b      	subs	r3, r3, r6
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	6013      	str	r3, [r2, #0]
 8012d5e:	b008      	add	sp, #32
 8012d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d64:	1c59      	adds	r1, r3, #1
 8012d66:	9107      	str	r1, [sp, #28]
 8012d68:	701a      	strb	r2, [r3, #0]
 8012d6a:	e7f0      	b.n	8012d4e <__cvt+0xa2>

08012d6c <__exponent>:
 8012d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d6e:	4603      	mov	r3, r0
 8012d70:	2900      	cmp	r1, #0
 8012d72:	bfb8      	it	lt
 8012d74:	4249      	neglt	r1, r1
 8012d76:	f803 2b02 	strb.w	r2, [r3], #2
 8012d7a:	bfb4      	ite	lt
 8012d7c:	222d      	movlt	r2, #45	; 0x2d
 8012d7e:	222b      	movge	r2, #43	; 0x2b
 8012d80:	2909      	cmp	r1, #9
 8012d82:	7042      	strb	r2, [r0, #1]
 8012d84:	dd2a      	ble.n	8012ddc <__exponent+0x70>
 8012d86:	f10d 0407 	add.w	r4, sp, #7
 8012d8a:	46a4      	mov	ip, r4
 8012d8c:	270a      	movs	r7, #10
 8012d8e:	46a6      	mov	lr, r4
 8012d90:	460a      	mov	r2, r1
 8012d92:	fb91 f6f7 	sdiv	r6, r1, r7
 8012d96:	fb07 1516 	mls	r5, r7, r6, r1
 8012d9a:	3530      	adds	r5, #48	; 0x30
 8012d9c:	2a63      	cmp	r2, #99	; 0x63
 8012d9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012da2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012da6:	4631      	mov	r1, r6
 8012da8:	dcf1      	bgt.n	8012d8e <__exponent+0x22>
 8012daa:	3130      	adds	r1, #48	; 0x30
 8012dac:	f1ae 0502 	sub.w	r5, lr, #2
 8012db0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012db4:	1c44      	adds	r4, r0, #1
 8012db6:	4629      	mov	r1, r5
 8012db8:	4561      	cmp	r1, ip
 8012dba:	d30a      	bcc.n	8012dd2 <__exponent+0x66>
 8012dbc:	f10d 0209 	add.w	r2, sp, #9
 8012dc0:	eba2 020e 	sub.w	r2, r2, lr
 8012dc4:	4565      	cmp	r5, ip
 8012dc6:	bf88      	it	hi
 8012dc8:	2200      	movhi	r2, #0
 8012dca:	4413      	add	r3, r2
 8012dcc:	1a18      	subs	r0, r3, r0
 8012dce:	b003      	add	sp, #12
 8012dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012dd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012dda:	e7ed      	b.n	8012db8 <__exponent+0x4c>
 8012ddc:	2330      	movs	r3, #48	; 0x30
 8012dde:	3130      	adds	r1, #48	; 0x30
 8012de0:	7083      	strb	r3, [r0, #2]
 8012de2:	70c1      	strb	r1, [r0, #3]
 8012de4:	1d03      	adds	r3, r0, #4
 8012de6:	e7f1      	b.n	8012dcc <__exponent+0x60>

08012de8 <_printf_float>:
 8012de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dec:	b091      	sub	sp, #68	; 0x44
 8012dee:	460c      	mov	r4, r1
 8012df0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012df4:	4616      	mov	r6, r2
 8012df6:	461f      	mov	r7, r3
 8012df8:	4605      	mov	r5, r0
 8012dfa:	f002 ff49 	bl	8015c90 <_localeconv_r>
 8012dfe:	6803      	ldr	r3, [r0, #0]
 8012e00:	9309      	str	r3, [sp, #36]	; 0x24
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7ed f9bc 	bl	8000180 <strlen>
 8012e08:	2300      	movs	r3, #0
 8012e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8012e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8012e10:	900a      	str	r0, [sp, #40]	; 0x28
 8012e12:	3307      	adds	r3, #7
 8012e14:	f023 0307 	bic.w	r3, r3, #7
 8012e18:	f103 0208 	add.w	r2, r3, #8
 8012e1c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012e20:	f8d4 b000 	ldr.w	fp, [r4]
 8012e24:	f8c8 2000 	str.w	r2, [r8]
 8012e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012e30:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8012e34:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8012e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8012e3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012e3c:	4b9c      	ldr	r3, [pc, #624]	; (80130b0 <_printf_float+0x2c8>)
 8012e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e42:	4640      	mov	r0, r8
 8012e44:	f7ed fefe 	bl	8000c44 <__aeabi_dcmpun>
 8012e48:	bb70      	cbnz	r0, 8012ea8 <_printf_float+0xc0>
 8012e4a:	4b99      	ldr	r3, [pc, #612]	; (80130b0 <_printf_float+0x2c8>)
 8012e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e52:	4640      	mov	r0, r8
 8012e54:	f7ed fed8 	bl	8000c08 <__aeabi_dcmple>
 8012e58:	bb30      	cbnz	r0, 8012ea8 <_printf_float+0xc0>
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	4640      	mov	r0, r8
 8012e60:	4651      	mov	r1, sl
 8012e62:	f7ed fec7 	bl	8000bf4 <__aeabi_dcmplt>
 8012e66:	b110      	cbz	r0, 8012e6e <_printf_float+0x86>
 8012e68:	232d      	movs	r3, #45	; 0x2d
 8012e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e6e:	4b91      	ldr	r3, [pc, #580]	; (80130b4 <_printf_float+0x2cc>)
 8012e70:	4891      	ldr	r0, [pc, #580]	; (80130b8 <_printf_float+0x2d0>)
 8012e72:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012e76:	bf94      	ite	ls
 8012e78:	4698      	movls	r8, r3
 8012e7a:	4680      	movhi	r8, r0
 8012e7c:	2303      	movs	r3, #3
 8012e7e:	6123      	str	r3, [r4, #16]
 8012e80:	f02b 0304 	bic.w	r3, fp, #4
 8012e84:	6023      	str	r3, [r4, #0]
 8012e86:	f04f 0a00 	mov.w	sl, #0
 8012e8a:	9700      	str	r7, [sp, #0]
 8012e8c:	4633      	mov	r3, r6
 8012e8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8012e90:	4621      	mov	r1, r4
 8012e92:	4628      	mov	r0, r5
 8012e94:	f000 f9d2 	bl	801323c <_printf_common>
 8012e98:	3001      	adds	r0, #1
 8012e9a:	f040 808f 	bne.w	8012fbc <_printf_float+0x1d4>
 8012e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8012ea2:	b011      	add	sp, #68	; 0x44
 8012ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea8:	4642      	mov	r2, r8
 8012eaa:	4653      	mov	r3, sl
 8012eac:	4640      	mov	r0, r8
 8012eae:	4651      	mov	r1, sl
 8012eb0:	f7ed fec8 	bl	8000c44 <__aeabi_dcmpun>
 8012eb4:	b140      	cbz	r0, 8012ec8 <_printf_float+0xe0>
 8012eb6:	f1ba 0f00 	cmp.w	sl, #0
 8012eba:	bfbc      	itt	lt
 8012ebc:	232d      	movlt	r3, #45	; 0x2d
 8012ebe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012ec2:	487e      	ldr	r0, [pc, #504]	; (80130bc <_printf_float+0x2d4>)
 8012ec4:	4b7e      	ldr	r3, [pc, #504]	; (80130c0 <_printf_float+0x2d8>)
 8012ec6:	e7d4      	b.n	8012e72 <_printf_float+0x8a>
 8012ec8:	6863      	ldr	r3, [r4, #4]
 8012eca:	1c5a      	adds	r2, r3, #1
 8012ecc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012ed0:	d142      	bne.n	8012f58 <_printf_float+0x170>
 8012ed2:	2306      	movs	r3, #6
 8012ed4:	6063      	str	r3, [r4, #4]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	9206      	str	r2, [sp, #24]
 8012eda:	aa0e      	add	r2, sp, #56	; 0x38
 8012edc:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8012ee0:	aa0d      	add	r2, sp, #52	; 0x34
 8012ee2:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8012ee6:	9203      	str	r2, [sp, #12]
 8012ee8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8012eec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012ef0:	6023      	str	r3, [r4, #0]
 8012ef2:	6863      	ldr	r3, [r4, #4]
 8012ef4:	9300      	str	r3, [sp, #0]
 8012ef6:	4642      	mov	r2, r8
 8012ef8:	4653      	mov	r3, sl
 8012efa:	4628      	mov	r0, r5
 8012efc:	910b      	str	r1, [sp, #44]	; 0x2c
 8012efe:	f7ff fed5 	bl	8012cac <__cvt>
 8012f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012f04:	2947      	cmp	r1, #71	; 0x47
 8012f06:	4680      	mov	r8, r0
 8012f08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012f0a:	d108      	bne.n	8012f1e <_printf_float+0x136>
 8012f0c:	1cc8      	adds	r0, r1, #3
 8012f0e:	db02      	blt.n	8012f16 <_printf_float+0x12e>
 8012f10:	6863      	ldr	r3, [r4, #4]
 8012f12:	4299      	cmp	r1, r3
 8012f14:	dd40      	ble.n	8012f98 <_printf_float+0x1b0>
 8012f16:	f1a9 0902 	sub.w	r9, r9, #2
 8012f1a:	fa5f f989 	uxtb.w	r9, r9
 8012f1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012f22:	d81f      	bhi.n	8012f64 <_printf_float+0x17c>
 8012f24:	3901      	subs	r1, #1
 8012f26:	464a      	mov	r2, r9
 8012f28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012f2c:	910d      	str	r1, [sp, #52]	; 0x34
 8012f2e:	f7ff ff1d 	bl	8012d6c <__exponent>
 8012f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f34:	1813      	adds	r3, r2, r0
 8012f36:	2a01      	cmp	r2, #1
 8012f38:	4682      	mov	sl, r0
 8012f3a:	6123      	str	r3, [r4, #16]
 8012f3c:	dc02      	bgt.n	8012f44 <_printf_float+0x15c>
 8012f3e:	6822      	ldr	r2, [r4, #0]
 8012f40:	07d2      	lsls	r2, r2, #31
 8012f42:	d501      	bpl.n	8012f48 <_printf_float+0x160>
 8012f44:	3301      	adds	r3, #1
 8012f46:	6123      	str	r3, [r4, #16]
 8012f48:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d09c      	beq.n	8012e8a <_printf_float+0xa2>
 8012f50:	232d      	movs	r3, #45	; 0x2d
 8012f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f56:	e798      	b.n	8012e8a <_printf_float+0xa2>
 8012f58:	2947      	cmp	r1, #71	; 0x47
 8012f5a:	d1bc      	bne.n	8012ed6 <_printf_float+0xee>
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d1ba      	bne.n	8012ed6 <_printf_float+0xee>
 8012f60:	2301      	movs	r3, #1
 8012f62:	e7b7      	b.n	8012ed4 <_printf_float+0xec>
 8012f64:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012f68:	d118      	bne.n	8012f9c <_printf_float+0x1b4>
 8012f6a:	2900      	cmp	r1, #0
 8012f6c:	6863      	ldr	r3, [r4, #4]
 8012f6e:	dd0b      	ble.n	8012f88 <_printf_float+0x1a0>
 8012f70:	6121      	str	r1, [r4, #16]
 8012f72:	b913      	cbnz	r3, 8012f7a <_printf_float+0x192>
 8012f74:	6822      	ldr	r2, [r4, #0]
 8012f76:	07d0      	lsls	r0, r2, #31
 8012f78:	d502      	bpl.n	8012f80 <_printf_float+0x198>
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	440b      	add	r3, r1
 8012f7e:	6123      	str	r3, [r4, #16]
 8012f80:	65a1      	str	r1, [r4, #88]	; 0x58
 8012f82:	f04f 0a00 	mov.w	sl, #0
 8012f86:	e7df      	b.n	8012f48 <_printf_float+0x160>
 8012f88:	b913      	cbnz	r3, 8012f90 <_printf_float+0x1a8>
 8012f8a:	6822      	ldr	r2, [r4, #0]
 8012f8c:	07d2      	lsls	r2, r2, #31
 8012f8e:	d501      	bpl.n	8012f94 <_printf_float+0x1ac>
 8012f90:	3302      	adds	r3, #2
 8012f92:	e7f4      	b.n	8012f7e <_printf_float+0x196>
 8012f94:	2301      	movs	r3, #1
 8012f96:	e7f2      	b.n	8012f7e <_printf_float+0x196>
 8012f98:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f9e:	4299      	cmp	r1, r3
 8012fa0:	db05      	blt.n	8012fae <_printf_float+0x1c6>
 8012fa2:	6823      	ldr	r3, [r4, #0]
 8012fa4:	6121      	str	r1, [r4, #16]
 8012fa6:	07d8      	lsls	r0, r3, #31
 8012fa8:	d5ea      	bpl.n	8012f80 <_printf_float+0x198>
 8012faa:	1c4b      	adds	r3, r1, #1
 8012fac:	e7e7      	b.n	8012f7e <_printf_float+0x196>
 8012fae:	2900      	cmp	r1, #0
 8012fb0:	bfd4      	ite	le
 8012fb2:	f1c1 0202 	rsble	r2, r1, #2
 8012fb6:	2201      	movgt	r2, #1
 8012fb8:	4413      	add	r3, r2
 8012fba:	e7e0      	b.n	8012f7e <_printf_float+0x196>
 8012fbc:	6823      	ldr	r3, [r4, #0]
 8012fbe:	055a      	lsls	r2, r3, #21
 8012fc0:	d407      	bmi.n	8012fd2 <_printf_float+0x1ea>
 8012fc2:	6923      	ldr	r3, [r4, #16]
 8012fc4:	4642      	mov	r2, r8
 8012fc6:	4631      	mov	r1, r6
 8012fc8:	4628      	mov	r0, r5
 8012fca:	47b8      	blx	r7
 8012fcc:	3001      	adds	r0, #1
 8012fce:	d12b      	bne.n	8013028 <_printf_float+0x240>
 8012fd0:	e765      	b.n	8012e9e <_printf_float+0xb6>
 8012fd2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012fd6:	f240 80dc 	bls.w	8013192 <_printf_float+0x3aa>
 8012fda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012fde:	2200      	movs	r2, #0
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	f7ed fdfd 	bl	8000be0 <__aeabi_dcmpeq>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d033      	beq.n	8013052 <_printf_float+0x26a>
 8012fea:	4a36      	ldr	r2, [pc, #216]	; (80130c4 <_printf_float+0x2dc>)
 8012fec:	2301      	movs	r3, #1
 8012fee:	4631      	mov	r1, r6
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	47b8      	blx	r7
 8012ff4:	3001      	adds	r0, #1
 8012ff6:	f43f af52 	beq.w	8012e9e <_printf_float+0xb6>
 8012ffa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012ffe:	429a      	cmp	r2, r3
 8013000:	db02      	blt.n	8013008 <_printf_float+0x220>
 8013002:	6823      	ldr	r3, [r4, #0]
 8013004:	07d8      	lsls	r0, r3, #31
 8013006:	d50f      	bpl.n	8013028 <_printf_float+0x240>
 8013008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801300c:	4631      	mov	r1, r6
 801300e:	4628      	mov	r0, r5
 8013010:	47b8      	blx	r7
 8013012:	3001      	adds	r0, #1
 8013014:	f43f af43 	beq.w	8012e9e <_printf_float+0xb6>
 8013018:	f04f 0800 	mov.w	r8, #0
 801301c:	f104 091a 	add.w	r9, r4, #26
 8013020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013022:	3b01      	subs	r3, #1
 8013024:	4543      	cmp	r3, r8
 8013026:	dc09      	bgt.n	801303c <_printf_float+0x254>
 8013028:	6823      	ldr	r3, [r4, #0]
 801302a:	079b      	lsls	r3, r3, #30
 801302c:	f100 8101 	bmi.w	8013232 <_printf_float+0x44a>
 8013030:	68e0      	ldr	r0, [r4, #12]
 8013032:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013034:	4298      	cmp	r0, r3
 8013036:	bfb8      	it	lt
 8013038:	4618      	movlt	r0, r3
 801303a:	e732      	b.n	8012ea2 <_printf_float+0xba>
 801303c:	2301      	movs	r3, #1
 801303e:	464a      	mov	r2, r9
 8013040:	4631      	mov	r1, r6
 8013042:	4628      	mov	r0, r5
 8013044:	47b8      	blx	r7
 8013046:	3001      	adds	r0, #1
 8013048:	f43f af29 	beq.w	8012e9e <_printf_float+0xb6>
 801304c:	f108 0801 	add.w	r8, r8, #1
 8013050:	e7e6      	b.n	8013020 <_printf_float+0x238>
 8013052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013054:	2b00      	cmp	r3, #0
 8013056:	dc37      	bgt.n	80130c8 <_printf_float+0x2e0>
 8013058:	4a1a      	ldr	r2, [pc, #104]	; (80130c4 <_printf_float+0x2dc>)
 801305a:	2301      	movs	r3, #1
 801305c:	4631      	mov	r1, r6
 801305e:	4628      	mov	r0, r5
 8013060:	47b8      	blx	r7
 8013062:	3001      	adds	r0, #1
 8013064:	f43f af1b 	beq.w	8012e9e <_printf_float+0xb6>
 8013068:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801306c:	4313      	orrs	r3, r2
 801306e:	d102      	bne.n	8013076 <_printf_float+0x28e>
 8013070:	6823      	ldr	r3, [r4, #0]
 8013072:	07d9      	lsls	r1, r3, #31
 8013074:	d5d8      	bpl.n	8013028 <_printf_float+0x240>
 8013076:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801307a:	4631      	mov	r1, r6
 801307c:	4628      	mov	r0, r5
 801307e:	47b8      	blx	r7
 8013080:	3001      	adds	r0, #1
 8013082:	f43f af0c 	beq.w	8012e9e <_printf_float+0xb6>
 8013086:	f04f 0900 	mov.w	r9, #0
 801308a:	f104 0a1a 	add.w	sl, r4, #26
 801308e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013090:	425b      	negs	r3, r3
 8013092:	454b      	cmp	r3, r9
 8013094:	dc01      	bgt.n	801309a <_printf_float+0x2b2>
 8013096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013098:	e794      	b.n	8012fc4 <_printf_float+0x1dc>
 801309a:	2301      	movs	r3, #1
 801309c:	4652      	mov	r2, sl
 801309e:	4631      	mov	r1, r6
 80130a0:	4628      	mov	r0, r5
 80130a2:	47b8      	blx	r7
 80130a4:	3001      	adds	r0, #1
 80130a6:	f43f aefa 	beq.w	8012e9e <_printf_float+0xb6>
 80130aa:	f109 0901 	add.w	r9, r9, #1
 80130ae:	e7ee      	b.n	801308e <_printf_float+0x2a6>
 80130b0:	7fefffff 	.word	0x7fefffff
 80130b4:	08018fdc 	.word	0x08018fdc
 80130b8:	08018fe0 	.word	0x08018fe0
 80130bc:	08018fe8 	.word	0x08018fe8
 80130c0:	08018fe4 	.word	0x08018fe4
 80130c4:	080193e1 	.word	0x080193e1
 80130c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80130ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80130cc:	429a      	cmp	r2, r3
 80130ce:	bfa8      	it	ge
 80130d0:	461a      	movge	r2, r3
 80130d2:	2a00      	cmp	r2, #0
 80130d4:	4691      	mov	r9, r2
 80130d6:	dc37      	bgt.n	8013148 <_printf_float+0x360>
 80130d8:	f04f 0b00 	mov.w	fp, #0
 80130dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80130e0:	f104 021a 	add.w	r2, r4, #26
 80130e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80130e8:	ebaa 0309 	sub.w	r3, sl, r9
 80130ec:	455b      	cmp	r3, fp
 80130ee:	dc33      	bgt.n	8013158 <_printf_float+0x370>
 80130f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80130f4:	429a      	cmp	r2, r3
 80130f6:	db3b      	blt.n	8013170 <_printf_float+0x388>
 80130f8:	6823      	ldr	r3, [r4, #0]
 80130fa:	07da      	lsls	r2, r3, #31
 80130fc:	d438      	bmi.n	8013170 <_printf_float+0x388>
 80130fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013100:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013102:	eba3 020a 	sub.w	r2, r3, sl
 8013106:	eba3 0901 	sub.w	r9, r3, r1
 801310a:	4591      	cmp	r9, r2
 801310c:	bfa8      	it	ge
 801310e:	4691      	movge	r9, r2
 8013110:	f1b9 0f00 	cmp.w	r9, #0
 8013114:	dc34      	bgt.n	8013180 <_printf_float+0x398>
 8013116:	f04f 0800 	mov.w	r8, #0
 801311a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801311e:	f104 0a1a 	add.w	sl, r4, #26
 8013122:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013126:	1a9b      	subs	r3, r3, r2
 8013128:	eba3 0309 	sub.w	r3, r3, r9
 801312c:	4543      	cmp	r3, r8
 801312e:	f77f af7b 	ble.w	8013028 <_printf_float+0x240>
 8013132:	2301      	movs	r3, #1
 8013134:	4652      	mov	r2, sl
 8013136:	4631      	mov	r1, r6
 8013138:	4628      	mov	r0, r5
 801313a:	47b8      	blx	r7
 801313c:	3001      	adds	r0, #1
 801313e:	f43f aeae 	beq.w	8012e9e <_printf_float+0xb6>
 8013142:	f108 0801 	add.w	r8, r8, #1
 8013146:	e7ec      	b.n	8013122 <_printf_float+0x33a>
 8013148:	4613      	mov	r3, r2
 801314a:	4631      	mov	r1, r6
 801314c:	4642      	mov	r2, r8
 801314e:	4628      	mov	r0, r5
 8013150:	47b8      	blx	r7
 8013152:	3001      	adds	r0, #1
 8013154:	d1c0      	bne.n	80130d8 <_printf_float+0x2f0>
 8013156:	e6a2      	b.n	8012e9e <_printf_float+0xb6>
 8013158:	2301      	movs	r3, #1
 801315a:	4631      	mov	r1, r6
 801315c:	4628      	mov	r0, r5
 801315e:	920b      	str	r2, [sp, #44]	; 0x2c
 8013160:	47b8      	blx	r7
 8013162:	3001      	adds	r0, #1
 8013164:	f43f ae9b 	beq.w	8012e9e <_printf_float+0xb6>
 8013168:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801316a:	f10b 0b01 	add.w	fp, fp, #1
 801316e:	e7b9      	b.n	80130e4 <_printf_float+0x2fc>
 8013170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013174:	4631      	mov	r1, r6
 8013176:	4628      	mov	r0, r5
 8013178:	47b8      	blx	r7
 801317a:	3001      	adds	r0, #1
 801317c:	d1bf      	bne.n	80130fe <_printf_float+0x316>
 801317e:	e68e      	b.n	8012e9e <_printf_float+0xb6>
 8013180:	464b      	mov	r3, r9
 8013182:	eb08 020a 	add.w	r2, r8, sl
 8013186:	4631      	mov	r1, r6
 8013188:	4628      	mov	r0, r5
 801318a:	47b8      	blx	r7
 801318c:	3001      	adds	r0, #1
 801318e:	d1c2      	bne.n	8013116 <_printf_float+0x32e>
 8013190:	e685      	b.n	8012e9e <_printf_float+0xb6>
 8013192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013194:	2a01      	cmp	r2, #1
 8013196:	dc01      	bgt.n	801319c <_printf_float+0x3b4>
 8013198:	07db      	lsls	r3, r3, #31
 801319a:	d537      	bpl.n	801320c <_printf_float+0x424>
 801319c:	2301      	movs	r3, #1
 801319e:	4642      	mov	r2, r8
 80131a0:	4631      	mov	r1, r6
 80131a2:	4628      	mov	r0, r5
 80131a4:	47b8      	blx	r7
 80131a6:	3001      	adds	r0, #1
 80131a8:	f43f ae79 	beq.w	8012e9e <_printf_float+0xb6>
 80131ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80131b0:	4631      	mov	r1, r6
 80131b2:	4628      	mov	r0, r5
 80131b4:	47b8      	blx	r7
 80131b6:	3001      	adds	r0, #1
 80131b8:	f43f ae71 	beq.w	8012e9e <_printf_float+0xb6>
 80131bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80131c0:	2200      	movs	r2, #0
 80131c2:	2300      	movs	r3, #0
 80131c4:	f7ed fd0c 	bl	8000be0 <__aeabi_dcmpeq>
 80131c8:	b9d8      	cbnz	r0, 8013202 <_printf_float+0x41a>
 80131ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131cc:	f108 0201 	add.w	r2, r8, #1
 80131d0:	3b01      	subs	r3, #1
 80131d2:	4631      	mov	r1, r6
 80131d4:	4628      	mov	r0, r5
 80131d6:	47b8      	blx	r7
 80131d8:	3001      	adds	r0, #1
 80131da:	d10e      	bne.n	80131fa <_printf_float+0x412>
 80131dc:	e65f      	b.n	8012e9e <_printf_float+0xb6>
 80131de:	2301      	movs	r3, #1
 80131e0:	464a      	mov	r2, r9
 80131e2:	4631      	mov	r1, r6
 80131e4:	4628      	mov	r0, r5
 80131e6:	47b8      	blx	r7
 80131e8:	3001      	adds	r0, #1
 80131ea:	f43f ae58 	beq.w	8012e9e <_printf_float+0xb6>
 80131ee:	f108 0801 	add.w	r8, r8, #1
 80131f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131f4:	3b01      	subs	r3, #1
 80131f6:	4543      	cmp	r3, r8
 80131f8:	dcf1      	bgt.n	80131de <_printf_float+0x3f6>
 80131fa:	4653      	mov	r3, sl
 80131fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013200:	e6e1      	b.n	8012fc6 <_printf_float+0x1de>
 8013202:	f04f 0800 	mov.w	r8, #0
 8013206:	f104 091a 	add.w	r9, r4, #26
 801320a:	e7f2      	b.n	80131f2 <_printf_float+0x40a>
 801320c:	2301      	movs	r3, #1
 801320e:	4642      	mov	r2, r8
 8013210:	e7df      	b.n	80131d2 <_printf_float+0x3ea>
 8013212:	2301      	movs	r3, #1
 8013214:	464a      	mov	r2, r9
 8013216:	4631      	mov	r1, r6
 8013218:	4628      	mov	r0, r5
 801321a:	47b8      	blx	r7
 801321c:	3001      	adds	r0, #1
 801321e:	f43f ae3e 	beq.w	8012e9e <_printf_float+0xb6>
 8013222:	f108 0801 	add.w	r8, r8, #1
 8013226:	68e3      	ldr	r3, [r4, #12]
 8013228:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801322a:	1a5b      	subs	r3, r3, r1
 801322c:	4543      	cmp	r3, r8
 801322e:	dcf0      	bgt.n	8013212 <_printf_float+0x42a>
 8013230:	e6fe      	b.n	8013030 <_printf_float+0x248>
 8013232:	f04f 0800 	mov.w	r8, #0
 8013236:	f104 0919 	add.w	r9, r4, #25
 801323a:	e7f4      	b.n	8013226 <_printf_float+0x43e>

0801323c <_printf_common>:
 801323c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013240:	4616      	mov	r6, r2
 8013242:	4699      	mov	r9, r3
 8013244:	688a      	ldr	r2, [r1, #8]
 8013246:	690b      	ldr	r3, [r1, #16]
 8013248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801324c:	4293      	cmp	r3, r2
 801324e:	bfb8      	it	lt
 8013250:	4613      	movlt	r3, r2
 8013252:	6033      	str	r3, [r6, #0]
 8013254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013258:	4607      	mov	r7, r0
 801325a:	460c      	mov	r4, r1
 801325c:	b10a      	cbz	r2, 8013262 <_printf_common+0x26>
 801325e:	3301      	adds	r3, #1
 8013260:	6033      	str	r3, [r6, #0]
 8013262:	6823      	ldr	r3, [r4, #0]
 8013264:	0699      	lsls	r1, r3, #26
 8013266:	bf42      	ittt	mi
 8013268:	6833      	ldrmi	r3, [r6, #0]
 801326a:	3302      	addmi	r3, #2
 801326c:	6033      	strmi	r3, [r6, #0]
 801326e:	6825      	ldr	r5, [r4, #0]
 8013270:	f015 0506 	ands.w	r5, r5, #6
 8013274:	d106      	bne.n	8013284 <_printf_common+0x48>
 8013276:	f104 0a19 	add.w	sl, r4, #25
 801327a:	68e3      	ldr	r3, [r4, #12]
 801327c:	6832      	ldr	r2, [r6, #0]
 801327e:	1a9b      	subs	r3, r3, r2
 8013280:	42ab      	cmp	r3, r5
 8013282:	dc26      	bgt.n	80132d2 <_printf_common+0x96>
 8013284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013288:	1e13      	subs	r3, r2, #0
 801328a:	6822      	ldr	r2, [r4, #0]
 801328c:	bf18      	it	ne
 801328e:	2301      	movne	r3, #1
 8013290:	0692      	lsls	r2, r2, #26
 8013292:	d42b      	bmi.n	80132ec <_printf_common+0xb0>
 8013294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013298:	4649      	mov	r1, r9
 801329a:	4638      	mov	r0, r7
 801329c:	47c0      	blx	r8
 801329e:	3001      	adds	r0, #1
 80132a0:	d01e      	beq.n	80132e0 <_printf_common+0xa4>
 80132a2:	6823      	ldr	r3, [r4, #0]
 80132a4:	68e5      	ldr	r5, [r4, #12]
 80132a6:	6832      	ldr	r2, [r6, #0]
 80132a8:	f003 0306 	and.w	r3, r3, #6
 80132ac:	2b04      	cmp	r3, #4
 80132ae:	bf08      	it	eq
 80132b0:	1aad      	subeq	r5, r5, r2
 80132b2:	68a3      	ldr	r3, [r4, #8]
 80132b4:	6922      	ldr	r2, [r4, #16]
 80132b6:	bf0c      	ite	eq
 80132b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80132bc:	2500      	movne	r5, #0
 80132be:	4293      	cmp	r3, r2
 80132c0:	bfc4      	itt	gt
 80132c2:	1a9b      	subgt	r3, r3, r2
 80132c4:	18ed      	addgt	r5, r5, r3
 80132c6:	2600      	movs	r6, #0
 80132c8:	341a      	adds	r4, #26
 80132ca:	42b5      	cmp	r5, r6
 80132cc:	d11a      	bne.n	8013304 <_printf_common+0xc8>
 80132ce:	2000      	movs	r0, #0
 80132d0:	e008      	b.n	80132e4 <_printf_common+0xa8>
 80132d2:	2301      	movs	r3, #1
 80132d4:	4652      	mov	r2, sl
 80132d6:	4649      	mov	r1, r9
 80132d8:	4638      	mov	r0, r7
 80132da:	47c0      	blx	r8
 80132dc:	3001      	adds	r0, #1
 80132de:	d103      	bne.n	80132e8 <_printf_common+0xac>
 80132e0:	f04f 30ff 	mov.w	r0, #4294967295
 80132e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132e8:	3501      	adds	r5, #1
 80132ea:	e7c6      	b.n	801327a <_printf_common+0x3e>
 80132ec:	18e1      	adds	r1, r4, r3
 80132ee:	1c5a      	adds	r2, r3, #1
 80132f0:	2030      	movs	r0, #48	; 0x30
 80132f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80132f6:	4422      	add	r2, r4
 80132f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80132fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013300:	3302      	adds	r3, #2
 8013302:	e7c7      	b.n	8013294 <_printf_common+0x58>
 8013304:	2301      	movs	r3, #1
 8013306:	4622      	mov	r2, r4
 8013308:	4649      	mov	r1, r9
 801330a:	4638      	mov	r0, r7
 801330c:	47c0      	blx	r8
 801330e:	3001      	adds	r0, #1
 8013310:	d0e6      	beq.n	80132e0 <_printf_common+0xa4>
 8013312:	3601      	adds	r6, #1
 8013314:	e7d9      	b.n	80132ca <_printf_common+0x8e>
	...

08013318 <_printf_i>:
 8013318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801331c:	7e0f      	ldrb	r7, [r1, #24]
 801331e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013320:	2f78      	cmp	r7, #120	; 0x78
 8013322:	4691      	mov	r9, r2
 8013324:	4680      	mov	r8, r0
 8013326:	460c      	mov	r4, r1
 8013328:	469a      	mov	sl, r3
 801332a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801332e:	d807      	bhi.n	8013340 <_printf_i+0x28>
 8013330:	2f62      	cmp	r7, #98	; 0x62
 8013332:	d80a      	bhi.n	801334a <_printf_i+0x32>
 8013334:	2f00      	cmp	r7, #0
 8013336:	f000 80d8 	beq.w	80134ea <_printf_i+0x1d2>
 801333a:	2f58      	cmp	r7, #88	; 0x58
 801333c:	f000 80a3 	beq.w	8013486 <_printf_i+0x16e>
 8013340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013348:	e03a      	b.n	80133c0 <_printf_i+0xa8>
 801334a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801334e:	2b15      	cmp	r3, #21
 8013350:	d8f6      	bhi.n	8013340 <_printf_i+0x28>
 8013352:	a101      	add	r1, pc, #4	; (adr r1, 8013358 <_printf_i+0x40>)
 8013354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013358:	080133b1 	.word	0x080133b1
 801335c:	080133c5 	.word	0x080133c5
 8013360:	08013341 	.word	0x08013341
 8013364:	08013341 	.word	0x08013341
 8013368:	08013341 	.word	0x08013341
 801336c:	08013341 	.word	0x08013341
 8013370:	080133c5 	.word	0x080133c5
 8013374:	08013341 	.word	0x08013341
 8013378:	08013341 	.word	0x08013341
 801337c:	08013341 	.word	0x08013341
 8013380:	08013341 	.word	0x08013341
 8013384:	080134d1 	.word	0x080134d1
 8013388:	080133f5 	.word	0x080133f5
 801338c:	080134b3 	.word	0x080134b3
 8013390:	08013341 	.word	0x08013341
 8013394:	08013341 	.word	0x08013341
 8013398:	080134f3 	.word	0x080134f3
 801339c:	08013341 	.word	0x08013341
 80133a0:	080133f5 	.word	0x080133f5
 80133a4:	08013341 	.word	0x08013341
 80133a8:	08013341 	.word	0x08013341
 80133ac:	080134bb 	.word	0x080134bb
 80133b0:	682b      	ldr	r3, [r5, #0]
 80133b2:	1d1a      	adds	r2, r3, #4
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	602a      	str	r2, [r5, #0]
 80133b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80133c0:	2301      	movs	r3, #1
 80133c2:	e0a3      	b.n	801350c <_printf_i+0x1f4>
 80133c4:	6820      	ldr	r0, [r4, #0]
 80133c6:	6829      	ldr	r1, [r5, #0]
 80133c8:	0606      	lsls	r6, r0, #24
 80133ca:	f101 0304 	add.w	r3, r1, #4
 80133ce:	d50a      	bpl.n	80133e6 <_printf_i+0xce>
 80133d0:	680e      	ldr	r6, [r1, #0]
 80133d2:	602b      	str	r3, [r5, #0]
 80133d4:	2e00      	cmp	r6, #0
 80133d6:	da03      	bge.n	80133e0 <_printf_i+0xc8>
 80133d8:	232d      	movs	r3, #45	; 0x2d
 80133da:	4276      	negs	r6, r6
 80133dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133e0:	485e      	ldr	r0, [pc, #376]	; (801355c <_printf_i+0x244>)
 80133e2:	230a      	movs	r3, #10
 80133e4:	e019      	b.n	801341a <_printf_i+0x102>
 80133e6:	680e      	ldr	r6, [r1, #0]
 80133e8:	602b      	str	r3, [r5, #0]
 80133ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80133ee:	bf18      	it	ne
 80133f0:	b236      	sxthne	r6, r6
 80133f2:	e7ef      	b.n	80133d4 <_printf_i+0xbc>
 80133f4:	682b      	ldr	r3, [r5, #0]
 80133f6:	6820      	ldr	r0, [r4, #0]
 80133f8:	1d19      	adds	r1, r3, #4
 80133fa:	6029      	str	r1, [r5, #0]
 80133fc:	0601      	lsls	r1, r0, #24
 80133fe:	d501      	bpl.n	8013404 <_printf_i+0xec>
 8013400:	681e      	ldr	r6, [r3, #0]
 8013402:	e002      	b.n	801340a <_printf_i+0xf2>
 8013404:	0646      	lsls	r6, r0, #25
 8013406:	d5fb      	bpl.n	8013400 <_printf_i+0xe8>
 8013408:	881e      	ldrh	r6, [r3, #0]
 801340a:	4854      	ldr	r0, [pc, #336]	; (801355c <_printf_i+0x244>)
 801340c:	2f6f      	cmp	r7, #111	; 0x6f
 801340e:	bf0c      	ite	eq
 8013410:	2308      	moveq	r3, #8
 8013412:	230a      	movne	r3, #10
 8013414:	2100      	movs	r1, #0
 8013416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801341a:	6865      	ldr	r5, [r4, #4]
 801341c:	60a5      	str	r5, [r4, #8]
 801341e:	2d00      	cmp	r5, #0
 8013420:	bfa2      	ittt	ge
 8013422:	6821      	ldrge	r1, [r4, #0]
 8013424:	f021 0104 	bicge.w	r1, r1, #4
 8013428:	6021      	strge	r1, [r4, #0]
 801342a:	b90e      	cbnz	r6, 8013430 <_printf_i+0x118>
 801342c:	2d00      	cmp	r5, #0
 801342e:	d04d      	beq.n	80134cc <_printf_i+0x1b4>
 8013430:	4615      	mov	r5, r2
 8013432:	fbb6 f1f3 	udiv	r1, r6, r3
 8013436:	fb03 6711 	mls	r7, r3, r1, r6
 801343a:	5dc7      	ldrb	r7, [r0, r7]
 801343c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013440:	4637      	mov	r7, r6
 8013442:	42bb      	cmp	r3, r7
 8013444:	460e      	mov	r6, r1
 8013446:	d9f4      	bls.n	8013432 <_printf_i+0x11a>
 8013448:	2b08      	cmp	r3, #8
 801344a:	d10b      	bne.n	8013464 <_printf_i+0x14c>
 801344c:	6823      	ldr	r3, [r4, #0]
 801344e:	07de      	lsls	r6, r3, #31
 8013450:	d508      	bpl.n	8013464 <_printf_i+0x14c>
 8013452:	6923      	ldr	r3, [r4, #16]
 8013454:	6861      	ldr	r1, [r4, #4]
 8013456:	4299      	cmp	r1, r3
 8013458:	bfde      	ittt	le
 801345a:	2330      	movle	r3, #48	; 0x30
 801345c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013460:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013464:	1b52      	subs	r2, r2, r5
 8013466:	6122      	str	r2, [r4, #16]
 8013468:	f8cd a000 	str.w	sl, [sp]
 801346c:	464b      	mov	r3, r9
 801346e:	aa03      	add	r2, sp, #12
 8013470:	4621      	mov	r1, r4
 8013472:	4640      	mov	r0, r8
 8013474:	f7ff fee2 	bl	801323c <_printf_common>
 8013478:	3001      	adds	r0, #1
 801347a:	d14c      	bne.n	8013516 <_printf_i+0x1fe>
 801347c:	f04f 30ff 	mov.w	r0, #4294967295
 8013480:	b004      	add	sp, #16
 8013482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013486:	4835      	ldr	r0, [pc, #212]	; (801355c <_printf_i+0x244>)
 8013488:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801348c:	6829      	ldr	r1, [r5, #0]
 801348e:	6823      	ldr	r3, [r4, #0]
 8013490:	f851 6b04 	ldr.w	r6, [r1], #4
 8013494:	6029      	str	r1, [r5, #0]
 8013496:	061d      	lsls	r5, r3, #24
 8013498:	d514      	bpl.n	80134c4 <_printf_i+0x1ac>
 801349a:	07df      	lsls	r7, r3, #31
 801349c:	bf44      	itt	mi
 801349e:	f043 0320 	orrmi.w	r3, r3, #32
 80134a2:	6023      	strmi	r3, [r4, #0]
 80134a4:	b91e      	cbnz	r6, 80134ae <_printf_i+0x196>
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	f023 0320 	bic.w	r3, r3, #32
 80134ac:	6023      	str	r3, [r4, #0]
 80134ae:	2310      	movs	r3, #16
 80134b0:	e7b0      	b.n	8013414 <_printf_i+0xfc>
 80134b2:	6823      	ldr	r3, [r4, #0]
 80134b4:	f043 0320 	orr.w	r3, r3, #32
 80134b8:	6023      	str	r3, [r4, #0]
 80134ba:	2378      	movs	r3, #120	; 0x78
 80134bc:	4828      	ldr	r0, [pc, #160]	; (8013560 <_printf_i+0x248>)
 80134be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80134c2:	e7e3      	b.n	801348c <_printf_i+0x174>
 80134c4:	0659      	lsls	r1, r3, #25
 80134c6:	bf48      	it	mi
 80134c8:	b2b6      	uxthmi	r6, r6
 80134ca:	e7e6      	b.n	801349a <_printf_i+0x182>
 80134cc:	4615      	mov	r5, r2
 80134ce:	e7bb      	b.n	8013448 <_printf_i+0x130>
 80134d0:	682b      	ldr	r3, [r5, #0]
 80134d2:	6826      	ldr	r6, [r4, #0]
 80134d4:	6961      	ldr	r1, [r4, #20]
 80134d6:	1d18      	adds	r0, r3, #4
 80134d8:	6028      	str	r0, [r5, #0]
 80134da:	0635      	lsls	r5, r6, #24
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	d501      	bpl.n	80134e4 <_printf_i+0x1cc>
 80134e0:	6019      	str	r1, [r3, #0]
 80134e2:	e002      	b.n	80134ea <_printf_i+0x1d2>
 80134e4:	0670      	lsls	r0, r6, #25
 80134e6:	d5fb      	bpl.n	80134e0 <_printf_i+0x1c8>
 80134e8:	8019      	strh	r1, [r3, #0]
 80134ea:	2300      	movs	r3, #0
 80134ec:	6123      	str	r3, [r4, #16]
 80134ee:	4615      	mov	r5, r2
 80134f0:	e7ba      	b.n	8013468 <_printf_i+0x150>
 80134f2:	682b      	ldr	r3, [r5, #0]
 80134f4:	1d1a      	adds	r2, r3, #4
 80134f6:	602a      	str	r2, [r5, #0]
 80134f8:	681d      	ldr	r5, [r3, #0]
 80134fa:	6862      	ldr	r2, [r4, #4]
 80134fc:	2100      	movs	r1, #0
 80134fe:	4628      	mov	r0, r5
 8013500:	f7ec fe46 	bl	8000190 <memchr>
 8013504:	b108      	cbz	r0, 801350a <_printf_i+0x1f2>
 8013506:	1b40      	subs	r0, r0, r5
 8013508:	6060      	str	r0, [r4, #4]
 801350a:	6863      	ldr	r3, [r4, #4]
 801350c:	6123      	str	r3, [r4, #16]
 801350e:	2300      	movs	r3, #0
 8013510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013514:	e7a8      	b.n	8013468 <_printf_i+0x150>
 8013516:	6923      	ldr	r3, [r4, #16]
 8013518:	462a      	mov	r2, r5
 801351a:	4649      	mov	r1, r9
 801351c:	4640      	mov	r0, r8
 801351e:	47d0      	blx	sl
 8013520:	3001      	adds	r0, #1
 8013522:	d0ab      	beq.n	801347c <_printf_i+0x164>
 8013524:	6823      	ldr	r3, [r4, #0]
 8013526:	079b      	lsls	r3, r3, #30
 8013528:	d413      	bmi.n	8013552 <_printf_i+0x23a>
 801352a:	68e0      	ldr	r0, [r4, #12]
 801352c:	9b03      	ldr	r3, [sp, #12]
 801352e:	4298      	cmp	r0, r3
 8013530:	bfb8      	it	lt
 8013532:	4618      	movlt	r0, r3
 8013534:	e7a4      	b.n	8013480 <_printf_i+0x168>
 8013536:	2301      	movs	r3, #1
 8013538:	4632      	mov	r2, r6
 801353a:	4649      	mov	r1, r9
 801353c:	4640      	mov	r0, r8
 801353e:	47d0      	blx	sl
 8013540:	3001      	adds	r0, #1
 8013542:	d09b      	beq.n	801347c <_printf_i+0x164>
 8013544:	3501      	adds	r5, #1
 8013546:	68e3      	ldr	r3, [r4, #12]
 8013548:	9903      	ldr	r1, [sp, #12]
 801354a:	1a5b      	subs	r3, r3, r1
 801354c:	42ab      	cmp	r3, r5
 801354e:	dcf2      	bgt.n	8013536 <_printf_i+0x21e>
 8013550:	e7eb      	b.n	801352a <_printf_i+0x212>
 8013552:	2500      	movs	r5, #0
 8013554:	f104 0619 	add.w	r6, r4, #25
 8013558:	e7f5      	b.n	8013546 <_printf_i+0x22e>
 801355a:	bf00      	nop
 801355c:	08018fec 	.word	0x08018fec
 8013560:	08018ffd 	.word	0x08018ffd

08013564 <_scanf_float>:
 8013564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013568:	b087      	sub	sp, #28
 801356a:	4617      	mov	r7, r2
 801356c:	9303      	str	r3, [sp, #12]
 801356e:	688b      	ldr	r3, [r1, #8]
 8013570:	1e5a      	subs	r2, r3, #1
 8013572:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013576:	bf83      	ittte	hi
 8013578:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801357c:	195b      	addhi	r3, r3, r5
 801357e:	9302      	strhi	r3, [sp, #8]
 8013580:	2300      	movls	r3, #0
 8013582:	bf86      	itte	hi
 8013584:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013588:	608b      	strhi	r3, [r1, #8]
 801358a:	9302      	strls	r3, [sp, #8]
 801358c:	680b      	ldr	r3, [r1, #0]
 801358e:	468b      	mov	fp, r1
 8013590:	2500      	movs	r5, #0
 8013592:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013596:	f84b 3b1c 	str.w	r3, [fp], #28
 801359a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801359e:	4680      	mov	r8, r0
 80135a0:	460c      	mov	r4, r1
 80135a2:	465e      	mov	r6, fp
 80135a4:	46aa      	mov	sl, r5
 80135a6:	46a9      	mov	r9, r5
 80135a8:	9501      	str	r5, [sp, #4]
 80135aa:	68a2      	ldr	r2, [r4, #8]
 80135ac:	b152      	cbz	r2, 80135c4 <_scanf_float+0x60>
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	781b      	ldrb	r3, [r3, #0]
 80135b2:	2b4e      	cmp	r3, #78	; 0x4e
 80135b4:	d864      	bhi.n	8013680 <_scanf_float+0x11c>
 80135b6:	2b40      	cmp	r3, #64	; 0x40
 80135b8:	d83c      	bhi.n	8013634 <_scanf_float+0xd0>
 80135ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80135be:	b2c8      	uxtb	r0, r1
 80135c0:	280e      	cmp	r0, #14
 80135c2:	d93a      	bls.n	801363a <_scanf_float+0xd6>
 80135c4:	f1b9 0f00 	cmp.w	r9, #0
 80135c8:	d003      	beq.n	80135d2 <_scanf_float+0x6e>
 80135ca:	6823      	ldr	r3, [r4, #0]
 80135cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80135d0:	6023      	str	r3, [r4, #0]
 80135d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80135d6:	f1ba 0f01 	cmp.w	sl, #1
 80135da:	f200 8113 	bhi.w	8013804 <_scanf_float+0x2a0>
 80135de:	455e      	cmp	r6, fp
 80135e0:	f200 8105 	bhi.w	80137ee <_scanf_float+0x28a>
 80135e4:	2501      	movs	r5, #1
 80135e6:	4628      	mov	r0, r5
 80135e8:	b007      	add	sp, #28
 80135ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80135f2:	2a0d      	cmp	r2, #13
 80135f4:	d8e6      	bhi.n	80135c4 <_scanf_float+0x60>
 80135f6:	a101      	add	r1, pc, #4	; (adr r1, 80135fc <_scanf_float+0x98>)
 80135f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80135fc:	0801373b 	.word	0x0801373b
 8013600:	080135c5 	.word	0x080135c5
 8013604:	080135c5 	.word	0x080135c5
 8013608:	080135c5 	.word	0x080135c5
 801360c:	0801379b 	.word	0x0801379b
 8013610:	08013773 	.word	0x08013773
 8013614:	080135c5 	.word	0x080135c5
 8013618:	080135c5 	.word	0x080135c5
 801361c:	08013749 	.word	0x08013749
 8013620:	080135c5 	.word	0x080135c5
 8013624:	080135c5 	.word	0x080135c5
 8013628:	080135c5 	.word	0x080135c5
 801362c:	080135c5 	.word	0x080135c5
 8013630:	08013701 	.word	0x08013701
 8013634:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013638:	e7db      	b.n	80135f2 <_scanf_float+0x8e>
 801363a:	290e      	cmp	r1, #14
 801363c:	d8c2      	bhi.n	80135c4 <_scanf_float+0x60>
 801363e:	a001      	add	r0, pc, #4	; (adr r0, 8013644 <_scanf_float+0xe0>)
 8013640:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013644:	080136f3 	.word	0x080136f3
 8013648:	080135c5 	.word	0x080135c5
 801364c:	080136f3 	.word	0x080136f3
 8013650:	08013787 	.word	0x08013787
 8013654:	080135c5 	.word	0x080135c5
 8013658:	080136a1 	.word	0x080136a1
 801365c:	080136dd 	.word	0x080136dd
 8013660:	080136dd 	.word	0x080136dd
 8013664:	080136dd 	.word	0x080136dd
 8013668:	080136dd 	.word	0x080136dd
 801366c:	080136dd 	.word	0x080136dd
 8013670:	080136dd 	.word	0x080136dd
 8013674:	080136dd 	.word	0x080136dd
 8013678:	080136dd 	.word	0x080136dd
 801367c:	080136dd 	.word	0x080136dd
 8013680:	2b6e      	cmp	r3, #110	; 0x6e
 8013682:	d809      	bhi.n	8013698 <_scanf_float+0x134>
 8013684:	2b60      	cmp	r3, #96	; 0x60
 8013686:	d8b2      	bhi.n	80135ee <_scanf_float+0x8a>
 8013688:	2b54      	cmp	r3, #84	; 0x54
 801368a:	d077      	beq.n	801377c <_scanf_float+0x218>
 801368c:	2b59      	cmp	r3, #89	; 0x59
 801368e:	d199      	bne.n	80135c4 <_scanf_float+0x60>
 8013690:	2d07      	cmp	r5, #7
 8013692:	d197      	bne.n	80135c4 <_scanf_float+0x60>
 8013694:	2508      	movs	r5, #8
 8013696:	e029      	b.n	80136ec <_scanf_float+0x188>
 8013698:	2b74      	cmp	r3, #116	; 0x74
 801369a:	d06f      	beq.n	801377c <_scanf_float+0x218>
 801369c:	2b79      	cmp	r3, #121	; 0x79
 801369e:	e7f6      	b.n	801368e <_scanf_float+0x12a>
 80136a0:	6821      	ldr	r1, [r4, #0]
 80136a2:	05c8      	lsls	r0, r1, #23
 80136a4:	d51a      	bpl.n	80136dc <_scanf_float+0x178>
 80136a6:	9b02      	ldr	r3, [sp, #8]
 80136a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80136ac:	6021      	str	r1, [r4, #0]
 80136ae:	f109 0901 	add.w	r9, r9, #1
 80136b2:	b11b      	cbz	r3, 80136bc <_scanf_float+0x158>
 80136b4:	3b01      	subs	r3, #1
 80136b6:	3201      	adds	r2, #1
 80136b8:	9302      	str	r3, [sp, #8]
 80136ba:	60a2      	str	r2, [r4, #8]
 80136bc:	68a3      	ldr	r3, [r4, #8]
 80136be:	3b01      	subs	r3, #1
 80136c0:	60a3      	str	r3, [r4, #8]
 80136c2:	6923      	ldr	r3, [r4, #16]
 80136c4:	3301      	adds	r3, #1
 80136c6:	6123      	str	r3, [r4, #16]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	3b01      	subs	r3, #1
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	607b      	str	r3, [r7, #4]
 80136d0:	f340 8084 	ble.w	80137dc <_scanf_float+0x278>
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	3301      	adds	r3, #1
 80136d8:	603b      	str	r3, [r7, #0]
 80136da:	e766      	b.n	80135aa <_scanf_float+0x46>
 80136dc:	eb1a 0f05 	cmn.w	sl, r5
 80136e0:	f47f af70 	bne.w	80135c4 <_scanf_float+0x60>
 80136e4:	6822      	ldr	r2, [r4, #0]
 80136e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80136ea:	6022      	str	r2, [r4, #0]
 80136ec:	f806 3b01 	strb.w	r3, [r6], #1
 80136f0:	e7e4      	b.n	80136bc <_scanf_float+0x158>
 80136f2:	6822      	ldr	r2, [r4, #0]
 80136f4:	0610      	lsls	r0, r2, #24
 80136f6:	f57f af65 	bpl.w	80135c4 <_scanf_float+0x60>
 80136fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80136fe:	e7f4      	b.n	80136ea <_scanf_float+0x186>
 8013700:	f1ba 0f00 	cmp.w	sl, #0
 8013704:	d10e      	bne.n	8013724 <_scanf_float+0x1c0>
 8013706:	f1b9 0f00 	cmp.w	r9, #0
 801370a:	d10e      	bne.n	801372a <_scanf_float+0x1c6>
 801370c:	6822      	ldr	r2, [r4, #0]
 801370e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013712:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013716:	d108      	bne.n	801372a <_scanf_float+0x1c6>
 8013718:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801371c:	6022      	str	r2, [r4, #0]
 801371e:	f04f 0a01 	mov.w	sl, #1
 8013722:	e7e3      	b.n	80136ec <_scanf_float+0x188>
 8013724:	f1ba 0f02 	cmp.w	sl, #2
 8013728:	d055      	beq.n	80137d6 <_scanf_float+0x272>
 801372a:	2d01      	cmp	r5, #1
 801372c:	d002      	beq.n	8013734 <_scanf_float+0x1d0>
 801372e:	2d04      	cmp	r5, #4
 8013730:	f47f af48 	bne.w	80135c4 <_scanf_float+0x60>
 8013734:	3501      	adds	r5, #1
 8013736:	b2ed      	uxtb	r5, r5
 8013738:	e7d8      	b.n	80136ec <_scanf_float+0x188>
 801373a:	f1ba 0f01 	cmp.w	sl, #1
 801373e:	f47f af41 	bne.w	80135c4 <_scanf_float+0x60>
 8013742:	f04f 0a02 	mov.w	sl, #2
 8013746:	e7d1      	b.n	80136ec <_scanf_float+0x188>
 8013748:	b97d      	cbnz	r5, 801376a <_scanf_float+0x206>
 801374a:	f1b9 0f00 	cmp.w	r9, #0
 801374e:	f47f af3c 	bne.w	80135ca <_scanf_float+0x66>
 8013752:	6822      	ldr	r2, [r4, #0]
 8013754:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013758:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801375c:	f47f af39 	bne.w	80135d2 <_scanf_float+0x6e>
 8013760:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013764:	6022      	str	r2, [r4, #0]
 8013766:	2501      	movs	r5, #1
 8013768:	e7c0      	b.n	80136ec <_scanf_float+0x188>
 801376a:	2d03      	cmp	r5, #3
 801376c:	d0e2      	beq.n	8013734 <_scanf_float+0x1d0>
 801376e:	2d05      	cmp	r5, #5
 8013770:	e7de      	b.n	8013730 <_scanf_float+0x1cc>
 8013772:	2d02      	cmp	r5, #2
 8013774:	f47f af26 	bne.w	80135c4 <_scanf_float+0x60>
 8013778:	2503      	movs	r5, #3
 801377a:	e7b7      	b.n	80136ec <_scanf_float+0x188>
 801377c:	2d06      	cmp	r5, #6
 801377e:	f47f af21 	bne.w	80135c4 <_scanf_float+0x60>
 8013782:	2507      	movs	r5, #7
 8013784:	e7b2      	b.n	80136ec <_scanf_float+0x188>
 8013786:	6822      	ldr	r2, [r4, #0]
 8013788:	0591      	lsls	r1, r2, #22
 801378a:	f57f af1b 	bpl.w	80135c4 <_scanf_float+0x60>
 801378e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013792:	6022      	str	r2, [r4, #0]
 8013794:	f8cd 9004 	str.w	r9, [sp, #4]
 8013798:	e7a8      	b.n	80136ec <_scanf_float+0x188>
 801379a:	6822      	ldr	r2, [r4, #0]
 801379c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80137a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80137a4:	d006      	beq.n	80137b4 <_scanf_float+0x250>
 80137a6:	0550      	lsls	r0, r2, #21
 80137a8:	f57f af0c 	bpl.w	80135c4 <_scanf_float+0x60>
 80137ac:	f1b9 0f00 	cmp.w	r9, #0
 80137b0:	f43f af0f 	beq.w	80135d2 <_scanf_float+0x6e>
 80137b4:	0591      	lsls	r1, r2, #22
 80137b6:	bf58      	it	pl
 80137b8:	9901      	ldrpl	r1, [sp, #4]
 80137ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80137be:	bf58      	it	pl
 80137c0:	eba9 0101 	subpl.w	r1, r9, r1
 80137c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80137c8:	bf58      	it	pl
 80137ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80137ce:	6022      	str	r2, [r4, #0]
 80137d0:	f04f 0900 	mov.w	r9, #0
 80137d4:	e78a      	b.n	80136ec <_scanf_float+0x188>
 80137d6:	f04f 0a03 	mov.w	sl, #3
 80137da:	e787      	b.n	80136ec <_scanf_float+0x188>
 80137dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80137e0:	4639      	mov	r1, r7
 80137e2:	4640      	mov	r0, r8
 80137e4:	4798      	blx	r3
 80137e6:	2800      	cmp	r0, #0
 80137e8:	f43f aedf 	beq.w	80135aa <_scanf_float+0x46>
 80137ec:	e6ea      	b.n	80135c4 <_scanf_float+0x60>
 80137ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80137f6:	463a      	mov	r2, r7
 80137f8:	4640      	mov	r0, r8
 80137fa:	4798      	blx	r3
 80137fc:	6923      	ldr	r3, [r4, #16]
 80137fe:	3b01      	subs	r3, #1
 8013800:	6123      	str	r3, [r4, #16]
 8013802:	e6ec      	b.n	80135de <_scanf_float+0x7a>
 8013804:	1e6b      	subs	r3, r5, #1
 8013806:	2b06      	cmp	r3, #6
 8013808:	d825      	bhi.n	8013856 <_scanf_float+0x2f2>
 801380a:	2d02      	cmp	r5, #2
 801380c:	d836      	bhi.n	801387c <_scanf_float+0x318>
 801380e:	455e      	cmp	r6, fp
 8013810:	f67f aee8 	bls.w	80135e4 <_scanf_float+0x80>
 8013814:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013818:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801381c:	463a      	mov	r2, r7
 801381e:	4640      	mov	r0, r8
 8013820:	4798      	blx	r3
 8013822:	6923      	ldr	r3, [r4, #16]
 8013824:	3b01      	subs	r3, #1
 8013826:	6123      	str	r3, [r4, #16]
 8013828:	e7f1      	b.n	801380e <_scanf_float+0x2aa>
 801382a:	9802      	ldr	r0, [sp, #8]
 801382c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013830:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013834:	9002      	str	r0, [sp, #8]
 8013836:	463a      	mov	r2, r7
 8013838:	4640      	mov	r0, r8
 801383a:	4798      	blx	r3
 801383c:	6923      	ldr	r3, [r4, #16]
 801383e:	3b01      	subs	r3, #1
 8013840:	6123      	str	r3, [r4, #16]
 8013842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013846:	fa5f fa8a 	uxtb.w	sl, sl
 801384a:	f1ba 0f02 	cmp.w	sl, #2
 801384e:	d1ec      	bne.n	801382a <_scanf_float+0x2c6>
 8013850:	3d03      	subs	r5, #3
 8013852:	b2ed      	uxtb	r5, r5
 8013854:	1b76      	subs	r6, r6, r5
 8013856:	6823      	ldr	r3, [r4, #0]
 8013858:	05da      	lsls	r2, r3, #23
 801385a:	d52f      	bpl.n	80138bc <_scanf_float+0x358>
 801385c:	055b      	lsls	r3, r3, #21
 801385e:	d510      	bpl.n	8013882 <_scanf_float+0x31e>
 8013860:	455e      	cmp	r6, fp
 8013862:	f67f aebf 	bls.w	80135e4 <_scanf_float+0x80>
 8013866:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801386a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801386e:	463a      	mov	r2, r7
 8013870:	4640      	mov	r0, r8
 8013872:	4798      	blx	r3
 8013874:	6923      	ldr	r3, [r4, #16]
 8013876:	3b01      	subs	r3, #1
 8013878:	6123      	str	r3, [r4, #16]
 801387a:	e7f1      	b.n	8013860 <_scanf_float+0x2fc>
 801387c:	46aa      	mov	sl, r5
 801387e:	9602      	str	r6, [sp, #8]
 8013880:	e7df      	b.n	8013842 <_scanf_float+0x2de>
 8013882:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013886:	6923      	ldr	r3, [r4, #16]
 8013888:	2965      	cmp	r1, #101	; 0x65
 801388a:	f103 33ff 	add.w	r3, r3, #4294967295
 801388e:	f106 35ff 	add.w	r5, r6, #4294967295
 8013892:	6123      	str	r3, [r4, #16]
 8013894:	d00c      	beq.n	80138b0 <_scanf_float+0x34c>
 8013896:	2945      	cmp	r1, #69	; 0x45
 8013898:	d00a      	beq.n	80138b0 <_scanf_float+0x34c>
 801389a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801389e:	463a      	mov	r2, r7
 80138a0:	4640      	mov	r0, r8
 80138a2:	4798      	blx	r3
 80138a4:	6923      	ldr	r3, [r4, #16]
 80138a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80138aa:	3b01      	subs	r3, #1
 80138ac:	1eb5      	subs	r5, r6, #2
 80138ae:	6123      	str	r3, [r4, #16]
 80138b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80138b4:	463a      	mov	r2, r7
 80138b6:	4640      	mov	r0, r8
 80138b8:	4798      	blx	r3
 80138ba:	462e      	mov	r6, r5
 80138bc:	6825      	ldr	r5, [r4, #0]
 80138be:	f015 0510 	ands.w	r5, r5, #16
 80138c2:	d155      	bne.n	8013970 <_scanf_float+0x40c>
 80138c4:	7035      	strb	r5, [r6, #0]
 80138c6:	6823      	ldr	r3, [r4, #0]
 80138c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80138cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80138d0:	d11b      	bne.n	801390a <_scanf_float+0x3a6>
 80138d2:	9b01      	ldr	r3, [sp, #4]
 80138d4:	454b      	cmp	r3, r9
 80138d6:	eba3 0209 	sub.w	r2, r3, r9
 80138da:	d123      	bne.n	8013924 <_scanf_float+0x3c0>
 80138dc:	2200      	movs	r2, #0
 80138de:	4659      	mov	r1, fp
 80138e0:	4640      	mov	r0, r8
 80138e2:	f000 ff51 	bl	8014788 <_strtod_r>
 80138e6:	6822      	ldr	r2, [r4, #0]
 80138e8:	9b03      	ldr	r3, [sp, #12]
 80138ea:	f012 0f02 	tst.w	r2, #2
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	4606      	mov	r6, r0
 80138f2:	460f      	mov	r7, r1
 80138f4:	d021      	beq.n	801393a <_scanf_float+0x3d6>
 80138f6:	1d1a      	adds	r2, r3, #4
 80138f8:	9903      	ldr	r1, [sp, #12]
 80138fa:	600a      	str	r2, [r1, #0]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	e9c3 6700 	strd	r6, r7, [r3]
 8013902:	68e3      	ldr	r3, [r4, #12]
 8013904:	3301      	adds	r3, #1
 8013906:	60e3      	str	r3, [r4, #12]
 8013908:	e66d      	b.n	80135e6 <_scanf_float+0x82>
 801390a:	9b04      	ldr	r3, [sp, #16]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d0e5      	beq.n	80138dc <_scanf_float+0x378>
 8013910:	9905      	ldr	r1, [sp, #20]
 8013912:	230a      	movs	r3, #10
 8013914:	462a      	mov	r2, r5
 8013916:	3101      	adds	r1, #1
 8013918:	4640      	mov	r0, r8
 801391a:	f000 ffb7 	bl	801488c <_strtol_r>
 801391e:	9b04      	ldr	r3, [sp, #16]
 8013920:	9e05      	ldr	r6, [sp, #20]
 8013922:	1ac2      	subs	r2, r0, r3
 8013924:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013928:	429e      	cmp	r6, r3
 801392a:	bf28      	it	cs
 801392c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013930:	4910      	ldr	r1, [pc, #64]	; (8013974 <_scanf_float+0x410>)
 8013932:	4630      	mov	r0, r6
 8013934:	f000 f85a 	bl	80139ec <siprintf>
 8013938:	e7d0      	b.n	80138dc <_scanf_float+0x378>
 801393a:	f012 0f04 	tst.w	r2, #4
 801393e:	f103 0204 	add.w	r2, r3, #4
 8013942:	d1d9      	bne.n	80138f8 <_scanf_float+0x394>
 8013944:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8013948:	f8cc 2000 	str.w	r2, [ip]
 801394c:	f8d3 8000 	ldr.w	r8, [r3]
 8013950:	4602      	mov	r2, r0
 8013952:	460b      	mov	r3, r1
 8013954:	f7ed f976 	bl	8000c44 <__aeabi_dcmpun>
 8013958:	b128      	cbz	r0, 8013966 <_scanf_float+0x402>
 801395a:	4807      	ldr	r0, [pc, #28]	; (8013978 <_scanf_float+0x414>)
 801395c:	f000 f80e 	bl	801397c <nanf>
 8013960:	f8c8 0000 	str.w	r0, [r8]
 8013964:	e7cd      	b.n	8013902 <_scanf_float+0x39e>
 8013966:	4630      	mov	r0, r6
 8013968:	4639      	mov	r1, r7
 801396a:	f7ed f9c9 	bl	8000d00 <__aeabi_d2f>
 801396e:	e7f7      	b.n	8013960 <_scanf_float+0x3fc>
 8013970:	2500      	movs	r5, #0
 8013972:	e638      	b.n	80135e6 <_scanf_float+0x82>
 8013974:	0801900e 	.word	0x0801900e
 8013978:	08019433 	.word	0x08019433

0801397c <nanf>:
 801397c:	4800      	ldr	r0, [pc, #0]	; (8013980 <nanf+0x4>)
 801397e:	4770      	bx	lr
 8013980:	7fc00000 	.word	0x7fc00000

08013984 <sniprintf>:
 8013984:	b40c      	push	{r2, r3}
 8013986:	b530      	push	{r4, r5, lr}
 8013988:	4b17      	ldr	r3, [pc, #92]	; (80139e8 <sniprintf+0x64>)
 801398a:	1e0c      	subs	r4, r1, #0
 801398c:	681d      	ldr	r5, [r3, #0]
 801398e:	b09d      	sub	sp, #116	; 0x74
 8013990:	da08      	bge.n	80139a4 <sniprintf+0x20>
 8013992:	238b      	movs	r3, #139	; 0x8b
 8013994:	602b      	str	r3, [r5, #0]
 8013996:	f04f 30ff 	mov.w	r0, #4294967295
 801399a:	b01d      	add	sp, #116	; 0x74
 801399c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139a0:	b002      	add	sp, #8
 80139a2:	4770      	bx	lr
 80139a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80139a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80139ac:	bf14      	ite	ne
 80139ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80139b2:	4623      	moveq	r3, r4
 80139b4:	9304      	str	r3, [sp, #16]
 80139b6:	9307      	str	r3, [sp, #28]
 80139b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139bc:	9002      	str	r0, [sp, #8]
 80139be:	9006      	str	r0, [sp, #24]
 80139c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80139c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80139c6:	ab21      	add	r3, sp, #132	; 0x84
 80139c8:	a902      	add	r1, sp, #8
 80139ca:	4628      	mov	r0, r5
 80139cc:	9301      	str	r3, [sp, #4]
 80139ce:	f002 ff9f 	bl	8016910 <_svfiprintf_r>
 80139d2:	1c43      	adds	r3, r0, #1
 80139d4:	bfbc      	itt	lt
 80139d6:	238b      	movlt	r3, #139	; 0x8b
 80139d8:	602b      	strlt	r3, [r5, #0]
 80139da:	2c00      	cmp	r4, #0
 80139dc:	d0dd      	beq.n	801399a <sniprintf+0x16>
 80139de:	9b02      	ldr	r3, [sp, #8]
 80139e0:	2200      	movs	r2, #0
 80139e2:	701a      	strb	r2, [r3, #0]
 80139e4:	e7d9      	b.n	801399a <sniprintf+0x16>
 80139e6:	bf00      	nop
 80139e8:	20000108 	.word	0x20000108

080139ec <siprintf>:
 80139ec:	b40e      	push	{r1, r2, r3}
 80139ee:	b500      	push	{lr}
 80139f0:	b09c      	sub	sp, #112	; 0x70
 80139f2:	ab1d      	add	r3, sp, #116	; 0x74
 80139f4:	9002      	str	r0, [sp, #8]
 80139f6:	9006      	str	r0, [sp, #24]
 80139f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80139fc:	4809      	ldr	r0, [pc, #36]	; (8013a24 <siprintf+0x38>)
 80139fe:	9107      	str	r1, [sp, #28]
 8013a00:	9104      	str	r1, [sp, #16]
 8013a02:	4909      	ldr	r1, [pc, #36]	; (8013a28 <siprintf+0x3c>)
 8013a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a08:	9105      	str	r1, [sp, #20]
 8013a0a:	6800      	ldr	r0, [r0, #0]
 8013a0c:	9301      	str	r3, [sp, #4]
 8013a0e:	a902      	add	r1, sp, #8
 8013a10:	f002 ff7e 	bl	8016910 <_svfiprintf_r>
 8013a14:	9b02      	ldr	r3, [sp, #8]
 8013a16:	2200      	movs	r2, #0
 8013a18:	701a      	strb	r2, [r3, #0]
 8013a1a:	b01c      	add	sp, #112	; 0x70
 8013a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a20:	b003      	add	sp, #12
 8013a22:	4770      	bx	lr
 8013a24:	20000108 	.word	0x20000108
 8013a28:	ffff0208 	.word	0xffff0208

08013a2c <siscanf>:
 8013a2c:	b40e      	push	{r1, r2, r3}
 8013a2e:	b530      	push	{r4, r5, lr}
 8013a30:	b09c      	sub	sp, #112	; 0x70
 8013a32:	ac1f      	add	r4, sp, #124	; 0x7c
 8013a34:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013a38:	f854 5b04 	ldr.w	r5, [r4], #4
 8013a3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013a40:	9002      	str	r0, [sp, #8]
 8013a42:	9006      	str	r0, [sp, #24]
 8013a44:	f7ec fb9c 	bl	8000180 <strlen>
 8013a48:	4b0b      	ldr	r3, [pc, #44]	; (8013a78 <siscanf+0x4c>)
 8013a4a:	9003      	str	r0, [sp, #12]
 8013a4c:	9007      	str	r0, [sp, #28]
 8013a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a50:	480a      	ldr	r0, [pc, #40]	; (8013a7c <siscanf+0x50>)
 8013a52:	9401      	str	r4, [sp, #4]
 8013a54:	2300      	movs	r3, #0
 8013a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a58:	9314      	str	r3, [sp, #80]	; 0x50
 8013a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a62:	462a      	mov	r2, r5
 8013a64:	4623      	mov	r3, r4
 8013a66:	a902      	add	r1, sp, #8
 8013a68:	6800      	ldr	r0, [r0, #0]
 8013a6a:	f003 f8ab 	bl	8016bc4 <__ssvfiscanf_r>
 8013a6e:	b01c      	add	sp, #112	; 0x70
 8013a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a74:	b003      	add	sp, #12
 8013a76:	4770      	bx	lr
 8013a78:	08013aa3 	.word	0x08013aa3
 8013a7c:	20000108 	.word	0x20000108

08013a80 <__sread>:
 8013a80:	b510      	push	{r4, lr}
 8013a82:	460c      	mov	r4, r1
 8013a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a88:	f003 fb66 	bl	8017158 <_read_r>
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	bfab      	itete	ge
 8013a90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a92:	89a3      	ldrhlt	r3, [r4, #12]
 8013a94:	181b      	addge	r3, r3, r0
 8013a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a9a:	bfac      	ite	ge
 8013a9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a9e:	81a3      	strhlt	r3, [r4, #12]
 8013aa0:	bd10      	pop	{r4, pc}

08013aa2 <__seofread>:
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	4770      	bx	lr

08013aa6 <__swrite>:
 8013aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aaa:	461f      	mov	r7, r3
 8013aac:	898b      	ldrh	r3, [r1, #12]
 8013aae:	05db      	lsls	r3, r3, #23
 8013ab0:	4605      	mov	r5, r0
 8013ab2:	460c      	mov	r4, r1
 8013ab4:	4616      	mov	r6, r2
 8013ab6:	d505      	bpl.n	8013ac4 <__swrite+0x1e>
 8013ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013abc:	2302      	movs	r3, #2
 8013abe:	2200      	movs	r2, #0
 8013ac0:	f002 f8ea 	bl	8015c98 <_lseek_r>
 8013ac4:	89a3      	ldrh	r3, [r4, #12]
 8013ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ace:	81a3      	strh	r3, [r4, #12]
 8013ad0:	4632      	mov	r2, r6
 8013ad2:	463b      	mov	r3, r7
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ada:	f000 bed9 	b.w	8014890 <_write_r>

08013ade <__sseek>:
 8013ade:	b510      	push	{r4, lr}
 8013ae0:	460c      	mov	r4, r1
 8013ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ae6:	f002 f8d7 	bl	8015c98 <_lseek_r>
 8013aea:	1c43      	adds	r3, r0, #1
 8013aec:	89a3      	ldrh	r3, [r4, #12]
 8013aee:	bf15      	itete	ne
 8013af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8013af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013afa:	81a3      	strheq	r3, [r4, #12]
 8013afc:	bf18      	it	ne
 8013afe:	81a3      	strhne	r3, [r4, #12]
 8013b00:	bd10      	pop	{r4, pc}

08013b02 <__sclose>:
 8013b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b06:	f000 bed5 	b.w	80148b4 <_close_r>

08013b0a <strchr>:
 8013b0a:	b2c9      	uxtb	r1, r1
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b14:	b112      	cbz	r2, 8013b1c <strchr+0x12>
 8013b16:	428a      	cmp	r2, r1
 8013b18:	d1f9      	bne.n	8013b0e <strchr+0x4>
 8013b1a:	4770      	bx	lr
 8013b1c:	2900      	cmp	r1, #0
 8013b1e:	bf18      	it	ne
 8013b20:	2000      	movne	r0, #0
 8013b22:	4770      	bx	lr

08013b24 <strncpy>:
 8013b24:	b510      	push	{r4, lr}
 8013b26:	3901      	subs	r1, #1
 8013b28:	4603      	mov	r3, r0
 8013b2a:	b132      	cbz	r2, 8013b3a <strncpy+0x16>
 8013b2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013b30:	f803 4b01 	strb.w	r4, [r3], #1
 8013b34:	3a01      	subs	r2, #1
 8013b36:	2c00      	cmp	r4, #0
 8013b38:	d1f7      	bne.n	8013b2a <strncpy+0x6>
 8013b3a:	441a      	add	r2, r3
 8013b3c:	2100      	movs	r1, #0
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	d100      	bne.n	8013b44 <strncpy+0x20>
 8013b42:	bd10      	pop	{r4, pc}
 8013b44:	f803 1b01 	strb.w	r1, [r3], #1
 8013b48:	e7f9      	b.n	8013b3e <strncpy+0x1a>

08013b4a <strstr>:
 8013b4a:	780a      	ldrb	r2, [r1, #0]
 8013b4c:	b570      	push	{r4, r5, r6, lr}
 8013b4e:	b96a      	cbnz	r2, 8013b6c <strstr+0x22>
 8013b50:	bd70      	pop	{r4, r5, r6, pc}
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d109      	bne.n	8013b6a <strstr+0x20>
 8013b56:	460c      	mov	r4, r1
 8013b58:	4605      	mov	r5, r0
 8013b5a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d0f6      	beq.n	8013b50 <strstr+0x6>
 8013b62:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013b66:	429e      	cmp	r6, r3
 8013b68:	d0f7      	beq.n	8013b5a <strstr+0x10>
 8013b6a:	3001      	adds	r0, #1
 8013b6c:	7803      	ldrb	r3, [r0, #0]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d1ef      	bne.n	8013b52 <strstr+0x8>
 8013b72:	4618      	mov	r0, r3
 8013b74:	e7ec      	b.n	8013b50 <strstr+0x6>

08013b76 <sulp>:
 8013b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b7a:	460f      	mov	r7, r1
 8013b7c:	4690      	mov	r8, r2
 8013b7e:	f002 fc31 	bl	80163e4 <__ulp>
 8013b82:	4604      	mov	r4, r0
 8013b84:	460d      	mov	r5, r1
 8013b86:	f1b8 0f00 	cmp.w	r8, #0
 8013b8a:	d011      	beq.n	8013bb0 <sulp+0x3a>
 8013b8c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8013b90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	dd0b      	ble.n	8013bb0 <sulp+0x3a>
 8013b98:	051b      	lsls	r3, r3, #20
 8013b9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013b9e:	2400      	movs	r4, #0
 8013ba0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013ba4:	4622      	mov	r2, r4
 8013ba6:	462b      	mov	r3, r5
 8013ba8:	f7ec fdb2 	bl	8000710 <__aeabi_dmul>
 8013bac:	4604      	mov	r4, r0
 8013bae:	460d      	mov	r5, r1
 8013bb0:	4620      	mov	r0, r4
 8013bb2:	4629      	mov	r1, r5
 8013bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013bb8 <_strtod_l>:
 8013bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bbc:	b09f      	sub	sp, #124	; 0x7c
 8013bbe:	469b      	mov	fp, r3
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8013bc4:	4b9e      	ldr	r3, [pc, #632]	; (8013e40 <_strtod_l+0x288>)
 8013bc6:	9215      	str	r2, [sp, #84]	; 0x54
 8013bc8:	681f      	ldr	r7, [r3, #0]
 8013bca:	4682      	mov	sl, r0
 8013bcc:	4638      	mov	r0, r7
 8013bce:	460e      	mov	r6, r1
 8013bd0:	f7ec fad6 	bl	8000180 <strlen>
 8013bd4:	f04f 0800 	mov.w	r8, #0
 8013bd8:	4604      	mov	r4, r0
 8013bda:	f04f 0900 	mov.w	r9, #0
 8013bde:	9619      	str	r6, [sp, #100]	; 0x64
 8013be0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013be2:	781a      	ldrb	r2, [r3, #0]
 8013be4:	2a2b      	cmp	r2, #43	; 0x2b
 8013be6:	d04c      	beq.n	8013c82 <_strtod_l+0xca>
 8013be8:	d83a      	bhi.n	8013c60 <_strtod_l+0xa8>
 8013bea:	2a0d      	cmp	r2, #13
 8013bec:	d833      	bhi.n	8013c56 <_strtod_l+0x9e>
 8013bee:	2a08      	cmp	r2, #8
 8013bf0:	d833      	bhi.n	8013c5a <_strtod_l+0xa2>
 8013bf2:	2a00      	cmp	r2, #0
 8013bf4:	d03d      	beq.n	8013c72 <_strtod_l+0xba>
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8013bfa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8013bfc:	782b      	ldrb	r3, [r5, #0]
 8013bfe:	2b30      	cmp	r3, #48	; 0x30
 8013c00:	f040 80aa 	bne.w	8013d58 <_strtod_l+0x1a0>
 8013c04:	786b      	ldrb	r3, [r5, #1]
 8013c06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013c0a:	2b58      	cmp	r3, #88	; 0x58
 8013c0c:	d166      	bne.n	8013cdc <_strtod_l+0x124>
 8013c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c10:	9301      	str	r3, [sp, #4]
 8013c12:	ab1a      	add	r3, sp, #104	; 0x68
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	4a8b      	ldr	r2, [pc, #556]	; (8013e44 <_strtod_l+0x28c>)
 8013c18:	f8cd b008 	str.w	fp, [sp, #8]
 8013c1c:	ab1b      	add	r3, sp, #108	; 0x6c
 8013c1e:	a919      	add	r1, sp, #100	; 0x64
 8013c20:	4650      	mov	r0, sl
 8013c22:	f001 fd37 	bl	8015694 <__gethex>
 8013c26:	f010 0607 	ands.w	r6, r0, #7
 8013c2a:	4604      	mov	r4, r0
 8013c2c:	d005      	beq.n	8013c3a <_strtod_l+0x82>
 8013c2e:	2e06      	cmp	r6, #6
 8013c30:	d129      	bne.n	8013c86 <_strtod_l+0xce>
 8013c32:	3501      	adds	r5, #1
 8013c34:	2300      	movs	r3, #0
 8013c36:	9519      	str	r5, [sp, #100]	; 0x64
 8013c38:	930a      	str	r3, [sp, #40]	; 0x28
 8013c3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	f040 858a 	bne.w	8014756 <_strtod_l+0xb9e>
 8013c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c44:	b1d3      	cbz	r3, 8013c7c <_strtod_l+0xc4>
 8013c46:	4642      	mov	r2, r8
 8013c48:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013c4c:	4610      	mov	r0, r2
 8013c4e:	4619      	mov	r1, r3
 8013c50:	b01f      	add	sp, #124	; 0x7c
 8013c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c56:	2a20      	cmp	r2, #32
 8013c58:	d1cd      	bne.n	8013bf6 <_strtod_l+0x3e>
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	9319      	str	r3, [sp, #100]	; 0x64
 8013c5e:	e7bf      	b.n	8013be0 <_strtod_l+0x28>
 8013c60:	2a2d      	cmp	r2, #45	; 0x2d
 8013c62:	d1c8      	bne.n	8013bf6 <_strtod_l+0x3e>
 8013c64:	2201      	movs	r2, #1
 8013c66:	920a      	str	r2, [sp, #40]	; 0x28
 8013c68:	1c5a      	adds	r2, r3, #1
 8013c6a:	9219      	str	r2, [sp, #100]	; 0x64
 8013c6c:	785b      	ldrb	r3, [r3, #1]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d1c3      	bne.n	8013bfa <_strtod_l+0x42>
 8013c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c74:	9619      	str	r6, [sp, #100]	; 0x64
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	f040 856b 	bne.w	8014752 <_strtod_l+0xb9a>
 8013c7c:	4642      	mov	r2, r8
 8013c7e:	464b      	mov	r3, r9
 8013c80:	e7e4      	b.n	8013c4c <_strtod_l+0x94>
 8013c82:	2200      	movs	r2, #0
 8013c84:	e7ef      	b.n	8013c66 <_strtod_l+0xae>
 8013c86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013c88:	b13a      	cbz	r2, 8013c9a <_strtod_l+0xe2>
 8013c8a:	2135      	movs	r1, #53	; 0x35
 8013c8c:	a81c      	add	r0, sp, #112	; 0x70
 8013c8e:	f002 fcad 	bl	80165ec <__copybits>
 8013c92:	991a      	ldr	r1, [sp, #104]	; 0x68
 8013c94:	4650      	mov	r0, sl
 8013c96:	f002 f879 	bl	8015d8c <_Bfree>
 8013c9a:	3e01      	subs	r6, #1
 8013c9c:	2e04      	cmp	r6, #4
 8013c9e:	d806      	bhi.n	8013cae <_strtod_l+0xf6>
 8013ca0:	e8df f006 	tbb	[pc, r6]
 8013ca4:	1714030a 	.word	0x1714030a
 8013ca8:	0a          	.byte	0x0a
 8013ca9:	00          	.byte	0x00
 8013caa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8013cae:	0721      	lsls	r1, r4, #28
 8013cb0:	d5c3      	bpl.n	8013c3a <_strtod_l+0x82>
 8013cb2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8013cb6:	e7c0      	b.n	8013c3a <_strtod_l+0x82>
 8013cb8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8013cbc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013cbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013cc2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013cc6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8013cca:	e7f0      	b.n	8013cae <_strtod_l+0xf6>
 8013ccc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013e48 <_strtod_l+0x290>
 8013cd0:	e7ed      	b.n	8013cae <_strtod_l+0xf6>
 8013cd2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013cd6:	f04f 38ff 	mov.w	r8, #4294967295
 8013cda:	e7e8      	b.n	8013cae <_strtod_l+0xf6>
 8013cdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013cde:	1c5a      	adds	r2, r3, #1
 8013ce0:	9219      	str	r2, [sp, #100]	; 0x64
 8013ce2:	785b      	ldrb	r3, [r3, #1]
 8013ce4:	2b30      	cmp	r3, #48	; 0x30
 8013ce6:	d0f9      	beq.n	8013cdc <_strtod_l+0x124>
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d0a6      	beq.n	8013c3a <_strtod_l+0x82>
 8013cec:	2301      	movs	r3, #1
 8013cee:	9307      	str	r3, [sp, #28]
 8013cf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013cf2:	9308      	str	r3, [sp, #32]
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013cfa:	469b      	mov	fp, r3
 8013cfc:	220a      	movs	r2, #10
 8013cfe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8013d00:	7805      	ldrb	r5, [r0, #0]
 8013d02:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8013d06:	b2d9      	uxtb	r1, r3
 8013d08:	2909      	cmp	r1, #9
 8013d0a:	d927      	bls.n	8013d5c <_strtod_l+0x1a4>
 8013d0c:	4622      	mov	r2, r4
 8013d0e:	4639      	mov	r1, r7
 8013d10:	f003 fa82 	bl	8017218 <strncmp>
 8013d14:	2800      	cmp	r0, #0
 8013d16:	d033      	beq.n	8013d80 <_strtod_l+0x1c8>
 8013d18:	2000      	movs	r0, #0
 8013d1a:	462a      	mov	r2, r5
 8013d1c:	465c      	mov	r4, fp
 8013d1e:	9004      	str	r0, [sp, #16]
 8013d20:	4603      	mov	r3, r0
 8013d22:	2a65      	cmp	r2, #101	; 0x65
 8013d24:	d001      	beq.n	8013d2a <_strtod_l+0x172>
 8013d26:	2a45      	cmp	r2, #69	; 0x45
 8013d28:	d114      	bne.n	8013d54 <_strtod_l+0x19c>
 8013d2a:	b91c      	cbnz	r4, 8013d34 <_strtod_l+0x17c>
 8013d2c:	9a07      	ldr	r2, [sp, #28]
 8013d2e:	4302      	orrs	r2, r0
 8013d30:	d09f      	beq.n	8013c72 <_strtod_l+0xba>
 8013d32:	2400      	movs	r4, #0
 8013d34:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8013d36:	1c72      	adds	r2, r6, #1
 8013d38:	9219      	str	r2, [sp, #100]	; 0x64
 8013d3a:	7872      	ldrb	r2, [r6, #1]
 8013d3c:	2a2b      	cmp	r2, #43	; 0x2b
 8013d3e:	d079      	beq.n	8013e34 <_strtod_l+0x27c>
 8013d40:	2a2d      	cmp	r2, #45	; 0x2d
 8013d42:	f000 8083 	beq.w	8013e4c <_strtod_l+0x294>
 8013d46:	2700      	movs	r7, #0
 8013d48:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013d4c:	2909      	cmp	r1, #9
 8013d4e:	f240 8083 	bls.w	8013e58 <_strtod_l+0x2a0>
 8013d52:	9619      	str	r6, [sp, #100]	; 0x64
 8013d54:	2500      	movs	r5, #0
 8013d56:	e09f      	b.n	8013e98 <_strtod_l+0x2e0>
 8013d58:	2300      	movs	r3, #0
 8013d5a:	e7c8      	b.n	8013cee <_strtod_l+0x136>
 8013d5c:	f1bb 0f08 	cmp.w	fp, #8
 8013d60:	bfd5      	itete	le
 8013d62:	9906      	ldrle	r1, [sp, #24]
 8013d64:	9905      	ldrgt	r1, [sp, #20]
 8013d66:	fb02 3301 	mlale	r3, r2, r1, r3
 8013d6a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013d6e:	f100 0001 	add.w	r0, r0, #1
 8013d72:	bfd4      	ite	le
 8013d74:	9306      	strle	r3, [sp, #24]
 8013d76:	9305      	strgt	r3, [sp, #20]
 8013d78:	f10b 0b01 	add.w	fp, fp, #1
 8013d7c:	9019      	str	r0, [sp, #100]	; 0x64
 8013d7e:	e7be      	b.n	8013cfe <_strtod_l+0x146>
 8013d80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013d82:	191a      	adds	r2, r3, r4
 8013d84:	9219      	str	r2, [sp, #100]	; 0x64
 8013d86:	5d1a      	ldrb	r2, [r3, r4]
 8013d88:	f1bb 0f00 	cmp.w	fp, #0
 8013d8c:	d036      	beq.n	8013dfc <_strtod_l+0x244>
 8013d8e:	9004      	str	r0, [sp, #16]
 8013d90:	465c      	mov	r4, fp
 8013d92:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013d96:	2b09      	cmp	r3, #9
 8013d98:	d912      	bls.n	8013dc0 <_strtod_l+0x208>
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	e7c1      	b.n	8013d22 <_strtod_l+0x16a>
 8013d9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013da0:	1c5a      	adds	r2, r3, #1
 8013da2:	9219      	str	r2, [sp, #100]	; 0x64
 8013da4:	785a      	ldrb	r2, [r3, #1]
 8013da6:	3001      	adds	r0, #1
 8013da8:	2a30      	cmp	r2, #48	; 0x30
 8013daa:	d0f8      	beq.n	8013d9e <_strtod_l+0x1e6>
 8013dac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013db0:	2b08      	cmp	r3, #8
 8013db2:	f200 84d5 	bhi.w	8014760 <_strtod_l+0xba8>
 8013db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013db8:	9004      	str	r0, [sp, #16]
 8013dba:	2000      	movs	r0, #0
 8013dbc:	9308      	str	r3, [sp, #32]
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	3a30      	subs	r2, #48	; 0x30
 8013dc2:	f100 0301 	add.w	r3, r0, #1
 8013dc6:	d013      	beq.n	8013df0 <_strtod_l+0x238>
 8013dc8:	9904      	ldr	r1, [sp, #16]
 8013dca:	4419      	add	r1, r3
 8013dcc:	9104      	str	r1, [sp, #16]
 8013dce:	4623      	mov	r3, r4
 8013dd0:	1905      	adds	r5, r0, r4
 8013dd2:	210a      	movs	r1, #10
 8013dd4:	42ab      	cmp	r3, r5
 8013dd6:	d113      	bne.n	8013e00 <_strtod_l+0x248>
 8013dd8:	1823      	adds	r3, r4, r0
 8013dda:	2b08      	cmp	r3, #8
 8013ddc:	f104 0401 	add.w	r4, r4, #1
 8013de0:	4404      	add	r4, r0
 8013de2:	dc1b      	bgt.n	8013e1c <_strtod_l+0x264>
 8013de4:	9906      	ldr	r1, [sp, #24]
 8013de6:	230a      	movs	r3, #10
 8013de8:	fb03 2301 	mla	r3, r3, r1, r2
 8013dec:	9306      	str	r3, [sp, #24]
 8013dee:	2300      	movs	r3, #0
 8013df0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013df2:	1c51      	adds	r1, r2, #1
 8013df4:	9119      	str	r1, [sp, #100]	; 0x64
 8013df6:	7852      	ldrb	r2, [r2, #1]
 8013df8:	4618      	mov	r0, r3
 8013dfa:	e7ca      	b.n	8013d92 <_strtod_l+0x1da>
 8013dfc:	4658      	mov	r0, fp
 8013dfe:	e7d3      	b.n	8013da8 <_strtod_l+0x1f0>
 8013e00:	2b08      	cmp	r3, #8
 8013e02:	dc04      	bgt.n	8013e0e <_strtod_l+0x256>
 8013e04:	9f06      	ldr	r7, [sp, #24]
 8013e06:	434f      	muls	r7, r1
 8013e08:	9706      	str	r7, [sp, #24]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	e7e2      	b.n	8013dd4 <_strtod_l+0x21c>
 8013e0e:	1c5f      	adds	r7, r3, #1
 8013e10:	2f10      	cmp	r7, #16
 8013e12:	bfde      	ittt	le
 8013e14:	9f05      	ldrle	r7, [sp, #20]
 8013e16:	434f      	mulle	r7, r1
 8013e18:	9705      	strle	r7, [sp, #20]
 8013e1a:	e7f6      	b.n	8013e0a <_strtod_l+0x252>
 8013e1c:	2c10      	cmp	r4, #16
 8013e1e:	bfdf      	itttt	le
 8013e20:	9905      	ldrle	r1, [sp, #20]
 8013e22:	230a      	movle	r3, #10
 8013e24:	fb03 2301 	mlale	r3, r3, r1, r2
 8013e28:	9305      	strle	r3, [sp, #20]
 8013e2a:	e7e0      	b.n	8013dee <_strtod_l+0x236>
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	9304      	str	r3, [sp, #16]
 8013e30:	2301      	movs	r3, #1
 8013e32:	e77b      	b.n	8013d2c <_strtod_l+0x174>
 8013e34:	2700      	movs	r7, #0
 8013e36:	1cb2      	adds	r2, r6, #2
 8013e38:	9219      	str	r2, [sp, #100]	; 0x64
 8013e3a:	78b2      	ldrb	r2, [r6, #2]
 8013e3c:	e784      	b.n	8013d48 <_strtod_l+0x190>
 8013e3e:	bf00      	nop
 8013e40:	08019260 	.word	0x08019260
 8013e44:	08019014 	.word	0x08019014
 8013e48:	7ff00000 	.word	0x7ff00000
 8013e4c:	2701      	movs	r7, #1
 8013e4e:	e7f2      	b.n	8013e36 <_strtod_l+0x27e>
 8013e50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013e52:	1c51      	adds	r1, r2, #1
 8013e54:	9119      	str	r1, [sp, #100]	; 0x64
 8013e56:	7852      	ldrb	r2, [r2, #1]
 8013e58:	2a30      	cmp	r2, #48	; 0x30
 8013e5a:	d0f9      	beq.n	8013e50 <_strtod_l+0x298>
 8013e5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013e60:	2908      	cmp	r1, #8
 8013e62:	f63f af77 	bhi.w	8013d54 <_strtod_l+0x19c>
 8013e66:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8013e6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8013e6e:	f04f 0e0a 	mov.w	lr, #10
 8013e72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013e74:	1c51      	adds	r1, r2, #1
 8013e76:	9119      	str	r1, [sp, #100]	; 0x64
 8013e78:	7852      	ldrb	r2, [r2, #1]
 8013e7a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8013e7e:	2d09      	cmp	r5, #9
 8013e80:	d935      	bls.n	8013eee <_strtod_l+0x336>
 8013e82:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013e84:	1b49      	subs	r1, r1, r5
 8013e86:	2908      	cmp	r1, #8
 8013e88:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8013e8c:	dc02      	bgt.n	8013e94 <_strtod_l+0x2dc>
 8013e8e:	4565      	cmp	r5, ip
 8013e90:	bfa8      	it	ge
 8013e92:	4665      	movge	r5, ip
 8013e94:	b107      	cbz	r7, 8013e98 <_strtod_l+0x2e0>
 8013e96:	426d      	negs	r5, r5
 8013e98:	2c00      	cmp	r4, #0
 8013e9a:	d14c      	bne.n	8013f36 <_strtod_l+0x37e>
 8013e9c:	9907      	ldr	r1, [sp, #28]
 8013e9e:	4301      	orrs	r1, r0
 8013ea0:	f47f aecb 	bne.w	8013c3a <_strtod_l+0x82>
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	f47f aee4 	bne.w	8013c72 <_strtod_l+0xba>
 8013eaa:	2a69      	cmp	r2, #105	; 0x69
 8013eac:	d026      	beq.n	8013efc <_strtod_l+0x344>
 8013eae:	dc23      	bgt.n	8013ef8 <_strtod_l+0x340>
 8013eb0:	2a49      	cmp	r2, #73	; 0x49
 8013eb2:	d023      	beq.n	8013efc <_strtod_l+0x344>
 8013eb4:	2a4e      	cmp	r2, #78	; 0x4e
 8013eb6:	f47f aedc 	bne.w	8013c72 <_strtod_l+0xba>
 8013eba:	499d      	ldr	r1, [pc, #628]	; (8014130 <_strtod_l+0x578>)
 8013ebc:	a819      	add	r0, sp, #100	; 0x64
 8013ebe:	f001 fe37 	bl	8015b30 <__match>
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	f43f aed5 	beq.w	8013c72 <_strtod_l+0xba>
 8013ec8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	2b28      	cmp	r3, #40	; 0x28
 8013ece:	d12c      	bne.n	8013f2a <_strtod_l+0x372>
 8013ed0:	4998      	ldr	r1, [pc, #608]	; (8014134 <_strtod_l+0x57c>)
 8013ed2:	aa1c      	add	r2, sp, #112	; 0x70
 8013ed4:	a819      	add	r0, sp, #100	; 0x64
 8013ed6:	f001 fe3f 	bl	8015b58 <__hexnan>
 8013eda:	2805      	cmp	r0, #5
 8013edc:	d125      	bne.n	8013f2a <_strtod_l+0x372>
 8013ede:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013ee0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8013ee4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013ee8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013eec:	e6a5      	b.n	8013c3a <_strtod_l+0x82>
 8013eee:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8013ef2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8013ef6:	e7bc      	b.n	8013e72 <_strtod_l+0x2ba>
 8013ef8:	2a6e      	cmp	r2, #110	; 0x6e
 8013efa:	e7dc      	b.n	8013eb6 <_strtod_l+0x2fe>
 8013efc:	498e      	ldr	r1, [pc, #568]	; (8014138 <_strtod_l+0x580>)
 8013efe:	a819      	add	r0, sp, #100	; 0x64
 8013f00:	f001 fe16 	bl	8015b30 <__match>
 8013f04:	2800      	cmp	r0, #0
 8013f06:	f43f aeb4 	beq.w	8013c72 <_strtod_l+0xba>
 8013f0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f0c:	498b      	ldr	r1, [pc, #556]	; (801413c <_strtod_l+0x584>)
 8013f0e:	3b01      	subs	r3, #1
 8013f10:	a819      	add	r0, sp, #100	; 0x64
 8013f12:	9319      	str	r3, [sp, #100]	; 0x64
 8013f14:	f001 fe0c 	bl	8015b30 <__match>
 8013f18:	b910      	cbnz	r0, 8013f20 <_strtod_l+0x368>
 8013f1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	9319      	str	r3, [sp, #100]	; 0x64
 8013f20:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014140 <_strtod_l+0x588>
 8013f24:	f04f 0800 	mov.w	r8, #0
 8013f28:	e687      	b.n	8013c3a <_strtod_l+0x82>
 8013f2a:	4886      	ldr	r0, [pc, #536]	; (8014144 <_strtod_l+0x58c>)
 8013f2c:	f003 f926 	bl	801717c <nan>
 8013f30:	4680      	mov	r8, r0
 8013f32:	4689      	mov	r9, r1
 8013f34:	e681      	b.n	8013c3a <_strtod_l+0x82>
 8013f36:	9b04      	ldr	r3, [sp, #16]
 8013f38:	9806      	ldr	r0, [sp, #24]
 8013f3a:	1aeb      	subs	r3, r5, r3
 8013f3c:	f1bb 0f00 	cmp.w	fp, #0
 8013f40:	bf08      	it	eq
 8013f42:	46a3      	moveq	fp, r4
 8013f44:	2c10      	cmp	r4, #16
 8013f46:	9307      	str	r3, [sp, #28]
 8013f48:	4626      	mov	r6, r4
 8013f4a:	bfa8      	it	ge
 8013f4c:	2610      	movge	r6, #16
 8013f4e:	f7ec fb65 	bl	800061c <__aeabi_ui2d>
 8013f52:	2c09      	cmp	r4, #9
 8013f54:	4680      	mov	r8, r0
 8013f56:	4689      	mov	r9, r1
 8013f58:	dd13      	ble.n	8013f82 <_strtod_l+0x3ca>
 8013f5a:	4b7b      	ldr	r3, [pc, #492]	; (8014148 <_strtod_l+0x590>)
 8013f5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013f60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013f64:	f7ec fbd4 	bl	8000710 <__aeabi_dmul>
 8013f68:	4680      	mov	r8, r0
 8013f6a:	9805      	ldr	r0, [sp, #20]
 8013f6c:	4689      	mov	r9, r1
 8013f6e:	f7ec fb55 	bl	800061c <__aeabi_ui2d>
 8013f72:	4602      	mov	r2, r0
 8013f74:	460b      	mov	r3, r1
 8013f76:	4640      	mov	r0, r8
 8013f78:	4649      	mov	r1, r9
 8013f7a:	f7ec fa13 	bl	80003a4 <__adddf3>
 8013f7e:	4680      	mov	r8, r0
 8013f80:	4689      	mov	r9, r1
 8013f82:	2c0f      	cmp	r4, #15
 8013f84:	dc36      	bgt.n	8013ff4 <_strtod_l+0x43c>
 8013f86:	9b07      	ldr	r3, [sp, #28]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	f43f ae56 	beq.w	8013c3a <_strtod_l+0x82>
 8013f8e:	dd22      	ble.n	8013fd6 <_strtod_l+0x41e>
 8013f90:	2b16      	cmp	r3, #22
 8013f92:	dc09      	bgt.n	8013fa8 <_strtod_l+0x3f0>
 8013f94:	496c      	ldr	r1, [pc, #432]	; (8014148 <_strtod_l+0x590>)
 8013f96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f9e:	4642      	mov	r2, r8
 8013fa0:	464b      	mov	r3, r9
 8013fa2:	f7ec fbb5 	bl	8000710 <__aeabi_dmul>
 8013fa6:	e7c3      	b.n	8013f30 <_strtod_l+0x378>
 8013fa8:	9a07      	ldr	r2, [sp, #28]
 8013faa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013fae:	4293      	cmp	r3, r2
 8013fb0:	db20      	blt.n	8013ff4 <_strtod_l+0x43c>
 8013fb2:	4d65      	ldr	r5, [pc, #404]	; (8014148 <_strtod_l+0x590>)
 8013fb4:	f1c4 040f 	rsb	r4, r4, #15
 8013fb8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013fbc:	4642      	mov	r2, r8
 8013fbe:	464b      	mov	r3, r9
 8013fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fc4:	f7ec fba4 	bl	8000710 <__aeabi_dmul>
 8013fc8:	9b07      	ldr	r3, [sp, #28]
 8013fca:	1b1c      	subs	r4, r3, r4
 8013fcc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013fd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013fd4:	e7e5      	b.n	8013fa2 <_strtod_l+0x3ea>
 8013fd6:	9b07      	ldr	r3, [sp, #28]
 8013fd8:	3316      	adds	r3, #22
 8013fda:	db0b      	blt.n	8013ff4 <_strtod_l+0x43c>
 8013fdc:	9b04      	ldr	r3, [sp, #16]
 8013fde:	1b5d      	subs	r5, r3, r5
 8013fe0:	4b59      	ldr	r3, [pc, #356]	; (8014148 <_strtod_l+0x590>)
 8013fe2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013fe6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013fea:	4640      	mov	r0, r8
 8013fec:	4649      	mov	r1, r9
 8013fee:	f7ec fcb9 	bl	8000964 <__aeabi_ddiv>
 8013ff2:	e79d      	b.n	8013f30 <_strtod_l+0x378>
 8013ff4:	9b07      	ldr	r3, [sp, #28]
 8013ff6:	1ba6      	subs	r6, r4, r6
 8013ff8:	441e      	add	r6, r3
 8013ffa:	2e00      	cmp	r6, #0
 8013ffc:	dd74      	ble.n	80140e8 <_strtod_l+0x530>
 8013ffe:	f016 030f 	ands.w	r3, r6, #15
 8014002:	d00a      	beq.n	801401a <_strtod_l+0x462>
 8014004:	4950      	ldr	r1, [pc, #320]	; (8014148 <_strtod_l+0x590>)
 8014006:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801400a:	4642      	mov	r2, r8
 801400c:	464b      	mov	r3, r9
 801400e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014012:	f7ec fb7d 	bl	8000710 <__aeabi_dmul>
 8014016:	4680      	mov	r8, r0
 8014018:	4689      	mov	r9, r1
 801401a:	f036 060f 	bics.w	r6, r6, #15
 801401e:	d052      	beq.n	80140c6 <_strtod_l+0x50e>
 8014020:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8014024:	dd27      	ble.n	8014076 <_strtod_l+0x4be>
 8014026:	f04f 0b00 	mov.w	fp, #0
 801402a:	f8cd b010 	str.w	fp, [sp, #16]
 801402e:	f8cd b020 	str.w	fp, [sp, #32]
 8014032:	f8cd b018 	str.w	fp, [sp, #24]
 8014036:	2322      	movs	r3, #34	; 0x22
 8014038:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8014140 <_strtod_l+0x588>
 801403c:	f8ca 3000 	str.w	r3, [sl]
 8014040:	f04f 0800 	mov.w	r8, #0
 8014044:	9b08      	ldr	r3, [sp, #32]
 8014046:	2b00      	cmp	r3, #0
 8014048:	f43f adf7 	beq.w	8013c3a <_strtod_l+0x82>
 801404c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801404e:	4650      	mov	r0, sl
 8014050:	f001 fe9c 	bl	8015d8c <_Bfree>
 8014054:	9906      	ldr	r1, [sp, #24]
 8014056:	4650      	mov	r0, sl
 8014058:	f001 fe98 	bl	8015d8c <_Bfree>
 801405c:	9904      	ldr	r1, [sp, #16]
 801405e:	4650      	mov	r0, sl
 8014060:	f001 fe94 	bl	8015d8c <_Bfree>
 8014064:	9908      	ldr	r1, [sp, #32]
 8014066:	4650      	mov	r0, sl
 8014068:	f001 fe90 	bl	8015d8c <_Bfree>
 801406c:	4659      	mov	r1, fp
 801406e:	4650      	mov	r0, sl
 8014070:	f001 fe8c 	bl	8015d8c <_Bfree>
 8014074:	e5e1      	b.n	8013c3a <_strtod_l+0x82>
 8014076:	4b35      	ldr	r3, [pc, #212]	; (801414c <_strtod_l+0x594>)
 8014078:	9305      	str	r3, [sp, #20]
 801407a:	2300      	movs	r3, #0
 801407c:	1136      	asrs	r6, r6, #4
 801407e:	4640      	mov	r0, r8
 8014080:	4649      	mov	r1, r9
 8014082:	461f      	mov	r7, r3
 8014084:	2e01      	cmp	r6, #1
 8014086:	dc21      	bgt.n	80140cc <_strtod_l+0x514>
 8014088:	b10b      	cbz	r3, 801408e <_strtod_l+0x4d6>
 801408a:	4680      	mov	r8, r0
 801408c:	4689      	mov	r9, r1
 801408e:	4b2f      	ldr	r3, [pc, #188]	; (801414c <_strtod_l+0x594>)
 8014090:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014094:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014098:	4642      	mov	r2, r8
 801409a:	464b      	mov	r3, r9
 801409c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80140a0:	f7ec fb36 	bl	8000710 <__aeabi_dmul>
 80140a4:	4b26      	ldr	r3, [pc, #152]	; (8014140 <_strtod_l+0x588>)
 80140a6:	460a      	mov	r2, r1
 80140a8:	400b      	ands	r3, r1
 80140aa:	4929      	ldr	r1, [pc, #164]	; (8014150 <_strtod_l+0x598>)
 80140ac:	428b      	cmp	r3, r1
 80140ae:	4680      	mov	r8, r0
 80140b0:	d8b9      	bhi.n	8014026 <_strtod_l+0x46e>
 80140b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80140b6:	428b      	cmp	r3, r1
 80140b8:	bf86      	itte	hi
 80140ba:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8014154 <_strtod_l+0x59c>
 80140be:	f04f 38ff 	movhi.w	r8, #4294967295
 80140c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80140c6:	2300      	movs	r3, #0
 80140c8:	9305      	str	r3, [sp, #20]
 80140ca:	e07f      	b.n	80141cc <_strtod_l+0x614>
 80140cc:	07f2      	lsls	r2, r6, #31
 80140ce:	d505      	bpl.n	80140dc <_strtod_l+0x524>
 80140d0:	9b05      	ldr	r3, [sp, #20]
 80140d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d6:	f7ec fb1b 	bl	8000710 <__aeabi_dmul>
 80140da:	2301      	movs	r3, #1
 80140dc:	9a05      	ldr	r2, [sp, #20]
 80140de:	3208      	adds	r2, #8
 80140e0:	3701      	adds	r7, #1
 80140e2:	1076      	asrs	r6, r6, #1
 80140e4:	9205      	str	r2, [sp, #20]
 80140e6:	e7cd      	b.n	8014084 <_strtod_l+0x4cc>
 80140e8:	d0ed      	beq.n	80140c6 <_strtod_l+0x50e>
 80140ea:	4276      	negs	r6, r6
 80140ec:	f016 020f 	ands.w	r2, r6, #15
 80140f0:	d00a      	beq.n	8014108 <_strtod_l+0x550>
 80140f2:	4b15      	ldr	r3, [pc, #84]	; (8014148 <_strtod_l+0x590>)
 80140f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80140f8:	4640      	mov	r0, r8
 80140fa:	4649      	mov	r1, r9
 80140fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014100:	f7ec fc30 	bl	8000964 <__aeabi_ddiv>
 8014104:	4680      	mov	r8, r0
 8014106:	4689      	mov	r9, r1
 8014108:	1136      	asrs	r6, r6, #4
 801410a:	d0dc      	beq.n	80140c6 <_strtod_l+0x50e>
 801410c:	2e1f      	cmp	r6, #31
 801410e:	dd23      	ble.n	8014158 <_strtod_l+0x5a0>
 8014110:	f04f 0b00 	mov.w	fp, #0
 8014114:	f8cd b010 	str.w	fp, [sp, #16]
 8014118:	f8cd b020 	str.w	fp, [sp, #32]
 801411c:	f8cd b018 	str.w	fp, [sp, #24]
 8014120:	2322      	movs	r3, #34	; 0x22
 8014122:	f04f 0800 	mov.w	r8, #0
 8014126:	f04f 0900 	mov.w	r9, #0
 801412a:	f8ca 3000 	str.w	r3, [sl]
 801412e:	e789      	b.n	8014044 <_strtod_l+0x48c>
 8014130:	08018fe9 	.word	0x08018fe9
 8014134:	08019028 	.word	0x08019028
 8014138:	08018fe1 	.word	0x08018fe1
 801413c:	0801916c 	.word	0x0801916c
 8014140:	7ff00000 	.word	0x7ff00000
 8014144:	08019433 	.word	0x08019433
 8014148:	080192f8 	.word	0x080192f8
 801414c:	080192d0 	.word	0x080192d0
 8014150:	7ca00000 	.word	0x7ca00000
 8014154:	7fefffff 	.word	0x7fefffff
 8014158:	f016 0310 	ands.w	r3, r6, #16
 801415c:	bf18      	it	ne
 801415e:	236a      	movne	r3, #106	; 0x6a
 8014160:	4fb1      	ldr	r7, [pc, #708]	; (8014428 <_strtod_l+0x870>)
 8014162:	9305      	str	r3, [sp, #20]
 8014164:	4640      	mov	r0, r8
 8014166:	4649      	mov	r1, r9
 8014168:	2300      	movs	r3, #0
 801416a:	07f2      	lsls	r2, r6, #31
 801416c:	d504      	bpl.n	8014178 <_strtod_l+0x5c0>
 801416e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014172:	f7ec facd 	bl	8000710 <__aeabi_dmul>
 8014176:	2301      	movs	r3, #1
 8014178:	1076      	asrs	r6, r6, #1
 801417a:	f107 0708 	add.w	r7, r7, #8
 801417e:	d1f4      	bne.n	801416a <_strtod_l+0x5b2>
 8014180:	b10b      	cbz	r3, 8014186 <_strtod_l+0x5ce>
 8014182:	4680      	mov	r8, r0
 8014184:	4689      	mov	r9, r1
 8014186:	9b05      	ldr	r3, [sp, #20]
 8014188:	b1c3      	cbz	r3, 80141bc <_strtod_l+0x604>
 801418a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801418e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014192:	2b00      	cmp	r3, #0
 8014194:	4649      	mov	r1, r9
 8014196:	dd11      	ble.n	80141bc <_strtod_l+0x604>
 8014198:	2b1f      	cmp	r3, #31
 801419a:	f340 8124 	ble.w	80143e6 <_strtod_l+0x82e>
 801419e:	2b34      	cmp	r3, #52	; 0x34
 80141a0:	bfde      	ittt	le
 80141a2:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80141a6:	f04f 33ff 	movle.w	r3, #4294967295
 80141aa:	fa03 f202 	lslle.w	r2, r3, r2
 80141ae:	f04f 0800 	mov.w	r8, #0
 80141b2:	bfcc      	ite	gt
 80141b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80141b8:	ea02 0901 	andle.w	r9, r2, r1
 80141bc:	2200      	movs	r2, #0
 80141be:	2300      	movs	r3, #0
 80141c0:	4640      	mov	r0, r8
 80141c2:	4649      	mov	r1, r9
 80141c4:	f7ec fd0c 	bl	8000be0 <__aeabi_dcmpeq>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d1a1      	bne.n	8014110 <_strtod_l+0x558>
 80141cc:	9b06      	ldr	r3, [sp, #24]
 80141ce:	9300      	str	r3, [sp, #0]
 80141d0:	9908      	ldr	r1, [sp, #32]
 80141d2:	4623      	mov	r3, r4
 80141d4:	465a      	mov	r2, fp
 80141d6:	4650      	mov	r0, sl
 80141d8:	f001 fe40 	bl	8015e5c <__s2b>
 80141dc:	9008      	str	r0, [sp, #32]
 80141de:	2800      	cmp	r0, #0
 80141e0:	f43f af21 	beq.w	8014026 <_strtod_l+0x46e>
 80141e4:	9b04      	ldr	r3, [sp, #16]
 80141e6:	1b5d      	subs	r5, r3, r5
 80141e8:	9b07      	ldr	r3, [sp, #28]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	bfb4      	ite	lt
 80141ee:	462b      	movlt	r3, r5
 80141f0:	2300      	movge	r3, #0
 80141f2:	930e      	str	r3, [sp, #56]	; 0x38
 80141f4:	9b07      	ldr	r3, [sp, #28]
 80141f6:	f04f 0b00 	mov.w	fp, #0
 80141fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80141fe:	9314      	str	r3, [sp, #80]	; 0x50
 8014200:	f8cd b010 	str.w	fp, [sp, #16]
 8014204:	9b08      	ldr	r3, [sp, #32]
 8014206:	4650      	mov	r0, sl
 8014208:	6859      	ldr	r1, [r3, #4]
 801420a:	f001 fd7f 	bl	8015d0c <_Balloc>
 801420e:	9006      	str	r0, [sp, #24]
 8014210:	2800      	cmp	r0, #0
 8014212:	f43f af10 	beq.w	8014036 <_strtod_l+0x47e>
 8014216:	9b08      	ldr	r3, [sp, #32]
 8014218:	691a      	ldr	r2, [r3, #16]
 801421a:	3202      	adds	r2, #2
 801421c:	f103 010c 	add.w	r1, r3, #12
 8014220:	0092      	lsls	r2, r2, #2
 8014222:	300c      	adds	r0, #12
 8014224:	f001 fd64 	bl	8015cf0 <memcpy>
 8014228:	ab1c      	add	r3, sp, #112	; 0x70
 801422a:	9301      	str	r3, [sp, #4]
 801422c:	ab1b      	add	r3, sp, #108	; 0x6c
 801422e:	9300      	str	r3, [sp, #0]
 8014230:	4642      	mov	r2, r8
 8014232:	464b      	mov	r3, r9
 8014234:	4650      	mov	r0, sl
 8014236:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 801423a:	f002 f94d 	bl	80164d8 <__d2b>
 801423e:	901a      	str	r0, [sp, #104]	; 0x68
 8014240:	2800      	cmp	r0, #0
 8014242:	f43f aef8 	beq.w	8014036 <_strtod_l+0x47e>
 8014246:	2101      	movs	r1, #1
 8014248:	4650      	mov	r0, sl
 801424a:	f001 fe9f 	bl	8015f8c <__i2b>
 801424e:	9004      	str	r0, [sp, #16]
 8014250:	4603      	mov	r3, r0
 8014252:	2800      	cmp	r0, #0
 8014254:	f43f aeef 	beq.w	8014036 <_strtod_l+0x47e>
 8014258:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801425a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801425c:	2d00      	cmp	r5, #0
 801425e:	bfab      	itete	ge
 8014260:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014262:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8014264:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8014266:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8014268:	bfac      	ite	ge
 801426a:	18ee      	addge	r6, r5, r3
 801426c:	1b5c      	sublt	r4, r3, r5
 801426e:	9b05      	ldr	r3, [sp, #20]
 8014270:	1aed      	subs	r5, r5, r3
 8014272:	4415      	add	r5, r2
 8014274:	4b6d      	ldr	r3, [pc, #436]	; (801442c <_strtod_l+0x874>)
 8014276:	3d01      	subs	r5, #1
 8014278:	429d      	cmp	r5, r3
 801427a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801427e:	f280 80c4 	bge.w	801440a <_strtod_l+0x852>
 8014282:	1b5b      	subs	r3, r3, r5
 8014284:	2b1f      	cmp	r3, #31
 8014286:	eba2 0203 	sub.w	r2, r2, r3
 801428a:	f04f 0701 	mov.w	r7, #1
 801428e:	f300 80b1 	bgt.w	80143f4 <_strtod_l+0x83c>
 8014292:	fa07 f303 	lsl.w	r3, r7, r3
 8014296:	930f      	str	r3, [sp, #60]	; 0x3c
 8014298:	2500      	movs	r5, #0
 801429a:	18b7      	adds	r7, r6, r2
 801429c:	9b05      	ldr	r3, [sp, #20]
 801429e:	42be      	cmp	r6, r7
 80142a0:	4414      	add	r4, r2
 80142a2:	441c      	add	r4, r3
 80142a4:	4633      	mov	r3, r6
 80142a6:	bfa8      	it	ge
 80142a8:	463b      	movge	r3, r7
 80142aa:	42a3      	cmp	r3, r4
 80142ac:	bfa8      	it	ge
 80142ae:	4623      	movge	r3, r4
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	bfc2      	ittt	gt
 80142b4:	1aff      	subgt	r7, r7, r3
 80142b6:	1ae4      	subgt	r4, r4, r3
 80142b8:	1af6      	subgt	r6, r6, r3
 80142ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142bc:	2b00      	cmp	r3, #0
 80142be:	dd17      	ble.n	80142f0 <_strtod_l+0x738>
 80142c0:	9904      	ldr	r1, [sp, #16]
 80142c2:	461a      	mov	r2, r3
 80142c4:	4650      	mov	r0, sl
 80142c6:	f001 ff1f 	bl	8016108 <__pow5mult>
 80142ca:	9004      	str	r0, [sp, #16]
 80142cc:	2800      	cmp	r0, #0
 80142ce:	f43f aeb2 	beq.w	8014036 <_strtod_l+0x47e>
 80142d2:	4601      	mov	r1, r0
 80142d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80142d6:	4650      	mov	r0, sl
 80142d8:	f001 fe6e 	bl	8015fb8 <__multiply>
 80142dc:	9009      	str	r0, [sp, #36]	; 0x24
 80142de:	2800      	cmp	r0, #0
 80142e0:	f43f aea9 	beq.w	8014036 <_strtod_l+0x47e>
 80142e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80142e6:	4650      	mov	r0, sl
 80142e8:	f001 fd50 	bl	8015d8c <_Bfree>
 80142ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142ee:	931a      	str	r3, [sp, #104]	; 0x68
 80142f0:	2f00      	cmp	r7, #0
 80142f2:	f300 808e 	bgt.w	8014412 <_strtod_l+0x85a>
 80142f6:	9b07      	ldr	r3, [sp, #28]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	dd08      	ble.n	801430e <_strtod_l+0x756>
 80142fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80142fe:	9906      	ldr	r1, [sp, #24]
 8014300:	4650      	mov	r0, sl
 8014302:	f001 ff01 	bl	8016108 <__pow5mult>
 8014306:	9006      	str	r0, [sp, #24]
 8014308:	2800      	cmp	r0, #0
 801430a:	f43f ae94 	beq.w	8014036 <_strtod_l+0x47e>
 801430e:	2c00      	cmp	r4, #0
 8014310:	dd08      	ble.n	8014324 <_strtod_l+0x76c>
 8014312:	9906      	ldr	r1, [sp, #24]
 8014314:	4622      	mov	r2, r4
 8014316:	4650      	mov	r0, sl
 8014318:	f001 ff50 	bl	80161bc <__lshift>
 801431c:	9006      	str	r0, [sp, #24]
 801431e:	2800      	cmp	r0, #0
 8014320:	f43f ae89 	beq.w	8014036 <_strtod_l+0x47e>
 8014324:	2e00      	cmp	r6, #0
 8014326:	dd08      	ble.n	801433a <_strtod_l+0x782>
 8014328:	9904      	ldr	r1, [sp, #16]
 801432a:	4632      	mov	r2, r6
 801432c:	4650      	mov	r0, sl
 801432e:	f001 ff45 	bl	80161bc <__lshift>
 8014332:	9004      	str	r0, [sp, #16]
 8014334:	2800      	cmp	r0, #0
 8014336:	f43f ae7e 	beq.w	8014036 <_strtod_l+0x47e>
 801433a:	9a06      	ldr	r2, [sp, #24]
 801433c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801433e:	4650      	mov	r0, sl
 8014340:	f001 ffc8 	bl	80162d4 <__mdiff>
 8014344:	4683      	mov	fp, r0
 8014346:	2800      	cmp	r0, #0
 8014348:	f43f ae75 	beq.w	8014036 <_strtod_l+0x47e>
 801434c:	2400      	movs	r4, #0
 801434e:	68c3      	ldr	r3, [r0, #12]
 8014350:	9904      	ldr	r1, [sp, #16]
 8014352:	60c4      	str	r4, [r0, #12]
 8014354:	930b      	str	r3, [sp, #44]	; 0x2c
 8014356:	f001 ffa1 	bl	801629c <__mcmp>
 801435a:	42a0      	cmp	r0, r4
 801435c:	da6c      	bge.n	8014438 <_strtod_l+0x880>
 801435e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014360:	ea53 0308 	orrs.w	r3, r3, r8
 8014364:	f040 8092 	bne.w	801448c <_strtod_l+0x8d4>
 8014368:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801436c:	2b00      	cmp	r3, #0
 801436e:	f040 808d 	bne.w	801448c <_strtod_l+0x8d4>
 8014372:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014376:	0d1b      	lsrs	r3, r3, #20
 8014378:	051b      	lsls	r3, r3, #20
 801437a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801437e:	f240 8085 	bls.w	801448c <_strtod_l+0x8d4>
 8014382:	f8db 3014 	ldr.w	r3, [fp, #20]
 8014386:	b91b      	cbnz	r3, 8014390 <_strtod_l+0x7d8>
 8014388:	f8db 3010 	ldr.w	r3, [fp, #16]
 801438c:	2b01      	cmp	r3, #1
 801438e:	dd7d      	ble.n	801448c <_strtod_l+0x8d4>
 8014390:	4659      	mov	r1, fp
 8014392:	2201      	movs	r2, #1
 8014394:	4650      	mov	r0, sl
 8014396:	f001 ff11 	bl	80161bc <__lshift>
 801439a:	9904      	ldr	r1, [sp, #16]
 801439c:	4683      	mov	fp, r0
 801439e:	f001 ff7d 	bl	801629c <__mcmp>
 80143a2:	2800      	cmp	r0, #0
 80143a4:	dd72      	ble.n	801448c <_strtod_l+0x8d4>
 80143a6:	9905      	ldr	r1, [sp, #20]
 80143a8:	4a21      	ldr	r2, [pc, #132]	; (8014430 <_strtod_l+0x878>)
 80143aa:	464b      	mov	r3, r9
 80143ac:	2900      	cmp	r1, #0
 80143ae:	f000 808d 	beq.w	80144cc <_strtod_l+0x914>
 80143b2:	ea02 0109 	and.w	r1, r2, r9
 80143b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80143ba:	f300 8087 	bgt.w	80144cc <_strtod_l+0x914>
 80143be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80143c2:	f77f aead 	ble.w	8014120 <_strtod_l+0x568>
 80143c6:	4b1b      	ldr	r3, [pc, #108]	; (8014434 <_strtod_l+0x87c>)
 80143c8:	4640      	mov	r0, r8
 80143ca:	4649      	mov	r1, r9
 80143cc:	2200      	movs	r2, #0
 80143ce:	f7ec f99f 	bl	8000710 <__aeabi_dmul>
 80143d2:	460b      	mov	r3, r1
 80143d4:	4303      	orrs	r3, r0
 80143d6:	bf08      	it	eq
 80143d8:	2322      	moveq	r3, #34	; 0x22
 80143da:	4680      	mov	r8, r0
 80143dc:	4689      	mov	r9, r1
 80143de:	bf08      	it	eq
 80143e0:	f8ca 3000 	streq.w	r3, [sl]
 80143e4:	e632      	b.n	801404c <_strtod_l+0x494>
 80143e6:	f04f 32ff 	mov.w	r2, #4294967295
 80143ea:	fa02 f303 	lsl.w	r3, r2, r3
 80143ee:	ea03 0808 	and.w	r8, r3, r8
 80143f2:	e6e3      	b.n	80141bc <_strtod_l+0x604>
 80143f4:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80143f8:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80143fc:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8014400:	35e2      	adds	r5, #226	; 0xe2
 8014402:	fa07 f505 	lsl.w	r5, r7, r5
 8014406:	970f      	str	r7, [sp, #60]	; 0x3c
 8014408:	e747      	b.n	801429a <_strtod_l+0x6e2>
 801440a:	2301      	movs	r3, #1
 801440c:	2500      	movs	r5, #0
 801440e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014410:	e743      	b.n	801429a <_strtod_l+0x6e2>
 8014412:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014414:	463a      	mov	r2, r7
 8014416:	4650      	mov	r0, sl
 8014418:	f001 fed0 	bl	80161bc <__lshift>
 801441c:	901a      	str	r0, [sp, #104]	; 0x68
 801441e:	2800      	cmp	r0, #0
 8014420:	f47f af69 	bne.w	80142f6 <_strtod_l+0x73e>
 8014424:	e607      	b.n	8014036 <_strtod_l+0x47e>
 8014426:	bf00      	nop
 8014428:	08019040 	.word	0x08019040
 801442c:	fffffc02 	.word	0xfffffc02
 8014430:	7ff00000 	.word	0x7ff00000
 8014434:	39500000 	.word	0x39500000
 8014438:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801443c:	d165      	bne.n	801450a <_strtod_l+0x952>
 801443e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014444:	b35a      	cbz	r2, 801449e <_strtod_l+0x8e6>
 8014446:	4a9a      	ldr	r2, [pc, #616]	; (80146b0 <_strtod_l+0xaf8>)
 8014448:	4293      	cmp	r3, r2
 801444a:	d12b      	bne.n	80144a4 <_strtod_l+0x8ec>
 801444c:	9b05      	ldr	r3, [sp, #20]
 801444e:	4641      	mov	r1, r8
 8014450:	b303      	cbz	r3, 8014494 <_strtod_l+0x8dc>
 8014452:	4b98      	ldr	r3, [pc, #608]	; (80146b4 <_strtod_l+0xafc>)
 8014454:	464a      	mov	r2, r9
 8014456:	4013      	ands	r3, r2
 8014458:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801445c:	f04f 32ff 	mov.w	r2, #4294967295
 8014460:	d81b      	bhi.n	801449a <_strtod_l+0x8e2>
 8014462:	0d1b      	lsrs	r3, r3, #20
 8014464:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014468:	fa02 f303 	lsl.w	r3, r2, r3
 801446c:	4299      	cmp	r1, r3
 801446e:	d119      	bne.n	80144a4 <_strtod_l+0x8ec>
 8014470:	4b91      	ldr	r3, [pc, #580]	; (80146b8 <_strtod_l+0xb00>)
 8014472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014474:	429a      	cmp	r2, r3
 8014476:	d102      	bne.n	801447e <_strtod_l+0x8c6>
 8014478:	3101      	adds	r1, #1
 801447a:	f43f addc 	beq.w	8014036 <_strtod_l+0x47e>
 801447e:	4b8d      	ldr	r3, [pc, #564]	; (80146b4 <_strtod_l+0xafc>)
 8014480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014482:	401a      	ands	r2, r3
 8014484:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8014488:	f04f 0800 	mov.w	r8, #0
 801448c:	9b05      	ldr	r3, [sp, #20]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d199      	bne.n	80143c6 <_strtod_l+0x80e>
 8014492:	e5db      	b.n	801404c <_strtod_l+0x494>
 8014494:	f04f 33ff 	mov.w	r3, #4294967295
 8014498:	e7e8      	b.n	801446c <_strtod_l+0x8b4>
 801449a:	4613      	mov	r3, r2
 801449c:	e7e6      	b.n	801446c <_strtod_l+0x8b4>
 801449e:	ea53 0308 	orrs.w	r3, r3, r8
 80144a2:	d080      	beq.n	80143a6 <_strtod_l+0x7ee>
 80144a4:	b1e5      	cbz	r5, 80144e0 <_strtod_l+0x928>
 80144a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144a8:	421d      	tst	r5, r3
 80144aa:	d0ef      	beq.n	801448c <_strtod_l+0x8d4>
 80144ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144ae:	9a05      	ldr	r2, [sp, #20]
 80144b0:	4640      	mov	r0, r8
 80144b2:	4649      	mov	r1, r9
 80144b4:	b1c3      	cbz	r3, 80144e8 <_strtod_l+0x930>
 80144b6:	f7ff fb5e 	bl	8013b76 <sulp>
 80144ba:	4602      	mov	r2, r0
 80144bc:	460b      	mov	r3, r1
 80144be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80144c2:	f7eb ff6f 	bl	80003a4 <__adddf3>
 80144c6:	4680      	mov	r8, r0
 80144c8:	4689      	mov	r9, r1
 80144ca:	e7df      	b.n	801448c <_strtod_l+0x8d4>
 80144cc:	4013      	ands	r3, r2
 80144ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80144d2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80144d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80144da:	f04f 38ff 	mov.w	r8, #4294967295
 80144de:	e7d5      	b.n	801448c <_strtod_l+0x8d4>
 80144e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144e2:	ea13 0f08 	tst.w	r3, r8
 80144e6:	e7e0      	b.n	80144aa <_strtod_l+0x8f2>
 80144e8:	f7ff fb45 	bl	8013b76 <sulp>
 80144ec:	4602      	mov	r2, r0
 80144ee:	460b      	mov	r3, r1
 80144f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80144f4:	f7eb ff54 	bl	80003a0 <__aeabi_dsub>
 80144f8:	2200      	movs	r2, #0
 80144fa:	2300      	movs	r3, #0
 80144fc:	4680      	mov	r8, r0
 80144fe:	4689      	mov	r9, r1
 8014500:	f7ec fb6e 	bl	8000be0 <__aeabi_dcmpeq>
 8014504:	2800      	cmp	r0, #0
 8014506:	d0c1      	beq.n	801448c <_strtod_l+0x8d4>
 8014508:	e60a      	b.n	8014120 <_strtod_l+0x568>
 801450a:	9904      	ldr	r1, [sp, #16]
 801450c:	4658      	mov	r0, fp
 801450e:	f002 f83f 	bl	8016590 <__ratio>
 8014512:	2200      	movs	r2, #0
 8014514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014518:	4606      	mov	r6, r0
 801451a:	460f      	mov	r7, r1
 801451c:	f7ec fb74 	bl	8000c08 <__aeabi_dcmple>
 8014520:	2800      	cmp	r0, #0
 8014522:	d070      	beq.n	8014606 <_strtod_l+0xa4e>
 8014524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014526:	2b00      	cmp	r3, #0
 8014528:	d042      	beq.n	80145b0 <_strtod_l+0x9f8>
 801452a:	4f64      	ldr	r7, [pc, #400]	; (80146bc <_strtod_l+0xb04>)
 801452c:	2600      	movs	r6, #0
 801452e:	4d63      	ldr	r5, [pc, #396]	; (80146bc <_strtod_l+0xb04>)
 8014530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014532:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014536:	0d1b      	lsrs	r3, r3, #20
 8014538:	051b      	lsls	r3, r3, #20
 801453a:	930f      	str	r3, [sp, #60]	; 0x3c
 801453c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801453e:	4b60      	ldr	r3, [pc, #384]	; (80146c0 <_strtod_l+0xb08>)
 8014540:	429a      	cmp	r2, r3
 8014542:	f040 80c5 	bne.w	80146d0 <_strtod_l+0xb18>
 8014546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014548:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 801454c:	4640      	mov	r0, r8
 801454e:	4649      	mov	r1, r9
 8014550:	f001 ff48 	bl	80163e4 <__ulp>
 8014554:	4602      	mov	r2, r0
 8014556:	460b      	mov	r3, r1
 8014558:	4630      	mov	r0, r6
 801455a:	4639      	mov	r1, r7
 801455c:	f7ec f8d8 	bl	8000710 <__aeabi_dmul>
 8014560:	4642      	mov	r2, r8
 8014562:	464b      	mov	r3, r9
 8014564:	f7eb ff1e 	bl	80003a4 <__adddf3>
 8014568:	460b      	mov	r3, r1
 801456a:	4952      	ldr	r1, [pc, #328]	; (80146b4 <_strtod_l+0xafc>)
 801456c:	4a55      	ldr	r2, [pc, #340]	; (80146c4 <_strtod_l+0xb0c>)
 801456e:	4019      	ands	r1, r3
 8014570:	4291      	cmp	r1, r2
 8014572:	4680      	mov	r8, r0
 8014574:	d95d      	bls.n	8014632 <_strtod_l+0xa7a>
 8014576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014578:	4b4f      	ldr	r3, [pc, #316]	; (80146b8 <_strtod_l+0xb00>)
 801457a:	429a      	cmp	r2, r3
 801457c:	d103      	bne.n	8014586 <_strtod_l+0x9ce>
 801457e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014580:	3301      	adds	r3, #1
 8014582:	f43f ad58 	beq.w	8014036 <_strtod_l+0x47e>
 8014586:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80146b8 <_strtod_l+0xb00>
 801458a:	f04f 38ff 	mov.w	r8, #4294967295
 801458e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8014590:	4650      	mov	r0, sl
 8014592:	f001 fbfb 	bl	8015d8c <_Bfree>
 8014596:	9906      	ldr	r1, [sp, #24]
 8014598:	4650      	mov	r0, sl
 801459a:	f001 fbf7 	bl	8015d8c <_Bfree>
 801459e:	9904      	ldr	r1, [sp, #16]
 80145a0:	4650      	mov	r0, sl
 80145a2:	f001 fbf3 	bl	8015d8c <_Bfree>
 80145a6:	4659      	mov	r1, fp
 80145a8:	4650      	mov	r0, sl
 80145aa:	f001 fbef 	bl	8015d8c <_Bfree>
 80145ae:	e629      	b.n	8014204 <_strtod_l+0x64c>
 80145b0:	f1b8 0f00 	cmp.w	r8, #0
 80145b4:	d119      	bne.n	80145ea <_strtod_l+0xa32>
 80145b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145bc:	b9e3      	cbnz	r3, 80145f8 <_strtod_l+0xa40>
 80145be:	4b3f      	ldr	r3, [pc, #252]	; (80146bc <_strtod_l+0xb04>)
 80145c0:	2200      	movs	r2, #0
 80145c2:	4630      	mov	r0, r6
 80145c4:	4639      	mov	r1, r7
 80145c6:	f7ec fb15 	bl	8000bf4 <__aeabi_dcmplt>
 80145ca:	b9c8      	cbnz	r0, 8014600 <_strtod_l+0xa48>
 80145cc:	4b3e      	ldr	r3, [pc, #248]	; (80146c8 <_strtod_l+0xb10>)
 80145ce:	2200      	movs	r2, #0
 80145d0:	4630      	mov	r0, r6
 80145d2:	4639      	mov	r1, r7
 80145d4:	f7ec f89c 	bl	8000710 <__aeabi_dmul>
 80145d8:	4604      	mov	r4, r0
 80145da:	460d      	mov	r5, r1
 80145dc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80145e0:	9416      	str	r4, [sp, #88]	; 0x58
 80145e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80145e4:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80145e8:	e7a2      	b.n	8014530 <_strtod_l+0x978>
 80145ea:	f1b8 0f01 	cmp.w	r8, #1
 80145ee:	d103      	bne.n	80145f8 <_strtod_l+0xa40>
 80145f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	f43f ad94 	beq.w	8014120 <_strtod_l+0x568>
 80145f8:	4f34      	ldr	r7, [pc, #208]	; (80146cc <_strtod_l+0xb14>)
 80145fa:	2600      	movs	r6, #0
 80145fc:	2400      	movs	r4, #0
 80145fe:	e796      	b.n	801452e <_strtod_l+0x976>
 8014600:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014602:	4d31      	ldr	r5, [pc, #196]	; (80146c8 <_strtod_l+0xb10>)
 8014604:	e7ea      	b.n	80145dc <_strtod_l+0xa24>
 8014606:	4b30      	ldr	r3, [pc, #192]	; (80146c8 <_strtod_l+0xb10>)
 8014608:	2200      	movs	r2, #0
 801460a:	4630      	mov	r0, r6
 801460c:	4639      	mov	r1, r7
 801460e:	f7ec f87f 	bl	8000710 <__aeabi_dmul>
 8014612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014614:	4604      	mov	r4, r0
 8014616:	460d      	mov	r5, r1
 8014618:	b933      	cbnz	r3, 8014628 <_strtod_l+0xa70>
 801461a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801461e:	9010      	str	r0, [sp, #64]	; 0x40
 8014620:	9311      	str	r3, [sp, #68]	; 0x44
 8014622:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014626:	e783      	b.n	8014530 <_strtod_l+0x978>
 8014628:	4602      	mov	r2, r0
 801462a:	460b      	mov	r3, r1
 801462c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8014630:	e7f7      	b.n	8014622 <_strtod_l+0xa6a>
 8014632:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014636:	9b05      	ldr	r3, [sp, #20]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d1a8      	bne.n	801458e <_strtod_l+0x9d6>
 801463c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014642:	0d1b      	lsrs	r3, r3, #20
 8014644:	051b      	lsls	r3, r3, #20
 8014646:	429a      	cmp	r2, r3
 8014648:	d1a1      	bne.n	801458e <_strtod_l+0x9d6>
 801464a:	4620      	mov	r0, r4
 801464c:	4629      	mov	r1, r5
 801464e:	f7ec fd13 	bl	8001078 <__aeabi_d2lz>
 8014652:	f7ec f82f 	bl	80006b4 <__aeabi_l2d>
 8014656:	4602      	mov	r2, r0
 8014658:	460b      	mov	r3, r1
 801465a:	4620      	mov	r0, r4
 801465c:	4629      	mov	r1, r5
 801465e:	f7eb fe9f 	bl	80003a0 <__aeabi_dsub>
 8014662:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014668:	ea43 0308 	orr.w	r3, r3, r8
 801466c:	4313      	orrs	r3, r2
 801466e:	4604      	mov	r4, r0
 8014670:	460d      	mov	r5, r1
 8014672:	d068      	beq.n	8014746 <_strtod_l+0xb8e>
 8014674:	a30a      	add	r3, pc, #40	; (adr r3, 80146a0 <_strtod_l+0xae8>)
 8014676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467a:	f7ec fabb 	bl	8000bf4 <__aeabi_dcmplt>
 801467e:	2800      	cmp	r0, #0
 8014680:	f47f ace4 	bne.w	801404c <_strtod_l+0x494>
 8014684:	a308      	add	r3, pc, #32	; (adr r3, 80146a8 <_strtod_l+0xaf0>)
 8014686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468a:	4620      	mov	r0, r4
 801468c:	4629      	mov	r1, r5
 801468e:	f7ec facf 	bl	8000c30 <__aeabi_dcmpgt>
 8014692:	2800      	cmp	r0, #0
 8014694:	f43f af7b 	beq.w	801458e <_strtod_l+0x9d6>
 8014698:	e4d8      	b.n	801404c <_strtod_l+0x494>
 801469a:	bf00      	nop
 801469c:	f3af 8000 	nop.w
 80146a0:	94a03595 	.word	0x94a03595
 80146a4:	3fdfffff 	.word	0x3fdfffff
 80146a8:	35afe535 	.word	0x35afe535
 80146ac:	3fe00000 	.word	0x3fe00000
 80146b0:	000fffff 	.word	0x000fffff
 80146b4:	7ff00000 	.word	0x7ff00000
 80146b8:	7fefffff 	.word	0x7fefffff
 80146bc:	3ff00000 	.word	0x3ff00000
 80146c0:	7fe00000 	.word	0x7fe00000
 80146c4:	7c9fffff 	.word	0x7c9fffff
 80146c8:	3fe00000 	.word	0x3fe00000
 80146cc:	bff00000 	.word	0xbff00000
 80146d0:	9b05      	ldr	r3, [sp, #20]
 80146d2:	b313      	cbz	r3, 801471a <_strtod_l+0xb62>
 80146d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80146da:	d81e      	bhi.n	801471a <_strtod_l+0xb62>
 80146dc:	a326      	add	r3, pc, #152	; (adr r3, 8014778 <_strtod_l+0xbc0>)
 80146de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e2:	4620      	mov	r0, r4
 80146e4:	4629      	mov	r1, r5
 80146e6:	f7ec fa8f 	bl	8000c08 <__aeabi_dcmple>
 80146ea:	b190      	cbz	r0, 8014712 <_strtod_l+0xb5a>
 80146ec:	4629      	mov	r1, r5
 80146ee:	4620      	mov	r0, r4
 80146f0:	f7ec fae6 	bl	8000cc0 <__aeabi_d2uiz>
 80146f4:	2801      	cmp	r0, #1
 80146f6:	bf38      	it	cc
 80146f8:	2001      	movcc	r0, #1
 80146fa:	f7eb ff8f 	bl	800061c <__aeabi_ui2d>
 80146fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014700:	4604      	mov	r4, r0
 8014702:	460d      	mov	r5, r1
 8014704:	b9d3      	cbnz	r3, 801473c <_strtod_l+0xb84>
 8014706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801470a:	9012      	str	r0, [sp, #72]	; 0x48
 801470c:	9313      	str	r3, [sp, #76]	; 0x4c
 801470e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8014712:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014714:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8014718:	1a9f      	subs	r7, r3, r2
 801471a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801471e:	f001 fe61 	bl	80163e4 <__ulp>
 8014722:	4602      	mov	r2, r0
 8014724:	460b      	mov	r3, r1
 8014726:	4630      	mov	r0, r6
 8014728:	4639      	mov	r1, r7
 801472a:	f7eb fff1 	bl	8000710 <__aeabi_dmul>
 801472e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014732:	f7eb fe37 	bl	80003a4 <__adddf3>
 8014736:	4680      	mov	r8, r0
 8014738:	4689      	mov	r9, r1
 801473a:	e77c      	b.n	8014636 <_strtod_l+0xa7e>
 801473c:	4602      	mov	r2, r0
 801473e:	460b      	mov	r3, r1
 8014740:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8014744:	e7e3      	b.n	801470e <_strtod_l+0xb56>
 8014746:	a30e      	add	r3, pc, #56	; (adr r3, 8014780 <_strtod_l+0xbc8>)
 8014748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474c:	f7ec fa52 	bl	8000bf4 <__aeabi_dcmplt>
 8014750:	e79f      	b.n	8014692 <_strtod_l+0xada>
 8014752:	2300      	movs	r3, #0
 8014754:	930a      	str	r3, [sp, #40]	; 0x28
 8014756:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014758:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801475a:	6013      	str	r3, [r2, #0]
 801475c:	f7ff ba71 	b.w	8013c42 <_strtod_l+0x8a>
 8014760:	2a65      	cmp	r2, #101	; 0x65
 8014762:	f43f ab63 	beq.w	8013e2c <_strtod_l+0x274>
 8014766:	2a45      	cmp	r2, #69	; 0x45
 8014768:	f43f ab60 	beq.w	8013e2c <_strtod_l+0x274>
 801476c:	2301      	movs	r3, #1
 801476e:	f7ff bb95 	b.w	8013e9c <_strtod_l+0x2e4>
 8014772:	bf00      	nop
 8014774:	f3af 8000 	nop.w
 8014778:	ffc00000 	.word	0xffc00000
 801477c:	41dfffff 	.word	0x41dfffff
 8014780:	94a03595 	.word	0x94a03595
 8014784:	3fcfffff 	.word	0x3fcfffff

08014788 <_strtod_r>:
 8014788:	4b01      	ldr	r3, [pc, #4]	; (8014790 <_strtod_r+0x8>)
 801478a:	f7ff ba15 	b.w	8013bb8 <_strtod_l>
 801478e:	bf00      	nop
 8014790:	20000170 	.word	0x20000170

08014794 <_strtol_l.constprop.0>:
 8014794:	2b01      	cmp	r3, #1
 8014796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801479a:	4680      	mov	r8, r0
 801479c:	d001      	beq.n	80147a2 <_strtol_l.constprop.0+0xe>
 801479e:	2b24      	cmp	r3, #36	; 0x24
 80147a0:	d906      	bls.n	80147b0 <_strtol_l.constprop.0+0x1c>
 80147a2:	f7fe fa51 	bl	8012c48 <__errno>
 80147a6:	2316      	movs	r3, #22
 80147a8:	6003      	str	r3, [r0, #0]
 80147aa:	2000      	movs	r0, #0
 80147ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147b0:	4f35      	ldr	r7, [pc, #212]	; (8014888 <_strtol_l.constprop.0+0xf4>)
 80147b2:	460d      	mov	r5, r1
 80147b4:	4628      	mov	r0, r5
 80147b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147ba:	5de6      	ldrb	r6, [r4, r7]
 80147bc:	f016 0608 	ands.w	r6, r6, #8
 80147c0:	d1f8      	bne.n	80147b4 <_strtol_l.constprop.0+0x20>
 80147c2:	2c2d      	cmp	r4, #45	; 0x2d
 80147c4:	d12f      	bne.n	8014826 <_strtol_l.constprop.0+0x92>
 80147c6:	782c      	ldrb	r4, [r5, #0]
 80147c8:	2601      	movs	r6, #1
 80147ca:	1c85      	adds	r5, r0, #2
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d057      	beq.n	8014880 <_strtol_l.constprop.0+0xec>
 80147d0:	2b10      	cmp	r3, #16
 80147d2:	d109      	bne.n	80147e8 <_strtol_l.constprop.0+0x54>
 80147d4:	2c30      	cmp	r4, #48	; 0x30
 80147d6:	d107      	bne.n	80147e8 <_strtol_l.constprop.0+0x54>
 80147d8:	7828      	ldrb	r0, [r5, #0]
 80147da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80147de:	2858      	cmp	r0, #88	; 0x58
 80147e0:	d149      	bne.n	8014876 <_strtol_l.constprop.0+0xe2>
 80147e2:	786c      	ldrb	r4, [r5, #1]
 80147e4:	2310      	movs	r3, #16
 80147e6:	3502      	adds	r5, #2
 80147e8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80147ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 80147f0:	2700      	movs	r7, #0
 80147f2:	fbbe f9f3 	udiv	r9, lr, r3
 80147f6:	4638      	mov	r0, r7
 80147f8:	fb03 ea19 	mls	sl, r3, r9, lr
 80147fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014800:	f1bc 0f09 	cmp.w	ip, #9
 8014804:	d814      	bhi.n	8014830 <_strtol_l.constprop.0+0x9c>
 8014806:	4664      	mov	r4, ip
 8014808:	42a3      	cmp	r3, r4
 801480a:	dd22      	ble.n	8014852 <_strtol_l.constprop.0+0xbe>
 801480c:	2f00      	cmp	r7, #0
 801480e:	db1d      	blt.n	801484c <_strtol_l.constprop.0+0xb8>
 8014810:	4581      	cmp	r9, r0
 8014812:	d31b      	bcc.n	801484c <_strtol_l.constprop.0+0xb8>
 8014814:	d101      	bne.n	801481a <_strtol_l.constprop.0+0x86>
 8014816:	45a2      	cmp	sl, r4
 8014818:	db18      	blt.n	801484c <_strtol_l.constprop.0+0xb8>
 801481a:	fb00 4003 	mla	r0, r0, r3, r4
 801481e:	2701      	movs	r7, #1
 8014820:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014824:	e7ea      	b.n	80147fc <_strtol_l.constprop.0+0x68>
 8014826:	2c2b      	cmp	r4, #43	; 0x2b
 8014828:	bf04      	itt	eq
 801482a:	782c      	ldrbeq	r4, [r5, #0]
 801482c:	1c85      	addeq	r5, r0, #2
 801482e:	e7cd      	b.n	80147cc <_strtol_l.constprop.0+0x38>
 8014830:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014834:	f1bc 0f19 	cmp.w	ip, #25
 8014838:	d801      	bhi.n	801483e <_strtol_l.constprop.0+0xaa>
 801483a:	3c37      	subs	r4, #55	; 0x37
 801483c:	e7e4      	b.n	8014808 <_strtol_l.constprop.0+0x74>
 801483e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014842:	f1bc 0f19 	cmp.w	ip, #25
 8014846:	d804      	bhi.n	8014852 <_strtol_l.constprop.0+0xbe>
 8014848:	3c57      	subs	r4, #87	; 0x57
 801484a:	e7dd      	b.n	8014808 <_strtol_l.constprop.0+0x74>
 801484c:	f04f 37ff 	mov.w	r7, #4294967295
 8014850:	e7e6      	b.n	8014820 <_strtol_l.constprop.0+0x8c>
 8014852:	2f00      	cmp	r7, #0
 8014854:	da07      	bge.n	8014866 <_strtol_l.constprop.0+0xd2>
 8014856:	2322      	movs	r3, #34	; 0x22
 8014858:	f8c8 3000 	str.w	r3, [r8]
 801485c:	4670      	mov	r0, lr
 801485e:	2a00      	cmp	r2, #0
 8014860:	d0a4      	beq.n	80147ac <_strtol_l.constprop.0+0x18>
 8014862:	1e69      	subs	r1, r5, #1
 8014864:	e005      	b.n	8014872 <_strtol_l.constprop.0+0xde>
 8014866:	b106      	cbz	r6, 801486a <_strtol_l.constprop.0+0xd6>
 8014868:	4240      	negs	r0, r0
 801486a:	2a00      	cmp	r2, #0
 801486c:	d09e      	beq.n	80147ac <_strtol_l.constprop.0+0x18>
 801486e:	2f00      	cmp	r7, #0
 8014870:	d1f7      	bne.n	8014862 <_strtol_l.constprop.0+0xce>
 8014872:	6011      	str	r1, [r2, #0]
 8014874:	e79a      	b.n	80147ac <_strtol_l.constprop.0+0x18>
 8014876:	2430      	movs	r4, #48	; 0x30
 8014878:	2b00      	cmp	r3, #0
 801487a:	d1b5      	bne.n	80147e8 <_strtol_l.constprop.0+0x54>
 801487c:	2308      	movs	r3, #8
 801487e:	e7b3      	b.n	80147e8 <_strtol_l.constprop.0+0x54>
 8014880:	2c30      	cmp	r4, #48	; 0x30
 8014882:	d0a9      	beq.n	80147d8 <_strtol_l.constprop.0+0x44>
 8014884:	230a      	movs	r3, #10
 8014886:	e7af      	b.n	80147e8 <_strtol_l.constprop.0+0x54>
 8014888:	08019069 	.word	0x08019069

0801488c <_strtol_r>:
 801488c:	f7ff bf82 	b.w	8014794 <_strtol_l.constprop.0>

08014890 <_write_r>:
 8014890:	b538      	push	{r3, r4, r5, lr}
 8014892:	4d07      	ldr	r5, [pc, #28]	; (80148b0 <_write_r+0x20>)
 8014894:	4604      	mov	r4, r0
 8014896:	4608      	mov	r0, r1
 8014898:	4611      	mov	r1, r2
 801489a:	2200      	movs	r2, #0
 801489c:	602a      	str	r2, [r5, #0]
 801489e:	461a      	mov	r2, r3
 80148a0:	f7ed fbd0 	bl	8002044 <_write>
 80148a4:	1c43      	adds	r3, r0, #1
 80148a6:	d102      	bne.n	80148ae <_write_r+0x1e>
 80148a8:	682b      	ldr	r3, [r5, #0]
 80148aa:	b103      	cbz	r3, 80148ae <_write_r+0x1e>
 80148ac:	6023      	str	r3, [r4, #0]
 80148ae:	bd38      	pop	{r3, r4, r5, pc}
 80148b0:	200019a0 	.word	0x200019a0

080148b4 <_close_r>:
 80148b4:	b538      	push	{r3, r4, r5, lr}
 80148b6:	4d06      	ldr	r5, [pc, #24]	; (80148d0 <_close_r+0x1c>)
 80148b8:	2300      	movs	r3, #0
 80148ba:	4604      	mov	r4, r0
 80148bc:	4608      	mov	r0, r1
 80148be:	602b      	str	r3, [r5, #0]
 80148c0:	f7ed fbce 	bl	8002060 <_close>
 80148c4:	1c43      	adds	r3, r0, #1
 80148c6:	d102      	bne.n	80148ce <_close_r+0x1a>
 80148c8:	682b      	ldr	r3, [r5, #0]
 80148ca:	b103      	cbz	r3, 80148ce <_close_r+0x1a>
 80148cc:	6023      	str	r3, [r4, #0]
 80148ce:	bd38      	pop	{r3, r4, r5, pc}
 80148d0:	200019a0 	.word	0x200019a0

080148d4 <quorem>:
 80148d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148d8:	6903      	ldr	r3, [r0, #16]
 80148da:	690c      	ldr	r4, [r1, #16]
 80148dc:	42a3      	cmp	r3, r4
 80148de:	4607      	mov	r7, r0
 80148e0:	db7d      	blt.n	80149de <quorem+0x10a>
 80148e2:	3c01      	subs	r4, #1
 80148e4:	f101 0814 	add.w	r8, r1, #20
 80148e8:	f100 0514 	add.w	r5, r0, #20
 80148ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80148f0:	9301      	str	r3, [sp, #4]
 80148f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80148f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80148fa:	3301      	adds	r3, #1
 80148fc:	429a      	cmp	r2, r3
 80148fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014902:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014906:	fbb2 f6f3 	udiv	r6, r2, r3
 801490a:	d32e      	bcc.n	801496a <quorem+0x96>
 801490c:	f04f 0e00 	mov.w	lr, #0
 8014910:	4640      	mov	r0, r8
 8014912:	46ac      	mov	ip, r5
 8014914:	46f2      	mov	sl, lr
 8014916:	f850 2b04 	ldr.w	r2, [r0], #4
 801491a:	b293      	uxth	r3, r2
 801491c:	fb06 e303 	mla	r3, r6, r3, lr
 8014920:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014924:	0c12      	lsrs	r2, r2, #16
 8014926:	b29b      	uxth	r3, r3
 8014928:	fb06 e202 	mla	r2, r6, r2, lr
 801492c:	ebaa 0303 	sub.w	r3, sl, r3
 8014930:	f8dc a000 	ldr.w	sl, [ip]
 8014934:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014938:	b292      	uxth	r2, r2
 801493a:	fa13 f38a 	uxtah	r3, r3, sl
 801493e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014942:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014946:	b29b      	uxth	r3, r3
 8014948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801494c:	4581      	cmp	r9, r0
 801494e:	f84c 3b04 	str.w	r3, [ip], #4
 8014952:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014956:	d2de      	bcs.n	8014916 <quorem+0x42>
 8014958:	f855 300b 	ldr.w	r3, [r5, fp]
 801495c:	b92b      	cbnz	r3, 801496a <quorem+0x96>
 801495e:	9b01      	ldr	r3, [sp, #4]
 8014960:	3b04      	subs	r3, #4
 8014962:	429d      	cmp	r5, r3
 8014964:	461a      	mov	r2, r3
 8014966:	d32e      	bcc.n	80149c6 <quorem+0xf2>
 8014968:	613c      	str	r4, [r7, #16]
 801496a:	4638      	mov	r0, r7
 801496c:	f001 fc96 	bl	801629c <__mcmp>
 8014970:	2800      	cmp	r0, #0
 8014972:	db24      	blt.n	80149be <quorem+0xea>
 8014974:	3601      	adds	r6, #1
 8014976:	4628      	mov	r0, r5
 8014978:	f04f 0c00 	mov.w	ip, #0
 801497c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014980:	f8d0 e000 	ldr.w	lr, [r0]
 8014984:	b293      	uxth	r3, r2
 8014986:	ebac 0303 	sub.w	r3, ip, r3
 801498a:	0c12      	lsrs	r2, r2, #16
 801498c:	fa13 f38e 	uxtah	r3, r3, lr
 8014990:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014994:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014998:	b29b      	uxth	r3, r3
 801499a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801499e:	45c1      	cmp	r9, r8
 80149a0:	f840 3b04 	str.w	r3, [r0], #4
 80149a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80149a8:	d2e8      	bcs.n	801497c <quorem+0xa8>
 80149aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80149ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80149b2:	b922      	cbnz	r2, 80149be <quorem+0xea>
 80149b4:	3b04      	subs	r3, #4
 80149b6:	429d      	cmp	r5, r3
 80149b8:	461a      	mov	r2, r3
 80149ba:	d30a      	bcc.n	80149d2 <quorem+0xfe>
 80149bc:	613c      	str	r4, [r7, #16]
 80149be:	4630      	mov	r0, r6
 80149c0:	b003      	add	sp, #12
 80149c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c6:	6812      	ldr	r2, [r2, #0]
 80149c8:	3b04      	subs	r3, #4
 80149ca:	2a00      	cmp	r2, #0
 80149cc:	d1cc      	bne.n	8014968 <quorem+0x94>
 80149ce:	3c01      	subs	r4, #1
 80149d0:	e7c7      	b.n	8014962 <quorem+0x8e>
 80149d2:	6812      	ldr	r2, [r2, #0]
 80149d4:	3b04      	subs	r3, #4
 80149d6:	2a00      	cmp	r2, #0
 80149d8:	d1f0      	bne.n	80149bc <quorem+0xe8>
 80149da:	3c01      	subs	r4, #1
 80149dc:	e7eb      	b.n	80149b6 <quorem+0xe2>
 80149de:	2000      	movs	r0, #0
 80149e0:	e7ee      	b.n	80149c0 <quorem+0xec>
 80149e2:	0000      	movs	r0, r0
 80149e4:	0000      	movs	r0, r0
	...

080149e8 <_dtoa_r>:
 80149e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80149ee:	b099      	sub	sp, #100	; 0x64
 80149f0:	4616      	mov	r6, r2
 80149f2:	461f      	mov	r7, r3
 80149f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80149f8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80149fc:	4605      	mov	r5, r0
 80149fe:	b974      	cbnz	r4, 8014a1e <_dtoa_r+0x36>
 8014a00:	2010      	movs	r0, #16
 8014a02:	f001 f95b 	bl	8015cbc <malloc>
 8014a06:	4602      	mov	r2, r0
 8014a08:	6268      	str	r0, [r5, #36]	; 0x24
 8014a0a:	b920      	cbnz	r0, 8014a16 <_dtoa_r+0x2e>
 8014a0c:	4ba8      	ldr	r3, [pc, #672]	; (8014cb0 <_dtoa_r+0x2c8>)
 8014a0e:	21ea      	movs	r1, #234	; 0xea
 8014a10:	48a8      	ldr	r0, [pc, #672]	; (8014cb4 <_dtoa_r+0x2cc>)
 8014a12:	f002 fcd1 	bl	80173b8 <__assert_func>
 8014a16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014a1a:	6004      	str	r4, [r0, #0]
 8014a1c:	60c4      	str	r4, [r0, #12]
 8014a1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014a20:	6819      	ldr	r1, [r3, #0]
 8014a22:	b151      	cbz	r1, 8014a3a <_dtoa_r+0x52>
 8014a24:	685a      	ldr	r2, [r3, #4]
 8014a26:	604a      	str	r2, [r1, #4]
 8014a28:	2301      	movs	r3, #1
 8014a2a:	4093      	lsls	r3, r2
 8014a2c:	608b      	str	r3, [r1, #8]
 8014a2e:	4628      	mov	r0, r5
 8014a30:	f001 f9ac 	bl	8015d8c <_Bfree>
 8014a34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014a36:	2200      	movs	r2, #0
 8014a38:	601a      	str	r2, [r3, #0]
 8014a3a:	1e3b      	subs	r3, r7, #0
 8014a3c:	bfb9      	ittee	lt
 8014a3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014a42:	9305      	strlt	r3, [sp, #20]
 8014a44:	2300      	movge	r3, #0
 8014a46:	f8c8 3000 	strge.w	r3, [r8]
 8014a4a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8014a4e:	4b9a      	ldr	r3, [pc, #616]	; (8014cb8 <_dtoa_r+0x2d0>)
 8014a50:	bfbc      	itt	lt
 8014a52:	2201      	movlt	r2, #1
 8014a54:	f8c8 2000 	strlt.w	r2, [r8]
 8014a58:	ea33 0309 	bics.w	r3, r3, r9
 8014a5c:	d119      	bne.n	8014a92 <_dtoa_r+0xaa>
 8014a5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014a60:	f242 730f 	movw	r3, #9999	; 0x270f
 8014a64:	6013      	str	r3, [r2, #0]
 8014a66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014a6a:	4333      	orrs	r3, r6
 8014a6c:	f000 8580 	beq.w	8015570 <_dtoa_r+0xb88>
 8014a70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014a72:	b953      	cbnz	r3, 8014a8a <_dtoa_r+0xa2>
 8014a74:	4b91      	ldr	r3, [pc, #580]	; (8014cbc <_dtoa_r+0x2d4>)
 8014a76:	e022      	b.n	8014abe <_dtoa_r+0xd6>
 8014a78:	4b91      	ldr	r3, [pc, #580]	; (8014cc0 <_dtoa_r+0x2d8>)
 8014a7a:	9303      	str	r3, [sp, #12]
 8014a7c:	3308      	adds	r3, #8
 8014a7e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014a80:	6013      	str	r3, [r2, #0]
 8014a82:	9803      	ldr	r0, [sp, #12]
 8014a84:	b019      	add	sp, #100	; 0x64
 8014a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a8a:	4b8c      	ldr	r3, [pc, #560]	; (8014cbc <_dtoa_r+0x2d4>)
 8014a8c:	9303      	str	r3, [sp, #12]
 8014a8e:	3303      	adds	r3, #3
 8014a90:	e7f5      	b.n	8014a7e <_dtoa_r+0x96>
 8014a92:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014a96:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8014a9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	f7ec f89d 	bl	8000be0 <__aeabi_dcmpeq>
 8014aa6:	4680      	mov	r8, r0
 8014aa8:	b158      	cbz	r0, 8014ac2 <_dtoa_r+0xda>
 8014aaa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014aac:	2301      	movs	r3, #1
 8014aae:	6013      	str	r3, [r2, #0]
 8014ab0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	f000 8559 	beq.w	801556a <_dtoa_r+0xb82>
 8014ab8:	4882      	ldr	r0, [pc, #520]	; (8014cc4 <_dtoa_r+0x2dc>)
 8014aba:	6018      	str	r0, [r3, #0]
 8014abc:	1e43      	subs	r3, r0, #1
 8014abe:	9303      	str	r3, [sp, #12]
 8014ac0:	e7df      	b.n	8014a82 <_dtoa_r+0x9a>
 8014ac2:	ab16      	add	r3, sp, #88	; 0x58
 8014ac4:	9301      	str	r3, [sp, #4]
 8014ac6:	ab17      	add	r3, sp, #92	; 0x5c
 8014ac8:	9300      	str	r3, [sp, #0]
 8014aca:	4628      	mov	r0, r5
 8014acc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014ad0:	f001 fd02 	bl	80164d8 <__d2b>
 8014ad4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014ad8:	4683      	mov	fp, r0
 8014ada:	2c00      	cmp	r4, #0
 8014adc:	d07e      	beq.n	8014bdc <_dtoa_r+0x1f4>
 8014ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ae0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8014ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014aec:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8014af0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014af4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014af8:	4b73      	ldr	r3, [pc, #460]	; (8014cc8 <_dtoa_r+0x2e0>)
 8014afa:	2200      	movs	r2, #0
 8014afc:	f7eb fc50 	bl	80003a0 <__aeabi_dsub>
 8014b00:	a365      	add	r3, pc, #404	; (adr r3, 8014c98 <_dtoa_r+0x2b0>)
 8014b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b06:	f7eb fe03 	bl	8000710 <__aeabi_dmul>
 8014b0a:	a365      	add	r3, pc, #404	; (adr r3, 8014ca0 <_dtoa_r+0x2b8>)
 8014b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b10:	f7eb fc48 	bl	80003a4 <__adddf3>
 8014b14:	4606      	mov	r6, r0
 8014b16:	4620      	mov	r0, r4
 8014b18:	460f      	mov	r7, r1
 8014b1a:	f7eb fd8f 	bl	800063c <__aeabi_i2d>
 8014b1e:	a362      	add	r3, pc, #392	; (adr r3, 8014ca8 <_dtoa_r+0x2c0>)
 8014b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b24:	f7eb fdf4 	bl	8000710 <__aeabi_dmul>
 8014b28:	4602      	mov	r2, r0
 8014b2a:	460b      	mov	r3, r1
 8014b2c:	4630      	mov	r0, r6
 8014b2e:	4639      	mov	r1, r7
 8014b30:	f7eb fc38 	bl	80003a4 <__adddf3>
 8014b34:	4606      	mov	r6, r0
 8014b36:	460f      	mov	r7, r1
 8014b38:	f7ec f89a 	bl	8000c70 <__aeabi_d2iz>
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	4682      	mov	sl, r0
 8014b40:	2300      	movs	r3, #0
 8014b42:	4630      	mov	r0, r6
 8014b44:	4639      	mov	r1, r7
 8014b46:	f7ec f855 	bl	8000bf4 <__aeabi_dcmplt>
 8014b4a:	b148      	cbz	r0, 8014b60 <_dtoa_r+0x178>
 8014b4c:	4650      	mov	r0, sl
 8014b4e:	f7eb fd75 	bl	800063c <__aeabi_i2d>
 8014b52:	4632      	mov	r2, r6
 8014b54:	463b      	mov	r3, r7
 8014b56:	f7ec f843 	bl	8000be0 <__aeabi_dcmpeq>
 8014b5a:	b908      	cbnz	r0, 8014b60 <_dtoa_r+0x178>
 8014b5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b60:	f1ba 0f16 	cmp.w	sl, #22
 8014b64:	d857      	bhi.n	8014c16 <_dtoa_r+0x22e>
 8014b66:	4b59      	ldr	r3, [pc, #356]	; (8014ccc <_dtoa_r+0x2e4>)
 8014b68:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014b74:	f7ec f83e 	bl	8000bf4 <__aeabi_dcmplt>
 8014b78:	2800      	cmp	r0, #0
 8014b7a:	d04e      	beq.n	8014c1a <_dtoa_r+0x232>
 8014b7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b80:	2300      	movs	r3, #0
 8014b82:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014b86:	1b1c      	subs	r4, r3, r4
 8014b88:	1e63      	subs	r3, r4, #1
 8014b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8014b8c:	bf45      	ittet	mi
 8014b8e:	f1c4 0301 	rsbmi	r3, r4, #1
 8014b92:	9306      	strmi	r3, [sp, #24]
 8014b94:	2300      	movpl	r3, #0
 8014b96:	2300      	movmi	r3, #0
 8014b98:	bf4c      	ite	mi
 8014b9a:	9309      	strmi	r3, [sp, #36]	; 0x24
 8014b9c:	9306      	strpl	r3, [sp, #24]
 8014b9e:	f1ba 0f00 	cmp.w	sl, #0
 8014ba2:	db3c      	blt.n	8014c1e <_dtoa_r+0x236>
 8014ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ba6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014baa:	4453      	add	r3, sl
 8014bac:	9309      	str	r3, [sp, #36]	; 0x24
 8014bae:	2300      	movs	r3, #0
 8014bb0:	930a      	str	r3, [sp, #40]	; 0x28
 8014bb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014bb4:	2b09      	cmp	r3, #9
 8014bb6:	f200 808d 	bhi.w	8014cd4 <_dtoa_r+0x2ec>
 8014bba:	2b05      	cmp	r3, #5
 8014bbc:	bfc4      	itt	gt
 8014bbe:	3b04      	subgt	r3, #4
 8014bc0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8014bc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014bc4:	f1a3 0302 	sub.w	r3, r3, #2
 8014bc8:	bfcc      	ite	gt
 8014bca:	2400      	movgt	r4, #0
 8014bcc:	2401      	movle	r4, #1
 8014bce:	2b03      	cmp	r3, #3
 8014bd0:	f200 808c 	bhi.w	8014cec <_dtoa_r+0x304>
 8014bd4:	e8df f003 	tbb	[pc, r3]
 8014bd8:	5b4d4f2d 	.word	0x5b4d4f2d
 8014bdc:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8014be0:	441c      	add	r4, r3
 8014be2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8014be6:	2b20      	cmp	r3, #32
 8014be8:	bfc3      	ittte	gt
 8014bea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014bee:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8014bf2:	fa09 f303 	lslgt.w	r3, r9, r3
 8014bf6:	f1c3 0320 	rsble	r3, r3, #32
 8014bfa:	bfc6      	itte	gt
 8014bfc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014c00:	4318      	orrgt	r0, r3
 8014c02:	fa06 f003 	lslle.w	r0, r6, r3
 8014c06:	f7eb fd09 	bl	800061c <__aeabi_ui2d>
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8014c10:	3c01      	subs	r4, #1
 8014c12:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c14:	e770      	b.n	8014af8 <_dtoa_r+0x110>
 8014c16:	2301      	movs	r3, #1
 8014c18:	e7b3      	b.n	8014b82 <_dtoa_r+0x19a>
 8014c1a:	900f      	str	r0, [sp, #60]	; 0x3c
 8014c1c:	e7b2      	b.n	8014b84 <_dtoa_r+0x19c>
 8014c1e:	9b06      	ldr	r3, [sp, #24]
 8014c20:	eba3 030a 	sub.w	r3, r3, sl
 8014c24:	9306      	str	r3, [sp, #24]
 8014c26:	f1ca 0300 	rsb	r3, sl, #0
 8014c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	930e      	str	r3, [sp, #56]	; 0x38
 8014c30:	e7bf      	b.n	8014bb2 <_dtoa_r+0x1ca>
 8014c32:	2300      	movs	r3, #0
 8014c34:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	dc5a      	bgt.n	8014cf2 <_dtoa_r+0x30a>
 8014c3c:	f04f 0901 	mov.w	r9, #1
 8014c40:	f8cd 9020 	str.w	r9, [sp, #32]
 8014c44:	464b      	mov	r3, r9
 8014c46:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8014c4a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	6042      	str	r2, [r0, #4]
 8014c50:	2204      	movs	r2, #4
 8014c52:	f102 0614 	add.w	r6, r2, #20
 8014c56:	429e      	cmp	r6, r3
 8014c58:	6841      	ldr	r1, [r0, #4]
 8014c5a:	d950      	bls.n	8014cfe <_dtoa_r+0x316>
 8014c5c:	4628      	mov	r0, r5
 8014c5e:	f001 f855 	bl	8015d0c <_Balloc>
 8014c62:	9003      	str	r0, [sp, #12]
 8014c64:	2800      	cmp	r0, #0
 8014c66:	d14e      	bne.n	8014d06 <_dtoa_r+0x31e>
 8014c68:	4b19      	ldr	r3, [pc, #100]	; (8014cd0 <_dtoa_r+0x2e8>)
 8014c6a:	4602      	mov	r2, r0
 8014c6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014c70:	e6ce      	b.n	8014a10 <_dtoa_r+0x28>
 8014c72:	2301      	movs	r3, #1
 8014c74:	e7de      	b.n	8014c34 <_dtoa_r+0x24c>
 8014c76:	2300      	movs	r3, #0
 8014c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014c7c:	eb0a 0903 	add.w	r9, sl, r3
 8014c80:	f109 0301 	add.w	r3, r9, #1
 8014c84:	2b01      	cmp	r3, #1
 8014c86:	9308      	str	r3, [sp, #32]
 8014c88:	bfb8      	it	lt
 8014c8a:	2301      	movlt	r3, #1
 8014c8c:	e7dd      	b.n	8014c4a <_dtoa_r+0x262>
 8014c8e:	2301      	movs	r3, #1
 8014c90:	e7f2      	b.n	8014c78 <_dtoa_r+0x290>
 8014c92:	bf00      	nop
 8014c94:	f3af 8000 	nop.w
 8014c98:	636f4361 	.word	0x636f4361
 8014c9c:	3fd287a7 	.word	0x3fd287a7
 8014ca0:	8b60c8b3 	.word	0x8b60c8b3
 8014ca4:	3fc68a28 	.word	0x3fc68a28
 8014ca8:	509f79fb 	.word	0x509f79fb
 8014cac:	3fd34413 	.word	0x3fd34413
 8014cb0:	08019176 	.word	0x08019176
 8014cb4:	0801918d 	.word	0x0801918d
 8014cb8:	7ff00000 	.word	0x7ff00000
 8014cbc:	08019172 	.word	0x08019172
 8014cc0:	08019169 	.word	0x08019169
 8014cc4:	080193e2 	.word	0x080193e2
 8014cc8:	3ff80000 	.word	0x3ff80000
 8014ccc:	080192f8 	.word	0x080192f8
 8014cd0:	080191e8 	.word	0x080191e8
 8014cd4:	2401      	movs	r4, #1
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	9322      	str	r3, [sp, #136]	; 0x88
 8014cda:	940b      	str	r4, [sp, #44]	; 0x2c
 8014cdc:	f04f 39ff 	mov.w	r9, #4294967295
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	f8cd 9020 	str.w	r9, [sp, #32]
 8014ce6:	2312      	movs	r3, #18
 8014ce8:	9223      	str	r2, [sp, #140]	; 0x8c
 8014cea:	e7ae      	b.n	8014c4a <_dtoa_r+0x262>
 8014cec:	2301      	movs	r3, #1
 8014cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8014cf0:	e7f4      	b.n	8014cdc <_dtoa_r+0x2f4>
 8014cf2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8014cf6:	f8cd 9020 	str.w	r9, [sp, #32]
 8014cfa:	464b      	mov	r3, r9
 8014cfc:	e7a5      	b.n	8014c4a <_dtoa_r+0x262>
 8014cfe:	3101      	adds	r1, #1
 8014d00:	6041      	str	r1, [r0, #4]
 8014d02:	0052      	lsls	r2, r2, #1
 8014d04:	e7a5      	b.n	8014c52 <_dtoa_r+0x26a>
 8014d06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014d08:	9a03      	ldr	r2, [sp, #12]
 8014d0a:	601a      	str	r2, [r3, #0]
 8014d0c:	9b08      	ldr	r3, [sp, #32]
 8014d0e:	2b0e      	cmp	r3, #14
 8014d10:	f200 80a8 	bhi.w	8014e64 <_dtoa_r+0x47c>
 8014d14:	2c00      	cmp	r4, #0
 8014d16:	f000 80a5 	beq.w	8014e64 <_dtoa_r+0x47c>
 8014d1a:	f1ba 0f00 	cmp.w	sl, #0
 8014d1e:	dd34      	ble.n	8014d8a <_dtoa_r+0x3a2>
 8014d20:	4a9a      	ldr	r2, [pc, #616]	; (8014f8c <_dtoa_r+0x5a4>)
 8014d22:	f00a 030f 	and.w	r3, sl, #15
 8014d26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014d2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014d2e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014d32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014d36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8014d3a:	d016      	beq.n	8014d6a <_dtoa_r+0x382>
 8014d3c:	4b94      	ldr	r3, [pc, #592]	; (8014f90 <_dtoa_r+0x5a8>)
 8014d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014d42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014d46:	f7eb fe0d 	bl	8000964 <__aeabi_ddiv>
 8014d4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014d4e:	f004 040f 	and.w	r4, r4, #15
 8014d52:	2703      	movs	r7, #3
 8014d54:	4e8e      	ldr	r6, [pc, #568]	; (8014f90 <_dtoa_r+0x5a8>)
 8014d56:	b954      	cbnz	r4, 8014d6e <_dtoa_r+0x386>
 8014d58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014d5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d60:	f7eb fe00 	bl	8000964 <__aeabi_ddiv>
 8014d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014d68:	e029      	b.n	8014dbe <_dtoa_r+0x3d6>
 8014d6a:	2702      	movs	r7, #2
 8014d6c:	e7f2      	b.n	8014d54 <_dtoa_r+0x36c>
 8014d6e:	07e1      	lsls	r1, r4, #31
 8014d70:	d508      	bpl.n	8014d84 <_dtoa_r+0x39c>
 8014d72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014d76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014d7a:	f7eb fcc9 	bl	8000710 <__aeabi_dmul>
 8014d7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014d82:	3701      	adds	r7, #1
 8014d84:	1064      	asrs	r4, r4, #1
 8014d86:	3608      	adds	r6, #8
 8014d88:	e7e5      	b.n	8014d56 <_dtoa_r+0x36e>
 8014d8a:	f000 80a5 	beq.w	8014ed8 <_dtoa_r+0x4f0>
 8014d8e:	f1ca 0400 	rsb	r4, sl, #0
 8014d92:	4b7e      	ldr	r3, [pc, #504]	; (8014f8c <_dtoa_r+0x5a4>)
 8014d94:	4e7e      	ldr	r6, [pc, #504]	; (8014f90 <_dtoa_r+0x5a8>)
 8014d96:	f004 020f 	and.w	r2, r4, #15
 8014d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014da6:	f7eb fcb3 	bl	8000710 <__aeabi_dmul>
 8014daa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014dae:	1124      	asrs	r4, r4, #4
 8014db0:	2300      	movs	r3, #0
 8014db2:	2702      	movs	r7, #2
 8014db4:	2c00      	cmp	r4, #0
 8014db6:	f040 8084 	bne.w	8014ec2 <_dtoa_r+0x4da>
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d1d2      	bne.n	8014d64 <_dtoa_r+0x37c>
 8014dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 808b 	beq.w	8014edc <_dtoa_r+0x4f4>
 8014dc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014dca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014dce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014dd2:	4b70      	ldr	r3, [pc, #448]	; (8014f94 <_dtoa_r+0x5ac>)
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	f7eb ff0d 	bl	8000bf4 <__aeabi_dcmplt>
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	d07e      	beq.n	8014edc <_dtoa_r+0x4f4>
 8014dde:	9b08      	ldr	r3, [sp, #32]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d07b      	beq.n	8014edc <_dtoa_r+0x4f4>
 8014de4:	f1b9 0f00 	cmp.w	r9, #0
 8014de8:	dd38      	ble.n	8014e5c <_dtoa_r+0x474>
 8014dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014dee:	4b6a      	ldr	r3, [pc, #424]	; (8014f98 <_dtoa_r+0x5b0>)
 8014df0:	2200      	movs	r2, #0
 8014df2:	f7eb fc8d 	bl	8000710 <__aeabi_dmul>
 8014df6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014dfa:	f10a 38ff 	add.w	r8, sl, #4294967295
 8014dfe:	3701      	adds	r7, #1
 8014e00:	464c      	mov	r4, r9
 8014e02:	4638      	mov	r0, r7
 8014e04:	f7eb fc1a 	bl	800063c <__aeabi_i2d>
 8014e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e0c:	f7eb fc80 	bl	8000710 <__aeabi_dmul>
 8014e10:	4b62      	ldr	r3, [pc, #392]	; (8014f9c <_dtoa_r+0x5b4>)
 8014e12:	2200      	movs	r2, #0
 8014e14:	f7eb fac6 	bl	80003a4 <__adddf3>
 8014e18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014e1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014e20:	9611      	str	r6, [sp, #68]	; 0x44
 8014e22:	2c00      	cmp	r4, #0
 8014e24:	d15d      	bne.n	8014ee2 <_dtoa_r+0x4fa>
 8014e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e2a:	4b5d      	ldr	r3, [pc, #372]	; (8014fa0 <_dtoa_r+0x5b8>)
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	f7eb fab7 	bl	80003a0 <__aeabi_dsub>
 8014e32:	4602      	mov	r2, r0
 8014e34:	460b      	mov	r3, r1
 8014e36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014e3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e3c:	4633      	mov	r3, r6
 8014e3e:	f7eb fef7 	bl	8000c30 <__aeabi_dcmpgt>
 8014e42:	2800      	cmp	r0, #0
 8014e44:	f040 829c 	bne.w	8015380 <_dtoa_r+0x998>
 8014e48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014e52:	f7eb fecf 	bl	8000bf4 <__aeabi_dcmplt>
 8014e56:	2800      	cmp	r0, #0
 8014e58:	f040 8290 	bne.w	801537c <_dtoa_r+0x994>
 8014e5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8014e60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014e64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f2c0 8152 	blt.w	8015110 <_dtoa_r+0x728>
 8014e6c:	f1ba 0f0e 	cmp.w	sl, #14
 8014e70:	f300 814e 	bgt.w	8015110 <_dtoa_r+0x728>
 8014e74:	4b45      	ldr	r3, [pc, #276]	; (8014f8c <_dtoa_r+0x5a4>)
 8014e76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014e7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014e7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8014e82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f280 80db 	bge.w	8015040 <_dtoa_r+0x658>
 8014e8a:	9b08      	ldr	r3, [sp, #32]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	f300 80d7 	bgt.w	8015040 <_dtoa_r+0x658>
 8014e92:	f040 8272 	bne.w	801537a <_dtoa_r+0x992>
 8014e96:	4b42      	ldr	r3, [pc, #264]	; (8014fa0 <_dtoa_r+0x5b8>)
 8014e98:	2200      	movs	r2, #0
 8014e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e9e:	f7eb fc37 	bl	8000710 <__aeabi_dmul>
 8014ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ea6:	f7eb feb9 	bl	8000c1c <__aeabi_dcmpge>
 8014eaa:	9c08      	ldr	r4, [sp, #32]
 8014eac:	4626      	mov	r6, r4
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	f040 8248 	bne.w	8015344 <_dtoa_r+0x95c>
 8014eb4:	9f03      	ldr	r7, [sp, #12]
 8014eb6:	2331      	movs	r3, #49	; 0x31
 8014eb8:	f807 3b01 	strb.w	r3, [r7], #1
 8014ebc:	f10a 0a01 	add.w	sl, sl, #1
 8014ec0:	e244      	b.n	801534c <_dtoa_r+0x964>
 8014ec2:	07e2      	lsls	r2, r4, #31
 8014ec4:	d505      	bpl.n	8014ed2 <_dtoa_r+0x4ea>
 8014ec6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014eca:	f7eb fc21 	bl	8000710 <__aeabi_dmul>
 8014ece:	3701      	adds	r7, #1
 8014ed0:	2301      	movs	r3, #1
 8014ed2:	1064      	asrs	r4, r4, #1
 8014ed4:	3608      	adds	r6, #8
 8014ed6:	e76d      	b.n	8014db4 <_dtoa_r+0x3cc>
 8014ed8:	2702      	movs	r7, #2
 8014eda:	e770      	b.n	8014dbe <_dtoa_r+0x3d6>
 8014edc:	9c08      	ldr	r4, [sp, #32]
 8014ede:	46d0      	mov	r8, sl
 8014ee0:	e78f      	b.n	8014e02 <_dtoa_r+0x41a>
 8014ee2:	9903      	ldr	r1, [sp, #12]
 8014ee4:	4b29      	ldr	r3, [pc, #164]	; (8014f8c <_dtoa_r+0x5a4>)
 8014ee6:	4421      	add	r1, r4
 8014ee8:	9112      	str	r1, [sp, #72]	; 0x48
 8014eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014eec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014ef0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014ef4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014ef8:	2900      	cmp	r1, #0
 8014efa:	d055      	beq.n	8014fa8 <_dtoa_r+0x5c0>
 8014efc:	4929      	ldr	r1, [pc, #164]	; (8014fa4 <_dtoa_r+0x5bc>)
 8014efe:	2000      	movs	r0, #0
 8014f00:	f7eb fd30 	bl	8000964 <__aeabi_ddiv>
 8014f04:	463b      	mov	r3, r7
 8014f06:	4632      	mov	r2, r6
 8014f08:	f7eb fa4a 	bl	80003a0 <__aeabi_dsub>
 8014f0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014f10:	9f03      	ldr	r7, [sp, #12]
 8014f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014f16:	f7eb feab 	bl	8000c70 <__aeabi_d2iz>
 8014f1a:	4604      	mov	r4, r0
 8014f1c:	f7eb fb8e 	bl	800063c <__aeabi_i2d>
 8014f20:	4602      	mov	r2, r0
 8014f22:	460b      	mov	r3, r1
 8014f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014f28:	f7eb fa3a 	bl	80003a0 <__aeabi_dsub>
 8014f2c:	3430      	adds	r4, #48	; 0x30
 8014f2e:	4602      	mov	r2, r0
 8014f30:	460b      	mov	r3, r1
 8014f32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014f36:	f807 4b01 	strb.w	r4, [r7], #1
 8014f3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014f3e:	f7eb fe59 	bl	8000bf4 <__aeabi_dcmplt>
 8014f42:	2800      	cmp	r0, #0
 8014f44:	d174      	bne.n	8015030 <_dtoa_r+0x648>
 8014f46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f4a:	4912      	ldr	r1, [pc, #72]	; (8014f94 <_dtoa_r+0x5ac>)
 8014f4c:	2000      	movs	r0, #0
 8014f4e:	f7eb fa27 	bl	80003a0 <__aeabi_dsub>
 8014f52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014f56:	f7eb fe4d 	bl	8000bf4 <__aeabi_dcmplt>
 8014f5a:	2800      	cmp	r0, #0
 8014f5c:	f040 80b7 	bne.w	80150ce <_dtoa_r+0x6e6>
 8014f60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f62:	429f      	cmp	r7, r3
 8014f64:	f43f af7a 	beq.w	8014e5c <_dtoa_r+0x474>
 8014f68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014f6c:	4b0a      	ldr	r3, [pc, #40]	; (8014f98 <_dtoa_r+0x5b0>)
 8014f6e:	2200      	movs	r2, #0
 8014f70:	f7eb fbce 	bl	8000710 <__aeabi_dmul>
 8014f74:	4b08      	ldr	r3, [pc, #32]	; (8014f98 <_dtoa_r+0x5b0>)
 8014f76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014f80:	f7eb fbc6 	bl	8000710 <__aeabi_dmul>
 8014f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f88:	e7c3      	b.n	8014f12 <_dtoa_r+0x52a>
 8014f8a:	bf00      	nop
 8014f8c:	080192f8 	.word	0x080192f8
 8014f90:	080192d0 	.word	0x080192d0
 8014f94:	3ff00000 	.word	0x3ff00000
 8014f98:	40240000 	.word	0x40240000
 8014f9c:	401c0000 	.word	0x401c0000
 8014fa0:	40140000 	.word	0x40140000
 8014fa4:	3fe00000 	.word	0x3fe00000
 8014fa8:	4630      	mov	r0, r6
 8014faa:	4639      	mov	r1, r7
 8014fac:	f7eb fbb0 	bl	8000710 <__aeabi_dmul>
 8014fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014fb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014fb6:	9c03      	ldr	r4, [sp, #12]
 8014fb8:	9314      	str	r3, [sp, #80]	; 0x50
 8014fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014fbe:	f7eb fe57 	bl	8000c70 <__aeabi_d2iz>
 8014fc2:	9015      	str	r0, [sp, #84]	; 0x54
 8014fc4:	f7eb fb3a 	bl	800063c <__aeabi_i2d>
 8014fc8:	4602      	mov	r2, r0
 8014fca:	460b      	mov	r3, r1
 8014fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014fd0:	f7eb f9e6 	bl	80003a0 <__aeabi_dsub>
 8014fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fd6:	3330      	adds	r3, #48	; 0x30
 8014fd8:	f804 3b01 	strb.w	r3, [r4], #1
 8014fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014fde:	429c      	cmp	r4, r3
 8014fe0:	4606      	mov	r6, r0
 8014fe2:	460f      	mov	r7, r1
 8014fe4:	f04f 0200 	mov.w	r2, #0
 8014fe8:	d124      	bne.n	8015034 <_dtoa_r+0x64c>
 8014fea:	4ba4      	ldr	r3, [pc, #656]	; (801527c <_dtoa_r+0x894>)
 8014fec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014ff0:	f7eb f9d8 	bl	80003a4 <__adddf3>
 8014ff4:	4602      	mov	r2, r0
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	4630      	mov	r0, r6
 8014ffa:	4639      	mov	r1, r7
 8014ffc:	f7eb fe18 	bl	8000c30 <__aeabi_dcmpgt>
 8015000:	2800      	cmp	r0, #0
 8015002:	d163      	bne.n	80150cc <_dtoa_r+0x6e4>
 8015004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015008:	499c      	ldr	r1, [pc, #624]	; (801527c <_dtoa_r+0x894>)
 801500a:	2000      	movs	r0, #0
 801500c:	f7eb f9c8 	bl	80003a0 <__aeabi_dsub>
 8015010:	4602      	mov	r2, r0
 8015012:	460b      	mov	r3, r1
 8015014:	4630      	mov	r0, r6
 8015016:	4639      	mov	r1, r7
 8015018:	f7eb fdec 	bl	8000bf4 <__aeabi_dcmplt>
 801501c:	2800      	cmp	r0, #0
 801501e:	f43f af1d 	beq.w	8014e5c <_dtoa_r+0x474>
 8015022:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8015024:	1e7b      	subs	r3, r7, #1
 8015026:	9314      	str	r3, [sp, #80]	; 0x50
 8015028:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801502c:	2b30      	cmp	r3, #48	; 0x30
 801502e:	d0f8      	beq.n	8015022 <_dtoa_r+0x63a>
 8015030:	46c2      	mov	sl, r8
 8015032:	e03b      	b.n	80150ac <_dtoa_r+0x6c4>
 8015034:	4b92      	ldr	r3, [pc, #584]	; (8015280 <_dtoa_r+0x898>)
 8015036:	f7eb fb6b 	bl	8000710 <__aeabi_dmul>
 801503a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801503e:	e7bc      	b.n	8014fba <_dtoa_r+0x5d2>
 8015040:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8015044:	9f03      	ldr	r7, [sp, #12]
 8015046:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801504a:	4640      	mov	r0, r8
 801504c:	4649      	mov	r1, r9
 801504e:	f7eb fc89 	bl	8000964 <__aeabi_ddiv>
 8015052:	f7eb fe0d 	bl	8000c70 <__aeabi_d2iz>
 8015056:	4604      	mov	r4, r0
 8015058:	f7eb faf0 	bl	800063c <__aeabi_i2d>
 801505c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015060:	f7eb fb56 	bl	8000710 <__aeabi_dmul>
 8015064:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8015068:	4602      	mov	r2, r0
 801506a:	460b      	mov	r3, r1
 801506c:	4640      	mov	r0, r8
 801506e:	4649      	mov	r1, r9
 8015070:	f7eb f996 	bl	80003a0 <__aeabi_dsub>
 8015074:	f807 6b01 	strb.w	r6, [r7], #1
 8015078:	9e03      	ldr	r6, [sp, #12]
 801507a:	f8dd c020 	ldr.w	ip, [sp, #32]
 801507e:	1bbe      	subs	r6, r7, r6
 8015080:	45b4      	cmp	ip, r6
 8015082:	4602      	mov	r2, r0
 8015084:	460b      	mov	r3, r1
 8015086:	d136      	bne.n	80150f6 <_dtoa_r+0x70e>
 8015088:	f7eb f98c 	bl	80003a4 <__adddf3>
 801508c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015090:	4680      	mov	r8, r0
 8015092:	4689      	mov	r9, r1
 8015094:	f7eb fdcc 	bl	8000c30 <__aeabi_dcmpgt>
 8015098:	bb58      	cbnz	r0, 80150f2 <_dtoa_r+0x70a>
 801509a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801509e:	4640      	mov	r0, r8
 80150a0:	4649      	mov	r1, r9
 80150a2:	f7eb fd9d 	bl	8000be0 <__aeabi_dcmpeq>
 80150a6:	b108      	cbz	r0, 80150ac <_dtoa_r+0x6c4>
 80150a8:	07e1      	lsls	r1, r4, #31
 80150aa:	d422      	bmi.n	80150f2 <_dtoa_r+0x70a>
 80150ac:	4628      	mov	r0, r5
 80150ae:	4659      	mov	r1, fp
 80150b0:	f000 fe6c 	bl	8015d8c <_Bfree>
 80150b4:	2300      	movs	r3, #0
 80150b6:	703b      	strb	r3, [r7, #0]
 80150b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80150ba:	f10a 0001 	add.w	r0, sl, #1
 80150be:	6018      	str	r0, [r3, #0]
 80150c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	f43f acdd 	beq.w	8014a82 <_dtoa_r+0x9a>
 80150c8:	601f      	str	r7, [r3, #0]
 80150ca:	e4da      	b.n	8014a82 <_dtoa_r+0x9a>
 80150cc:	4627      	mov	r7, r4
 80150ce:	463b      	mov	r3, r7
 80150d0:	461f      	mov	r7, r3
 80150d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80150d6:	2a39      	cmp	r2, #57	; 0x39
 80150d8:	d107      	bne.n	80150ea <_dtoa_r+0x702>
 80150da:	9a03      	ldr	r2, [sp, #12]
 80150dc:	429a      	cmp	r2, r3
 80150de:	d1f7      	bne.n	80150d0 <_dtoa_r+0x6e8>
 80150e0:	9903      	ldr	r1, [sp, #12]
 80150e2:	2230      	movs	r2, #48	; 0x30
 80150e4:	f108 0801 	add.w	r8, r8, #1
 80150e8:	700a      	strb	r2, [r1, #0]
 80150ea:	781a      	ldrb	r2, [r3, #0]
 80150ec:	3201      	adds	r2, #1
 80150ee:	701a      	strb	r2, [r3, #0]
 80150f0:	e79e      	b.n	8015030 <_dtoa_r+0x648>
 80150f2:	46d0      	mov	r8, sl
 80150f4:	e7eb      	b.n	80150ce <_dtoa_r+0x6e6>
 80150f6:	4b62      	ldr	r3, [pc, #392]	; (8015280 <_dtoa_r+0x898>)
 80150f8:	2200      	movs	r2, #0
 80150fa:	f7eb fb09 	bl	8000710 <__aeabi_dmul>
 80150fe:	2200      	movs	r2, #0
 8015100:	2300      	movs	r3, #0
 8015102:	4680      	mov	r8, r0
 8015104:	4689      	mov	r9, r1
 8015106:	f7eb fd6b 	bl	8000be0 <__aeabi_dcmpeq>
 801510a:	2800      	cmp	r0, #0
 801510c:	d09b      	beq.n	8015046 <_dtoa_r+0x65e>
 801510e:	e7cd      	b.n	80150ac <_dtoa_r+0x6c4>
 8015110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015112:	2a00      	cmp	r2, #0
 8015114:	f000 80d0 	beq.w	80152b8 <_dtoa_r+0x8d0>
 8015118:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801511a:	2a01      	cmp	r2, #1
 801511c:	f300 80b2 	bgt.w	8015284 <_dtoa_r+0x89c>
 8015120:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015122:	2a00      	cmp	r2, #0
 8015124:	f000 80a6 	beq.w	8015274 <_dtoa_r+0x88c>
 8015128:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801512c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801512e:	9f06      	ldr	r7, [sp, #24]
 8015130:	9a06      	ldr	r2, [sp, #24]
 8015132:	441a      	add	r2, r3
 8015134:	9206      	str	r2, [sp, #24]
 8015136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015138:	2101      	movs	r1, #1
 801513a:	441a      	add	r2, r3
 801513c:	4628      	mov	r0, r5
 801513e:	9209      	str	r2, [sp, #36]	; 0x24
 8015140:	f000 ff24 	bl	8015f8c <__i2b>
 8015144:	4606      	mov	r6, r0
 8015146:	2f00      	cmp	r7, #0
 8015148:	dd0c      	ble.n	8015164 <_dtoa_r+0x77c>
 801514a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801514c:	2b00      	cmp	r3, #0
 801514e:	dd09      	ble.n	8015164 <_dtoa_r+0x77c>
 8015150:	42bb      	cmp	r3, r7
 8015152:	9a06      	ldr	r2, [sp, #24]
 8015154:	bfa8      	it	ge
 8015156:	463b      	movge	r3, r7
 8015158:	1ad2      	subs	r2, r2, r3
 801515a:	9206      	str	r2, [sp, #24]
 801515c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801515e:	1aff      	subs	r7, r7, r3
 8015160:	1ad3      	subs	r3, r2, r3
 8015162:	9309      	str	r3, [sp, #36]	; 0x24
 8015164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015166:	b1f3      	cbz	r3, 80151a6 <_dtoa_r+0x7be>
 8015168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801516a:	2b00      	cmp	r3, #0
 801516c:	f000 80a8 	beq.w	80152c0 <_dtoa_r+0x8d8>
 8015170:	2c00      	cmp	r4, #0
 8015172:	dd10      	ble.n	8015196 <_dtoa_r+0x7ae>
 8015174:	4631      	mov	r1, r6
 8015176:	4622      	mov	r2, r4
 8015178:	4628      	mov	r0, r5
 801517a:	f000 ffc5 	bl	8016108 <__pow5mult>
 801517e:	465a      	mov	r2, fp
 8015180:	4601      	mov	r1, r0
 8015182:	4606      	mov	r6, r0
 8015184:	4628      	mov	r0, r5
 8015186:	f000 ff17 	bl	8015fb8 <__multiply>
 801518a:	4659      	mov	r1, fp
 801518c:	4680      	mov	r8, r0
 801518e:	4628      	mov	r0, r5
 8015190:	f000 fdfc 	bl	8015d8c <_Bfree>
 8015194:	46c3      	mov	fp, r8
 8015196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015198:	1b1a      	subs	r2, r3, r4
 801519a:	d004      	beq.n	80151a6 <_dtoa_r+0x7be>
 801519c:	4659      	mov	r1, fp
 801519e:	4628      	mov	r0, r5
 80151a0:	f000 ffb2 	bl	8016108 <__pow5mult>
 80151a4:	4683      	mov	fp, r0
 80151a6:	2101      	movs	r1, #1
 80151a8:	4628      	mov	r0, r5
 80151aa:	f000 feef 	bl	8015f8c <__i2b>
 80151ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	4604      	mov	r4, r0
 80151b4:	f340 8086 	ble.w	80152c4 <_dtoa_r+0x8dc>
 80151b8:	461a      	mov	r2, r3
 80151ba:	4601      	mov	r1, r0
 80151bc:	4628      	mov	r0, r5
 80151be:	f000 ffa3 	bl	8016108 <__pow5mult>
 80151c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80151c4:	2b01      	cmp	r3, #1
 80151c6:	4604      	mov	r4, r0
 80151c8:	dd7f      	ble.n	80152ca <_dtoa_r+0x8e2>
 80151ca:	f04f 0800 	mov.w	r8, #0
 80151ce:	6923      	ldr	r3, [r4, #16]
 80151d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80151d4:	6918      	ldr	r0, [r3, #16]
 80151d6:	f000 fe8b 	bl	8015ef0 <__hi0bits>
 80151da:	f1c0 0020 	rsb	r0, r0, #32
 80151de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151e0:	4418      	add	r0, r3
 80151e2:	f010 001f 	ands.w	r0, r0, #31
 80151e6:	f000 8092 	beq.w	801530e <_dtoa_r+0x926>
 80151ea:	f1c0 0320 	rsb	r3, r0, #32
 80151ee:	2b04      	cmp	r3, #4
 80151f0:	f340 808a 	ble.w	8015308 <_dtoa_r+0x920>
 80151f4:	f1c0 001c 	rsb	r0, r0, #28
 80151f8:	9b06      	ldr	r3, [sp, #24]
 80151fa:	4403      	add	r3, r0
 80151fc:	9306      	str	r3, [sp, #24]
 80151fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015200:	4403      	add	r3, r0
 8015202:	4407      	add	r7, r0
 8015204:	9309      	str	r3, [sp, #36]	; 0x24
 8015206:	9b06      	ldr	r3, [sp, #24]
 8015208:	2b00      	cmp	r3, #0
 801520a:	dd05      	ble.n	8015218 <_dtoa_r+0x830>
 801520c:	4659      	mov	r1, fp
 801520e:	461a      	mov	r2, r3
 8015210:	4628      	mov	r0, r5
 8015212:	f000 ffd3 	bl	80161bc <__lshift>
 8015216:	4683      	mov	fp, r0
 8015218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801521a:	2b00      	cmp	r3, #0
 801521c:	dd05      	ble.n	801522a <_dtoa_r+0x842>
 801521e:	4621      	mov	r1, r4
 8015220:	461a      	mov	r2, r3
 8015222:	4628      	mov	r0, r5
 8015224:	f000 ffca 	bl	80161bc <__lshift>
 8015228:	4604      	mov	r4, r0
 801522a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801522c:	2b00      	cmp	r3, #0
 801522e:	d070      	beq.n	8015312 <_dtoa_r+0x92a>
 8015230:	4621      	mov	r1, r4
 8015232:	4658      	mov	r0, fp
 8015234:	f001 f832 	bl	801629c <__mcmp>
 8015238:	2800      	cmp	r0, #0
 801523a:	da6a      	bge.n	8015312 <_dtoa_r+0x92a>
 801523c:	2300      	movs	r3, #0
 801523e:	4659      	mov	r1, fp
 8015240:	220a      	movs	r2, #10
 8015242:	4628      	mov	r0, r5
 8015244:	f000 fdc4 	bl	8015dd0 <__multadd>
 8015248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801524a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801524e:	4683      	mov	fp, r0
 8015250:	2b00      	cmp	r3, #0
 8015252:	f000 8194 	beq.w	801557e <_dtoa_r+0xb96>
 8015256:	4631      	mov	r1, r6
 8015258:	2300      	movs	r3, #0
 801525a:	220a      	movs	r2, #10
 801525c:	4628      	mov	r0, r5
 801525e:	f000 fdb7 	bl	8015dd0 <__multadd>
 8015262:	f1b9 0f00 	cmp.w	r9, #0
 8015266:	4606      	mov	r6, r0
 8015268:	f300 8093 	bgt.w	8015392 <_dtoa_r+0x9aa>
 801526c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801526e:	2b02      	cmp	r3, #2
 8015270:	dc57      	bgt.n	8015322 <_dtoa_r+0x93a>
 8015272:	e08e      	b.n	8015392 <_dtoa_r+0x9aa>
 8015274:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801527a:	e757      	b.n	801512c <_dtoa_r+0x744>
 801527c:	3fe00000 	.word	0x3fe00000
 8015280:	40240000 	.word	0x40240000
 8015284:	9b08      	ldr	r3, [sp, #32]
 8015286:	1e5c      	subs	r4, r3, #1
 8015288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801528a:	42a3      	cmp	r3, r4
 801528c:	bfbf      	itttt	lt
 801528e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015290:	940a      	strlt	r4, [sp, #40]	; 0x28
 8015292:	1ae2      	sublt	r2, r4, r3
 8015294:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015296:	bfb6      	itet	lt
 8015298:	189b      	addlt	r3, r3, r2
 801529a:	1b1c      	subge	r4, r3, r4
 801529c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801529e:	9b08      	ldr	r3, [sp, #32]
 80152a0:	bfb8      	it	lt
 80152a2:	2400      	movlt	r4, #0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	bfb9      	ittee	lt
 80152a8:	9b06      	ldrlt	r3, [sp, #24]
 80152aa:	9a08      	ldrlt	r2, [sp, #32]
 80152ac:	9f06      	ldrge	r7, [sp, #24]
 80152ae:	9b08      	ldrge	r3, [sp, #32]
 80152b0:	bfbc      	itt	lt
 80152b2:	1a9f      	sublt	r7, r3, r2
 80152b4:	2300      	movlt	r3, #0
 80152b6:	e73b      	b.n	8015130 <_dtoa_r+0x748>
 80152b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80152ba:	9f06      	ldr	r7, [sp, #24]
 80152bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80152be:	e742      	b.n	8015146 <_dtoa_r+0x75e>
 80152c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152c2:	e76b      	b.n	801519c <_dtoa_r+0x7b4>
 80152c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80152c6:	2b01      	cmp	r3, #1
 80152c8:	dc19      	bgt.n	80152fe <_dtoa_r+0x916>
 80152ca:	9b04      	ldr	r3, [sp, #16]
 80152cc:	b9bb      	cbnz	r3, 80152fe <_dtoa_r+0x916>
 80152ce:	9b05      	ldr	r3, [sp, #20]
 80152d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80152d4:	b99b      	cbnz	r3, 80152fe <_dtoa_r+0x916>
 80152d6:	9b05      	ldr	r3, [sp, #20]
 80152d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80152dc:	0d1b      	lsrs	r3, r3, #20
 80152de:	051b      	lsls	r3, r3, #20
 80152e0:	b183      	cbz	r3, 8015304 <_dtoa_r+0x91c>
 80152e2:	9b06      	ldr	r3, [sp, #24]
 80152e4:	3301      	adds	r3, #1
 80152e6:	9306      	str	r3, [sp, #24]
 80152e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152ea:	3301      	adds	r3, #1
 80152ec:	9309      	str	r3, [sp, #36]	; 0x24
 80152ee:	f04f 0801 	mov.w	r8, #1
 80152f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	f47f af6a 	bne.w	80151ce <_dtoa_r+0x7e6>
 80152fa:	2001      	movs	r0, #1
 80152fc:	e76f      	b.n	80151de <_dtoa_r+0x7f6>
 80152fe:	f04f 0800 	mov.w	r8, #0
 8015302:	e7f6      	b.n	80152f2 <_dtoa_r+0x90a>
 8015304:	4698      	mov	r8, r3
 8015306:	e7f4      	b.n	80152f2 <_dtoa_r+0x90a>
 8015308:	f43f af7d 	beq.w	8015206 <_dtoa_r+0x81e>
 801530c:	4618      	mov	r0, r3
 801530e:	301c      	adds	r0, #28
 8015310:	e772      	b.n	80151f8 <_dtoa_r+0x810>
 8015312:	9b08      	ldr	r3, [sp, #32]
 8015314:	2b00      	cmp	r3, #0
 8015316:	dc36      	bgt.n	8015386 <_dtoa_r+0x99e>
 8015318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801531a:	2b02      	cmp	r3, #2
 801531c:	dd33      	ble.n	8015386 <_dtoa_r+0x99e>
 801531e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015322:	f1b9 0f00 	cmp.w	r9, #0
 8015326:	d10d      	bne.n	8015344 <_dtoa_r+0x95c>
 8015328:	4621      	mov	r1, r4
 801532a:	464b      	mov	r3, r9
 801532c:	2205      	movs	r2, #5
 801532e:	4628      	mov	r0, r5
 8015330:	f000 fd4e 	bl	8015dd0 <__multadd>
 8015334:	4601      	mov	r1, r0
 8015336:	4604      	mov	r4, r0
 8015338:	4658      	mov	r0, fp
 801533a:	f000 ffaf 	bl	801629c <__mcmp>
 801533e:	2800      	cmp	r0, #0
 8015340:	f73f adb8 	bgt.w	8014eb4 <_dtoa_r+0x4cc>
 8015344:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015346:	9f03      	ldr	r7, [sp, #12]
 8015348:	ea6f 0a03 	mvn.w	sl, r3
 801534c:	f04f 0800 	mov.w	r8, #0
 8015350:	4621      	mov	r1, r4
 8015352:	4628      	mov	r0, r5
 8015354:	f000 fd1a 	bl	8015d8c <_Bfree>
 8015358:	2e00      	cmp	r6, #0
 801535a:	f43f aea7 	beq.w	80150ac <_dtoa_r+0x6c4>
 801535e:	f1b8 0f00 	cmp.w	r8, #0
 8015362:	d005      	beq.n	8015370 <_dtoa_r+0x988>
 8015364:	45b0      	cmp	r8, r6
 8015366:	d003      	beq.n	8015370 <_dtoa_r+0x988>
 8015368:	4641      	mov	r1, r8
 801536a:	4628      	mov	r0, r5
 801536c:	f000 fd0e 	bl	8015d8c <_Bfree>
 8015370:	4631      	mov	r1, r6
 8015372:	4628      	mov	r0, r5
 8015374:	f000 fd0a 	bl	8015d8c <_Bfree>
 8015378:	e698      	b.n	80150ac <_dtoa_r+0x6c4>
 801537a:	2400      	movs	r4, #0
 801537c:	4626      	mov	r6, r4
 801537e:	e7e1      	b.n	8015344 <_dtoa_r+0x95c>
 8015380:	46c2      	mov	sl, r8
 8015382:	4626      	mov	r6, r4
 8015384:	e596      	b.n	8014eb4 <_dtoa_r+0x4cc>
 8015386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015388:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801538c:	2b00      	cmp	r3, #0
 801538e:	f000 80fd 	beq.w	801558c <_dtoa_r+0xba4>
 8015392:	2f00      	cmp	r7, #0
 8015394:	dd05      	ble.n	80153a2 <_dtoa_r+0x9ba>
 8015396:	4631      	mov	r1, r6
 8015398:	463a      	mov	r2, r7
 801539a:	4628      	mov	r0, r5
 801539c:	f000 ff0e 	bl	80161bc <__lshift>
 80153a0:	4606      	mov	r6, r0
 80153a2:	f1b8 0f00 	cmp.w	r8, #0
 80153a6:	d05c      	beq.n	8015462 <_dtoa_r+0xa7a>
 80153a8:	6871      	ldr	r1, [r6, #4]
 80153aa:	4628      	mov	r0, r5
 80153ac:	f000 fcae 	bl	8015d0c <_Balloc>
 80153b0:	4607      	mov	r7, r0
 80153b2:	b928      	cbnz	r0, 80153c0 <_dtoa_r+0x9d8>
 80153b4:	4b80      	ldr	r3, [pc, #512]	; (80155b8 <_dtoa_r+0xbd0>)
 80153b6:	4602      	mov	r2, r0
 80153b8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80153bc:	f7ff bb28 	b.w	8014a10 <_dtoa_r+0x28>
 80153c0:	6932      	ldr	r2, [r6, #16]
 80153c2:	3202      	adds	r2, #2
 80153c4:	0092      	lsls	r2, r2, #2
 80153c6:	f106 010c 	add.w	r1, r6, #12
 80153ca:	300c      	adds	r0, #12
 80153cc:	f000 fc90 	bl	8015cf0 <memcpy>
 80153d0:	2201      	movs	r2, #1
 80153d2:	4639      	mov	r1, r7
 80153d4:	4628      	mov	r0, r5
 80153d6:	f000 fef1 	bl	80161bc <__lshift>
 80153da:	9b03      	ldr	r3, [sp, #12]
 80153dc:	3301      	adds	r3, #1
 80153de:	9308      	str	r3, [sp, #32]
 80153e0:	9b03      	ldr	r3, [sp, #12]
 80153e2:	444b      	add	r3, r9
 80153e4:	930a      	str	r3, [sp, #40]	; 0x28
 80153e6:	9b04      	ldr	r3, [sp, #16]
 80153e8:	f003 0301 	and.w	r3, r3, #1
 80153ec:	46b0      	mov	r8, r6
 80153ee:	9309      	str	r3, [sp, #36]	; 0x24
 80153f0:	4606      	mov	r6, r0
 80153f2:	9b08      	ldr	r3, [sp, #32]
 80153f4:	4621      	mov	r1, r4
 80153f6:	3b01      	subs	r3, #1
 80153f8:	4658      	mov	r0, fp
 80153fa:	9304      	str	r3, [sp, #16]
 80153fc:	f7ff fa6a 	bl	80148d4 <quorem>
 8015400:	4603      	mov	r3, r0
 8015402:	3330      	adds	r3, #48	; 0x30
 8015404:	9006      	str	r0, [sp, #24]
 8015406:	4641      	mov	r1, r8
 8015408:	4658      	mov	r0, fp
 801540a:	930b      	str	r3, [sp, #44]	; 0x2c
 801540c:	f000 ff46 	bl	801629c <__mcmp>
 8015410:	4632      	mov	r2, r6
 8015412:	4681      	mov	r9, r0
 8015414:	4621      	mov	r1, r4
 8015416:	4628      	mov	r0, r5
 8015418:	f000 ff5c 	bl	80162d4 <__mdiff>
 801541c:	68c2      	ldr	r2, [r0, #12]
 801541e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015420:	4607      	mov	r7, r0
 8015422:	bb02      	cbnz	r2, 8015466 <_dtoa_r+0xa7e>
 8015424:	4601      	mov	r1, r0
 8015426:	4658      	mov	r0, fp
 8015428:	f000 ff38 	bl	801629c <__mcmp>
 801542c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801542e:	4602      	mov	r2, r0
 8015430:	4639      	mov	r1, r7
 8015432:	4628      	mov	r0, r5
 8015434:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8015438:	f000 fca8 	bl	8015d8c <_Bfree>
 801543c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801543e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015440:	9f08      	ldr	r7, [sp, #32]
 8015442:	ea43 0102 	orr.w	r1, r3, r2
 8015446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015448:	430b      	orrs	r3, r1
 801544a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801544c:	d10d      	bne.n	801546a <_dtoa_r+0xa82>
 801544e:	2b39      	cmp	r3, #57	; 0x39
 8015450:	d029      	beq.n	80154a6 <_dtoa_r+0xabe>
 8015452:	f1b9 0f00 	cmp.w	r9, #0
 8015456:	dd01      	ble.n	801545c <_dtoa_r+0xa74>
 8015458:	9b06      	ldr	r3, [sp, #24]
 801545a:	3331      	adds	r3, #49	; 0x31
 801545c:	9a04      	ldr	r2, [sp, #16]
 801545e:	7013      	strb	r3, [r2, #0]
 8015460:	e776      	b.n	8015350 <_dtoa_r+0x968>
 8015462:	4630      	mov	r0, r6
 8015464:	e7b9      	b.n	80153da <_dtoa_r+0x9f2>
 8015466:	2201      	movs	r2, #1
 8015468:	e7e2      	b.n	8015430 <_dtoa_r+0xa48>
 801546a:	f1b9 0f00 	cmp.w	r9, #0
 801546e:	db06      	blt.n	801547e <_dtoa_r+0xa96>
 8015470:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015472:	ea41 0909 	orr.w	r9, r1, r9
 8015476:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015478:	ea59 0101 	orrs.w	r1, r9, r1
 801547c:	d120      	bne.n	80154c0 <_dtoa_r+0xad8>
 801547e:	2a00      	cmp	r2, #0
 8015480:	ddec      	ble.n	801545c <_dtoa_r+0xa74>
 8015482:	4659      	mov	r1, fp
 8015484:	2201      	movs	r2, #1
 8015486:	4628      	mov	r0, r5
 8015488:	9308      	str	r3, [sp, #32]
 801548a:	f000 fe97 	bl	80161bc <__lshift>
 801548e:	4621      	mov	r1, r4
 8015490:	4683      	mov	fp, r0
 8015492:	f000 ff03 	bl	801629c <__mcmp>
 8015496:	2800      	cmp	r0, #0
 8015498:	9b08      	ldr	r3, [sp, #32]
 801549a:	dc02      	bgt.n	80154a2 <_dtoa_r+0xaba>
 801549c:	d1de      	bne.n	801545c <_dtoa_r+0xa74>
 801549e:	07da      	lsls	r2, r3, #31
 80154a0:	d5dc      	bpl.n	801545c <_dtoa_r+0xa74>
 80154a2:	2b39      	cmp	r3, #57	; 0x39
 80154a4:	d1d8      	bne.n	8015458 <_dtoa_r+0xa70>
 80154a6:	9a04      	ldr	r2, [sp, #16]
 80154a8:	2339      	movs	r3, #57	; 0x39
 80154aa:	7013      	strb	r3, [r2, #0]
 80154ac:	463b      	mov	r3, r7
 80154ae:	461f      	mov	r7, r3
 80154b0:	3b01      	subs	r3, #1
 80154b2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80154b6:	2a39      	cmp	r2, #57	; 0x39
 80154b8:	d050      	beq.n	801555c <_dtoa_r+0xb74>
 80154ba:	3201      	adds	r2, #1
 80154bc:	701a      	strb	r2, [r3, #0]
 80154be:	e747      	b.n	8015350 <_dtoa_r+0x968>
 80154c0:	2a00      	cmp	r2, #0
 80154c2:	dd03      	ble.n	80154cc <_dtoa_r+0xae4>
 80154c4:	2b39      	cmp	r3, #57	; 0x39
 80154c6:	d0ee      	beq.n	80154a6 <_dtoa_r+0xabe>
 80154c8:	3301      	adds	r3, #1
 80154ca:	e7c7      	b.n	801545c <_dtoa_r+0xa74>
 80154cc:	9a08      	ldr	r2, [sp, #32]
 80154ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80154d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80154d4:	428a      	cmp	r2, r1
 80154d6:	d02a      	beq.n	801552e <_dtoa_r+0xb46>
 80154d8:	4659      	mov	r1, fp
 80154da:	2300      	movs	r3, #0
 80154dc:	220a      	movs	r2, #10
 80154de:	4628      	mov	r0, r5
 80154e0:	f000 fc76 	bl	8015dd0 <__multadd>
 80154e4:	45b0      	cmp	r8, r6
 80154e6:	4683      	mov	fp, r0
 80154e8:	f04f 0300 	mov.w	r3, #0
 80154ec:	f04f 020a 	mov.w	r2, #10
 80154f0:	4641      	mov	r1, r8
 80154f2:	4628      	mov	r0, r5
 80154f4:	d107      	bne.n	8015506 <_dtoa_r+0xb1e>
 80154f6:	f000 fc6b 	bl	8015dd0 <__multadd>
 80154fa:	4680      	mov	r8, r0
 80154fc:	4606      	mov	r6, r0
 80154fe:	9b08      	ldr	r3, [sp, #32]
 8015500:	3301      	adds	r3, #1
 8015502:	9308      	str	r3, [sp, #32]
 8015504:	e775      	b.n	80153f2 <_dtoa_r+0xa0a>
 8015506:	f000 fc63 	bl	8015dd0 <__multadd>
 801550a:	4631      	mov	r1, r6
 801550c:	4680      	mov	r8, r0
 801550e:	2300      	movs	r3, #0
 8015510:	220a      	movs	r2, #10
 8015512:	4628      	mov	r0, r5
 8015514:	f000 fc5c 	bl	8015dd0 <__multadd>
 8015518:	4606      	mov	r6, r0
 801551a:	e7f0      	b.n	80154fe <_dtoa_r+0xb16>
 801551c:	f1b9 0f00 	cmp.w	r9, #0
 8015520:	9a03      	ldr	r2, [sp, #12]
 8015522:	bfcc      	ite	gt
 8015524:	464f      	movgt	r7, r9
 8015526:	2701      	movle	r7, #1
 8015528:	4417      	add	r7, r2
 801552a:	f04f 0800 	mov.w	r8, #0
 801552e:	4659      	mov	r1, fp
 8015530:	2201      	movs	r2, #1
 8015532:	4628      	mov	r0, r5
 8015534:	9308      	str	r3, [sp, #32]
 8015536:	f000 fe41 	bl	80161bc <__lshift>
 801553a:	4621      	mov	r1, r4
 801553c:	4683      	mov	fp, r0
 801553e:	f000 fead 	bl	801629c <__mcmp>
 8015542:	2800      	cmp	r0, #0
 8015544:	dcb2      	bgt.n	80154ac <_dtoa_r+0xac4>
 8015546:	d102      	bne.n	801554e <_dtoa_r+0xb66>
 8015548:	9b08      	ldr	r3, [sp, #32]
 801554a:	07db      	lsls	r3, r3, #31
 801554c:	d4ae      	bmi.n	80154ac <_dtoa_r+0xac4>
 801554e:	463b      	mov	r3, r7
 8015550:	461f      	mov	r7, r3
 8015552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015556:	2a30      	cmp	r2, #48	; 0x30
 8015558:	d0fa      	beq.n	8015550 <_dtoa_r+0xb68>
 801555a:	e6f9      	b.n	8015350 <_dtoa_r+0x968>
 801555c:	9a03      	ldr	r2, [sp, #12]
 801555e:	429a      	cmp	r2, r3
 8015560:	d1a5      	bne.n	80154ae <_dtoa_r+0xac6>
 8015562:	f10a 0a01 	add.w	sl, sl, #1
 8015566:	2331      	movs	r3, #49	; 0x31
 8015568:	e779      	b.n	801545e <_dtoa_r+0xa76>
 801556a:	4b14      	ldr	r3, [pc, #80]	; (80155bc <_dtoa_r+0xbd4>)
 801556c:	f7ff baa7 	b.w	8014abe <_dtoa_r+0xd6>
 8015570:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015572:	2b00      	cmp	r3, #0
 8015574:	f47f aa80 	bne.w	8014a78 <_dtoa_r+0x90>
 8015578:	4b11      	ldr	r3, [pc, #68]	; (80155c0 <_dtoa_r+0xbd8>)
 801557a:	f7ff baa0 	b.w	8014abe <_dtoa_r+0xd6>
 801557e:	f1b9 0f00 	cmp.w	r9, #0
 8015582:	dc03      	bgt.n	801558c <_dtoa_r+0xba4>
 8015584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015586:	2b02      	cmp	r3, #2
 8015588:	f73f aecb 	bgt.w	8015322 <_dtoa_r+0x93a>
 801558c:	9f03      	ldr	r7, [sp, #12]
 801558e:	4621      	mov	r1, r4
 8015590:	4658      	mov	r0, fp
 8015592:	f7ff f99f 	bl	80148d4 <quorem>
 8015596:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801559a:	f807 3b01 	strb.w	r3, [r7], #1
 801559e:	9a03      	ldr	r2, [sp, #12]
 80155a0:	1aba      	subs	r2, r7, r2
 80155a2:	4591      	cmp	r9, r2
 80155a4:	ddba      	ble.n	801551c <_dtoa_r+0xb34>
 80155a6:	4659      	mov	r1, fp
 80155a8:	2300      	movs	r3, #0
 80155aa:	220a      	movs	r2, #10
 80155ac:	4628      	mov	r0, r5
 80155ae:	f000 fc0f 	bl	8015dd0 <__multadd>
 80155b2:	4683      	mov	fp, r0
 80155b4:	e7eb      	b.n	801558e <_dtoa_r+0xba6>
 80155b6:	bf00      	nop
 80155b8:	080191e8 	.word	0x080191e8
 80155bc:	080193e1 	.word	0x080193e1
 80155c0:	08019169 	.word	0x08019169

080155c4 <rshift>:
 80155c4:	6903      	ldr	r3, [r0, #16]
 80155c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80155ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80155d2:	f100 0414 	add.w	r4, r0, #20
 80155d6:	dd45      	ble.n	8015664 <rshift+0xa0>
 80155d8:	f011 011f 	ands.w	r1, r1, #31
 80155dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80155e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80155e4:	d10c      	bne.n	8015600 <rshift+0x3c>
 80155e6:	f100 0710 	add.w	r7, r0, #16
 80155ea:	4629      	mov	r1, r5
 80155ec:	42b1      	cmp	r1, r6
 80155ee:	d334      	bcc.n	801565a <rshift+0x96>
 80155f0:	1a9b      	subs	r3, r3, r2
 80155f2:	009b      	lsls	r3, r3, #2
 80155f4:	1eea      	subs	r2, r5, #3
 80155f6:	4296      	cmp	r6, r2
 80155f8:	bf38      	it	cc
 80155fa:	2300      	movcc	r3, #0
 80155fc:	4423      	add	r3, r4
 80155fe:	e015      	b.n	801562c <rshift+0x68>
 8015600:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015604:	f1c1 0820 	rsb	r8, r1, #32
 8015608:	40cf      	lsrs	r7, r1
 801560a:	f105 0e04 	add.w	lr, r5, #4
 801560e:	46a1      	mov	r9, r4
 8015610:	4576      	cmp	r6, lr
 8015612:	46f4      	mov	ip, lr
 8015614:	d815      	bhi.n	8015642 <rshift+0x7e>
 8015616:	1a9a      	subs	r2, r3, r2
 8015618:	0092      	lsls	r2, r2, #2
 801561a:	3a04      	subs	r2, #4
 801561c:	3501      	adds	r5, #1
 801561e:	42ae      	cmp	r6, r5
 8015620:	bf38      	it	cc
 8015622:	2200      	movcc	r2, #0
 8015624:	18a3      	adds	r3, r4, r2
 8015626:	50a7      	str	r7, [r4, r2]
 8015628:	b107      	cbz	r7, 801562c <rshift+0x68>
 801562a:	3304      	adds	r3, #4
 801562c:	1b1a      	subs	r2, r3, r4
 801562e:	42a3      	cmp	r3, r4
 8015630:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015634:	bf08      	it	eq
 8015636:	2300      	moveq	r3, #0
 8015638:	6102      	str	r2, [r0, #16]
 801563a:	bf08      	it	eq
 801563c:	6143      	streq	r3, [r0, #20]
 801563e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015642:	f8dc c000 	ldr.w	ip, [ip]
 8015646:	fa0c fc08 	lsl.w	ip, ip, r8
 801564a:	ea4c 0707 	orr.w	r7, ip, r7
 801564e:	f849 7b04 	str.w	r7, [r9], #4
 8015652:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015656:	40cf      	lsrs	r7, r1
 8015658:	e7da      	b.n	8015610 <rshift+0x4c>
 801565a:	f851 cb04 	ldr.w	ip, [r1], #4
 801565e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015662:	e7c3      	b.n	80155ec <rshift+0x28>
 8015664:	4623      	mov	r3, r4
 8015666:	e7e1      	b.n	801562c <rshift+0x68>

08015668 <__hexdig_fun>:
 8015668:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801566c:	2b09      	cmp	r3, #9
 801566e:	d802      	bhi.n	8015676 <__hexdig_fun+0xe>
 8015670:	3820      	subs	r0, #32
 8015672:	b2c0      	uxtb	r0, r0
 8015674:	4770      	bx	lr
 8015676:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801567a:	2b05      	cmp	r3, #5
 801567c:	d801      	bhi.n	8015682 <__hexdig_fun+0x1a>
 801567e:	3847      	subs	r0, #71	; 0x47
 8015680:	e7f7      	b.n	8015672 <__hexdig_fun+0xa>
 8015682:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015686:	2b05      	cmp	r3, #5
 8015688:	d801      	bhi.n	801568e <__hexdig_fun+0x26>
 801568a:	3827      	subs	r0, #39	; 0x27
 801568c:	e7f1      	b.n	8015672 <__hexdig_fun+0xa>
 801568e:	2000      	movs	r0, #0
 8015690:	4770      	bx	lr
	...

08015694 <__gethex>:
 8015694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015698:	b08b      	sub	sp, #44	; 0x2c
 801569a:	468b      	mov	fp, r1
 801569c:	9305      	str	r3, [sp, #20]
 801569e:	4bb2      	ldr	r3, [pc, #712]	; (8015968 <__gethex+0x2d4>)
 80156a0:	9002      	str	r0, [sp, #8]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	9303      	str	r3, [sp, #12]
 80156a6:	4618      	mov	r0, r3
 80156a8:	4690      	mov	r8, r2
 80156aa:	f7ea fd69 	bl	8000180 <strlen>
 80156ae:	9b03      	ldr	r3, [sp, #12]
 80156b0:	f8db 2000 	ldr.w	r2, [fp]
 80156b4:	4403      	add	r3, r0
 80156b6:	4682      	mov	sl, r0
 80156b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80156bc:	9306      	str	r3, [sp, #24]
 80156be:	1c93      	adds	r3, r2, #2
 80156c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80156c4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80156c8:	32fe      	adds	r2, #254	; 0xfe
 80156ca:	18d1      	adds	r1, r2, r3
 80156cc:	461f      	mov	r7, r3
 80156ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80156d2:	9101      	str	r1, [sp, #4]
 80156d4:	2830      	cmp	r0, #48	; 0x30
 80156d6:	d0f8      	beq.n	80156ca <__gethex+0x36>
 80156d8:	f7ff ffc6 	bl	8015668 <__hexdig_fun>
 80156dc:	4604      	mov	r4, r0
 80156de:	2800      	cmp	r0, #0
 80156e0:	d13a      	bne.n	8015758 <__gethex+0xc4>
 80156e2:	9903      	ldr	r1, [sp, #12]
 80156e4:	4652      	mov	r2, sl
 80156e6:	4638      	mov	r0, r7
 80156e8:	f001 fd96 	bl	8017218 <strncmp>
 80156ec:	4605      	mov	r5, r0
 80156ee:	2800      	cmp	r0, #0
 80156f0:	d166      	bne.n	80157c0 <__gethex+0x12c>
 80156f2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80156f6:	eb07 060a 	add.w	r6, r7, sl
 80156fa:	f7ff ffb5 	bl	8015668 <__hexdig_fun>
 80156fe:	2800      	cmp	r0, #0
 8015700:	d060      	beq.n	80157c4 <__gethex+0x130>
 8015702:	4633      	mov	r3, r6
 8015704:	7818      	ldrb	r0, [r3, #0]
 8015706:	2830      	cmp	r0, #48	; 0x30
 8015708:	461f      	mov	r7, r3
 801570a:	f103 0301 	add.w	r3, r3, #1
 801570e:	d0f9      	beq.n	8015704 <__gethex+0x70>
 8015710:	f7ff ffaa 	bl	8015668 <__hexdig_fun>
 8015714:	2301      	movs	r3, #1
 8015716:	fab0 f480 	clz	r4, r0
 801571a:	0964      	lsrs	r4, r4, #5
 801571c:	4635      	mov	r5, r6
 801571e:	9301      	str	r3, [sp, #4]
 8015720:	463a      	mov	r2, r7
 8015722:	4616      	mov	r6, r2
 8015724:	3201      	adds	r2, #1
 8015726:	7830      	ldrb	r0, [r6, #0]
 8015728:	f7ff ff9e 	bl	8015668 <__hexdig_fun>
 801572c:	2800      	cmp	r0, #0
 801572e:	d1f8      	bne.n	8015722 <__gethex+0x8e>
 8015730:	9903      	ldr	r1, [sp, #12]
 8015732:	4652      	mov	r2, sl
 8015734:	4630      	mov	r0, r6
 8015736:	f001 fd6f 	bl	8017218 <strncmp>
 801573a:	b980      	cbnz	r0, 801575e <__gethex+0xca>
 801573c:	b94d      	cbnz	r5, 8015752 <__gethex+0xbe>
 801573e:	eb06 050a 	add.w	r5, r6, sl
 8015742:	462a      	mov	r2, r5
 8015744:	4616      	mov	r6, r2
 8015746:	3201      	adds	r2, #1
 8015748:	7830      	ldrb	r0, [r6, #0]
 801574a:	f7ff ff8d 	bl	8015668 <__hexdig_fun>
 801574e:	2800      	cmp	r0, #0
 8015750:	d1f8      	bne.n	8015744 <__gethex+0xb0>
 8015752:	1bad      	subs	r5, r5, r6
 8015754:	00ad      	lsls	r5, r5, #2
 8015756:	e004      	b.n	8015762 <__gethex+0xce>
 8015758:	2400      	movs	r4, #0
 801575a:	4625      	mov	r5, r4
 801575c:	e7e0      	b.n	8015720 <__gethex+0x8c>
 801575e:	2d00      	cmp	r5, #0
 8015760:	d1f7      	bne.n	8015752 <__gethex+0xbe>
 8015762:	7833      	ldrb	r3, [r6, #0]
 8015764:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015768:	2b50      	cmp	r3, #80	; 0x50
 801576a:	d139      	bne.n	80157e0 <__gethex+0x14c>
 801576c:	7873      	ldrb	r3, [r6, #1]
 801576e:	2b2b      	cmp	r3, #43	; 0x2b
 8015770:	d02a      	beq.n	80157c8 <__gethex+0x134>
 8015772:	2b2d      	cmp	r3, #45	; 0x2d
 8015774:	d02c      	beq.n	80157d0 <__gethex+0x13c>
 8015776:	1c71      	adds	r1, r6, #1
 8015778:	f04f 0900 	mov.w	r9, #0
 801577c:	7808      	ldrb	r0, [r1, #0]
 801577e:	f7ff ff73 	bl	8015668 <__hexdig_fun>
 8015782:	1e43      	subs	r3, r0, #1
 8015784:	b2db      	uxtb	r3, r3
 8015786:	2b18      	cmp	r3, #24
 8015788:	d82a      	bhi.n	80157e0 <__gethex+0x14c>
 801578a:	f1a0 0210 	sub.w	r2, r0, #16
 801578e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015792:	f7ff ff69 	bl	8015668 <__hexdig_fun>
 8015796:	1e43      	subs	r3, r0, #1
 8015798:	b2db      	uxtb	r3, r3
 801579a:	2b18      	cmp	r3, #24
 801579c:	d91b      	bls.n	80157d6 <__gethex+0x142>
 801579e:	f1b9 0f00 	cmp.w	r9, #0
 80157a2:	d000      	beq.n	80157a6 <__gethex+0x112>
 80157a4:	4252      	negs	r2, r2
 80157a6:	4415      	add	r5, r2
 80157a8:	f8cb 1000 	str.w	r1, [fp]
 80157ac:	b1d4      	cbz	r4, 80157e4 <__gethex+0x150>
 80157ae:	9b01      	ldr	r3, [sp, #4]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	bf14      	ite	ne
 80157b4:	2700      	movne	r7, #0
 80157b6:	2706      	moveq	r7, #6
 80157b8:	4638      	mov	r0, r7
 80157ba:	b00b      	add	sp, #44	; 0x2c
 80157bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c0:	463e      	mov	r6, r7
 80157c2:	4625      	mov	r5, r4
 80157c4:	2401      	movs	r4, #1
 80157c6:	e7cc      	b.n	8015762 <__gethex+0xce>
 80157c8:	f04f 0900 	mov.w	r9, #0
 80157cc:	1cb1      	adds	r1, r6, #2
 80157ce:	e7d5      	b.n	801577c <__gethex+0xe8>
 80157d0:	f04f 0901 	mov.w	r9, #1
 80157d4:	e7fa      	b.n	80157cc <__gethex+0x138>
 80157d6:	230a      	movs	r3, #10
 80157d8:	fb03 0202 	mla	r2, r3, r2, r0
 80157dc:	3a10      	subs	r2, #16
 80157de:	e7d6      	b.n	801578e <__gethex+0xfa>
 80157e0:	4631      	mov	r1, r6
 80157e2:	e7e1      	b.n	80157a8 <__gethex+0x114>
 80157e4:	1bf3      	subs	r3, r6, r7
 80157e6:	3b01      	subs	r3, #1
 80157e8:	4621      	mov	r1, r4
 80157ea:	2b07      	cmp	r3, #7
 80157ec:	dc0a      	bgt.n	8015804 <__gethex+0x170>
 80157ee:	9802      	ldr	r0, [sp, #8]
 80157f0:	f000 fa8c 	bl	8015d0c <_Balloc>
 80157f4:	4604      	mov	r4, r0
 80157f6:	b940      	cbnz	r0, 801580a <__gethex+0x176>
 80157f8:	4b5c      	ldr	r3, [pc, #368]	; (801596c <__gethex+0x2d8>)
 80157fa:	4602      	mov	r2, r0
 80157fc:	21de      	movs	r1, #222	; 0xde
 80157fe:	485c      	ldr	r0, [pc, #368]	; (8015970 <__gethex+0x2dc>)
 8015800:	f001 fdda 	bl	80173b8 <__assert_func>
 8015804:	3101      	adds	r1, #1
 8015806:	105b      	asrs	r3, r3, #1
 8015808:	e7ef      	b.n	80157ea <__gethex+0x156>
 801580a:	f100 0914 	add.w	r9, r0, #20
 801580e:	f04f 0b00 	mov.w	fp, #0
 8015812:	f1ca 0301 	rsb	r3, sl, #1
 8015816:	f8cd 9010 	str.w	r9, [sp, #16]
 801581a:	f8cd b004 	str.w	fp, [sp, #4]
 801581e:	9308      	str	r3, [sp, #32]
 8015820:	42b7      	cmp	r7, r6
 8015822:	d33f      	bcc.n	80158a4 <__gethex+0x210>
 8015824:	9f04      	ldr	r7, [sp, #16]
 8015826:	9b01      	ldr	r3, [sp, #4]
 8015828:	f847 3b04 	str.w	r3, [r7], #4
 801582c:	eba7 0709 	sub.w	r7, r7, r9
 8015830:	10bf      	asrs	r7, r7, #2
 8015832:	6127      	str	r7, [r4, #16]
 8015834:	4618      	mov	r0, r3
 8015836:	f000 fb5b 	bl	8015ef0 <__hi0bits>
 801583a:	017f      	lsls	r7, r7, #5
 801583c:	f8d8 6000 	ldr.w	r6, [r8]
 8015840:	1a3f      	subs	r7, r7, r0
 8015842:	42b7      	cmp	r7, r6
 8015844:	dd62      	ble.n	801590c <__gethex+0x278>
 8015846:	1bbf      	subs	r7, r7, r6
 8015848:	4639      	mov	r1, r7
 801584a:	4620      	mov	r0, r4
 801584c:	f000 fef1 	bl	8016632 <__any_on>
 8015850:	4682      	mov	sl, r0
 8015852:	b1a8      	cbz	r0, 8015880 <__gethex+0x1ec>
 8015854:	1e7b      	subs	r3, r7, #1
 8015856:	1159      	asrs	r1, r3, #5
 8015858:	f003 021f 	and.w	r2, r3, #31
 801585c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015860:	f04f 0a01 	mov.w	sl, #1
 8015864:	fa0a f202 	lsl.w	r2, sl, r2
 8015868:	420a      	tst	r2, r1
 801586a:	d009      	beq.n	8015880 <__gethex+0x1ec>
 801586c:	4553      	cmp	r3, sl
 801586e:	dd05      	ble.n	801587c <__gethex+0x1e8>
 8015870:	1eb9      	subs	r1, r7, #2
 8015872:	4620      	mov	r0, r4
 8015874:	f000 fedd 	bl	8016632 <__any_on>
 8015878:	2800      	cmp	r0, #0
 801587a:	d144      	bne.n	8015906 <__gethex+0x272>
 801587c:	f04f 0a02 	mov.w	sl, #2
 8015880:	4639      	mov	r1, r7
 8015882:	4620      	mov	r0, r4
 8015884:	f7ff fe9e 	bl	80155c4 <rshift>
 8015888:	443d      	add	r5, r7
 801588a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801588e:	42ab      	cmp	r3, r5
 8015890:	da4a      	bge.n	8015928 <__gethex+0x294>
 8015892:	9802      	ldr	r0, [sp, #8]
 8015894:	4621      	mov	r1, r4
 8015896:	f000 fa79 	bl	8015d8c <_Bfree>
 801589a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801589c:	2300      	movs	r3, #0
 801589e:	6013      	str	r3, [r2, #0]
 80158a0:	27a3      	movs	r7, #163	; 0xa3
 80158a2:	e789      	b.n	80157b8 <__gethex+0x124>
 80158a4:	1e73      	subs	r3, r6, #1
 80158a6:	9a06      	ldr	r2, [sp, #24]
 80158a8:	9307      	str	r3, [sp, #28]
 80158aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80158ae:	4293      	cmp	r3, r2
 80158b0:	d019      	beq.n	80158e6 <__gethex+0x252>
 80158b2:	f1bb 0f20 	cmp.w	fp, #32
 80158b6:	d107      	bne.n	80158c8 <__gethex+0x234>
 80158b8:	9b04      	ldr	r3, [sp, #16]
 80158ba:	9a01      	ldr	r2, [sp, #4]
 80158bc:	f843 2b04 	str.w	r2, [r3], #4
 80158c0:	9304      	str	r3, [sp, #16]
 80158c2:	2300      	movs	r3, #0
 80158c4:	9301      	str	r3, [sp, #4]
 80158c6:	469b      	mov	fp, r3
 80158c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80158cc:	f7ff fecc 	bl	8015668 <__hexdig_fun>
 80158d0:	9b01      	ldr	r3, [sp, #4]
 80158d2:	f000 000f 	and.w	r0, r0, #15
 80158d6:	fa00 f00b 	lsl.w	r0, r0, fp
 80158da:	4303      	orrs	r3, r0
 80158dc:	9301      	str	r3, [sp, #4]
 80158de:	f10b 0b04 	add.w	fp, fp, #4
 80158e2:	9b07      	ldr	r3, [sp, #28]
 80158e4:	e00d      	b.n	8015902 <__gethex+0x26e>
 80158e6:	9a08      	ldr	r2, [sp, #32]
 80158e8:	1e73      	subs	r3, r6, #1
 80158ea:	4413      	add	r3, r2
 80158ec:	42bb      	cmp	r3, r7
 80158ee:	d3e0      	bcc.n	80158b2 <__gethex+0x21e>
 80158f0:	4618      	mov	r0, r3
 80158f2:	9903      	ldr	r1, [sp, #12]
 80158f4:	9309      	str	r3, [sp, #36]	; 0x24
 80158f6:	4652      	mov	r2, sl
 80158f8:	f001 fc8e 	bl	8017218 <strncmp>
 80158fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158fe:	2800      	cmp	r0, #0
 8015900:	d1d7      	bne.n	80158b2 <__gethex+0x21e>
 8015902:	461e      	mov	r6, r3
 8015904:	e78c      	b.n	8015820 <__gethex+0x18c>
 8015906:	f04f 0a03 	mov.w	sl, #3
 801590a:	e7b9      	b.n	8015880 <__gethex+0x1ec>
 801590c:	da09      	bge.n	8015922 <__gethex+0x28e>
 801590e:	1bf7      	subs	r7, r6, r7
 8015910:	4621      	mov	r1, r4
 8015912:	9802      	ldr	r0, [sp, #8]
 8015914:	463a      	mov	r2, r7
 8015916:	f000 fc51 	bl	80161bc <__lshift>
 801591a:	1bed      	subs	r5, r5, r7
 801591c:	4604      	mov	r4, r0
 801591e:	f100 0914 	add.w	r9, r0, #20
 8015922:	f04f 0a00 	mov.w	sl, #0
 8015926:	e7b0      	b.n	801588a <__gethex+0x1f6>
 8015928:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801592c:	42a8      	cmp	r0, r5
 801592e:	dd71      	ble.n	8015a14 <__gethex+0x380>
 8015930:	1b45      	subs	r5, r0, r5
 8015932:	42ae      	cmp	r6, r5
 8015934:	dc35      	bgt.n	80159a2 <__gethex+0x30e>
 8015936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801593a:	2b02      	cmp	r3, #2
 801593c:	d029      	beq.n	8015992 <__gethex+0x2fe>
 801593e:	2b03      	cmp	r3, #3
 8015940:	d02b      	beq.n	801599a <__gethex+0x306>
 8015942:	2b01      	cmp	r3, #1
 8015944:	d11c      	bne.n	8015980 <__gethex+0x2ec>
 8015946:	42ae      	cmp	r6, r5
 8015948:	d11a      	bne.n	8015980 <__gethex+0x2ec>
 801594a:	2e01      	cmp	r6, #1
 801594c:	d112      	bne.n	8015974 <__gethex+0x2e0>
 801594e:	9a05      	ldr	r2, [sp, #20]
 8015950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015954:	6013      	str	r3, [r2, #0]
 8015956:	2301      	movs	r3, #1
 8015958:	6123      	str	r3, [r4, #16]
 801595a:	f8c9 3000 	str.w	r3, [r9]
 801595e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015960:	2762      	movs	r7, #98	; 0x62
 8015962:	601c      	str	r4, [r3, #0]
 8015964:	e728      	b.n	80157b8 <__gethex+0x124>
 8015966:	bf00      	nop
 8015968:	08019260 	.word	0x08019260
 801596c:	080191e8 	.word	0x080191e8
 8015970:	080191f9 	.word	0x080191f9
 8015974:	1e71      	subs	r1, r6, #1
 8015976:	4620      	mov	r0, r4
 8015978:	f000 fe5b 	bl	8016632 <__any_on>
 801597c:	2800      	cmp	r0, #0
 801597e:	d1e6      	bne.n	801594e <__gethex+0x2ba>
 8015980:	9802      	ldr	r0, [sp, #8]
 8015982:	4621      	mov	r1, r4
 8015984:	f000 fa02 	bl	8015d8c <_Bfree>
 8015988:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801598a:	2300      	movs	r3, #0
 801598c:	6013      	str	r3, [r2, #0]
 801598e:	2750      	movs	r7, #80	; 0x50
 8015990:	e712      	b.n	80157b8 <__gethex+0x124>
 8015992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015994:	2b00      	cmp	r3, #0
 8015996:	d1f3      	bne.n	8015980 <__gethex+0x2ec>
 8015998:	e7d9      	b.n	801594e <__gethex+0x2ba>
 801599a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801599c:	2b00      	cmp	r3, #0
 801599e:	d1d6      	bne.n	801594e <__gethex+0x2ba>
 80159a0:	e7ee      	b.n	8015980 <__gethex+0x2ec>
 80159a2:	1e6f      	subs	r7, r5, #1
 80159a4:	f1ba 0f00 	cmp.w	sl, #0
 80159a8:	d131      	bne.n	8015a0e <__gethex+0x37a>
 80159aa:	b127      	cbz	r7, 80159b6 <__gethex+0x322>
 80159ac:	4639      	mov	r1, r7
 80159ae:	4620      	mov	r0, r4
 80159b0:	f000 fe3f 	bl	8016632 <__any_on>
 80159b4:	4682      	mov	sl, r0
 80159b6:	117b      	asrs	r3, r7, #5
 80159b8:	2101      	movs	r1, #1
 80159ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80159be:	f007 071f 	and.w	r7, r7, #31
 80159c2:	fa01 f707 	lsl.w	r7, r1, r7
 80159c6:	421f      	tst	r7, r3
 80159c8:	4629      	mov	r1, r5
 80159ca:	4620      	mov	r0, r4
 80159cc:	bf18      	it	ne
 80159ce:	f04a 0a02 	orrne.w	sl, sl, #2
 80159d2:	1b76      	subs	r6, r6, r5
 80159d4:	f7ff fdf6 	bl	80155c4 <rshift>
 80159d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80159dc:	2702      	movs	r7, #2
 80159de:	f1ba 0f00 	cmp.w	sl, #0
 80159e2:	d048      	beq.n	8015a76 <__gethex+0x3e2>
 80159e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80159e8:	2b02      	cmp	r3, #2
 80159ea:	d015      	beq.n	8015a18 <__gethex+0x384>
 80159ec:	2b03      	cmp	r3, #3
 80159ee:	d017      	beq.n	8015a20 <__gethex+0x38c>
 80159f0:	2b01      	cmp	r3, #1
 80159f2:	d109      	bne.n	8015a08 <__gethex+0x374>
 80159f4:	f01a 0f02 	tst.w	sl, #2
 80159f8:	d006      	beq.n	8015a08 <__gethex+0x374>
 80159fa:	f8d9 0000 	ldr.w	r0, [r9]
 80159fe:	ea4a 0a00 	orr.w	sl, sl, r0
 8015a02:	f01a 0f01 	tst.w	sl, #1
 8015a06:	d10e      	bne.n	8015a26 <__gethex+0x392>
 8015a08:	f047 0710 	orr.w	r7, r7, #16
 8015a0c:	e033      	b.n	8015a76 <__gethex+0x3e2>
 8015a0e:	f04f 0a01 	mov.w	sl, #1
 8015a12:	e7d0      	b.n	80159b6 <__gethex+0x322>
 8015a14:	2701      	movs	r7, #1
 8015a16:	e7e2      	b.n	80159de <__gethex+0x34a>
 8015a18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a1a:	f1c3 0301 	rsb	r3, r3, #1
 8015a1e:	9315      	str	r3, [sp, #84]	; 0x54
 8015a20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d0f0      	beq.n	8015a08 <__gethex+0x374>
 8015a26:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015a2a:	f104 0314 	add.w	r3, r4, #20
 8015a2e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015a32:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015a36:	f04f 0c00 	mov.w	ip, #0
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a40:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015a44:	d01c      	beq.n	8015a80 <__gethex+0x3ec>
 8015a46:	3201      	adds	r2, #1
 8015a48:	6002      	str	r2, [r0, #0]
 8015a4a:	2f02      	cmp	r7, #2
 8015a4c:	f104 0314 	add.w	r3, r4, #20
 8015a50:	d13d      	bne.n	8015ace <__gethex+0x43a>
 8015a52:	f8d8 2000 	ldr.w	r2, [r8]
 8015a56:	3a01      	subs	r2, #1
 8015a58:	42b2      	cmp	r2, r6
 8015a5a:	d10a      	bne.n	8015a72 <__gethex+0x3de>
 8015a5c:	1171      	asrs	r1, r6, #5
 8015a5e:	2201      	movs	r2, #1
 8015a60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015a64:	f006 061f 	and.w	r6, r6, #31
 8015a68:	fa02 f606 	lsl.w	r6, r2, r6
 8015a6c:	421e      	tst	r6, r3
 8015a6e:	bf18      	it	ne
 8015a70:	4617      	movne	r7, r2
 8015a72:	f047 0720 	orr.w	r7, r7, #32
 8015a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a78:	601c      	str	r4, [r3, #0]
 8015a7a:	9b05      	ldr	r3, [sp, #20]
 8015a7c:	601d      	str	r5, [r3, #0]
 8015a7e:	e69b      	b.n	80157b8 <__gethex+0x124>
 8015a80:	4299      	cmp	r1, r3
 8015a82:	f843 cc04 	str.w	ip, [r3, #-4]
 8015a86:	d8d8      	bhi.n	8015a3a <__gethex+0x3a6>
 8015a88:	68a3      	ldr	r3, [r4, #8]
 8015a8a:	459b      	cmp	fp, r3
 8015a8c:	db17      	blt.n	8015abe <__gethex+0x42a>
 8015a8e:	6861      	ldr	r1, [r4, #4]
 8015a90:	9802      	ldr	r0, [sp, #8]
 8015a92:	3101      	adds	r1, #1
 8015a94:	f000 f93a 	bl	8015d0c <_Balloc>
 8015a98:	4681      	mov	r9, r0
 8015a9a:	b918      	cbnz	r0, 8015aa4 <__gethex+0x410>
 8015a9c:	4b1a      	ldr	r3, [pc, #104]	; (8015b08 <__gethex+0x474>)
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	2184      	movs	r1, #132	; 0x84
 8015aa2:	e6ac      	b.n	80157fe <__gethex+0x16a>
 8015aa4:	6922      	ldr	r2, [r4, #16]
 8015aa6:	3202      	adds	r2, #2
 8015aa8:	f104 010c 	add.w	r1, r4, #12
 8015aac:	0092      	lsls	r2, r2, #2
 8015aae:	300c      	adds	r0, #12
 8015ab0:	f000 f91e 	bl	8015cf0 <memcpy>
 8015ab4:	4621      	mov	r1, r4
 8015ab6:	9802      	ldr	r0, [sp, #8]
 8015ab8:	f000 f968 	bl	8015d8c <_Bfree>
 8015abc:	464c      	mov	r4, r9
 8015abe:	6923      	ldr	r3, [r4, #16]
 8015ac0:	1c5a      	adds	r2, r3, #1
 8015ac2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015ac6:	6122      	str	r2, [r4, #16]
 8015ac8:	2201      	movs	r2, #1
 8015aca:	615a      	str	r2, [r3, #20]
 8015acc:	e7bd      	b.n	8015a4a <__gethex+0x3b6>
 8015ace:	6922      	ldr	r2, [r4, #16]
 8015ad0:	455a      	cmp	r2, fp
 8015ad2:	dd0b      	ble.n	8015aec <__gethex+0x458>
 8015ad4:	2101      	movs	r1, #1
 8015ad6:	4620      	mov	r0, r4
 8015ad8:	f7ff fd74 	bl	80155c4 <rshift>
 8015adc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ae0:	3501      	adds	r5, #1
 8015ae2:	42ab      	cmp	r3, r5
 8015ae4:	f6ff aed5 	blt.w	8015892 <__gethex+0x1fe>
 8015ae8:	2701      	movs	r7, #1
 8015aea:	e7c2      	b.n	8015a72 <__gethex+0x3de>
 8015aec:	f016 061f 	ands.w	r6, r6, #31
 8015af0:	d0fa      	beq.n	8015ae8 <__gethex+0x454>
 8015af2:	4453      	add	r3, sl
 8015af4:	f1c6 0620 	rsb	r6, r6, #32
 8015af8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015afc:	f000 f9f8 	bl	8015ef0 <__hi0bits>
 8015b00:	42b0      	cmp	r0, r6
 8015b02:	dbe7      	blt.n	8015ad4 <__gethex+0x440>
 8015b04:	e7f0      	b.n	8015ae8 <__gethex+0x454>
 8015b06:	bf00      	nop
 8015b08:	080191e8 	.word	0x080191e8

08015b0c <L_shift>:
 8015b0c:	f1c2 0208 	rsb	r2, r2, #8
 8015b10:	0092      	lsls	r2, r2, #2
 8015b12:	b570      	push	{r4, r5, r6, lr}
 8015b14:	f1c2 0620 	rsb	r6, r2, #32
 8015b18:	6843      	ldr	r3, [r0, #4]
 8015b1a:	6804      	ldr	r4, [r0, #0]
 8015b1c:	fa03 f506 	lsl.w	r5, r3, r6
 8015b20:	432c      	orrs	r4, r5
 8015b22:	40d3      	lsrs	r3, r2
 8015b24:	6004      	str	r4, [r0, #0]
 8015b26:	f840 3f04 	str.w	r3, [r0, #4]!
 8015b2a:	4288      	cmp	r0, r1
 8015b2c:	d3f4      	bcc.n	8015b18 <L_shift+0xc>
 8015b2e:	bd70      	pop	{r4, r5, r6, pc}

08015b30 <__match>:
 8015b30:	b530      	push	{r4, r5, lr}
 8015b32:	6803      	ldr	r3, [r0, #0]
 8015b34:	3301      	adds	r3, #1
 8015b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b3a:	b914      	cbnz	r4, 8015b42 <__match+0x12>
 8015b3c:	6003      	str	r3, [r0, #0]
 8015b3e:	2001      	movs	r0, #1
 8015b40:	bd30      	pop	{r4, r5, pc}
 8015b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015b4a:	2d19      	cmp	r5, #25
 8015b4c:	bf98      	it	ls
 8015b4e:	3220      	addls	r2, #32
 8015b50:	42a2      	cmp	r2, r4
 8015b52:	d0f0      	beq.n	8015b36 <__match+0x6>
 8015b54:	2000      	movs	r0, #0
 8015b56:	e7f3      	b.n	8015b40 <__match+0x10>

08015b58 <__hexnan>:
 8015b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b5c:	680b      	ldr	r3, [r1, #0]
 8015b5e:	115e      	asrs	r6, r3, #5
 8015b60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015b64:	f013 031f 	ands.w	r3, r3, #31
 8015b68:	b087      	sub	sp, #28
 8015b6a:	bf18      	it	ne
 8015b6c:	3604      	addne	r6, #4
 8015b6e:	2500      	movs	r5, #0
 8015b70:	1f37      	subs	r7, r6, #4
 8015b72:	4690      	mov	r8, r2
 8015b74:	6802      	ldr	r2, [r0, #0]
 8015b76:	9301      	str	r3, [sp, #4]
 8015b78:	4682      	mov	sl, r0
 8015b7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8015b7e:	46b9      	mov	r9, r7
 8015b80:	463c      	mov	r4, r7
 8015b82:	9502      	str	r5, [sp, #8]
 8015b84:	46ab      	mov	fp, r5
 8015b86:	7851      	ldrb	r1, [r2, #1]
 8015b88:	1c53      	adds	r3, r2, #1
 8015b8a:	9303      	str	r3, [sp, #12]
 8015b8c:	b341      	cbz	r1, 8015be0 <__hexnan+0x88>
 8015b8e:	4608      	mov	r0, r1
 8015b90:	9205      	str	r2, [sp, #20]
 8015b92:	9104      	str	r1, [sp, #16]
 8015b94:	f7ff fd68 	bl	8015668 <__hexdig_fun>
 8015b98:	2800      	cmp	r0, #0
 8015b9a:	d14f      	bne.n	8015c3c <__hexnan+0xe4>
 8015b9c:	9904      	ldr	r1, [sp, #16]
 8015b9e:	9a05      	ldr	r2, [sp, #20]
 8015ba0:	2920      	cmp	r1, #32
 8015ba2:	d818      	bhi.n	8015bd6 <__hexnan+0x7e>
 8015ba4:	9b02      	ldr	r3, [sp, #8]
 8015ba6:	459b      	cmp	fp, r3
 8015ba8:	dd13      	ble.n	8015bd2 <__hexnan+0x7a>
 8015baa:	454c      	cmp	r4, r9
 8015bac:	d206      	bcs.n	8015bbc <__hexnan+0x64>
 8015bae:	2d07      	cmp	r5, #7
 8015bb0:	dc04      	bgt.n	8015bbc <__hexnan+0x64>
 8015bb2:	462a      	mov	r2, r5
 8015bb4:	4649      	mov	r1, r9
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	f7ff ffa8 	bl	8015b0c <L_shift>
 8015bbc:	4544      	cmp	r4, r8
 8015bbe:	d950      	bls.n	8015c62 <__hexnan+0x10a>
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	f1a4 0904 	sub.w	r9, r4, #4
 8015bc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8015bca:	f8cd b008 	str.w	fp, [sp, #8]
 8015bce:	464c      	mov	r4, r9
 8015bd0:	461d      	mov	r5, r3
 8015bd2:	9a03      	ldr	r2, [sp, #12]
 8015bd4:	e7d7      	b.n	8015b86 <__hexnan+0x2e>
 8015bd6:	2929      	cmp	r1, #41	; 0x29
 8015bd8:	d156      	bne.n	8015c88 <__hexnan+0x130>
 8015bda:	3202      	adds	r2, #2
 8015bdc:	f8ca 2000 	str.w	r2, [sl]
 8015be0:	f1bb 0f00 	cmp.w	fp, #0
 8015be4:	d050      	beq.n	8015c88 <__hexnan+0x130>
 8015be6:	454c      	cmp	r4, r9
 8015be8:	d206      	bcs.n	8015bf8 <__hexnan+0xa0>
 8015bea:	2d07      	cmp	r5, #7
 8015bec:	dc04      	bgt.n	8015bf8 <__hexnan+0xa0>
 8015bee:	462a      	mov	r2, r5
 8015bf0:	4649      	mov	r1, r9
 8015bf2:	4620      	mov	r0, r4
 8015bf4:	f7ff ff8a 	bl	8015b0c <L_shift>
 8015bf8:	4544      	cmp	r4, r8
 8015bfa:	d934      	bls.n	8015c66 <__hexnan+0x10e>
 8015bfc:	f1a8 0204 	sub.w	r2, r8, #4
 8015c00:	4623      	mov	r3, r4
 8015c02:	f853 1b04 	ldr.w	r1, [r3], #4
 8015c06:	f842 1f04 	str.w	r1, [r2, #4]!
 8015c0a:	429f      	cmp	r7, r3
 8015c0c:	d2f9      	bcs.n	8015c02 <__hexnan+0xaa>
 8015c0e:	1b3b      	subs	r3, r7, r4
 8015c10:	f023 0303 	bic.w	r3, r3, #3
 8015c14:	3304      	adds	r3, #4
 8015c16:	3401      	adds	r4, #1
 8015c18:	3e03      	subs	r6, #3
 8015c1a:	42b4      	cmp	r4, r6
 8015c1c:	bf88      	it	hi
 8015c1e:	2304      	movhi	r3, #4
 8015c20:	4443      	add	r3, r8
 8015c22:	2200      	movs	r2, #0
 8015c24:	f843 2b04 	str.w	r2, [r3], #4
 8015c28:	429f      	cmp	r7, r3
 8015c2a:	d2fb      	bcs.n	8015c24 <__hexnan+0xcc>
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	b91b      	cbnz	r3, 8015c38 <__hexnan+0xe0>
 8015c30:	4547      	cmp	r7, r8
 8015c32:	d127      	bne.n	8015c84 <__hexnan+0x12c>
 8015c34:	2301      	movs	r3, #1
 8015c36:	603b      	str	r3, [r7, #0]
 8015c38:	2005      	movs	r0, #5
 8015c3a:	e026      	b.n	8015c8a <__hexnan+0x132>
 8015c3c:	3501      	adds	r5, #1
 8015c3e:	2d08      	cmp	r5, #8
 8015c40:	f10b 0b01 	add.w	fp, fp, #1
 8015c44:	dd06      	ble.n	8015c54 <__hexnan+0xfc>
 8015c46:	4544      	cmp	r4, r8
 8015c48:	d9c3      	bls.n	8015bd2 <__hexnan+0x7a>
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015c50:	2501      	movs	r5, #1
 8015c52:	3c04      	subs	r4, #4
 8015c54:	6822      	ldr	r2, [r4, #0]
 8015c56:	f000 000f 	and.w	r0, r0, #15
 8015c5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015c5e:	6022      	str	r2, [r4, #0]
 8015c60:	e7b7      	b.n	8015bd2 <__hexnan+0x7a>
 8015c62:	2508      	movs	r5, #8
 8015c64:	e7b5      	b.n	8015bd2 <__hexnan+0x7a>
 8015c66:	9b01      	ldr	r3, [sp, #4]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d0df      	beq.n	8015c2c <__hexnan+0xd4>
 8015c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8015c70:	f1c3 0320 	rsb	r3, r3, #32
 8015c74:	fa22 f303 	lsr.w	r3, r2, r3
 8015c78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015c7c:	401a      	ands	r2, r3
 8015c7e:	f846 2c04 	str.w	r2, [r6, #-4]
 8015c82:	e7d3      	b.n	8015c2c <__hexnan+0xd4>
 8015c84:	3f04      	subs	r7, #4
 8015c86:	e7d1      	b.n	8015c2c <__hexnan+0xd4>
 8015c88:	2004      	movs	r0, #4
 8015c8a:	b007      	add	sp, #28
 8015c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c90 <_localeconv_r>:
 8015c90:	4800      	ldr	r0, [pc, #0]	; (8015c94 <_localeconv_r+0x4>)
 8015c92:	4770      	bx	lr
 8015c94:	20000260 	.word	0x20000260

08015c98 <_lseek_r>:
 8015c98:	b538      	push	{r3, r4, r5, lr}
 8015c9a:	4d07      	ldr	r5, [pc, #28]	; (8015cb8 <_lseek_r+0x20>)
 8015c9c:	4604      	mov	r4, r0
 8015c9e:	4608      	mov	r0, r1
 8015ca0:	4611      	mov	r1, r2
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	602a      	str	r2, [r5, #0]
 8015ca6:	461a      	mov	r2, r3
 8015ca8:	f7ec f9e4 	bl	8002074 <_lseek>
 8015cac:	1c43      	adds	r3, r0, #1
 8015cae:	d102      	bne.n	8015cb6 <_lseek_r+0x1e>
 8015cb0:	682b      	ldr	r3, [r5, #0]
 8015cb2:	b103      	cbz	r3, 8015cb6 <_lseek_r+0x1e>
 8015cb4:	6023      	str	r3, [r4, #0]
 8015cb6:	bd38      	pop	{r3, r4, r5, pc}
 8015cb8:	200019a0 	.word	0x200019a0

08015cbc <malloc>:
 8015cbc:	4b02      	ldr	r3, [pc, #8]	; (8015cc8 <malloc+0xc>)
 8015cbe:	4601      	mov	r1, r0
 8015cc0:	6818      	ldr	r0, [r3, #0]
 8015cc2:	f000 bd55 	b.w	8016770 <_malloc_r>
 8015cc6:	bf00      	nop
 8015cc8:	20000108 	.word	0x20000108

08015ccc <__ascii_mbtowc>:
 8015ccc:	b082      	sub	sp, #8
 8015cce:	b901      	cbnz	r1, 8015cd2 <__ascii_mbtowc+0x6>
 8015cd0:	a901      	add	r1, sp, #4
 8015cd2:	b142      	cbz	r2, 8015ce6 <__ascii_mbtowc+0x1a>
 8015cd4:	b14b      	cbz	r3, 8015cea <__ascii_mbtowc+0x1e>
 8015cd6:	7813      	ldrb	r3, [r2, #0]
 8015cd8:	600b      	str	r3, [r1, #0]
 8015cda:	7812      	ldrb	r2, [r2, #0]
 8015cdc:	1e10      	subs	r0, r2, #0
 8015cde:	bf18      	it	ne
 8015ce0:	2001      	movne	r0, #1
 8015ce2:	b002      	add	sp, #8
 8015ce4:	4770      	bx	lr
 8015ce6:	4610      	mov	r0, r2
 8015ce8:	e7fb      	b.n	8015ce2 <__ascii_mbtowc+0x16>
 8015cea:	f06f 0001 	mvn.w	r0, #1
 8015cee:	e7f8      	b.n	8015ce2 <__ascii_mbtowc+0x16>

08015cf0 <memcpy>:
 8015cf0:	440a      	add	r2, r1
 8015cf2:	4291      	cmp	r1, r2
 8015cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8015cf8:	d100      	bne.n	8015cfc <memcpy+0xc>
 8015cfa:	4770      	bx	lr
 8015cfc:	b510      	push	{r4, lr}
 8015cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015d06:	4291      	cmp	r1, r2
 8015d08:	d1f9      	bne.n	8015cfe <memcpy+0xe>
 8015d0a:	bd10      	pop	{r4, pc}

08015d0c <_Balloc>:
 8015d0c:	b570      	push	{r4, r5, r6, lr}
 8015d0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015d10:	4604      	mov	r4, r0
 8015d12:	460d      	mov	r5, r1
 8015d14:	b976      	cbnz	r6, 8015d34 <_Balloc+0x28>
 8015d16:	2010      	movs	r0, #16
 8015d18:	f7ff ffd0 	bl	8015cbc <malloc>
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	6260      	str	r0, [r4, #36]	; 0x24
 8015d20:	b920      	cbnz	r0, 8015d2c <_Balloc+0x20>
 8015d22:	4b18      	ldr	r3, [pc, #96]	; (8015d84 <_Balloc+0x78>)
 8015d24:	4818      	ldr	r0, [pc, #96]	; (8015d88 <_Balloc+0x7c>)
 8015d26:	2166      	movs	r1, #102	; 0x66
 8015d28:	f001 fb46 	bl	80173b8 <__assert_func>
 8015d2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d30:	6006      	str	r6, [r0, #0]
 8015d32:	60c6      	str	r6, [r0, #12]
 8015d34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015d36:	68f3      	ldr	r3, [r6, #12]
 8015d38:	b183      	cbz	r3, 8015d5c <_Balloc+0x50>
 8015d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d3c:	68db      	ldr	r3, [r3, #12]
 8015d3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015d42:	b9b8      	cbnz	r0, 8015d74 <_Balloc+0x68>
 8015d44:	2101      	movs	r1, #1
 8015d46:	fa01 f605 	lsl.w	r6, r1, r5
 8015d4a:	1d72      	adds	r2, r6, #5
 8015d4c:	0092      	lsls	r2, r2, #2
 8015d4e:	4620      	mov	r0, r4
 8015d50:	f000 fc90 	bl	8016674 <_calloc_r>
 8015d54:	b160      	cbz	r0, 8015d70 <_Balloc+0x64>
 8015d56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015d5a:	e00e      	b.n	8015d7a <_Balloc+0x6e>
 8015d5c:	2221      	movs	r2, #33	; 0x21
 8015d5e:	2104      	movs	r1, #4
 8015d60:	4620      	mov	r0, r4
 8015d62:	f000 fc87 	bl	8016674 <_calloc_r>
 8015d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d68:	60f0      	str	r0, [r6, #12]
 8015d6a:	68db      	ldr	r3, [r3, #12]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d1e4      	bne.n	8015d3a <_Balloc+0x2e>
 8015d70:	2000      	movs	r0, #0
 8015d72:	bd70      	pop	{r4, r5, r6, pc}
 8015d74:	6802      	ldr	r2, [r0, #0]
 8015d76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015d80:	e7f7      	b.n	8015d72 <_Balloc+0x66>
 8015d82:	bf00      	nop
 8015d84:	08019176 	.word	0x08019176
 8015d88:	08019274 	.word	0x08019274

08015d8c <_Bfree>:
 8015d8c:	b570      	push	{r4, r5, r6, lr}
 8015d8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015d90:	4605      	mov	r5, r0
 8015d92:	460c      	mov	r4, r1
 8015d94:	b976      	cbnz	r6, 8015db4 <_Bfree+0x28>
 8015d96:	2010      	movs	r0, #16
 8015d98:	f7ff ff90 	bl	8015cbc <malloc>
 8015d9c:	4602      	mov	r2, r0
 8015d9e:	6268      	str	r0, [r5, #36]	; 0x24
 8015da0:	b920      	cbnz	r0, 8015dac <_Bfree+0x20>
 8015da2:	4b09      	ldr	r3, [pc, #36]	; (8015dc8 <_Bfree+0x3c>)
 8015da4:	4809      	ldr	r0, [pc, #36]	; (8015dcc <_Bfree+0x40>)
 8015da6:	218a      	movs	r1, #138	; 0x8a
 8015da8:	f001 fb06 	bl	80173b8 <__assert_func>
 8015dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015db0:	6006      	str	r6, [r0, #0]
 8015db2:	60c6      	str	r6, [r0, #12]
 8015db4:	b13c      	cbz	r4, 8015dc6 <_Bfree+0x3a>
 8015db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015db8:	6862      	ldr	r2, [r4, #4]
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015dc0:	6021      	str	r1, [r4, #0]
 8015dc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015dc6:	bd70      	pop	{r4, r5, r6, pc}
 8015dc8:	08019176 	.word	0x08019176
 8015dcc:	08019274 	.word	0x08019274

08015dd0 <__multadd>:
 8015dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd4:	690d      	ldr	r5, [r1, #16]
 8015dd6:	4607      	mov	r7, r0
 8015dd8:	460c      	mov	r4, r1
 8015dda:	461e      	mov	r6, r3
 8015ddc:	f101 0c14 	add.w	ip, r1, #20
 8015de0:	2000      	movs	r0, #0
 8015de2:	f8dc 3000 	ldr.w	r3, [ip]
 8015de6:	b299      	uxth	r1, r3
 8015de8:	fb02 6101 	mla	r1, r2, r1, r6
 8015dec:	0c1e      	lsrs	r6, r3, #16
 8015dee:	0c0b      	lsrs	r3, r1, #16
 8015df0:	fb02 3306 	mla	r3, r2, r6, r3
 8015df4:	b289      	uxth	r1, r1
 8015df6:	3001      	adds	r0, #1
 8015df8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015dfc:	4285      	cmp	r5, r0
 8015dfe:	f84c 1b04 	str.w	r1, [ip], #4
 8015e02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015e06:	dcec      	bgt.n	8015de2 <__multadd+0x12>
 8015e08:	b30e      	cbz	r6, 8015e4e <__multadd+0x7e>
 8015e0a:	68a3      	ldr	r3, [r4, #8]
 8015e0c:	42ab      	cmp	r3, r5
 8015e0e:	dc19      	bgt.n	8015e44 <__multadd+0x74>
 8015e10:	6861      	ldr	r1, [r4, #4]
 8015e12:	4638      	mov	r0, r7
 8015e14:	3101      	adds	r1, #1
 8015e16:	f7ff ff79 	bl	8015d0c <_Balloc>
 8015e1a:	4680      	mov	r8, r0
 8015e1c:	b928      	cbnz	r0, 8015e2a <__multadd+0x5a>
 8015e1e:	4602      	mov	r2, r0
 8015e20:	4b0c      	ldr	r3, [pc, #48]	; (8015e54 <__multadd+0x84>)
 8015e22:	480d      	ldr	r0, [pc, #52]	; (8015e58 <__multadd+0x88>)
 8015e24:	21b5      	movs	r1, #181	; 0xb5
 8015e26:	f001 fac7 	bl	80173b8 <__assert_func>
 8015e2a:	6922      	ldr	r2, [r4, #16]
 8015e2c:	3202      	adds	r2, #2
 8015e2e:	f104 010c 	add.w	r1, r4, #12
 8015e32:	0092      	lsls	r2, r2, #2
 8015e34:	300c      	adds	r0, #12
 8015e36:	f7ff ff5b 	bl	8015cf0 <memcpy>
 8015e3a:	4621      	mov	r1, r4
 8015e3c:	4638      	mov	r0, r7
 8015e3e:	f7ff ffa5 	bl	8015d8c <_Bfree>
 8015e42:	4644      	mov	r4, r8
 8015e44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015e48:	3501      	adds	r5, #1
 8015e4a:	615e      	str	r6, [r3, #20]
 8015e4c:	6125      	str	r5, [r4, #16]
 8015e4e:	4620      	mov	r0, r4
 8015e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e54:	080191e8 	.word	0x080191e8
 8015e58:	08019274 	.word	0x08019274

08015e5c <__s2b>:
 8015e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e60:	460c      	mov	r4, r1
 8015e62:	4615      	mov	r5, r2
 8015e64:	461f      	mov	r7, r3
 8015e66:	2209      	movs	r2, #9
 8015e68:	3308      	adds	r3, #8
 8015e6a:	4606      	mov	r6, r0
 8015e6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e70:	2100      	movs	r1, #0
 8015e72:	2201      	movs	r2, #1
 8015e74:	429a      	cmp	r2, r3
 8015e76:	db09      	blt.n	8015e8c <__s2b+0x30>
 8015e78:	4630      	mov	r0, r6
 8015e7a:	f7ff ff47 	bl	8015d0c <_Balloc>
 8015e7e:	b940      	cbnz	r0, 8015e92 <__s2b+0x36>
 8015e80:	4602      	mov	r2, r0
 8015e82:	4b19      	ldr	r3, [pc, #100]	; (8015ee8 <__s2b+0x8c>)
 8015e84:	4819      	ldr	r0, [pc, #100]	; (8015eec <__s2b+0x90>)
 8015e86:	21ce      	movs	r1, #206	; 0xce
 8015e88:	f001 fa96 	bl	80173b8 <__assert_func>
 8015e8c:	0052      	lsls	r2, r2, #1
 8015e8e:	3101      	adds	r1, #1
 8015e90:	e7f0      	b.n	8015e74 <__s2b+0x18>
 8015e92:	9b08      	ldr	r3, [sp, #32]
 8015e94:	6143      	str	r3, [r0, #20]
 8015e96:	2d09      	cmp	r5, #9
 8015e98:	f04f 0301 	mov.w	r3, #1
 8015e9c:	6103      	str	r3, [r0, #16]
 8015e9e:	dd16      	ble.n	8015ece <__s2b+0x72>
 8015ea0:	f104 0909 	add.w	r9, r4, #9
 8015ea4:	46c8      	mov	r8, r9
 8015ea6:	442c      	add	r4, r5
 8015ea8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015eac:	4601      	mov	r1, r0
 8015eae:	3b30      	subs	r3, #48	; 0x30
 8015eb0:	220a      	movs	r2, #10
 8015eb2:	4630      	mov	r0, r6
 8015eb4:	f7ff ff8c 	bl	8015dd0 <__multadd>
 8015eb8:	45a0      	cmp	r8, r4
 8015eba:	d1f5      	bne.n	8015ea8 <__s2b+0x4c>
 8015ebc:	f1a5 0408 	sub.w	r4, r5, #8
 8015ec0:	444c      	add	r4, r9
 8015ec2:	1b2d      	subs	r5, r5, r4
 8015ec4:	1963      	adds	r3, r4, r5
 8015ec6:	42bb      	cmp	r3, r7
 8015ec8:	db04      	blt.n	8015ed4 <__s2b+0x78>
 8015eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ece:	340a      	adds	r4, #10
 8015ed0:	2509      	movs	r5, #9
 8015ed2:	e7f6      	b.n	8015ec2 <__s2b+0x66>
 8015ed4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015ed8:	4601      	mov	r1, r0
 8015eda:	3b30      	subs	r3, #48	; 0x30
 8015edc:	220a      	movs	r2, #10
 8015ede:	4630      	mov	r0, r6
 8015ee0:	f7ff ff76 	bl	8015dd0 <__multadd>
 8015ee4:	e7ee      	b.n	8015ec4 <__s2b+0x68>
 8015ee6:	bf00      	nop
 8015ee8:	080191e8 	.word	0x080191e8
 8015eec:	08019274 	.word	0x08019274

08015ef0 <__hi0bits>:
 8015ef0:	0c02      	lsrs	r2, r0, #16
 8015ef2:	0412      	lsls	r2, r2, #16
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	b9ca      	cbnz	r2, 8015f2c <__hi0bits+0x3c>
 8015ef8:	0403      	lsls	r3, r0, #16
 8015efa:	2010      	movs	r0, #16
 8015efc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015f00:	bf04      	itt	eq
 8015f02:	021b      	lsleq	r3, r3, #8
 8015f04:	3008      	addeq	r0, #8
 8015f06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015f0a:	bf04      	itt	eq
 8015f0c:	011b      	lsleq	r3, r3, #4
 8015f0e:	3004      	addeq	r0, #4
 8015f10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015f14:	bf04      	itt	eq
 8015f16:	009b      	lsleq	r3, r3, #2
 8015f18:	3002      	addeq	r0, #2
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	db05      	blt.n	8015f2a <__hi0bits+0x3a>
 8015f1e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8015f22:	f100 0001 	add.w	r0, r0, #1
 8015f26:	bf08      	it	eq
 8015f28:	2020      	moveq	r0, #32
 8015f2a:	4770      	bx	lr
 8015f2c:	2000      	movs	r0, #0
 8015f2e:	e7e5      	b.n	8015efc <__hi0bits+0xc>

08015f30 <__lo0bits>:
 8015f30:	6803      	ldr	r3, [r0, #0]
 8015f32:	4602      	mov	r2, r0
 8015f34:	f013 0007 	ands.w	r0, r3, #7
 8015f38:	d00b      	beq.n	8015f52 <__lo0bits+0x22>
 8015f3a:	07d9      	lsls	r1, r3, #31
 8015f3c:	d421      	bmi.n	8015f82 <__lo0bits+0x52>
 8015f3e:	0798      	lsls	r0, r3, #30
 8015f40:	bf49      	itett	mi
 8015f42:	085b      	lsrmi	r3, r3, #1
 8015f44:	089b      	lsrpl	r3, r3, #2
 8015f46:	2001      	movmi	r0, #1
 8015f48:	6013      	strmi	r3, [r2, #0]
 8015f4a:	bf5c      	itt	pl
 8015f4c:	6013      	strpl	r3, [r2, #0]
 8015f4e:	2002      	movpl	r0, #2
 8015f50:	4770      	bx	lr
 8015f52:	b299      	uxth	r1, r3
 8015f54:	b909      	cbnz	r1, 8015f5a <__lo0bits+0x2a>
 8015f56:	0c1b      	lsrs	r3, r3, #16
 8015f58:	2010      	movs	r0, #16
 8015f5a:	b2d9      	uxtb	r1, r3
 8015f5c:	b909      	cbnz	r1, 8015f62 <__lo0bits+0x32>
 8015f5e:	3008      	adds	r0, #8
 8015f60:	0a1b      	lsrs	r3, r3, #8
 8015f62:	0719      	lsls	r1, r3, #28
 8015f64:	bf04      	itt	eq
 8015f66:	091b      	lsreq	r3, r3, #4
 8015f68:	3004      	addeq	r0, #4
 8015f6a:	0799      	lsls	r1, r3, #30
 8015f6c:	bf04      	itt	eq
 8015f6e:	089b      	lsreq	r3, r3, #2
 8015f70:	3002      	addeq	r0, #2
 8015f72:	07d9      	lsls	r1, r3, #31
 8015f74:	d403      	bmi.n	8015f7e <__lo0bits+0x4e>
 8015f76:	085b      	lsrs	r3, r3, #1
 8015f78:	f100 0001 	add.w	r0, r0, #1
 8015f7c:	d003      	beq.n	8015f86 <__lo0bits+0x56>
 8015f7e:	6013      	str	r3, [r2, #0]
 8015f80:	4770      	bx	lr
 8015f82:	2000      	movs	r0, #0
 8015f84:	4770      	bx	lr
 8015f86:	2020      	movs	r0, #32
 8015f88:	4770      	bx	lr
	...

08015f8c <__i2b>:
 8015f8c:	b510      	push	{r4, lr}
 8015f8e:	460c      	mov	r4, r1
 8015f90:	2101      	movs	r1, #1
 8015f92:	f7ff febb 	bl	8015d0c <_Balloc>
 8015f96:	4602      	mov	r2, r0
 8015f98:	b928      	cbnz	r0, 8015fa6 <__i2b+0x1a>
 8015f9a:	4b05      	ldr	r3, [pc, #20]	; (8015fb0 <__i2b+0x24>)
 8015f9c:	4805      	ldr	r0, [pc, #20]	; (8015fb4 <__i2b+0x28>)
 8015f9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015fa2:	f001 fa09 	bl	80173b8 <__assert_func>
 8015fa6:	2301      	movs	r3, #1
 8015fa8:	6144      	str	r4, [r0, #20]
 8015faa:	6103      	str	r3, [r0, #16]
 8015fac:	bd10      	pop	{r4, pc}
 8015fae:	bf00      	nop
 8015fb0:	080191e8 	.word	0x080191e8
 8015fb4:	08019274 	.word	0x08019274

08015fb8 <__multiply>:
 8015fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fbc:	4691      	mov	r9, r2
 8015fbe:	690a      	ldr	r2, [r1, #16]
 8015fc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	bfb8      	it	lt
 8015fc8:	460b      	movlt	r3, r1
 8015fca:	460c      	mov	r4, r1
 8015fcc:	bfbc      	itt	lt
 8015fce:	464c      	movlt	r4, r9
 8015fd0:	4699      	movlt	r9, r3
 8015fd2:	6927      	ldr	r7, [r4, #16]
 8015fd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015fd8:	68a3      	ldr	r3, [r4, #8]
 8015fda:	6861      	ldr	r1, [r4, #4]
 8015fdc:	eb07 060a 	add.w	r6, r7, sl
 8015fe0:	42b3      	cmp	r3, r6
 8015fe2:	b085      	sub	sp, #20
 8015fe4:	bfb8      	it	lt
 8015fe6:	3101      	addlt	r1, #1
 8015fe8:	f7ff fe90 	bl	8015d0c <_Balloc>
 8015fec:	b930      	cbnz	r0, 8015ffc <__multiply+0x44>
 8015fee:	4602      	mov	r2, r0
 8015ff0:	4b43      	ldr	r3, [pc, #268]	; (8016100 <__multiply+0x148>)
 8015ff2:	4844      	ldr	r0, [pc, #272]	; (8016104 <__multiply+0x14c>)
 8015ff4:	f240 115d 	movw	r1, #349	; 0x15d
 8015ff8:	f001 f9de 	bl	80173b8 <__assert_func>
 8015ffc:	f100 0514 	add.w	r5, r0, #20
 8016000:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016004:	462b      	mov	r3, r5
 8016006:	2200      	movs	r2, #0
 8016008:	4543      	cmp	r3, r8
 801600a:	d321      	bcc.n	8016050 <__multiply+0x98>
 801600c:	f104 0314 	add.w	r3, r4, #20
 8016010:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016014:	f109 0314 	add.w	r3, r9, #20
 8016018:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801601c:	9202      	str	r2, [sp, #8]
 801601e:	1b3a      	subs	r2, r7, r4
 8016020:	3a15      	subs	r2, #21
 8016022:	f022 0203 	bic.w	r2, r2, #3
 8016026:	3204      	adds	r2, #4
 8016028:	f104 0115 	add.w	r1, r4, #21
 801602c:	428f      	cmp	r7, r1
 801602e:	bf38      	it	cc
 8016030:	2204      	movcc	r2, #4
 8016032:	9201      	str	r2, [sp, #4]
 8016034:	9a02      	ldr	r2, [sp, #8]
 8016036:	9303      	str	r3, [sp, #12]
 8016038:	429a      	cmp	r2, r3
 801603a:	d80c      	bhi.n	8016056 <__multiply+0x9e>
 801603c:	2e00      	cmp	r6, #0
 801603e:	dd03      	ble.n	8016048 <__multiply+0x90>
 8016040:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016044:	2b00      	cmp	r3, #0
 8016046:	d059      	beq.n	80160fc <__multiply+0x144>
 8016048:	6106      	str	r6, [r0, #16]
 801604a:	b005      	add	sp, #20
 801604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016050:	f843 2b04 	str.w	r2, [r3], #4
 8016054:	e7d8      	b.n	8016008 <__multiply+0x50>
 8016056:	f8b3 a000 	ldrh.w	sl, [r3]
 801605a:	f1ba 0f00 	cmp.w	sl, #0
 801605e:	d023      	beq.n	80160a8 <__multiply+0xf0>
 8016060:	f104 0e14 	add.w	lr, r4, #20
 8016064:	46a9      	mov	r9, r5
 8016066:	f04f 0c00 	mov.w	ip, #0
 801606a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801606e:	f8d9 1000 	ldr.w	r1, [r9]
 8016072:	fa1f fb82 	uxth.w	fp, r2
 8016076:	b289      	uxth	r1, r1
 8016078:	fb0a 110b 	mla	r1, sl, fp, r1
 801607c:	4461      	add	r1, ip
 801607e:	f8d9 c000 	ldr.w	ip, [r9]
 8016082:	0c12      	lsrs	r2, r2, #16
 8016084:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8016088:	fb0a c202 	mla	r2, sl, r2, ip
 801608c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016090:	b289      	uxth	r1, r1
 8016092:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016096:	4577      	cmp	r7, lr
 8016098:	f849 1b04 	str.w	r1, [r9], #4
 801609c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80160a0:	d8e3      	bhi.n	801606a <__multiply+0xb2>
 80160a2:	9a01      	ldr	r2, [sp, #4]
 80160a4:	f845 c002 	str.w	ip, [r5, r2]
 80160a8:	9a03      	ldr	r2, [sp, #12]
 80160aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80160ae:	3304      	adds	r3, #4
 80160b0:	f1b9 0f00 	cmp.w	r9, #0
 80160b4:	d020      	beq.n	80160f8 <__multiply+0x140>
 80160b6:	6829      	ldr	r1, [r5, #0]
 80160b8:	f104 0c14 	add.w	ip, r4, #20
 80160bc:	46ae      	mov	lr, r5
 80160be:	f04f 0a00 	mov.w	sl, #0
 80160c2:	f8bc b000 	ldrh.w	fp, [ip]
 80160c6:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80160ca:	fb09 220b 	mla	r2, r9, fp, r2
 80160ce:	4492      	add	sl, r2
 80160d0:	b289      	uxth	r1, r1
 80160d2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80160d6:	f84e 1b04 	str.w	r1, [lr], #4
 80160da:	f85c 2b04 	ldr.w	r2, [ip], #4
 80160de:	f8be 1000 	ldrh.w	r1, [lr]
 80160e2:	0c12      	lsrs	r2, r2, #16
 80160e4:	fb09 1102 	mla	r1, r9, r2, r1
 80160e8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80160ec:	4567      	cmp	r7, ip
 80160ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80160f2:	d8e6      	bhi.n	80160c2 <__multiply+0x10a>
 80160f4:	9a01      	ldr	r2, [sp, #4]
 80160f6:	50a9      	str	r1, [r5, r2]
 80160f8:	3504      	adds	r5, #4
 80160fa:	e79b      	b.n	8016034 <__multiply+0x7c>
 80160fc:	3e01      	subs	r6, #1
 80160fe:	e79d      	b.n	801603c <__multiply+0x84>
 8016100:	080191e8 	.word	0x080191e8
 8016104:	08019274 	.word	0x08019274

08016108 <__pow5mult>:
 8016108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801610c:	4615      	mov	r5, r2
 801610e:	f012 0203 	ands.w	r2, r2, #3
 8016112:	4606      	mov	r6, r0
 8016114:	460f      	mov	r7, r1
 8016116:	d007      	beq.n	8016128 <__pow5mult+0x20>
 8016118:	4c25      	ldr	r4, [pc, #148]	; (80161b0 <__pow5mult+0xa8>)
 801611a:	3a01      	subs	r2, #1
 801611c:	2300      	movs	r3, #0
 801611e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016122:	f7ff fe55 	bl	8015dd0 <__multadd>
 8016126:	4607      	mov	r7, r0
 8016128:	10ad      	asrs	r5, r5, #2
 801612a:	d03d      	beq.n	80161a8 <__pow5mult+0xa0>
 801612c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801612e:	b97c      	cbnz	r4, 8016150 <__pow5mult+0x48>
 8016130:	2010      	movs	r0, #16
 8016132:	f7ff fdc3 	bl	8015cbc <malloc>
 8016136:	4602      	mov	r2, r0
 8016138:	6270      	str	r0, [r6, #36]	; 0x24
 801613a:	b928      	cbnz	r0, 8016148 <__pow5mult+0x40>
 801613c:	4b1d      	ldr	r3, [pc, #116]	; (80161b4 <__pow5mult+0xac>)
 801613e:	481e      	ldr	r0, [pc, #120]	; (80161b8 <__pow5mult+0xb0>)
 8016140:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016144:	f001 f938 	bl	80173b8 <__assert_func>
 8016148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801614c:	6004      	str	r4, [r0, #0]
 801614e:	60c4      	str	r4, [r0, #12]
 8016150:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016158:	b94c      	cbnz	r4, 801616e <__pow5mult+0x66>
 801615a:	f240 2171 	movw	r1, #625	; 0x271
 801615e:	4630      	mov	r0, r6
 8016160:	f7ff ff14 	bl	8015f8c <__i2b>
 8016164:	2300      	movs	r3, #0
 8016166:	f8c8 0008 	str.w	r0, [r8, #8]
 801616a:	4604      	mov	r4, r0
 801616c:	6003      	str	r3, [r0, #0]
 801616e:	f04f 0900 	mov.w	r9, #0
 8016172:	07eb      	lsls	r3, r5, #31
 8016174:	d50a      	bpl.n	801618c <__pow5mult+0x84>
 8016176:	4639      	mov	r1, r7
 8016178:	4622      	mov	r2, r4
 801617a:	4630      	mov	r0, r6
 801617c:	f7ff ff1c 	bl	8015fb8 <__multiply>
 8016180:	4639      	mov	r1, r7
 8016182:	4680      	mov	r8, r0
 8016184:	4630      	mov	r0, r6
 8016186:	f7ff fe01 	bl	8015d8c <_Bfree>
 801618a:	4647      	mov	r7, r8
 801618c:	106d      	asrs	r5, r5, #1
 801618e:	d00b      	beq.n	80161a8 <__pow5mult+0xa0>
 8016190:	6820      	ldr	r0, [r4, #0]
 8016192:	b938      	cbnz	r0, 80161a4 <__pow5mult+0x9c>
 8016194:	4622      	mov	r2, r4
 8016196:	4621      	mov	r1, r4
 8016198:	4630      	mov	r0, r6
 801619a:	f7ff ff0d 	bl	8015fb8 <__multiply>
 801619e:	6020      	str	r0, [r4, #0]
 80161a0:	f8c0 9000 	str.w	r9, [r0]
 80161a4:	4604      	mov	r4, r0
 80161a6:	e7e4      	b.n	8016172 <__pow5mult+0x6a>
 80161a8:	4638      	mov	r0, r7
 80161aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161ae:	bf00      	nop
 80161b0:	080193c0 	.word	0x080193c0
 80161b4:	08019176 	.word	0x08019176
 80161b8:	08019274 	.word	0x08019274

080161bc <__lshift>:
 80161bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161c0:	460c      	mov	r4, r1
 80161c2:	6849      	ldr	r1, [r1, #4]
 80161c4:	6923      	ldr	r3, [r4, #16]
 80161c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80161ca:	68a3      	ldr	r3, [r4, #8]
 80161cc:	4607      	mov	r7, r0
 80161ce:	4691      	mov	r9, r2
 80161d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80161d4:	f108 0601 	add.w	r6, r8, #1
 80161d8:	42b3      	cmp	r3, r6
 80161da:	db0b      	blt.n	80161f4 <__lshift+0x38>
 80161dc:	4638      	mov	r0, r7
 80161de:	f7ff fd95 	bl	8015d0c <_Balloc>
 80161e2:	4605      	mov	r5, r0
 80161e4:	b948      	cbnz	r0, 80161fa <__lshift+0x3e>
 80161e6:	4602      	mov	r2, r0
 80161e8:	4b2a      	ldr	r3, [pc, #168]	; (8016294 <__lshift+0xd8>)
 80161ea:	482b      	ldr	r0, [pc, #172]	; (8016298 <__lshift+0xdc>)
 80161ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80161f0:	f001 f8e2 	bl	80173b8 <__assert_func>
 80161f4:	3101      	adds	r1, #1
 80161f6:	005b      	lsls	r3, r3, #1
 80161f8:	e7ee      	b.n	80161d8 <__lshift+0x1c>
 80161fa:	2300      	movs	r3, #0
 80161fc:	f100 0114 	add.w	r1, r0, #20
 8016200:	f100 0210 	add.w	r2, r0, #16
 8016204:	4618      	mov	r0, r3
 8016206:	4553      	cmp	r3, sl
 8016208:	db37      	blt.n	801627a <__lshift+0xbe>
 801620a:	6920      	ldr	r0, [r4, #16]
 801620c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016210:	f104 0314 	add.w	r3, r4, #20
 8016214:	f019 091f 	ands.w	r9, r9, #31
 8016218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801621c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016220:	d02f      	beq.n	8016282 <__lshift+0xc6>
 8016222:	f1c9 0e20 	rsb	lr, r9, #32
 8016226:	468a      	mov	sl, r1
 8016228:	f04f 0c00 	mov.w	ip, #0
 801622c:	681a      	ldr	r2, [r3, #0]
 801622e:	fa02 f209 	lsl.w	r2, r2, r9
 8016232:	ea42 020c 	orr.w	r2, r2, ip
 8016236:	f84a 2b04 	str.w	r2, [sl], #4
 801623a:	f853 2b04 	ldr.w	r2, [r3], #4
 801623e:	4298      	cmp	r0, r3
 8016240:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016244:	d8f2      	bhi.n	801622c <__lshift+0x70>
 8016246:	1b03      	subs	r3, r0, r4
 8016248:	3b15      	subs	r3, #21
 801624a:	f023 0303 	bic.w	r3, r3, #3
 801624e:	3304      	adds	r3, #4
 8016250:	f104 0215 	add.w	r2, r4, #21
 8016254:	4290      	cmp	r0, r2
 8016256:	bf38      	it	cc
 8016258:	2304      	movcc	r3, #4
 801625a:	f841 c003 	str.w	ip, [r1, r3]
 801625e:	f1bc 0f00 	cmp.w	ip, #0
 8016262:	d001      	beq.n	8016268 <__lshift+0xac>
 8016264:	f108 0602 	add.w	r6, r8, #2
 8016268:	3e01      	subs	r6, #1
 801626a:	4638      	mov	r0, r7
 801626c:	612e      	str	r6, [r5, #16]
 801626e:	4621      	mov	r1, r4
 8016270:	f7ff fd8c 	bl	8015d8c <_Bfree>
 8016274:	4628      	mov	r0, r5
 8016276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801627a:	f842 0f04 	str.w	r0, [r2, #4]!
 801627e:	3301      	adds	r3, #1
 8016280:	e7c1      	b.n	8016206 <__lshift+0x4a>
 8016282:	3904      	subs	r1, #4
 8016284:	f853 2b04 	ldr.w	r2, [r3], #4
 8016288:	f841 2f04 	str.w	r2, [r1, #4]!
 801628c:	4298      	cmp	r0, r3
 801628e:	d8f9      	bhi.n	8016284 <__lshift+0xc8>
 8016290:	e7ea      	b.n	8016268 <__lshift+0xac>
 8016292:	bf00      	nop
 8016294:	080191e8 	.word	0x080191e8
 8016298:	08019274 	.word	0x08019274

0801629c <__mcmp>:
 801629c:	690a      	ldr	r2, [r1, #16]
 801629e:	4603      	mov	r3, r0
 80162a0:	6900      	ldr	r0, [r0, #16]
 80162a2:	1a80      	subs	r0, r0, r2
 80162a4:	b530      	push	{r4, r5, lr}
 80162a6:	d10d      	bne.n	80162c4 <__mcmp+0x28>
 80162a8:	3314      	adds	r3, #20
 80162aa:	3114      	adds	r1, #20
 80162ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80162b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80162b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80162b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80162bc:	4295      	cmp	r5, r2
 80162be:	d002      	beq.n	80162c6 <__mcmp+0x2a>
 80162c0:	d304      	bcc.n	80162cc <__mcmp+0x30>
 80162c2:	2001      	movs	r0, #1
 80162c4:	bd30      	pop	{r4, r5, pc}
 80162c6:	42a3      	cmp	r3, r4
 80162c8:	d3f4      	bcc.n	80162b4 <__mcmp+0x18>
 80162ca:	e7fb      	b.n	80162c4 <__mcmp+0x28>
 80162cc:	f04f 30ff 	mov.w	r0, #4294967295
 80162d0:	e7f8      	b.n	80162c4 <__mcmp+0x28>
	...

080162d4 <__mdiff>:
 80162d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162d8:	460d      	mov	r5, r1
 80162da:	4607      	mov	r7, r0
 80162dc:	4611      	mov	r1, r2
 80162de:	4628      	mov	r0, r5
 80162e0:	4614      	mov	r4, r2
 80162e2:	f7ff ffdb 	bl	801629c <__mcmp>
 80162e6:	1e06      	subs	r6, r0, #0
 80162e8:	d111      	bne.n	801630e <__mdiff+0x3a>
 80162ea:	4631      	mov	r1, r6
 80162ec:	4638      	mov	r0, r7
 80162ee:	f7ff fd0d 	bl	8015d0c <_Balloc>
 80162f2:	4602      	mov	r2, r0
 80162f4:	b928      	cbnz	r0, 8016302 <__mdiff+0x2e>
 80162f6:	4b39      	ldr	r3, [pc, #228]	; (80163dc <__mdiff+0x108>)
 80162f8:	f240 2132 	movw	r1, #562	; 0x232
 80162fc:	4838      	ldr	r0, [pc, #224]	; (80163e0 <__mdiff+0x10c>)
 80162fe:	f001 f85b 	bl	80173b8 <__assert_func>
 8016302:	2301      	movs	r3, #1
 8016304:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016308:	4610      	mov	r0, r2
 801630a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801630e:	bfa4      	itt	ge
 8016310:	4623      	movge	r3, r4
 8016312:	462c      	movge	r4, r5
 8016314:	4638      	mov	r0, r7
 8016316:	6861      	ldr	r1, [r4, #4]
 8016318:	bfa6      	itte	ge
 801631a:	461d      	movge	r5, r3
 801631c:	2600      	movge	r6, #0
 801631e:	2601      	movlt	r6, #1
 8016320:	f7ff fcf4 	bl	8015d0c <_Balloc>
 8016324:	4602      	mov	r2, r0
 8016326:	b918      	cbnz	r0, 8016330 <__mdiff+0x5c>
 8016328:	4b2c      	ldr	r3, [pc, #176]	; (80163dc <__mdiff+0x108>)
 801632a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801632e:	e7e5      	b.n	80162fc <__mdiff+0x28>
 8016330:	6927      	ldr	r7, [r4, #16]
 8016332:	60c6      	str	r6, [r0, #12]
 8016334:	692e      	ldr	r6, [r5, #16]
 8016336:	f104 0014 	add.w	r0, r4, #20
 801633a:	f105 0914 	add.w	r9, r5, #20
 801633e:	f102 0e14 	add.w	lr, r2, #20
 8016342:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8016346:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801634a:	3410      	adds	r4, #16
 801634c:	46f2      	mov	sl, lr
 801634e:	2100      	movs	r1, #0
 8016350:	f859 3b04 	ldr.w	r3, [r9], #4
 8016354:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8016358:	fa1f f883 	uxth.w	r8, r3
 801635c:	fa11 f18b 	uxtah	r1, r1, fp
 8016360:	0c1b      	lsrs	r3, r3, #16
 8016362:	eba1 0808 	sub.w	r8, r1, r8
 8016366:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801636a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801636e:	fa1f f888 	uxth.w	r8, r8
 8016372:	1419      	asrs	r1, r3, #16
 8016374:	454e      	cmp	r6, r9
 8016376:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801637a:	f84a 3b04 	str.w	r3, [sl], #4
 801637e:	d8e7      	bhi.n	8016350 <__mdiff+0x7c>
 8016380:	1b73      	subs	r3, r6, r5
 8016382:	3b15      	subs	r3, #21
 8016384:	f023 0303 	bic.w	r3, r3, #3
 8016388:	3304      	adds	r3, #4
 801638a:	3515      	adds	r5, #21
 801638c:	42ae      	cmp	r6, r5
 801638e:	bf38      	it	cc
 8016390:	2304      	movcc	r3, #4
 8016392:	4418      	add	r0, r3
 8016394:	4473      	add	r3, lr
 8016396:	469e      	mov	lr, r3
 8016398:	4606      	mov	r6, r0
 801639a:	4566      	cmp	r6, ip
 801639c:	d30e      	bcc.n	80163bc <__mdiff+0xe8>
 801639e:	f10c 0103 	add.w	r1, ip, #3
 80163a2:	1a09      	subs	r1, r1, r0
 80163a4:	f021 0103 	bic.w	r1, r1, #3
 80163a8:	3803      	subs	r0, #3
 80163aa:	4584      	cmp	ip, r0
 80163ac:	bf38      	it	cc
 80163ae:	2100      	movcc	r1, #0
 80163b0:	4419      	add	r1, r3
 80163b2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80163b6:	b17b      	cbz	r3, 80163d8 <__mdiff+0x104>
 80163b8:	6117      	str	r7, [r2, #16]
 80163ba:	e7a5      	b.n	8016308 <__mdiff+0x34>
 80163bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80163c0:	fa11 f488 	uxtah	r4, r1, r8
 80163c4:	1425      	asrs	r5, r4, #16
 80163c6:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 80163ca:	b2a4      	uxth	r4, r4
 80163cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80163d0:	f84e 4b04 	str.w	r4, [lr], #4
 80163d4:	1429      	asrs	r1, r5, #16
 80163d6:	e7e0      	b.n	801639a <__mdiff+0xc6>
 80163d8:	3f01      	subs	r7, #1
 80163da:	e7ea      	b.n	80163b2 <__mdiff+0xde>
 80163dc:	080191e8 	.word	0x080191e8
 80163e0:	08019274 	.word	0x08019274

080163e4 <__ulp>:
 80163e4:	4b11      	ldr	r3, [pc, #68]	; (801642c <__ulp+0x48>)
 80163e6:	400b      	ands	r3, r1
 80163e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	dd02      	ble.n	80163f6 <__ulp+0x12>
 80163f0:	2000      	movs	r0, #0
 80163f2:	4619      	mov	r1, r3
 80163f4:	4770      	bx	lr
 80163f6:	425b      	negs	r3, r3
 80163f8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80163fc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016400:	f04f 0000 	mov.w	r0, #0
 8016404:	f04f 0100 	mov.w	r1, #0
 8016408:	da04      	bge.n	8016414 <__ulp+0x30>
 801640a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801640e:	fa43 f102 	asr.w	r1, r3, r2
 8016412:	4770      	bx	lr
 8016414:	f1a2 0314 	sub.w	r3, r2, #20
 8016418:	2b1e      	cmp	r3, #30
 801641a:	bfda      	itte	le
 801641c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8016420:	fa22 f303 	lsrle.w	r3, r2, r3
 8016424:	2301      	movgt	r3, #1
 8016426:	4618      	mov	r0, r3
 8016428:	4770      	bx	lr
 801642a:	bf00      	nop
 801642c:	7ff00000 	.word	0x7ff00000

08016430 <__b2d>:
 8016430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016434:	6907      	ldr	r7, [r0, #16]
 8016436:	f100 0914 	add.w	r9, r0, #20
 801643a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801643e:	f1a7 0804 	sub.w	r8, r7, #4
 8016442:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8016446:	4630      	mov	r0, r6
 8016448:	f7ff fd52 	bl	8015ef0 <__hi0bits>
 801644c:	f1c0 0320 	rsb	r3, r0, #32
 8016450:	280a      	cmp	r0, #10
 8016452:	600b      	str	r3, [r1, #0]
 8016454:	491f      	ldr	r1, [pc, #124]	; (80164d4 <__b2d+0xa4>)
 8016456:	dc17      	bgt.n	8016488 <__b2d+0x58>
 8016458:	f1c0 0c0b 	rsb	ip, r0, #11
 801645c:	45c1      	cmp	r9, r8
 801645e:	fa26 f30c 	lsr.w	r3, r6, ip
 8016462:	bf38      	it	cc
 8016464:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8016468:	ea43 0501 	orr.w	r5, r3, r1
 801646c:	bf28      	it	cs
 801646e:	2200      	movcs	r2, #0
 8016470:	f100 0315 	add.w	r3, r0, #21
 8016474:	fa06 f303 	lsl.w	r3, r6, r3
 8016478:	fa22 f20c 	lsr.w	r2, r2, ip
 801647c:	ea43 0402 	orr.w	r4, r3, r2
 8016480:	4620      	mov	r0, r4
 8016482:	4629      	mov	r1, r5
 8016484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016488:	45c1      	cmp	r9, r8
 801648a:	bf3a      	itte	cc
 801648c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8016490:	f1a7 0808 	subcc.w	r8, r7, #8
 8016494:	2200      	movcs	r2, #0
 8016496:	f1b0 030b 	subs.w	r3, r0, #11
 801649a:	d016      	beq.n	80164ca <__b2d+0x9a>
 801649c:	f1c3 0720 	rsb	r7, r3, #32
 80164a0:	fa22 f107 	lsr.w	r1, r2, r7
 80164a4:	45c8      	cmp	r8, r9
 80164a6:	fa06 f603 	lsl.w	r6, r6, r3
 80164aa:	ea46 0601 	orr.w	r6, r6, r1
 80164ae:	bf8c      	ite	hi
 80164b0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80164b4:	2100      	movls	r1, #0
 80164b6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80164ba:	fa02 f003 	lsl.w	r0, r2, r3
 80164be:	40f9      	lsrs	r1, r7
 80164c0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80164c4:	ea40 0401 	orr.w	r4, r0, r1
 80164c8:	e7da      	b.n	8016480 <__b2d+0x50>
 80164ca:	ea46 0501 	orr.w	r5, r6, r1
 80164ce:	4614      	mov	r4, r2
 80164d0:	e7d6      	b.n	8016480 <__b2d+0x50>
 80164d2:	bf00      	nop
 80164d4:	3ff00000 	.word	0x3ff00000

080164d8 <__d2b>:
 80164d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80164dc:	2101      	movs	r1, #1
 80164de:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80164e2:	4690      	mov	r8, r2
 80164e4:	461d      	mov	r5, r3
 80164e6:	f7ff fc11 	bl	8015d0c <_Balloc>
 80164ea:	4604      	mov	r4, r0
 80164ec:	b930      	cbnz	r0, 80164fc <__d2b+0x24>
 80164ee:	4602      	mov	r2, r0
 80164f0:	4b25      	ldr	r3, [pc, #148]	; (8016588 <__d2b+0xb0>)
 80164f2:	4826      	ldr	r0, [pc, #152]	; (801658c <__d2b+0xb4>)
 80164f4:	f240 310a 	movw	r1, #778	; 0x30a
 80164f8:	f000 ff5e 	bl	80173b8 <__assert_func>
 80164fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8016500:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8016504:	bb2d      	cbnz	r5, 8016552 <__d2b+0x7a>
 8016506:	9301      	str	r3, [sp, #4]
 8016508:	f1b8 0300 	subs.w	r3, r8, #0
 801650c:	d026      	beq.n	801655c <__d2b+0x84>
 801650e:	4668      	mov	r0, sp
 8016510:	9300      	str	r3, [sp, #0]
 8016512:	f7ff fd0d 	bl	8015f30 <__lo0bits>
 8016516:	9900      	ldr	r1, [sp, #0]
 8016518:	b1f0      	cbz	r0, 8016558 <__d2b+0x80>
 801651a:	9a01      	ldr	r2, [sp, #4]
 801651c:	f1c0 0320 	rsb	r3, r0, #32
 8016520:	fa02 f303 	lsl.w	r3, r2, r3
 8016524:	430b      	orrs	r3, r1
 8016526:	40c2      	lsrs	r2, r0
 8016528:	6163      	str	r3, [r4, #20]
 801652a:	9201      	str	r2, [sp, #4]
 801652c:	9b01      	ldr	r3, [sp, #4]
 801652e:	61a3      	str	r3, [r4, #24]
 8016530:	2b00      	cmp	r3, #0
 8016532:	bf14      	ite	ne
 8016534:	2102      	movne	r1, #2
 8016536:	2101      	moveq	r1, #1
 8016538:	6121      	str	r1, [r4, #16]
 801653a:	b1c5      	cbz	r5, 801656e <__d2b+0x96>
 801653c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016540:	4405      	add	r5, r0
 8016542:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016546:	603d      	str	r5, [r7, #0]
 8016548:	6030      	str	r0, [r6, #0]
 801654a:	4620      	mov	r0, r4
 801654c:	b002      	add	sp, #8
 801654e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016556:	e7d6      	b.n	8016506 <__d2b+0x2e>
 8016558:	6161      	str	r1, [r4, #20]
 801655a:	e7e7      	b.n	801652c <__d2b+0x54>
 801655c:	a801      	add	r0, sp, #4
 801655e:	f7ff fce7 	bl	8015f30 <__lo0bits>
 8016562:	9b01      	ldr	r3, [sp, #4]
 8016564:	6163      	str	r3, [r4, #20]
 8016566:	2101      	movs	r1, #1
 8016568:	6121      	str	r1, [r4, #16]
 801656a:	3020      	adds	r0, #32
 801656c:	e7e5      	b.n	801653a <__d2b+0x62>
 801656e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8016572:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016576:	6038      	str	r0, [r7, #0]
 8016578:	6918      	ldr	r0, [r3, #16]
 801657a:	f7ff fcb9 	bl	8015ef0 <__hi0bits>
 801657e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8016582:	6031      	str	r1, [r6, #0]
 8016584:	e7e1      	b.n	801654a <__d2b+0x72>
 8016586:	bf00      	nop
 8016588:	080191e8 	.word	0x080191e8
 801658c:	08019274 	.word	0x08019274

08016590 <__ratio>:
 8016590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016594:	4688      	mov	r8, r1
 8016596:	4669      	mov	r1, sp
 8016598:	4681      	mov	r9, r0
 801659a:	f7ff ff49 	bl	8016430 <__b2d>
 801659e:	460f      	mov	r7, r1
 80165a0:	4604      	mov	r4, r0
 80165a2:	460d      	mov	r5, r1
 80165a4:	4640      	mov	r0, r8
 80165a6:	a901      	add	r1, sp, #4
 80165a8:	f7ff ff42 	bl	8016430 <__b2d>
 80165ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80165b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80165b4:	eba3 0c02 	sub.w	ip, r3, r2
 80165b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80165bc:	1a9b      	subs	r3, r3, r2
 80165be:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	bfd5      	itete	le
 80165c6:	460a      	movle	r2, r1
 80165c8:	462a      	movgt	r2, r5
 80165ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80165ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80165d2:	468b      	mov	fp, r1
 80165d4:	bfd8      	it	le
 80165d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80165da:	465b      	mov	r3, fp
 80165dc:	4602      	mov	r2, r0
 80165de:	4639      	mov	r1, r7
 80165e0:	4620      	mov	r0, r4
 80165e2:	f7ea f9bf 	bl	8000964 <__aeabi_ddiv>
 80165e6:	b003      	add	sp, #12
 80165e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165ec <__copybits>:
 80165ec:	3901      	subs	r1, #1
 80165ee:	b570      	push	{r4, r5, r6, lr}
 80165f0:	1149      	asrs	r1, r1, #5
 80165f2:	6914      	ldr	r4, [r2, #16]
 80165f4:	3101      	adds	r1, #1
 80165f6:	f102 0314 	add.w	r3, r2, #20
 80165fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80165fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016602:	1f05      	subs	r5, r0, #4
 8016604:	42a3      	cmp	r3, r4
 8016606:	d30c      	bcc.n	8016622 <__copybits+0x36>
 8016608:	1aa3      	subs	r3, r4, r2
 801660a:	3b11      	subs	r3, #17
 801660c:	f023 0303 	bic.w	r3, r3, #3
 8016610:	3211      	adds	r2, #17
 8016612:	42a2      	cmp	r2, r4
 8016614:	bf88      	it	hi
 8016616:	2300      	movhi	r3, #0
 8016618:	4418      	add	r0, r3
 801661a:	2300      	movs	r3, #0
 801661c:	4288      	cmp	r0, r1
 801661e:	d305      	bcc.n	801662c <__copybits+0x40>
 8016620:	bd70      	pop	{r4, r5, r6, pc}
 8016622:	f853 6b04 	ldr.w	r6, [r3], #4
 8016626:	f845 6f04 	str.w	r6, [r5, #4]!
 801662a:	e7eb      	b.n	8016604 <__copybits+0x18>
 801662c:	f840 3b04 	str.w	r3, [r0], #4
 8016630:	e7f4      	b.n	801661c <__copybits+0x30>

08016632 <__any_on>:
 8016632:	f100 0214 	add.w	r2, r0, #20
 8016636:	6900      	ldr	r0, [r0, #16]
 8016638:	114b      	asrs	r3, r1, #5
 801663a:	4298      	cmp	r0, r3
 801663c:	b510      	push	{r4, lr}
 801663e:	db11      	blt.n	8016664 <__any_on+0x32>
 8016640:	dd0a      	ble.n	8016658 <__any_on+0x26>
 8016642:	f011 011f 	ands.w	r1, r1, #31
 8016646:	d007      	beq.n	8016658 <__any_on+0x26>
 8016648:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801664c:	fa24 f001 	lsr.w	r0, r4, r1
 8016650:	fa00 f101 	lsl.w	r1, r0, r1
 8016654:	428c      	cmp	r4, r1
 8016656:	d10b      	bne.n	8016670 <__any_on+0x3e>
 8016658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801665c:	4293      	cmp	r3, r2
 801665e:	d803      	bhi.n	8016668 <__any_on+0x36>
 8016660:	2000      	movs	r0, #0
 8016662:	bd10      	pop	{r4, pc}
 8016664:	4603      	mov	r3, r0
 8016666:	e7f7      	b.n	8016658 <__any_on+0x26>
 8016668:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801666c:	2900      	cmp	r1, #0
 801666e:	d0f5      	beq.n	801665c <__any_on+0x2a>
 8016670:	2001      	movs	r0, #1
 8016672:	e7f6      	b.n	8016662 <__any_on+0x30>

08016674 <_calloc_r>:
 8016674:	b570      	push	{r4, r5, r6, lr}
 8016676:	fba1 5402 	umull	r5, r4, r1, r2
 801667a:	b934      	cbnz	r4, 801668a <_calloc_r+0x16>
 801667c:	4629      	mov	r1, r5
 801667e:	f000 f877 	bl	8016770 <_malloc_r>
 8016682:	4606      	mov	r6, r0
 8016684:	b928      	cbnz	r0, 8016692 <_calloc_r+0x1e>
 8016686:	4630      	mov	r0, r6
 8016688:	bd70      	pop	{r4, r5, r6, pc}
 801668a:	220c      	movs	r2, #12
 801668c:	6002      	str	r2, [r0, #0]
 801668e:	2600      	movs	r6, #0
 8016690:	e7f9      	b.n	8016686 <_calloc_r+0x12>
 8016692:	462a      	mov	r2, r5
 8016694:	4621      	mov	r1, r4
 8016696:	f7fc fb01 	bl	8012c9c <memset>
 801669a:	e7f4      	b.n	8016686 <_calloc_r+0x12>

0801669c <_free_r>:
 801669c:	b538      	push	{r3, r4, r5, lr}
 801669e:	4605      	mov	r5, r0
 80166a0:	2900      	cmp	r1, #0
 80166a2:	d041      	beq.n	8016728 <_free_r+0x8c>
 80166a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166a8:	1f0c      	subs	r4, r1, #4
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	bfb8      	it	lt
 80166ae:	18e4      	addlt	r4, r4, r3
 80166b0:	f001 f882 	bl	80177b8 <__malloc_lock>
 80166b4:	4a1d      	ldr	r2, [pc, #116]	; (801672c <_free_r+0x90>)
 80166b6:	6813      	ldr	r3, [r2, #0]
 80166b8:	b933      	cbnz	r3, 80166c8 <_free_r+0x2c>
 80166ba:	6063      	str	r3, [r4, #4]
 80166bc:	6014      	str	r4, [r2, #0]
 80166be:	4628      	mov	r0, r5
 80166c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166c4:	f001 b87e 	b.w	80177c4 <__malloc_unlock>
 80166c8:	42a3      	cmp	r3, r4
 80166ca:	d908      	bls.n	80166de <_free_r+0x42>
 80166cc:	6820      	ldr	r0, [r4, #0]
 80166ce:	1821      	adds	r1, r4, r0
 80166d0:	428b      	cmp	r3, r1
 80166d2:	bf01      	itttt	eq
 80166d4:	6819      	ldreq	r1, [r3, #0]
 80166d6:	685b      	ldreq	r3, [r3, #4]
 80166d8:	1809      	addeq	r1, r1, r0
 80166da:	6021      	streq	r1, [r4, #0]
 80166dc:	e7ed      	b.n	80166ba <_free_r+0x1e>
 80166de:	461a      	mov	r2, r3
 80166e0:	685b      	ldr	r3, [r3, #4]
 80166e2:	b10b      	cbz	r3, 80166e8 <_free_r+0x4c>
 80166e4:	42a3      	cmp	r3, r4
 80166e6:	d9fa      	bls.n	80166de <_free_r+0x42>
 80166e8:	6811      	ldr	r1, [r2, #0]
 80166ea:	1850      	adds	r0, r2, r1
 80166ec:	42a0      	cmp	r0, r4
 80166ee:	d10b      	bne.n	8016708 <_free_r+0x6c>
 80166f0:	6820      	ldr	r0, [r4, #0]
 80166f2:	4401      	add	r1, r0
 80166f4:	1850      	adds	r0, r2, r1
 80166f6:	4283      	cmp	r3, r0
 80166f8:	6011      	str	r1, [r2, #0]
 80166fa:	d1e0      	bne.n	80166be <_free_r+0x22>
 80166fc:	6818      	ldr	r0, [r3, #0]
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	6053      	str	r3, [r2, #4]
 8016702:	4401      	add	r1, r0
 8016704:	6011      	str	r1, [r2, #0]
 8016706:	e7da      	b.n	80166be <_free_r+0x22>
 8016708:	d902      	bls.n	8016710 <_free_r+0x74>
 801670a:	230c      	movs	r3, #12
 801670c:	602b      	str	r3, [r5, #0]
 801670e:	e7d6      	b.n	80166be <_free_r+0x22>
 8016710:	6820      	ldr	r0, [r4, #0]
 8016712:	1821      	adds	r1, r4, r0
 8016714:	428b      	cmp	r3, r1
 8016716:	bf04      	itt	eq
 8016718:	6819      	ldreq	r1, [r3, #0]
 801671a:	685b      	ldreq	r3, [r3, #4]
 801671c:	6063      	str	r3, [r4, #4]
 801671e:	bf04      	itt	eq
 8016720:	1809      	addeq	r1, r1, r0
 8016722:	6021      	streq	r1, [r4, #0]
 8016724:	6054      	str	r4, [r2, #4]
 8016726:	e7ca      	b.n	80166be <_free_r+0x22>
 8016728:	bd38      	pop	{r3, r4, r5, pc}
 801672a:	bf00      	nop
 801672c:	20001998 	.word	0x20001998

08016730 <sbrk_aligned>:
 8016730:	b570      	push	{r4, r5, r6, lr}
 8016732:	4e0e      	ldr	r6, [pc, #56]	; (801676c <sbrk_aligned+0x3c>)
 8016734:	460c      	mov	r4, r1
 8016736:	6831      	ldr	r1, [r6, #0]
 8016738:	4605      	mov	r5, r0
 801673a:	b911      	cbnz	r1, 8016742 <sbrk_aligned+0x12>
 801673c:	f000 fd24 	bl	8017188 <_sbrk_r>
 8016740:	6030      	str	r0, [r6, #0]
 8016742:	4621      	mov	r1, r4
 8016744:	4628      	mov	r0, r5
 8016746:	f000 fd1f 	bl	8017188 <_sbrk_r>
 801674a:	1c43      	adds	r3, r0, #1
 801674c:	d00a      	beq.n	8016764 <sbrk_aligned+0x34>
 801674e:	1cc4      	adds	r4, r0, #3
 8016750:	f024 0403 	bic.w	r4, r4, #3
 8016754:	42a0      	cmp	r0, r4
 8016756:	d007      	beq.n	8016768 <sbrk_aligned+0x38>
 8016758:	1a21      	subs	r1, r4, r0
 801675a:	4628      	mov	r0, r5
 801675c:	f000 fd14 	bl	8017188 <_sbrk_r>
 8016760:	3001      	adds	r0, #1
 8016762:	d101      	bne.n	8016768 <sbrk_aligned+0x38>
 8016764:	f04f 34ff 	mov.w	r4, #4294967295
 8016768:	4620      	mov	r0, r4
 801676a:	bd70      	pop	{r4, r5, r6, pc}
 801676c:	2000199c 	.word	0x2000199c

08016770 <_malloc_r>:
 8016770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016774:	1ccd      	adds	r5, r1, #3
 8016776:	f025 0503 	bic.w	r5, r5, #3
 801677a:	3508      	adds	r5, #8
 801677c:	2d0c      	cmp	r5, #12
 801677e:	bf38      	it	cc
 8016780:	250c      	movcc	r5, #12
 8016782:	2d00      	cmp	r5, #0
 8016784:	4607      	mov	r7, r0
 8016786:	db01      	blt.n	801678c <_malloc_r+0x1c>
 8016788:	42a9      	cmp	r1, r5
 801678a:	d905      	bls.n	8016798 <_malloc_r+0x28>
 801678c:	230c      	movs	r3, #12
 801678e:	603b      	str	r3, [r7, #0]
 8016790:	2600      	movs	r6, #0
 8016792:	4630      	mov	r0, r6
 8016794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016798:	4e2e      	ldr	r6, [pc, #184]	; (8016854 <_malloc_r+0xe4>)
 801679a:	f001 f80d 	bl	80177b8 <__malloc_lock>
 801679e:	6833      	ldr	r3, [r6, #0]
 80167a0:	461c      	mov	r4, r3
 80167a2:	bb34      	cbnz	r4, 80167f2 <_malloc_r+0x82>
 80167a4:	4629      	mov	r1, r5
 80167a6:	4638      	mov	r0, r7
 80167a8:	f7ff ffc2 	bl	8016730 <sbrk_aligned>
 80167ac:	1c43      	adds	r3, r0, #1
 80167ae:	4604      	mov	r4, r0
 80167b0:	d14d      	bne.n	801684e <_malloc_r+0xde>
 80167b2:	6834      	ldr	r4, [r6, #0]
 80167b4:	4626      	mov	r6, r4
 80167b6:	2e00      	cmp	r6, #0
 80167b8:	d140      	bne.n	801683c <_malloc_r+0xcc>
 80167ba:	6823      	ldr	r3, [r4, #0]
 80167bc:	4631      	mov	r1, r6
 80167be:	4638      	mov	r0, r7
 80167c0:	eb04 0803 	add.w	r8, r4, r3
 80167c4:	f000 fce0 	bl	8017188 <_sbrk_r>
 80167c8:	4580      	cmp	r8, r0
 80167ca:	d13a      	bne.n	8016842 <_malloc_r+0xd2>
 80167cc:	6821      	ldr	r1, [r4, #0]
 80167ce:	3503      	adds	r5, #3
 80167d0:	1a6d      	subs	r5, r5, r1
 80167d2:	f025 0503 	bic.w	r5, r5, #3
 80167d6:	3508      	adds	r5, #8
 80167d8:	2d0c      	cmp	r5, #12
 80167da:	bf38      	it	cc
 80167dc:	250c      	movcc	r5, #12
 80167de:	4629      	mov	r1, r5
 80167e0:	4638      	mov	r0, r7
 80167e2:	f7ff ffa5 	bl	8016730 <sbrk_aligned>
 80167e6:	3001      	adds	r0, #1
 80167e8:	d02b      	beq.n	8016842 <_malloc_r+0xd2>
 80167ea:	6823      	ldr	r3, [r4, #0]
 80167ec:	442b      	add	r3, r5
 80167ee:	6023      	str	r3, [r4, #0]
 80167f0:	e00e      	b.n	8016810 <_malloc_r+0xa0>
 80167f2:	6822      	ldr	r2, [r4, #0]
 80167f4:	1b52      	subs	r2, r2, r5
 80167f6:	d41e      	bmi.n	8016836 <_malloc_r+0xc6>
 80167f8:	2a0b      	cmp	r2, #11
 80167fa:	d916      	bls.n	801682a <_malloc_r+0xba>
 80167fc:	1961      	adds	r1, r4, r5
 80167fe:	42a3      	cmp	r3, r4
 8016800:	6025      	str	r5, [r4, #0]
 8016802:	bf18      	it	ne
 8016804:	6059      	strne	r1, [r3, #4]
 8016806:	6863      	ldr	r3, [r4, #4]
 8016808:	bf08      	it	eq
 801680a:	6031      	streq	r1, [r6, #0]
 801680c:	5162      	str	r2, [r4, r5]
 801680e:	604b      	str	r3, [r1, #4]
 8016810:	4638      	mov	r0, r7
 8016812:	f104 060b 	add.w	r6, r4, #11
 8016816:	f000 ffd5 	bl	80177c4 <__malloc_unlock>
 801681a:	f026 0607 	bic.w	r6, r6, #7
 801681e:	1d23      	adds	r3, r4, #4
 8016820:	1af2      	subs	r2, r6, r3
 8016822:	d0b6      	beq.n	8016792 <_malloc_r+0x22>
 8016824:	1b9b      	subs	r3, r3, r6
 8016826:	50a3      	str	r3, [r4, r2]
 8016828:	e7b3      	b.n	8016792 <_malloc_r+0x22>
 801682a:	6862      	ldr	r2, [r4, #4]
 801682c:	42a3      	cmp	r3, r4
 801682e:	bf0c      	ite	eq
 8016830:	6032      	streq	r2, [r6, #0]
 8016832:	605a      	strne	r2, [r3, #4]
 8016834:	e7ec      	b.n	8016810 <_malloc_r+0xa0>
 8016836:	4623      	mov	r3, r4
 8016838:	6864      	ldr	r4, [r4, #4]
 801683a:	e7b2      	b.n	80167a2 <_malloc_r+0x32>
 801683c:	4634      	mov	r4, r6
 801683e:	6876      	ldr	r6, [r6, #4]
 8016840:	e7b9      	b.n	80167b6 <_malloc_r+0x46>
 8016842:	230c      	movs	r3, #12
 8016844:	603b      	str	r3, [r7, #0]
 8016846:	4638      	mov	r0, r7
 8016848:	f000 ffbc 	bl	80177c4 <__malloc_unlock>
 801684c:	e7a1      	b.n	8016792 <_malloc_r+0x22>
 801684e:	6025      	str	r5, [r4, #0]
 8016850:	e7de      	b.n	8016810 <_malloc_r+0xa0>
 8016852:	bf00      	nop
 8016854:	20001998 	.word	0x20001998

08016858 <__ssputs_r>:
 8016858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801685c:	688e      	ldr	r6, [r1, #8]
 801685e:	429e      	cmp	r6, r3
 8016860:	4682      	mov	sl, r0
 8016862:	460c      	mov	r4, r1
 8016864:	4690      	mov	r8, r2
 8016866:	461f      	mov	r7, r3
 8016868:	d838      	bhi.n	80168dc <__ssputs_r+0x84>
 801686a:	898a      	ldrh	r2, [r1, #12]
 801686c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016870:	d032      	beq.n	80168d8 <__ssputs_r+0x80>
 8016872:	6825      	ldr	r5, [r4, #0]
 8016874:	6909      	ldr	r1, [r1, #16]
 8016876:	eba5 0901 	sub.w	r9, r5, r1
 801687a:	6965      	ldr	r5, [r4, #20]
 801687c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016884:	3301      	adds	r3, #1
 8016886:	444b      	add	r3, r9
 8016888:	106d      	asrs	r5, r5, #1
 801688a:	429d      	cmp	r5, r3
 801688c:	bf38      	it	cc
 801688e:	461d      	movcc	r5, r3
 8016890:	0553      	lsls	r3, r2, #21
 8016892:	d531      	bpl.n	80168f8 <__ssputs_r+0xa0>
 8016894:	4629      	mov	r1, r5
 8016896:	f7ff ff6b 	bl	8016770 <_malloc_r>
 801689a:	4606      	mov	r6, r0
 801689c:	b950      	cbnz	r0, 80168b4 <__ssputs_r+0x5c>
 801689e:	230c      	movs	r3, #12
 80168a0:	f8ca 3000 	str.w	r3, [sl]
 80168a4:	89a3      	ldrh	r3, [r4, #12]
 80168a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80168aa:	81a3      	strh	r3, [r4, #12]
 80168ac:	f04f 30ff 	mov.w	r0, #4294967295
 80168b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168b4:	6921      	ldr	r1, [r4, #16]
 80168b6:	464a      	mov	r2, r9
 80168b8:	f7ff fa1a 	bl	8015cf0 <memcpy>
 80168bc:	89a3      	ldrh	r3, [r4, #12]
 80168be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80168c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80168c6:	81a3      	strh	r3, [r4, #12]
 80168c8:	6126      	str	r6, [r4, #16]
 80168ca:	6165      	str	r5, [r4, #20]
 80168cc:	444e      	add	r6, r9
 80168ce:	eba5 0509 	sub.w	r5, r5, r9
 80168d2:	6026      	str	r6, [r4, #0]
 80168d4:	60a5      	str	r5, [r4, #8]
 80168d6:	463e      	mov	r6, r7
 80168d8:	42be      	cmp	r6, r7
 80168da:	d900      	bls.n	80168de <__ssputs_r+0x86>
 80168dc:	463e      	mov	r6, r7
 80168de:	6820      	ldr	r0, [r4, #0]
 80168e0:	4632      	mov	r2, r6
 80168e2:	4641      	mov	r1, r8
 80168e4:	f000 ff4e 	bl	8017784 <memmove>
 80168e8:	68a3      	ldr	r3, [r4, #8]
 80168ea:	1b9b      	subs	r3, r3, r6
 80168ec:	60a3      	str	r3, [r4, #8]
 80168ee:	6823      	ldr	r3, [r4, #0]
 80168f0:	4433      	add	r3, r6
 80168f2:	6023      	str	r3, [r4, #0]
 80168f4:	2000      	movs	r0, #0
 80168f6:	e7db      	b.n	80168b0 <__ssputs_r+0x58>
 80168f8:	462a      	mov	r2, r5
 80168fa:	f000 ff69 	bl	80177d0 <_realloc_r>
 80168fe:	4606      	mov	r6, r0
 8016900:	2800      	cmp	r0, #0
 8016902:	d1e1      	bne.n	80168c8 <__ssputs_r+0x70>
 8016904:	6921      	ldr	r1, [r4, #16]
 8016906:	4650      	mov	r0, sl
 8016908:	f7ff fec8 	bl	801669c <_free_r>
 801690c:	e7c7      	b.n	801689e <__ssputs_r+0x46>
	...

08016910 <_svfiprintf_r>:
 8016910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016914:	4698      	mov	r8, r3
 8016916:	898b      	ldrh	r3, [r1, #12]
 8016918:	061b      	lsls	r3, r3, #24
 801691a:	b09d      	sub	sp, #116	; 0x74
 801691c:	4607      	mov	r7, r0
 801691e:	460d      	mov	r5, r1
 8016920:	4614      	mov	r4, r2
 8016922:	d50e      	bpl.n	8016942 <_svfiprintf_r+0x32>
 8016924:	690b      	ldr	r3, [r1, #16]
 8016926:	b963      	cbnz	r3, 8016942 <_svfiprintf_r+0x32>
 8016928:	2140      	movs	r1, #64	; 0x40
 801692a:	f7ff ff21 	bl	8016770 <_malloc_r>
 801692e:	6028      	str	r0, [r5, #0]
 8016930:	6128      	str	r0, [r5, #16]
 8016932:	b920      	cbnz	r0, 801693e <_svfiprintf_r+0x2e>
 8016934:	230c      	movs	r3, #12
 8016936:	603b      	str	r3, [r7, #0]
 8016938:	f04f 30ff 	mov.w	r0, #4294967295
 801693c:	e0d1      	b.n	8016ae2 <_svfiprintf_r+0x1d2>
 801693e:	2340      	movs	r3, #64	; 0x40
 8016940:	616b      	str	r3, [r5, #20]
 8016942:	2300      	movs	r3, #0
 8016944:	9309      	str	r3, [sp, #36]	; 0x24
 8016946:	2320      	movs	r3, #32
 8016948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801694c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016950:	2330      	movs	r3, #48	; 0x30
 8016952:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016afc <_svfiprintf_r+0x1ec>
 8016956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801695a:	f04f 0901 	mov.w	r9, #1
 801695e:	4623      	mov	r3, r4
 8016960:	469a      	mov	sl, r3
 8016962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016966:	b10a      	cbz	r2, 801696c <_svfiprintf_r+0x5c>
 8016968:	2a25      	cmp	r2, #37	; 0x25
 801696a:	d1f9      	bne.n	8016960 <_svfiprintf_r+0x50>
 801696c:	ebba 0b04 	subs.w	fp, sl, r4
 8016970:	d00b      	beq.n	801698a <_svfiprintf_r+0x7a>
 8016972:	465b      	mov	r3, fp
 8016974:	4622      	mov	r2, r4
 8016976:	4629      	mov	r1, r5
 8016978:	4638      	mov	r0, r7
 801697a:	f7ff ff6d 	bl	8016858 <__ssputs_r>
 801697e:	3001      	adds	r0, #1
 8016980:	f000 80aa 	beq.w	8016ad8 <_svfiprintf_r+0x1c8>
 8016984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016986:	445a      	add	r2, fp
 8016988:	9209      	str	r2, [sp, #36]	; 0x24
 801698a:	f89a 3000 	ldrb.w	r3, [sl]
 801698e:	2b00      	cmp	r3, #0
 8016990:	f000 80a2 	beq.w	8016ad8 <_svfiprintf_r+0x1c8>
 8016994:	2300      	movs	r3, #0
 8016996:	f04f 32ff 	mov.w	r2, #4294967295
 801699a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801699e:	f10a 0a01 	add.w	sl, sl, #1
 80169a2:	9304      	str	r3, [sp, #16]
 80169a4:	9307      	str	r3, [sp, #28]
 80169a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80169aa:	931a      	str	r3, [sp, #104]	; 0x68
 80169ac:	4654      	mov	r4, sl
 80169ae:	2205      	movs	r2, #5
 80169b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169b4:	4851      	ldr	r0, [pc, #324]	; (8016afc <_svfiprintf_r+0x1ec>)
 80169b6:	f7e9 fbeb 	bl	8000190 <memchr>
 80169ba:	9a04      	ldr	r2, [sp, #16]
 80169bc:	b9d8      	cbnz	r0, 80169f6 <_svfiprintf_r+0xe6>
 80169be:	06d0      	lsls	r0, r2, #27
 80169c0:	bf44      	itt	mi
 80169c2:	2320      	movmi	r3, #32
 80169c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80169c8:	0711      	lsls	r1, r2, #28
 80169ca:	bf44      	itt	mi
 80169cc:	232b      	movmi	r3, #43	; 0x2b
 80169ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80169d2:	f89a 3000 	ldrb.w	r3, [sl]
 80169d6:	2b2a      	cmp	r3, #42	; 0x2a
 80169d8:	d015      	beq.n	8016a06 <_svfiprintf_r+0xf6>
 80169da:	9a07      	ldr	r2, [sp, #28]
 80169dc:	4654      	mov	r4, sl
 80169de:	2000      	movs	r0, #0
 80169e0:	f04f 0c0a 	mov.w	ip, #10
 80169e4:	4621      	mov	r1, r4
 80169e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169ea:	3b30      	subs	r3, #48	; 0x30
 80169ec:	2b09      	cmp	r3, #9
 80169ee:	d94e      	bls.n	8016a8e <_svfiprintf_r+0x17e>
 80169f0:	b1b0      	cbz	r0, 8016a20 <_svfiprintf_r+0x110>
 80169f2:	9207      	str	r2, [sp, #28]
 80169f4:	e014      	b.n	8016a20 <_svfiprintf_r+0x110>
 80169f6:	eba0 0308 	sub.w	r3, r0, r8
 80169fa:	fa09 f303 	lsl.w	r3, r9, r3
 80169fe:	4313      	orrs	r3, r2
 8016a00:	9304      	str	r3, [sp, #16]
 8016a02:	46a2      	mov	sl, r4
 8016a04:	e7d2      	b.n	80169ac <_svfiprintf_r+0x9c>
 8016a06:	9b03      	ldr	r3, [sp, #12]
 8016a08:	1d19      	adds	r1, r3, #4
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	9103      	str	r1, [sp, #12]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	bfbb      	ittet	lt
 8016a12:	425b      	neglt	r3, r3
 8016a14:	f042 0202 	orrlt.w	r2, r2, #2
 8016a18:	9307      	strge	r3, [sp, #28]
 8016a1a:	9307      	strlt	r3, [sp, #28]
 8016a1c:	bfb8      	it	lt
 8016a1e:	9204      	strlt	r2, [sp, #16]
 8016a20:	7823      	ldrb	r3, [r4, #0]
 8016a22:	2b2e      	cmp	r3, #46	; 0x2e
 8016a24:	d10c      	bne.n	8016a40 <_svfiprintf_r+0x130>
 8016a26:	7863      	ldrb	r3, [r4, #1]
 8016a28:	2b2a      	cmp	r3, #42	; 0x2a
 8016a2a:	d135      	bne.n	8016a98 <_svfiprintf_r+0x188>
 8016a2c:	9b03      	ldr	r3, [sp, #12]
 8016a2e:	1d1a      	adds	r2, r3, #4
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	9203      	str	r2, [sp, #12]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	bfb8      	it	lt
 8016a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8016a3c:	3402      	adds	r4, #2
 8016a3e:	9305      	str	r3, [sp, #20]
 8016a40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8016b00 <_svfiprintf_r+0x1f0>
 8016a44:	7821      	ldrb	r1, [r4, #0]
 8016a46:	2203      	movs	r2, #3
 8016a48:	4650      	mov	r0, sl
 8016a4a:	f7e9 fba1 	bl	8000190 <memchr>
 8016a4e:	b140      	cbz	r0, 8016a62 <_svfiprintf_r+0x152>
 8016a50:	2340      	movs	r3, #64	; 0x40
 8016a52:	eba0 000a 	sub.w	r0, r0, sl
 8016a56:	fa03 f000 	lsl.w	r0, r3, r0
 8016a5a:	9b04      	ldr	r3, [sp, #16]
 8016a5c:	4303      	orrs	r3, r0
 8016a5e:	3401      	adds	r4, #1
 8016a60:	9304      	str	r3, [sp, #16]
 8016a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a66:	4827      	ldr	r0, [pc, #156]	; (8016b04 <_svfiprintf_r+0x1f4>)
 8016a68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016a6c:	2206      	movs	r2, #6
 8016a6e:	f7e9 fb8f 	bl	8000190 <memchr>
 8016a72:	2800      	cmp	r0, #0
 8016a74:	d038      	beq.n	8016ae8 <_svfiprintf_r+0x1d8>
 8016a76:	4b24      	ldr	r3, [pc, #144]	; (8016b08 <_svfiprintf_r+0x1f8>)
 8016a78:	bb1b      	cbnz	r3, 8016ac2 <_svfiprintf_r+0x1b2>
 8016a7a:	9b03      	ldr	r3, [sp, #12]
 8016a7c:	3307      	adds	r3, #7
 8016a7e:	f023 0307 	bic.w	r3, r3, #7
 8016a82:	3308      	adds	r3, #8
 8016a84:	9303      	str	r3, [sp, #12]
 8016a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a88:	4433      	add	r3, r6
 8016a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8016a8c:	e767      	b.n	801695e <_svfiprintf_r+0x4e>
 8016a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016a92:	460c      	mov	r4, r1
 8016a94:	2001      	movs	r0, #1
 8016a96:	e7a5      	b.n	80169e4 <_svfiprintf_r+0xd4>
 8016a98:	2300      	movs	r3, #0
 8016a9a:	3401      	adds	r4, #1
 8016a9c:	9305      	str	r3, [sp, #20]
 8016a9e:	4619      	mov	r1, r3
 8016aa0:	f04f 0c0a 	mov.w	ip, #10
 8016aa4:	4620      	mov	r0, r4
 8016aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016aaa:	3a30      	subs	r2, #48	; 0x30
 8016aac:	2a09      	cmp	r2, #9
 8016aae:	d903      	bls.n	8016ab8 <_svfiprintf_r+0x1a8>
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d0c5      	beq.n	8016a40 <_svfiprintf_r+0x130>
 8016ab4:	9105      	str	r1, [sp, #20]
 8016ab6:	e7c3      	b.n	8016a40 <_svfiprintf_r+0x130>
 8016ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8016abc:	4604      	mov	r4, r0
 8016abe:	2301      	movs	r3, #1
 8016ac0:	e7f0      	b.n	8016aa4 <_svfiprintf_r+0x194>
 8016ac2:	ab03      	add	r3, sp, #12
 8016ac4:	9300      	str	r3, [sp, #0]
 8016ac6:	462a      	mov	r2, r5
 8016ac8:	4b10      	ldr	r3, [pc, #64]	; (8016b0c <_svfiprintf_r+0x1fc>)
 8016aca:	a904      	add	r1, sp, #16
 8016acc:	4638      	mov	r0, r7
 8016ace:	f7fc f98b 	bl	8012de8 <_printf_float>
 8016ad2:	1c42      	adds	r2, r0, #1
 8016ad4:	4606      	mov	r6, r0
 8016ad6:	d1d6      	bne.n	8016a86 <_svfiprintf_r+0x176>
 8016ad8:	89ab      	ldrh	r3, [r5, #12]
 8016ada:	065b      	lsls	r3, r3, #25
 8016adc:	f53f af2c 	bmi.w	8016938 <_svfiprintf_r+0x28>
 8016ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ae2:	b01d      	add	sp, #116	; 0x74
 8016ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ae8:	ab03      	add	r3, sp, #12
 8016aea:	9300      	str	r3, [sp, #0]
 8016aec:	462a      	mov	r2, r5
 8016aee:	4b07      	ldr	r3, [pc, #28]	; (8016b0c <_svfiprintf_r+0x1fc>)
 8016af0:	a904      	add	r1, sp, #16
 8016af2:	4638      	mov	r0, r7
 8016af4:	f7fc fc10 	bl	8013318 <_printf_i>
 8016af8:	e7eb      	b.n	8016ad2 <_svfiprintf_r+0x1c2>
 8016afa:	bf00      	nop
 8016afc:	080193cc 	.word	0x080193cc
 8016b00:	080193d2 	.word	0x080193d2
 8016b04:	080193d6 	.word	0x080193d6
 8016b08:	08012de9 	.word	0x08012de9
 8016b0c:	08016859 	.word	0x08016859

08016b10 <_sungetc_r>:
 8016b10:	b538      	push	{r3, r4, r5, lr}
 8016b12:	1c4b      	adds	r3, r1, #1
 8016b14:	4614      	mov	r4, r2
 8016b16:	d103      	bne.n	8016b20 <_sungetc_r+0x10>
 8016b18:	f04f 35ff 	mov.w	r5, #4294967295
 8016b1c:	4628      	mov	r0, r5
 8016b1e:	bd38      	pop	{r3, r4, r5, pc}
 8016b20:	8993      	ldrh	r3, [r2, #12]
 8016b22:	f023 0320 	bic.w	r3, r3, #32
 8016b26:	8193      	strh	r3, [r2, #12]
 8016b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016b2a:	6852      	ldr	r2, [r2, #4]
 8016b2c:	b2cd      	uxtb	r5, r1
 8016b2e:	b18b      	cbz	r3, 8016b54 <_sungetc_r+0x44>
 8016b30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016b32:	4293      	cmp	r3, r2
 8016b34:	dd08      	ble.n	8016b48 <_sungetc_r+0x38>
 8016b36:	6823      	ldr	r3, [r4, #0]
 8016b38:	1e5a      	subs	r2, r3, #1
 8016b3a:	6022      	str	r2, [r4, #0]
 8016b3c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016b40:	6863      	ldr	r3, [r4, #4]
 8016b42:	3301      	adds	r3, #1
 8016b44:	6063      	str	r3, [r4, #4]
 8016b46:	e7e9      	b.n	8016b1c <_sungetc_r+0xc>
 8016b48:	4621      	mov	r1, r4
 8016b4a:	f000 fbed 	bl	8017328 <__submore>
 8016b4e:	2800      	cmp	r0, #0
 8016b50:	d0f1      	beq.n	8016b36 <_sungetc_r+0x26>
 8016b52:	e7e1      	b.n	8016b18 <_sungetc_r+0x8>
 8016b54:	6921      	ldr	r1, [r4, #16]
 8016b56:	6823      	ldr	r3, [r4, #0]
 8016b58:	b151      	cbz	r1, 8016b70 <_sungetc_r+0x60>
 8016b5a:	4299      	cmp	r1, r3
 8016b5c:	d208      	bcs.n	8016b70 <_sungetc_r+0x60>
 8016b5e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016b62:	42a9      	cmp	r1, r5
 8016b64:	d104      	bne.n	8016b70 <_sungetc_r+0x60>
 8016b66:	3b01      	subs	r3, #1
 8016b68:	3201      	adds	r2, #1
 8016b6a:	6023      	str	r3, [r4, #0]
 8016b6c:	6062      	str	r2, [r4, #4]
 8016b6e:	e7d5      	b.n	8016b1c <_sungetc_r+0xc>
 8016b70:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b78:	6363      	str	r3, [r4, #52]	; 0x34
 8016b7a:	2303      	movs	r3, #3
 8016b7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8016b7e:	4623      	mov	r3, r4
 8016b80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016b84:	6023      	str	r3, [r4, #0]
 8016b86:	2301      	movs	r3, #1
 8016b88:	e7dc      	b.n	8016b44 <_sungetc_r+0x34>

08016b8a <__ssrefill_r>:
 8016b8a:	b510      	push	{r4, lr}
 8016b8c:	460c      	mov	r4, r1
 8016b8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016b90:	b169      	cbz	r1, 8016bae <__ssrefill_r+0x24>
 8016b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b96:	4299      	cmp	r1, r3
 8016b98:	d001      	beq.n	8016b9e <__ssrefill_r+0x14>
 8016b9a:	f7ff fd7f 	bl	801669c <_free_r>
 8016b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016ba0:	6063      	str	r3, [r4, #4]
 8016ba2:	2000      	movs	r0, #0
 8016ba4:	6360      	str	r0, [r4, #52]	; 0x34
 8016ba6:	b113      	cbz	r3, 8016bae <__ssrefill_r+0x24>
 8016ba8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016baa:	6023      	str	r3, [r4, #0]
 8016bac:	bd10      	pop	{r4, pc}
 8016bae:	6923      	ldr	r3, [r4, #16]
 8016bb0:	6023      	str	r3, [r4, #0]
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	6063      	str	r3, [r4, #4]
 8016bb6:	89a3      	ldrh	r3, [r4, #12]
 8016bb8:	f043 0320 	orr.w	r3, r3, #32
 8016bbc:	81a3      	strh	r3, [r4, #12]
 8016bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8016bc2:	e7f3      	b.n	8016bac <__ssrefill_r+0x22>

08016bc4 <__ssvfiscanf_r>:
 8016bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bc8:	460c      	mov	r4, r1
 8016bca:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8016bce:	2100      	movs	r1, #0
 8016bd0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016bd4:	49a6      	ldr	r1, [pc, #664]	; (8016e70 <__ssvfiscanf_r+0x2ac>)
 8016bd6:	91a0      	str	r1, [sp, #640]	; 0x280
 8016bd8:	f10d 0804 	add.w	r8, sp, #4
 8016bdc:	49a5      	ldr	r1, [pc, #660]	; (8016e74 <__ssvfiscanf_r+0x2b0>)
 8016bde:	4fa6      	ldr	r7, [pc, #664]	; (8016e78 <__ssvfiscanf_r+0x2b4>)
 8016be0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8016e7c <__ssvfiscanf_r+0x2b8>
 8016be4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016be8:	4606      	mov	r6, r0
 8016bea:	91a1      	str	r1, [sp, #644]	; 0x284
 8016bec:	9300      	str	r3, [sp, #0]
 8016bee:	7813      	ldrb	r3, [r2, #0]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	f000 815a 	beq.w	8016eaa <__ssvfiscanf_r+0x2e6>
 8016bf6:	5dd9      	ldrb	r1, [r3, r7]
 8016bf8:	f011 0108 	ands.w	r1, r1, #8
 8016bfc:	f102 0501 	add.w	r5, r2, #1
 8016c00:	d019      	beq.n	8016c36 <__ssvfiscanf_r+0x72>
 8016c02:	6863      	ldr	r3, [r4, #4]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	dd0f      	ble.n	8016c28 <__ssvfiscanf_r+0x64>
 8016c08:	6823      	ldr	r3, [r4, #0]
 8016c0a:	781a      	ldrb	r2, [r3, #0]
 8016c0c:	5cba      	ldrb	r2, [r7, r2]
 8016c0e:	0712      	lsls	r2, r2, #28
 8016c10:	d401      	bmi.n	8016c16 <__ssvfiscanf_r+0x52>
 8016c12:	462a      	mov	r2, r5
 8016c14:	e7eb      	b.n	8016bee <__ssvfiscanf_r+0x2a>
 8016c16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016c18:	3201      	adds	r2, #1
 8016c1a:	9245      	str	r2, [sp, #276]	; 0x114
 8016c1c:	6862      	ldr	r2, [r4, #4]
 8016c1e:	3301      	adds	r3, #1
 8016c20:	3a01      	subs	r2, #1
 8016c22:	6062      	str	r2, [r4, #4]
 8016c24:	6023      	str	r3, [r4, #0]
 8016c26:	e7ec      	b.n	8016c02 <__ssvfiscanf_r+0x3e>
 8016c28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016c2a:	4621      	mov	r1, r4
 8016c2c:	4630      	mov	r0, r6
 8016c2e:	4798      	blx	r3
 8016c30:	2800      	cmp	r0, #0
 8016c32:	d0e9      	beq.n	8016c08 <__ssvfiscanf_r+0x44>
 8016c34:	e7ed      	b.n	8016c12 <__ssvfiscanf_r+0x4e>
 8016c36:	2b25      	cmp	r3, #37	; 0x25
 8016c38:	d012      	beq.n	8016c60 <__ssvfiscanf_r+0x9c>
 8016c3a:	469a      	mov	sl, r3
 8016c3c:	6863      	ldr	r3, [r4, #4]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	f340 8091 	ble.w	8016d66 <__ssvfiscanf_r+0x1a2>
 8016c44:	6822      	ldr	r2, [r4, #0]
 8016c46:	7813      	ldrb	r3, [r2, #0]
 8016c48:	4553      	cmp	r3, sl
 8016c4a:	f040 812e 	bne.w	8016eaa <__ssvfiscanf_r+0x2e6>
 8016c4e:	6863      	ldr	r3, [r4, #4]
 8016c50:	3b01      	subs	r3, #1
 8016c52:	6063      	str	r3, [r4, #4]
 8016c54:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016c56:	3201      	adds	r2, #1
 8016c58:	3301      	adds	r3, #1
 8016c5a:	6022      	str	r2, [r4, #0]
 8016c5c:	9345      	str	r3, [sp, #276]	; 0x114
 8016c5e:	e7d8      	b.n	8016c12 <__ssvfiscanf_r+0x4e>
 8016c60:	9141      	str	r1, [sp, #260]	; 0x104
 8016c62:	9143      	str	r1, [sp, #268]	; 0x10c
 8016c64:	7853      	ldrb	r3, [r2, #1]
 8016c66:	2b2a      	cmp	r3, #42	; 0x2a
 8016c68:	bf02      	ittt	eq
 8016c6a:	2310      	moveq	r3, #16
 8016c6c:	1c95      	addeq	r5, r2, #2
 8016c6e:	9341      	streq	r3, [sp, #260]	; 0x104
 8016c70:	220a      	movs	r2, #10
 8016c72:	46aa      	mov	sl, r5
 8016c74:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016c78:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016c7c:	2b09      	cmp	r3, #9
 8016c7e:	d91d      	bls.n	8016cbc <__ssvfiscanf_r+0xf8>
 8016c80:	487e      	ldr	r0, [pc, #504]	; (8016e7c <__ssvfiscanf_r+0x2b8>)
 8016c82:	2203      	movs	r2, #3
 8016c84:	f7e9 fa84 	bl	8000190 <memchr>
 8016c88:	b140      	cbz	r0, 8016c9c <__ssvfiscanf_r+0xd8>
 8016c8a:	2301      	movs	r3, #1
 8016c8c:	eba0 0009 	sub.w	r0, r0, r9
 8016c90:	fa03 f000 	lsl.w	r0, r3, r0
 8016c94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016c96:	4318      	orrs	r0, r3
 8016c98:	9041      	str	r0, [sp, #260]	; 0x104
 8016c9a:	4655      	mov	r5, sl
 8016c9c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016ca0:	2b78      	cmp	r3, #120	; 0x78
 8016ca2:	d806      	bhi.n	8016cb2 <__ssvfiscanf_r+0xee>
 8016ca4:	2b57      	cmp	r3, #87	; 0x57
 8016ca6:	d810      	bhi.n	8016cca <__ssvfiscanf_r+0x106>
 8016ca8:	2b25      	cmp	r3, #37	; 0x25
 8016caa:	d0c6      	beq.n	8016c3a <__ssvfiscanf_r+0x76>
 8016cac:	d856      	bhi.n	8016d5c <__ssvfiscanf_r+0x198>
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d064      	beq.n	8016d7c <__ssvfiscanf_r+0x1b8>
 8016cb2:	2303      	movs	r3, #3
 8016cb4:	9347      	str	r3, [sp, #284]	; 0x11c
 8016cb6:	230a      	movs	r3, #10
 8016cb8:	9342      	str	r3, [sp, #264]	; 0x108
 8016cba:	e071      	b.n	8016da0 <__ssvfiscanf_r+0x1dc>
 8016cbc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016cbe:	fb02 1103 	mla	r1, r2, r3, r1
 8016cc2:	3930      	subs	r1, #48	; 0x30
 8016cc4:	9143      	str	r1, [sp, #268]	; 0x10c
 8016cc6:	4655      	mov	r5, sl
 8016cc8:	e7d3      	b.n	8016c72 <__ssvfiscanf_r+0xae>
 8016cca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016cce:	2a20      	cmp	r2, #32
 8016cd0:	d8ef      	bhi.n	8016cb2 <__ssvfiscanf_r+0xee>
 8016cd2:	a101      	add	r1, pc, #4	; (adr r1, 8016cd8 <__ssvfiscanf_r+0x114>)
 8016cd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016cd8:	08016d8b 	.word	0x08016d8b
 8016cdc:	08016cb3 	.word	0x08016cb3
 8016ce0:	08016cb3 	.word	0x08016cb3
 8016ce4:	08016de9 	.word	0x08016de9
 8016ce8:	08016cb3 	.word	0x08016cb3
 8016cec:	08016cb3 	.word	0x08016cb3
 8016cf0:	08016cb3 	.word	0x08016cb3
 8016cf4:	08016cb3 	.word	0x08016cb3
 8016cf8:	08016cb3 	.word	0x08016cb3
 8016cfc:	08016cb3 	.word	0x08016cb3
 8016d00:	08016cb3 	.word	0x08016cb3
 8016d04:	08016dff 	.word	0x08016dff
 8016d08:	08016dd5 	.word	0x08016dd5
 8016d0c:	08016d63 	.word	0x08016d63
 8016d10:	08016d63 	.word	0x08016d63
 8016d14:	08016d63 	.word	0x08016d63
 8016d18:	08016cb3 	.word	0x08016cb3
 8016d1c:	08016dd9 	.word	0x08016dd9
 8016d20:	08016cb3 	.word	0x08016cb3
 8016d24:	08016cb3 	.word	0x08016cb3
 8016d28:	08016cb3 	.word	0x08016cb3
 8016d2c:	08016cb3 	.word	0x08016cb3
 8016d30:	08016e0f 	.word	0x08016e0f
 8016d34:	08016de1 	.word	0x08016de1
 8016d38:	08016d83 	.word	0x08016d83
 8016d3c:	08016cb3 	.word	0x08016cb3
 8016d40:	08016cb3 	.word	0x08016cb3
 8016d44:	08016e0b 	.word	0x08016e0b
 8016d48:	08016cb3 	.word	0x08016cb3
 8016d4c:	08016dd5 	.word	0x08016dd5
 8016d50:	08016cb3 	.word	0x08016cb3
 8016d54:	08016cb3 	.word	0x08016cb3
 8016d58:	08016d8b 	.word	0x08016d8b
 8016d5c:	3b45      	subs	r3, #69	; 0x45
 8016d5e:	2b02      	cmp	r3, #2
 8016d60:	d8a7      	bhi.n	8016cb2 <__ssvfiscanf_r+0xee>
 8016d62:	2305      	movs	r3, #5
 8016d64:	e01b      	b.n	8016d9e <__ssvfiscanf_r+0x1da>
 8016d66:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016d68:	4621      	mov	r1, r4
 8016d6a:	4630      	mov	r0, r6
 8016d6c:	4798      	blx	r3
 8016d6e:	2800      	cmp	r0, #0
 8016d70:	f43f af68 	beq.w	8016c44 <__ssvfiscanf_r+0x80>
 8016d74:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016d76:	2800      	cmp	r0, #0
 8016d78:	f040 808d 	bne.w	8016e96 <__ssvfiscanf_r+0x2d2>
 8016d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d80:	e08f      	b.n	8016ea2 <__ssvfiscanf_r+0x2de>
 8016d82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016d84:	f042 0220 	orr.w	r2, r2, #32
 8016d88:	9241      	str	r2, [sp, #260]	; 0x104
 8016d8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016d90:	9241      	str	r2, [sp, #260]	; 0x104
 8016d92:	2210      	movs	r2, #16
 8016d94:	2b6f      	cmp	r3, #111	; 0x6f
 8016d96:	9242      	str	r2, [sp, #264]	; 0x108
 8016d98:	bf34      	ite	cc
 8016d9a:	2303      	movcc	r3, #3
 8016d9c:	2304      	movcs	r3, #4
 8016d9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8016da0:	6863      	ldr	r3, [r4, #4]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	dd42      	ble.n	8016e2c <__ssvfiscanf_r+0x268>
 8016da6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016da8:	0659      	lsls	r1, r3, #25
 8016daa:	d404      	bmi.n	8016db6 <__ssvfiscanf_r+0x1f2>
 8016dac:	6823      	ldr	r3, [r4, #0]
 8016dae:	781a      	ldrb	r2, [r3, #0]
 8016db0:	5cba      	ldrb	r2, [r7, r2]
 8016db2:	0712      	lsls	r2, r2, #28
 8016db4:	d441      	bmi.n	8016e3a <__ssvfiscanf_r+0x276>
 8016db6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016db8:	2b02      	cmp	r3, #2
 8016dba:	dc50      	bgt.n	8016e5e <__ssvfiscanf_r+0x29a>
 8016dbc:	466b      	mov	r3, sp
 8016dbe:	4622      	mov	r2, r4
 8016dc0:	a941      	add	r1, sp, #260	; 0x104
 8016dc2:	4630      	mov	r0, r6
 8016dc4:	f000 f876 	bl	8016eb4 <_scanf_chars>
 8016dc8:	2801      	cmp	r0, #1
 8016dca:	d06e      	beq.n	8016eaa <__ssvfiscanf_r+0x2e6>
 8016dcc:	2802      	cmp	r0, #2
 8016dce:	f47f af20 	bne.w	8016c12 <__ssvfiscanf_r+0x4e>
 8016dd2:	e7cf      	b.n	8016d74 <__ssvfiscanf_r+0x1b0>
 8016dd4:	220a      	movs	r2, #10
 8016dd6:	e7dd      	b.n	8016d94 <__ssvfiscanf_r+0x1d0>
 8016dd8:	2300      	movs	r3, #0
 8016dda:	9342      	str	r3, [sp, #264]	; 0x108
 8016ddc:	2303      	movs	r3, #3
 8016dde:	e7de      	b.n	8016d9e <__ssvfiscanf_r+0x1da>
 8016de0:	2308      	movs	r3, #8
 8016de2:	9342      	str	r3, [sp, #264]	; 0x108
 8016de4:	2304      	movs	r3, #4
 8016de6:	e7da      	b.n	8016d9e <__ssvfiscanf_r+0x1da>
 8016de8:	4629      	mov	r1, r5
 8016dea:	4640      	mov	r0, r8
 8016dec:	f000 f9dc 	bl	80171a8 <__sccl>
 8016df0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016df6:	9341      	str	r3, [sp, #260]	; 0x104
 8016df8:	4605      	mov	r5, r0
 8016dfa:	2301      	movs	r3, #1
 8016dfc:	e7cf      	b.n	8016d9e <__ssvfiscanf_r+0x1da>
 8016dfe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e04:	9341      	str	r3, [sp, #260]	; 0x104
 8016e06:	2300      	movs	r3, #0
 8016e08:	e7c9      	b.n	8016d9e <__ssvfiscanf_r+0x1da>
 8016e0a:	2302      	movs	r3, #2
 8016e0c:	e7c7      	b.n	8016d9e <__ssvfiscanf_r+0x1da>
 8016e0e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016e10:	06c3      	lsls	r3, r0, #27
 8016e12:	f53f aefe 	bmi.w	8016c12 <__ssvfiscanf_r+0x4e>
 8016e16:	9b00      	ldr	r3, [sp, #0]
 8016e18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016e1a:	1d19      	adds	r1, r3, #4
 8016e1c:	9100      	str	r1, [sp, #0]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	f010 0f01 	tst.w	r0, #1
 8016e24:	bf14      	ite	ne
 8016e26:	801a      	strhne	r2, [r3, #0]
 8016e28:	601a      	streq	r2, [r3, #0]
 8016e2a:	e6f2      	b.n	8016c12 <__ssvfiscanf_r+0x4e>
 8016e2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016e2e:	4621      	mov	r1, r4
 8016e30:	4630      	mov	r0, r6
 8016e32:	4798      	blx	r3
 8016e34:	2800      	cmp	r0, #0
 8016e36:	d0b6      	beq.n	8016da6 <__ssvfiscanf_r+0x1e2>
 8016e38:	e79c      	b.n	8016d74 <__ssvfiscanf_r+0x1b0>
 8016e3a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016e3c:	3201      	adds	r2, #1
 8016e3e:	9245      	str	r2, [sp, #276]	; 0x114
 8016e40:	6862      	ldr	r2, [r4, #4]
 8016e42:	3a01      	subs	r2, #1
 8016e44:	2a00      	cmp	r2, #0
 8016e46:	6062      	str	r2, [r4, #4]
 8016e48:	dd02      	ble.n	8016e50 <__ssvfiscanf_r+0x28c>
 8016e4a:	3301      	adds	r3, #1
 8016e4c:	6023      	str	r3, [r4, #0]
 8016e4e:	e7ad      	b.n	8016dac <__ssvfiscanf_r+0x1e8>
 8016e50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016e52:	4621      	mov	r1, r4
 8016e54:	4630      	mov	r0, r6
 8016e56:	4798      	blx	r3
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	d0a7      	beq.n	8016dac <__ssvfiscanf_r+0x1e8>
 8016e5c:	e78a      	b.n	8016d74 <__ssvfiscanf_r+0x1b0>
 8016e5e:	2b04      	cmp	r3, #4
 8016e60:	dc0e      	bgt.n	8016e80 <__ssvfiscanf_r+0x2bc>
 8016e62:	466b      	mov	r3, sp
 8016e64:	4622      	mov	r2, r4
 8016e66:	a941      	add	r1, sp, #260	; 0x104
 8016e68:	4630      	mov	r0, r6
 8016e6a:	f000 f87d 	bl	8016f68 <_scanf_i>
 8016e6e:	e7ab      	b.n	8016dc8 <__ssvfiscanf_r+0x204>
 8016e70:	08016b11 	.word	0x08016b11
 8016e74:	08016b8b 	.word	0x08016b8b
 8016e78:	08019069 	.word	0x08019069
 8016e7c:	080193d2 	.word	0x080193d2
 8016e80:	4b0b      	ldr	r3, [pc, #44]	; (8016eb0 <__ssvfiscanf_r+0x2ec>)
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	f43f aec5 	beq.w	8016c12 <__ssvfiscanf_r+0x4e>
 8016e88:	466b      	mov	r3, sp
 8016e8a:	4622      	mov	r2, r4
 8016e8c:	a941      	add	r1, sp, #260	; 0x104
 8016e8e:	4630      	mov	r0, r6
 8016e90:	f7fc fb68 	bl	8013564 <_scanf_float>
 8016e94:	e798      	b.n	8016dc8 <__ssvfiscanf_r+0x204>
 8016e96:	89a3      	ldrh	r3, [r4, #12]
 8016e98:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016e9c:	bf18      	it	ne
 8016e9e:	f04f 30ff 	movne.w	r0, #4294967295
 8016ea2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016eaa:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016eac:	e7f9      	b.n	8016ea2 <__ssvfiscanf_r+0x2de>
 8016eae:	bf00      	nop
 8016eb0:	08013565 	.word	0x08013565

08016eb4 <_scanf_chars>:
 8016eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016eb8:	4615      	mov	r5, r2
 8016eba:	688a      	ldr	r2, [r1, #8]
 8016ebc:	4680      	mov	r8, r0
 8016ebe:	460c      	mov	r4, r1
 8016ec0:	b932      	cbnz	r2, 8016ed0 <_scanf_chars+0x1c>
 8016ec2:	698a      	ldr	r2, [r1, #24]
 8016ec4:	2a00      	cmp	r2, #0
 8016ec6:	bf0c      	ite	eq
 8016ec8:	2201      	moveq	r2, #1
 8016eca:	f04f 32ff 	movne.w	r2, #4294967295
 8016ece:	608a      	str	r2, [r1, #8]
 8016ed0:	6822      	ldr	r2, [r4, #0]
 8016ed2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016f64 <_scanf_chars+0xb0>
 8016ed6:	06d1      	lsls	r1, r2, #27
 8016ed8:	bf5f      	itttt	pl
 8016eda:	681a      	ldrpl	r2, [r3, #0]
 8016edc:	1d11      	addpl	r1, r2, #4
 8016ede:	6019      	strpl	r1, [r3, #0]
 8016ee0:	6816      	ldrpl	r6, [r2, #0]
 8016ee2:	2700      	movs	r7, #0
 8016ee4:	69a0      	ldr	r0, [r4, #24]
 8016ee6:	b188      	cbz	r0, 8016f0c <_scanf_chars+0x58>
 8016ee8:	2801      	cmp	r0, #1
 8016eea:	d107      	bne.n	8016efc <_scanf_chars+0x48>
 8016eec:	682b      	ldr	r3, [r5, #0]
 8016eee:	781a      	ldrb	r2, [r3, #0]
 8016ef0:	6963      	ldr	r3, [r4, #20]
 8016ef2:	5c9b      	ldrb	r3, [r3, r2]
 8016ef4:	b953      	cbnz	r3, 8016f0c <_scanf_chars+0x58>
 8016ef6:	2f00      	cmp	r7, #0
 8016ef8:	d031      	beq.n	8016f5e <_scanf_chars+0xaa>
 8016efa:	e022      	b.n	8016f42 <_scanf_chars+0x8e>
 8016efc:	2802      	cmp	r0, #2
 8016efe:	d120      	bne.n	8016f42 <_scanf_chars+0x8e>
 8016f00:	682b      	ldr	r3, [r5, #0]
 8016f02:	781b      	ldrb	r3, [r3, #0]
 8016f04:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016f08:	071b      	lsls	r3, r3, #28
 8016f0a:	d41a      	bmi.n	8016f42 <_scanf_chars+0x8e>
 8016f0c:	6823      	ldr	r3, [r4, #0]
 8016f0e:	06da      	lsls	r2, r3, #27
 8016f10:	bf5e      	ittt	pl
 8016f12:	682b      	ldrpl	r3, [r5, #0]
 8016f14:	781b      	ldrbpl	r3, [r3, #0]
 8016f16:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016f1a:	682a      	ldr	r2, [r5, #0]
 8016f1c:	686b      	ldr	r3, [r5, #4]
 8016f1e:	3201      	adds	r2, #1
 8016f20:	602a      	str	r2, [r5, #0]
 8016f22:	68a2      	ldr	r2, [r4, #8]
 8016f24:	3b01      	subs	r3, #1
 8016f26:	3a01      	subs	r2, #1
 8016f28:	606b      	str	r3, [r5, #4]
 8016f2a:	3701      	adds	r7, #1
 8016f2c:	60a2      	str	r2, [r4, #8]
 8016f2e:	b142      	cbz	r2, 8016f42 <_scanf_chars+0x8e>
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	dcd7      	bgt.n	8016ee4 <_scanf_chars+0x30>
 8016f34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016f38:	4629      	mov	r1, r5
 8016f3a:	4640      	mov	r0, r8
 8016f3c:	4798      	blx	r3
 8016f3e:	2800      	cmp	r0, #0
 8016f40:	d0d0      	beq.n	8016ee4 <_scanf_chars+0x30>
 8016f42:	6823      	ldr	r3, [r4, #0]
 8016f44:	f013 0310 	ands.w	r3, r3, #16
 8016f48:	d105      	bne.n	8016f56 <_scanf_chars+0xa2>
 8016f4a:	68e2      	ldr	r2, [r4, #12]
 8016f4c:	3201      	adds	r2, #1
 8016f4e:	60e2      	str	r2, [r4, #12]
 8016f50:	69a2      	ldr	r2, [r4, #24]
 8016f52:	b102      	cbz	r2, 8016f56 <_scanf_chars+0xa2>
 8016f54:	7033      	strb	r3, [r6, #0]
 8016f56:	6923      	ldr	r3, [r4, #16]
 8016f58:	443b      	add	r3, r7
 8016f5a:	6123      	str	r3, [r4, #16]
 8016f5c:	2000      	movs	r0, #0
 8016f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f62:	bf00      	nop
 8016f64:	08019069 	.word	0x08019069

08016f68 <_scanf_i>:
 8016f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f6c:	4698      	mov	r8, r3
 8016f6e:	4b76      	ldr	r3, [pc, #472]	; (8017148 <_scanf_i+0x1e0>)
 8016f70:	460c      	mov	r4, r1
 8016f72:	4682      	mov	sl, r0
 8016f74:	4616      	mov	r6, r2
 8016f76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016f7a:	b087      	sub	sp, #28
 8016f7c:	ab03      	add	r3, sp, #12
 8016f7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016f82:	4b72      	ldr	r3, [pc, #456]	; (801714c <_scanf_i+0x1e4>)
 8016f84:	69a1      	ldr	r1, [r4, #24]
 8016f86:	4a72      	ldr	r2, [pc, #456]	; (8017150 <_scanf_i+0x1e8>)
 8016f88:	2903      	cmp	r1, #3
 8016f8a:	bf18      	it	ne
 8016f8c:	461a      	movne	r2, r3
 8016f8e:	68a3      	ldr	r3, [r4, #8]
 8016f90:	9201      	str	r2, [sp, #4]
 8016f92:	1e5a      	subs	r2, r3, #1
 8016f94:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016f98:	bf88      	it	hi
 8016f9a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016f9e:	4627      	mov	r7, r4
 8016fa0:	bf82      	ittt	hi
 8016fa2:	eb03 0905 	addhi.w	r9, r3, r5
 8016fa6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016faa:	60a3      	strhi	r3, [r4, #8]
 8016fac:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016fb0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016fb4:	bf98      	it	ls
 8016fb6:	f04f 0900 	movls.w	r9, #0
 8016fba:	6023      	str	r3, [r4, #0]
 8016fbc:	463d      	mov	r5, r7
 8016fbe:	f04f 0b00 	mov.w	fp, #0
 8016fc2:	6831      	ldr	r1, [r6, #0]
 8016fc4:	ab03      	add	r3, sp, #12
 8016fc6:	7809      	ldrb	r1, [r1, #0]
 8016fc8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016fcc:	2202      	movs	r2, #2
 8016fce:	f7e9 f8df 	bl	8000190 <memchr>
 8016fd2:	b328      	cbz	r0, 8017020 <_scanf_i+0xb8>
 8016fd4:	f1bb 0f01 	cmp.w	fp, #1
 8016fd8:	d159      	bne.n	801708e <_scanf_i+0x126>
 8016fda:	6862      	ldr	r2, [r4, #4]
 8016fdc:	b92a      	cbnz	r2, 8016fea <_scanf_i+0x82>
 8016fde:	6822      	ldr	r2, [r4, #0]
 8016fe0:	2308      	movs	r3, #8
 8016fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016fe6:	6063      	str	r3, [r4, #4]
 8016fe8:	6022      	str	r2, [r4, #0]
 8016fea:	6822      	ldr	r2, [r4, #0]
 8016fec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016ff0:	6022      	str	r2, [r4, #0]
 8016ff2:	68a2      	ldr	r2, [r4, #8]
 8016ff4:	1e51      	subs	r1, r2, #1
 8016ff6:	60a1      	str	r1, [r4, #8]
 8016ff8:	b192      	cbz	r2, 8017020 <_scanf_i+0xb8>
 8016ffa:	6832      	ldr	r2, [r6, #0]
 8016ffc:	1c51      	adds	r1, r2, #1
 8016ffe:	6031      	str	r1, [r6, #0]
 8017000:	7812      	ldrb	r2, [r2, #0]
 8017002:	f805 2b01 	strb.w	r2, [r5], #1
 8017006:	6872      	ldr	r2, [r6, #4]
 8017008:	3a01      	subs	r2, #1
 801700a:	2a00      	cmp	r2, #0
 801700c:	6072      	str	r2, [r6, #4]
 801700e:	dc07      	bgt.n	8017020 <_scanf_i+0xb8>
 8017010:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017014:	4631      	mov	r1, r6
 8017016:	4650      	mov	r0, sl
 8017018:	4790      	blx	r2
 801701a:	2800      	cmp	r0, #0
 801701c:	f040 8085 	bne.w	801712a <_scanf_i+0x1c2>
 8017020:	f10b 0b01 	add.w	fp, fp, #1
 8017024:	f1bb 0f03 	cmp.w	fp, #3
 8017028:	d1cb      	bne.n	8016fc2 <_scanf_i+0x5a>
 801702a:	6863      	ldr	r3, [r4, #4]
 801702c:	b90b      	cbnz	r3, 8017032 <_scanf_i+0xca>
 801702e:	230a      	movs	r3, #10
 8017030:	6063      	str	r3, [r4, #4]
 8017032:	6863      	ldr	r3, [r4, #4]
 8017034:	4947      	ldr	r1, [pc, #284]	; (8017154 <_scanf_i+0x1ec>)
 8017036:	6960      	ldr	r0, [r4, #20]
 8017038:	1ac9      	subs	r1, r1, r3
 801703a:	f000 f8b5 	bl	80171a8 <__sccl>
 801703e:	f04f 0b00 	mov.w	fp, #0
 8017042:	68a3      	ldr	r3, [r4, #8]
 8017044:	6822      	ldr	r2, [r4, #0]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d03d      	beq.n	80170c6 <_scanf_i+0x15e>
 801704a:	6831      	ldr	r1, [r6, #0]
 801704c:	6960      	ldr	r0, [r4, #20]
 801704e:	f891 c000 	ldrb.w	ip, [r1]
 8017052:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017056:	2800      	cmp	r0, #0
 8017058:	d035      	beq.n	80170c6 <_scanf_i+0x15e>
 801705a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801705e:	d124      	bne.n	80170aa <_scanf_i+0x142>
 8017060:	0510      	lsls	r0, r2, #20
 8017062:	d522      	bpl.n	80170aa <_scanf_i+0x142>
 8017064:	f10b 0b01 	add.w	fp, fp, #1
 8017068:	f1b9 0f00 	cmp.w	r9, #0
 801706c:	d003      	beq.n	8017076 <_scanf_i+0x10e>
 801706e:	3301      	adds	r3, #1
 8017070:	f109 39ff 	add.w	r9, r9, #4294967295
 8017074:	60a3      	str	r3, [r4, #8]
 8017076:	6873      	ldr	r3, [r6, #4]
 8017078:	3b01      	subs	r3, #1
 801707a:	2b00      	cmp	r3, #0
 801707c:	6073      	str	r3, [r6, #4]
 801707e:	dd1b      	ble.n	80170b8 <_scanf_i+0x150>
 8017080:	6833      	ldr	r3, [r6, #0]
 8017082:	3301      	adds	r3, #1
 8017084:	6033      	str	r3, [r6, #0]
 8017086:	68a3      	ldr	r3, [r4, #8]
 8017088:	3b01      	subs	r3, #1
 801708a:	60a3      	str	r3, [r4, #8]
 801708c:	e7d9      	b.n	8017042 <_scanf_i+0xda>
 801708e:	f1bb 0f02 	cmp.w	fp, #2
 8017092:	d1ae      	bne.n	8016ff2 <_scanf_i+0x8a>
 8017094:	6822      	ldr	r2, [r4, #0]
 8017096:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801709a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801709e:	d1bf      	bne.n	8017020 <_scanf_i+0xb8>
 80170a0:	2310      	movs	r3, #16
 80170a2:	6063      	str	r3, [r4, #4]
 80170a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80170a8:	e7a2      	b.n	8016ff0 <_scanf_i+0x88>
 80170aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80170ae:	6022      	str	r2, [r4, #0]
 80170b0:	780b      	ldrb	r3, [r1, #0]
 80170b2:	f805 3b01 	strb.w	r3, [r5], #1
 80170b6:	e7de      	b.n	8017076 <_scanf_i+0x10e>
 80170b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80170bc:	4631      	mov	r1, r6
 80170be:	4650      	mov	r0, sl
 80170c0:	4798      	blx	r3
 80170c2:	2800      	cmp	r0, #0
 80170c4:	d0df      	beq.n	8017086 <_scanf_i+0x11e>
 80170c6:	6823      	ldr	r3, [r4, #0]
 80170c8:	05db      	lsls	r3, r3, #23
 80170ca:	d50d      	bpl.n	80170e8 <_scanf_i+0x180>
 80170cc:	42bd      	cmp	r5, r7
 80170ce:	d909      	bls.n	80170e4 <_scanf_i+0x17c>
 80170d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80170d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80170d8:	4632      	mov	r2, r6
 80170da:	4650      	mov	r0, sl
 80170dc:	4798      	blx	r3
 80170de:	f105 39ff 	add.w	r9, r5, #4294967295
 80170e2:	464d      	mov	r5, r9
 80170e4:	42bd      	cmp	r5, r7
 80170e6:	d02d      	beq.n	8017144 <_scanf_i+0x1dc>
 80170e8:	6822      	ldr	r2, [r4, #0]
 80170ea:	f012 0210 	ands.w	r2, r2, #16
 80170ee:	d113      	bne.n	8017118 <_scanf_i+0x1b0>
 80170f0:	702a      	strb	r2, [r5, #0]
 80170f2:	6863      	ldr	r3, [r4, #4]
 80170f4:	9e01      	ldr	r6, [sp, #4]
 80170f6:	4639      	mov	r1, r7
 80170f8:	4650      	mov	r0, sl
 80170fa:	47b0      	blx	r6
 80170fc:	6821      	ldr	r1, [r4, #0]
 80170fe:	f8d8 3000 	ldr.w	r3, [r8]
 8017102:	f011 0f20 	tst.w	r1, #32
 8017106:	d013      	beq.n	8017130 <_scanf_i+0x1c8>
 8017108:	1d1a      	adds	r2, r3, #4
 801710a:	f8c8 2000 	str.w	r2, [r8]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	6018      	str	r0, [r3, #0]
 8017112:	68e3      	ldr	r3, [r4, #12]
 8017114:	3301      	adds	r3, #1
 8017116:	60e3      	str	r3, [r4, #12]
 8017118:	1bed      	subs	r5, r5, r7
 801711a:	44ab      	add	fp, r5
 801711c:	6925      	ldr	r5, [r4, #16]
 801711e:	445d      	add	r5, fp
 8017120:	6125      	str	r5, [r4, #16]
 8017122:	2000      	movs	r0, #0
 8017124:	b007      	add	sp, #28
 8017126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801712a:	f04f 0b00 	mov.w	fp, #0
 801712e:	e7ca      	b.n	80170c6 <_scanf_i+0x15e>
 8017130:	1d1a      	adds	r2, r3, #4
 8017132:	f8c8 2000 	str.w	r2, [r8]
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	f011 0f01 	tst.w	r1, #1
 801713c:	bf14      	ite	ne
 801713e:	8018      	strhne	r0, [r3, #0]
 8017140:	6018      	streq	r0, [r3, #0]
 8017142:	e7e6      	b.n	8017112 <_scanf_i+0x1aa>
 8017144:	2001      	movs	r0, #1
 8017146:	e7ed      	b.n	8017124 <_scanf_i+0x1bc>
 8017148:	08017fb0 	.word	0x08017fb0
 801714c:	08017325 	.word	0x08017325
 8017150:	0801488d 	.word	0x0801488d
 8017154:	080193f6 	.word	0x080193f6

08017158 <_read_r>:
 8017158:	b538      	push	{r3, r4, r5, lr}
 801715a:	4d07      	ldr	r5, [pc, #28]	; (8017178 <_read_r+0x20>)
 801715c:	4604      	mov	r4, r0
 801715e:	4608      	mov	r0, r1
 8017160:	4611      	mov	r1, r2
 8017162:	2200      	movs	r2, #0
 8017164:	602a      	str	r2, [r5, #0]
 8017166:	461a      	mov	r2, r3
 8017168:	f7ea ff5c 	bl	8002024 <_read>
 801716c:	1c43      	adds	r3, r0, #1
 801716e:	d102      	bne.n	8017176 <_read_r+0x1e>
 8017170:	682b      	ldr	r3, [r5, #0]
 8017172:	b103      	cbz	r3, 8017176 <_read_r+0x1e>
 8017174:	6023      	str	r3, [r4, #0]
 8017176:	bd38      	pop	{r3, r4, r5, pc}
 8017178:	200019a0 	.word	0x200019a0

0801717c <nan>:
 801717c:	4901      	ldr	r1, [pc, #4]	; (8017184 <nan+0x8>)
 801717e:	2000      	movs	r0, #0
 8017180:	4770      	bx	lr
 8017182:	bf00      	nop
 8017184:	7ff80000 	.word	0x7ff80000

08017188 <_sbrk_r>:
 8017188:	b538      	push	{r3, r4, r5, lr}
 801718a:	4d06      	ldr	r5, [pc, #24]	; (80171a4 <_sbrk_r+0x1c>)
 801718c:	2300      	movs	r3, #0
 801718e:	4604      	mov	r4, r0
 8017190:	4608      	mov	r0, r1
 8017192:	602b      	str	r3, [r5, #0]
 8017194:	f7ea ff70 	bl	8002078 <_sbrk>
 8017198:	1c43      	adds	r3, r0, #1
 801719a:	d102      	bne.n	80171a2 <_sbrk_r+0x1a>
 801719c:	682b      	ldr	r3, [r5, #0]
 801719e:	b103      	cbz	r3, 80171a2 <_sbrk_r+0x1a>
 80171a0:	6023      	str	r3, [r4, #0]
 80171a2:	bd38      	pop	{r3, r4, r5, pc}
 80171a4:	200019a0 	.word	0x200019a0

080171a8 <__sccl>:
 80171a8:	b570      	push	{r4, r5, r6, lr}
 80171aa:	780b      	ldrb	r3, [r1, #0]
 80171ac:	4604      	mov	r4, r0
 80171ae:	2b5e      	cmp	r3, #94	; 0x5e
 80171b0:	bf0b      	itete	eq
 80171b2:	784b      	ldrbeq	r3, [r1, #1]
 80171b4:	1c48      	addne	r0, r1, #1
 80171b6:	1c88      	addeq	r0, r1, #2
 80171b8:	2200      	movne	r2, #0
 80171ba:	bf08      	it	eq
 80171bc:	2201      	moveq	r2, #1
 80171be:	1e61      	subs	r1, r4, #1
 80171c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80171c4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80171c8:	42a9      	cmp	r1, r5
 80171ca:	d1fb      	bne.n	80171c4 <__sccl+0x1c>
 80171cc:	b90b      	cbnz	r3, 80171d2 <__sccl+0x2a>
 80171ce:	3801      	subs	r0, #1
 80171d0:	bd70      	pop	{r4, r5, r6, pc}
 80171d2:	f082 0201 	eor.w	r2, r2, #1
 80171d6:	54e2      	strb	r2, [r4, r3]
 80171d8:	4605      	mov	r5, r0
 80171da:	4628      	mov	r0, r5
 80171dc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80171e0:	292d      	cmp	r1, #45	; 0x2d
 80171e2:	d006      	beq.n	80171f2 <__sccl+0x4a>
 80171e4:	295d      	cmp	r1, #93	; 0x5d
 80171e6:	d0f3      	beq.n	80171d0 <__sccl+0x28>
 80171e8:	b909      	cbnz	r1, 80171ee <__sccl+0x46>
 80171ea:	4628      	mov	r0, r5
 80171ec:	e7f0      	b.n	80171d0 <__sccl+0x28>
 80171ee:	460b      	mov	r3, r1
 80171f0:	e7f1      	b.n	80171d6 <__sccl+0x2e>
 80171f2:	786e      	ldrb	r6, [r5, #1]
 80171f4:	2e5d      	cmp	r6, #93	; 0x5d
 80171f6:	d0fa      	beq.n	80171ee <__sccl+0x46>
 80171f8:	42b3      	cmp	r3, r6
 80171fa:	dcf8      	bgt.n	80171ee <__sccl+0x46>
 80171fc:	3502      	adds	r5, #2
 80171fe:	4619      	mov	r1, r3
 8017200:	3101      	adds	r1, #1
 8017202:	428e      	cmp	r6, r1
 8017204:	5462      	strb	r2, [r4, r1]
 8017206:	dcfb      	bgt.n	8017200 <__sccl+0x58>
 8017208:	1af1      	subs	r1, r6, r3
 801720a:	3901      	subs	r1, #1
 801720c:	1c58      	adds	r0, r3, #1
 801720e:	42b3      	cmp	r3, r6
 8017210:	bfa8      	it	ge
 8017212:	2100      	movge	r1, #0
 8017214:	1843      	adds	r3, r0, r1
 8017216:	e7e0      	b.n	80171da <__sccl+0x32>

08017218 <strncmp>:
 8017218:	b510      	push	{r4, lr}
 801721a:	4603      	mov	r3, r0
 801721c:	b172      	cbz	r2, 801723c <strncmp+0x24>
 801721e:	3901      	subs	r1, #1
 8017220:	1884      	adds	r4, r0, r2
 8017222:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017226:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801722a:	4290      	cmp	r0, r2
 801722c:	d101      	bne.n	8017232 <strncmp+0x1a>
 801722e:	42a3      	cmp	r3, r4
 8017230:	d101      	bne.n	8017236 <strncmp+0x1e>
 8017232:	1a80      	subs	r0, r0, r2
 8017234:	bd10      	pop	{r4, pc}
 8017236:	2800      	cmp	r0, #0
 8017238:	d1f3      	bne.n	8017222 <strncmp+0xa>
 801723a:	e7fa      	b.n	8017232 <strncmp+0x1a>
 801723c:	4610      	mov	r0, r2
 801723e:	e7f9      	b.n	8017234 <strncmp+0x1c>

08017240 <_strtoul_l.constprop.0>:
 8017240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017244:	4f36      	ldr	r7, [pc, #216]	; (8017320 <_strtoul_l.constprop.0+0xe0>)
 8017246:	4686      	mov	lr, r0
 8017248:	460d      	mov	r5, r1
 801724a:	4628      	mov	r0, r5
 801724c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017250:	5de6      	ldrb	r6, [r4, r7]
 8017252:	f016 0608 	ands.w	r6, r6, #8
 8017256:	d1f8      	bne.n	801724a <_strtoul_l.constprop.0+0xa>
 8017258:	2c2d      	cmp	r4, #45	; 0x2d
 801725a:	d12f      	bne.n	80172bc <_strtoul_l.constprop.0+0x7c>
 801725c:	782c      	ldrb	r4, [r5, #0]
 801725e:	2601      	movs	r6, #1
 8017260:	1c85      	adds	r5, r0, #2
 8017262:	2b00      	cmp	r3, #0
 8017264:	d057      	beq.n	8017316 <_strtoul_l.constprop.0+0xd6>
 8017266:	2b10      	cmp	r3, #16
 8017268:	d109      	bne.n	801727e <_strtoul_l.constprop.0+0x3e>
 801726a:	2c30      	cmp	r4, #48	; 0x30
 801726c:	d107      	bne.n	801727e <_strtoul_l.constprop.0+0x3e>
 801726e:	7828      	ldrb	r0, [r5, #0]
 8017270:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017274:	2858      	cmp	r0, #88	; 0x58
 8017276:	d149      	bne.n	801730c <_strtoul_l.constprop.0+0xcc>
 8017278:	786c      	ldrb	r4, [r5, #1]
 801727a:	2310      	movs	r3, #16
 801727c:	3502      	adds	r5, #2
 801727e:	f04f 38ff 	mov.w	r8, #4294967295
 8017282:	2700      	movs	r7, #0
 8017284:	fbb8 f8f3 	udiv	r8, r8, r3
 8017288:	fb03 f908 	mul.w	r9, r3, r8
 801728c:	ea6f 0909 	mvn.w	r9, r9
 8017290:	4638      	mov	r0, r7
 8017292:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017296:	f1bc 0f09 	cmp.w	ip, #9
 801729a:	d814      	bhi.n	80172c6 <_strtoul_l.constprop.0+0x86>
 801729c:	4664      	mov	r4, ip
 801729e:	42a3      	cmp	r3, r4
 80172a0:	dd22      	ble.n	80172e8 <_strtoul_l.constprop.0+0xa8>
 80172a2:	2f00      	cmp	r7, #0
 80172a4:	db1d      	blt.n	80172e2 <_strtoul_l.constprop.0+0xa2>
 80172a6:	4580      	cmp	r8, r0
 80172a8:	d31b      	bcc.n	80172e2 <_strtoul_l.constprop.0+0xa2>
 80172aa:	d101      	bne.n	80172b0 <_strtoul_l.constprop.0+0x70>
 80172ac:	45a1      	cmp	r9, r4
 80172ae:	db18      	blt.n	80172e2 <_strtoul_l.constprop.0+0xa2>
 80172b0:	fb00 4003 	mla	r0, r0, r3, r4
 80172b4:	2701      	movs	r7, #1
 80172b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172ba:	e7ea      	b.n	8017292 <_strtoul_l.constprop.0+0x52>
 80172bc:	2c2b      	cmp	r4, #43	; 0x2b
 80172be:	bf04      	itt	eq
 80172c0:	782c      	ldrbeq	r4, [r5, #0]
 80172c2:	1c85      	addeq	r5, r0, #2
 80172c4:	e7cd      	b.n	8017262 <_strtoul_l.constprop.0+0x22>
 80172c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80172ca:	f1bc 0f19 	cmp.w	ip, #25
 80172ce:	d801      	bhi.n	80172d4 <_strtoul_l.constprop.0+0x94>
 80172d0:	3c37      	subs	r4, #55	; 0x37
 80172d2:	e7e4      	b.n	801729e <_strtoul_l.constprop.0+0x5e>
 80172d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80172d8:	f1bc 0f19 	cmp.w	ip, #25
 80172dc:	d804      	bhi.n	80172e8 <_strtoul_l.constprop.0+0xa8>
 80172de:	3c57      	subs	r4, #87	; 0x57
 80172e0:	e7dd      	b.n	801729e <_strtoul_l.constprop.0+0x5e>
 80172e2:	f04f 37ff 	mov.w	r7, #4294967295
 80172e6:	e7e6      	b.n	80172b6 <_strtoul_l.constprop.0+0x76>
 80172e8:	2f00      	cmp	r7, #0
 80172ea:	da07      	bge.n	80172fc <_strtoul_l.constprop.0+0xbc>
 80172ec:	2322      	movs	r3, #34	; 0x22
 80172ee:	f8ce 3000 	str.w	r3, [lr]
 80172f2:	f04f 30ff 	mov.w	r0, #4294967295
 80172f6:	b932      	cbnz	r2, 8017306 <_strtoul_l.constprop.0+0xc6>
 80172f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172fc:	b106      	cbz	r6, 8017300 <_strtoul_l.constprop.0+0xc0>
 80172fe:	4240      	negs	r0, r0
 8017300:	2a00      	cmp	r2, #0
 8017302:	d0f9      	beq.n	80172f8 <_strtoul_l.constprop.0+0xb8>
 8017304:	b107      	cbz	r7, 8017308 <_strtoul_l.constprop.0+0xc8>
 8017306:	1e69      	subs	r1, r5, #1
 8017308:	6011      	str	r1, [r2, #0]
 801730a:	e7f5      	b.n	80172f8 <_strtoul_l.constprop.0+0xb8>
 801730c:	2430      	movs	r4, #48	; 0x30
 801730e:	2b00      	cmp	r3, #0
 8017310:	d1b5      	bne.n	801727e <_strtoul_l.constprop.0+0x3e>
 8017312:	2308      	movs	r3, #8
 8017314:	e7b3      	b.n	801727e <_strtoul_l.constprop.0+0x3e>
 8017316:	2c30      	cmp	r4, #48	; 0x30
 8017318:	d0a9      	beq.n	801726e <_strtoul_l.constprop.0+0x2e>
 801731a:	230a      	movs	r3, #10
 801731c:	e7af      	b.n	801727e <_strtoul_l.constprop.0+0x3e>
 801731e:	bf00      	nop
 8017320:	08019069 	.word	0x08019069

08017324 <_strtoul_r>:
 8017324:	f7ff bf8c 	b.w	8017240 <_strtoul_l.constprop.0>

08017328 <__submore>:
 8017328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801732c:	460c      	mov	r4, r1
 801732e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017334:	4299      	cmp	r1, r3
 8017336:	d11d      	bne.n	8017374 <__submore+0x4c>
 8017338:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801733c:	f7ff fa18 	bl	8016770 <_malloc_r>
 8017340:	b918      	cbnz	r0, 801734a <__submore+0x22>
 8017342:	f04f 30ff 	mov.w	r0, #4294967295
 8017346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801734a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801734e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017350:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017354:	6360      	str	r0, [r4, #52]	; 0x34
 8017356:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801735a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801735e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017362:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017366:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801736a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801736e:	6020      	str	r0, [r4, #0]
 8017370:	2000      	movs	r0, #0
 8017372:	e7e8      	b.n	8017346 <__submore+0x1e>
 8017374:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017376:	0077      	lsls	r7, r6, #1
 8017378:	463a      	mov	r2, r7
 801737a:	f000 fa29 	bl	80177d0 <_realloc_r>
 801737e:	4605      	mov	r5, r0
 8017380:	2800      	cmp	r0, #0
 8017382:	d0de      	beq.n	8017342 <__submore+0x1a>
 8017384:	eb00 0806 	add.w	r8, r0, r6
 8017388:	4601      	mov	r1, r0
 801738a:	4632      	mov	r2, r6
 801738c:	4640      	mov	r0, r8
 801738e:	f7fe fcaf 	bl	8015cf0 <memcpy>
 8017392:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017396:	f8c4 8000 	str.w	r8, [r4]
 801739a:	e7e9      	b.n	8017370 <__submore+0x48>

0801739c <__ascii_wctomb>:
 801739c:	4603      	mov	r3, r0
 801739e:	4608      	mov	r0, r1
 80173a0:	b141      	cbz	r1, 80173b4 <__ascii_wctomb+0x18>
 80173a2:	2aff      	cmp	r2, #255	; 0xff
 80173a4:	d904      	bls.n	80173b0 <__ascii_wctomb+0x14>
 80173a6:	228a      	movs	r2, #138	; 0x8a
 80173a8:	601a      	str	r2, [r3, #0]
 80173aa:	f04f 30ff 	mov.w	r0, #4294967295
 80173ae:	4770      	bx	lr
 80173b0:	700a      	strb	r2, [r1, #0]
 80173b2:	2001      	movs	r0, #1
 80173b4:	4770      	bx	lr
	...

080173b8 <__assert_func>:
 80173b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80173ba:	4614      	mov	r4, r2
 80173bc:	461a      	mov	r2, r3
 80173be:	4b09      	ldr	r3, [pc, #36]	; (80173e4 <__assert_func+0x2c>)
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	4605      	mov	r5, r0
 80173c4:	68d8      	ldr	r0, [r3, #12]
 80173c6:	b14c      	cbz	r4, 80173dc <__assert_func+0x24>
 80173c8:	4b07      	ldr	r3, [pc, #28]	; (80173e8 <__assert_func+0x30>)
 80173ca:	9100      	str	r1, [sp, #0]
 80173cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80173d0:	4906      	ldr	r1, [pc, #24]	; (80173ec <__assert_func+0x34>)
 80173d2:	462b      	mov	r3, r5
 80173d4:	f000 f9a2 	bl	801771c <fiprintf>
 80173d8:	f000 fc40 	bl	8017c5c <abort>
 80173dc:	4b04      	ldr	r3, [pc, #16]	; (80173f0 <__assert_func+0x38>)
 80173de:	461c      	mov	r4, r3
 80173e0:	e7f3      	b.n	80173ca <__assert_func+0x12>
 80173e2:	bf00      	nop
 80173e4:	20000108 	.word	0x20000108
 80173e8:	080193f8 	.word	0x080193f8
 80173ec:	08019405 	.word	0x08019405
 80173f0:	08019433 	.word	0x08019433

080173f4 <__sflush_r>:
 80173f4:	898a      	ldrh	r2, [r1, #12]
 80173f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173f8:	4605      	mov	r5, r0
 80173fa:	0710      	lsls	r0, r2, #28
 80173fc:	460c      	mov	r4, r1
 80173fe:	d457      	bmi.n	80174b0 <__sflush_r+0xbc>
 8017400:	684b      	ldr	r3, [r1, #4]
 8017402:	2b00      	cmp	r3, #0
 8017404:	dc04      	bgt.n	8017410 <__sflush_r+0x1c>
 8017406:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017408:	2b00      	cmp	r3, #0
 801740a:	dc01      	bgt.n	8017410 <__sflush_r+0x1c>
 801740c:	2000      	movs	r0, #0
 801740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017412:	2e00      	cmp	r6, #0
 8017414:	d0fa      	beq.n	801740c <__sflush_r+0x18>
 8017416:	2300      	movs	r3, #0
 8017418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801741c:	682f      	ldr	r7, [r5, #0]
 801741e:	602b      	str	r3, [r5, #0]
 8017420:	d032      	beq.n	8017488 <__sflush_r+0x94>
 8017422:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017424:	89a3      	ldrh	r3, [r4, #12]
 8017426:	075a      	lsls	r2, r3, #29
 8017428:	d505      	bpl.n	8017436 <__sflush_r+0x42>
 801742a:	6863      	ldr	r3, [r4, #4]
 801742c:	1ac0      	subs	r0, r0, r3
 801742e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017430:	b10b      	cbz	r3, 8017436 <__sflush_r+0x42>
 8017432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017434:	1ac0      	subs	r0, r0, r3
 8017436:	2300      	movs	r3, #0
 8017438:	4602      	mov	r2, r0
 801743a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801743c:	6a21      	ldr	r1, [r4, #32]
 801743e:	4628      	mov	r0, r5
 8017440:	47b0      	blx	r6
 8017442:	1c43      	adds	r3, r0, #1
 8017444:	89a3      	ldrh	r3, [r4, #12]
 8017446:	d106      	bne.n	8017456 <__sflush_r+0x62>
 8017448:	6829      	ldr	r1, [r5, #0]
 801744a:	291d      	cmp	r1, #29
 801744c:	d82c      	bhi.n	80174a8 <__sflush_r+0xb4>
 801744e:	4a29      	ldr	r2, [pc, #164]	; (80174f4 <__sflush_r+0x100>)
 8017450:	40ca      	lsrs	r2, r1
 8017452:	07d6      	lsls	r6, r2, #31
 8017454:	d528      	bpl.n	80174a8 <__sflush_r+0xb4>
 8017456:	2200      	movs	r2, #0
 8017458:	6062      	str	r2, [r4, #4]
 801745a:	04d9      	lsls	r1, r3, #19
 801745c:	6922      	ldr	r2, [r4, #16]
 801745e:	6022      	str	r2, [r4, #0]
 8017460:	d504      	bpl.n	801746c <__sflush_r+0x78>
 8017462:	1c42      	adds	r2, r0, #1
 8017464:	d101      	bne.n	801746a <__sflush_r+0x76>
 8017466:	682b      	ldr	r3, [r5, #0]
 8017468:	b903      	cbnz	r3, 801746c <__sflush_r+0x78>
 801746a:	6560      	str	r0, [r4, #84]	; 0x54
 801746c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801746e:	602f      	str	r7, [r5, #0]
 8017470:	2900      	cmp	r1, #0
 8017472:	d0cb      	beq.n	801740c <__sflush_r+0x18>
 8017474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017478:	4299      	cmp	r1, r3
 801747a:	d002      	beq.n	8017482 <__sflush_r+0x8e>
 801747c:	4628      	mov	r0, r5
 801747e:	f7ff f90d 	bl	801669c <_free_r>
 8017482:	2000      	movs	r0, #0
 8017484:	6360      	str	r0, [r4, #52]	; 0x34
 8017486:	e7c2      	b.n	801740e <__sflush_r+0x1a>
 8017488:	6a21      	ldr	r1, [r4, #32]
 801748a:	2301      	movs	r3, #1
 801748c:	4628      	mov	r0, r5
 801748e:	47b0      	blx	r6
 8017490:	1c41      	adds	r1, r0, #1
 8017492:	d1c7      	bne.n	8017424 <__sflush_r+0x30>
 8017494:	682b      	ldr	r3, [r5, #0]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d0c4      	beq.n	8017424 <__sflush_r+0x30>
 801749a:	2b1d      	cmp	r3, #29
 801749c:	d001      	beq.n	80174a2 <__sflush_r+0xae>
 801749e:	2b16      	cmp	r3, #22
 80174a0:	d101      	bne.n	80174a6 <__sflush_r+0xb2>
 80174a2:	602f      	str	r7, [r5, #0]
 80174a4:	e7b2      	b.n	801740c <__sflush_r+0x18>
 80174a6:	89a3      	ldrh	r3, [r4, #12]
 80174a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174ac:	81a3      	strh	r3, [r4, #12]
 80174ae:	e7ae      	b.n	801740e <__sflush_r+0x1a>
 80174b0:	690f      	ldr	r7, [r1, #16]
 80174b2:	2f00      	cmp	r7, #0
 80174b4:	d0aa      	beq.n	801740c <__sflush_r+0x18>
 80174b6:	0793      	lsls	r3, r2, #30
 80174b8:	680e      	ldr	r6, [r1, #0]
 80174ba:	bf08      	it	eq
 80174bc:	694b      	ldreq	r3, [r1, #20]
 80174be:	600f      	str	r7, [r1, #0]
 80174c0:	bf18      	it	ne
 80174c2:	2300      	movne	r3, #0
 80174c4:	1bf6      	subs	r6, r6, r7
 80174c6:	608b      	str	r3, [r1, #8]
 80174c8:	2e00      	cmp	r6, #0
 80174ca:	dd9f      	ble.n	801740c <__sflush_r+0x18>
 80174cc:	6a21      	ldr	r1, [r4, #32]
 80174ce:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80174d2:	4633      	mov	r3, r6
 80174d4:	463a      	mov	r2, r7
 80174d6:	4628      	mov	r0, r5
 80174d8:	47e0      	blx	ip
 80174da:	2800      	cmp	r0, #0
 80174dc:	dc06      	bgt.n	80174ec <__sflush_r+0xf8>
 80174de:	89a3      	ldrh	r3, [r4, #12]
 80174e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174e4:	81a3      	strh	r3, [r4, #12]
 80174e6:	f04f 30ff 	mov.w	r0, #4294967295
 80174ea:	e790      	b.n	801740e <__sflush_r+0x1a>
 80174ec:	4407      	add	r7, r0
 80174ee:	1a36      	subs	r6, r6, r0
 80174f0:	e7ea      	b.n	80174c8 <__sflush_r+0xd4>
 80174f2:	bf00      	nop
 80174f4:	20400001 	.word	0x20400001

080174f8 <_fflush_r>:
 80174f8:	b538      	push	{r3, r4, r5, lr}
 80174fa:	690b      	ldr	r3, [r1, #16]
 80174fc:	4605      	mov	r5, r0
 80174fe:	460c      	mov	r4, r1
 8017500:	b913      	cbnz	r3, 8017508 <_fflush_r+0x10>
 8017502:	2500      	movs	r5, #0
 8017504:	4628      	mov	r0, r5
 8017506:	bd38      	pop	{r3, r4, r5, pc}
 8017508:	b118      	cbz	r0, 8017512 <_fflush_r+0x1a>
 801750a:	6983      	ldr	r3, [r0, #24]
 801750c:	b90b      	cbnz	r3, 8017512 <_fflush_r+0x1a>
 801750e:	f000 f887 	bl	8017620 <__sinit>
 8017512:	4b14      	ldr	r3, [pc, #80]	; (8017564 <_fflush_r+0x6c>)
 8017514:	429c      	cmp	r4, r3
 8017516:	d11b      	bne.n	8017550 <_fflush_r+0x58>
 8017518:	686c      	ldr	r4, [r5, #4]
 801751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d0ef      	beq.n	8017502 <_fflush_r+0xa>
 8017522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017524:	07d0      	lsls	r0, r2, #31
 8017526:	d404      	bmi.n	8017532 <_fflush_r+0x3a>
 8017528:	0599      	lsls	r1, r3, #22
 801752a:	d402      	bmi.n	8017532 <_fflush_r+0x3a>
 801752c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801752e:	f000 f927 	bl	8017780 <__retarget_lock_acquire_recursive>
 8017532:	4628      	mov	r0, r5
 8017534:	4621      	mov	r1, r4
 8017536:	f7ff ff5d 	bl	80173f4 <__sflush_r>
 801753a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801753c:	07da      	lsls	r2, r3, #31
 801753e:	4605      	mov	r5, r0
 8017540:	d4e0      	bmi.n	8017504 <_fflush_r+0xc>
 8017542:	89a3      	ldrh	r3, [r4, #12]
 8017544:	059b      	lsls	r3, r3, #22
 8017546:	d4dd      	bmi.n	8017504 <_fflush_r+0xc>
 8017548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801754a:	f000 f91a 	bl	8017782 <__retarget_lock_release_recursive>
 801754e:	e7d9      	b.n	8017504 <_fflush_r+0xc>
 8017550:	4b05      	ldr	r3, [pc, #20]	; (8017568 <_fflush_r+0x70>)
 8017552:	429c      	cmp	r4, r3
 8017554:	d101      	bne.n	801755a <_fflush_r+0x62>
 8017556:	68ac      	ldr	r4, [r5, #8]
 8017558:	e7df      	b.n	801751a <_fflush_r+0x22>
 801755a:	4b04      	ldr	r3, [pc, #16]	; (801756c <_fflush_r+0x74>)
 801755c:	429c      	cmp	r4, r3
 801755e:	bf08      	it	eq
 8017560:	68ec      	ldreq	r4, [r5, #12]
 8017562:	e7da      	b.n	801751a <_fflush_r+0x22>
 8017564:	08019454 	.word	0x08019454
 8017568:	08019474 	.word	0x08019474
 801756c:	08019434 	.word	0x08019434

08017570 <std>:
 8017570:	2300      	movs	r3, #0
 8017572:	b510      	push	{r4, lr}
 8017574:	4604      	mov	r4, r0
 8017576:	e9c0 3300 	strd	r3, r3, [r0]
 801757a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801757e:	6083      	str	r3, [r0, #8]
 8017580:	8181      	strh	r1, [r0, #12]
 8017582:	6643      	str	r3, [r0, #100]	; 0x64
 8017584:	81c2      	strh	r2, [r0, #14]
 8017586:	6183      	str	r3, [r0, #24]
 8017588:	4619      	mov	r1, r3
 801758a:	2208      	movs	r2, #8
 801758c:	305c      	adds	r0, #92	; 0x5c
 801758e:	f7fb fb85 	bl	8012c9c <memset>
 8017592:	4b05      	ldr	r3, [pc, #20]	; (80175a8 <std+0x38>)
 8017594:	6263      	str	r3, [r4, #36]	; 0x24
 8017596:	4b05      	ldr	r3, [pc, #20]	; (80175ac <std+0x3c>)
 8017598:	62a3      	str	r3, [r4, #40]	; 0x28
 801759a:	4b05      	ldr	r3, [pc, #20]	; (80175b0 <std+0x40>)
 801759c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801759e:	4b05      	ldr	r3, [pc, #20]	; (80175b4 <std+0x44>)
 80175a0:	6224      	str	r4, [r4, #32]
 80175a2:	6323      	str	r3, [r4, #48]	; 0x30
 80175a4:	bd10      	pop	{r4, pc}
 80175a6:	bf00      	nop
 80175a8:	08013a81 	.word	0x08013a81
 80175ac:	08013aa7 	.word	0x08013aa7
 80175b0:	08013adf 	.word	0x08013adf
 80175b4:	08013b03 	.word	0x08013b03

080175b8 <_cleanup_r>:
 80175b8:	4901      	ldr	r1, [pc, #4]	; (80175c0 <_cleanup_r+0x8>)
 80175ba:	f000 b8c1 	b.w	8017740 <_fwalk_reent>
 80175be:	bf00      	nop
 80175c0:	080174f9 	.word	0x080174f9

080175c4 <__sfmoreglue>:
 80175c4:	b570      	push	{r4, r5, r6, lr}
 80175c6:	2268      	movs	r2, #104	; 0x68
 80175c8:	1e4d      	subs	r5, r1, #1
 80175ca:	4355      	muls	r5, r2
 80175cc:	460e      	mov	r6, r1
 80175ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80175d2:	f7ff f8cd 	bl	8016770 <_malloc_r>
 80175d6:	4604      	mov	r4, r0
 80175d8:	b140      	cbz	r0, 80175ec <__sfmoreglue+0x28>
 80175da:	2100      	movs	r1, #0
 80175dc:	e9c0 1600 	strd	r1, r6, [r0]
 80175e0:	300c      	adds	r0, #12
 80175e2:	60a0      	str	r0, [r4, #8]
 80175e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80175e8:	f7fb fb58 	bl	8012c9c <memset>
 80175ec:	4620      	mov	r0, r4
 80175ee:	bd70      	pop	{r4, r5, r6, pc}

080175f0 <__sfp_lock_acquire>:
 80175f0:	4801      	ldr	r0, [pc, #4]	; (80175f8 <__sfp_lock_acquire+0x8>)
 80175f2:	f000 b8c5 	b.w	8017780 <__retarget_lock_acquire_recursive>
 80175f6:	bf00      	nop
 80175f8:	200019a5 	.word	0x200019a5

080175fc <__sfp_lock_release>:
 80175fc:	4801      	ldr	r0, [pc, #4]	; (8017604 <__sfp_lock_release+0x8>)
 80175fe:	f000 b8c0 	b.w	8017782 <__retarget_lock_release_recursive>
 8017602:	bf00      	nop
 8017604:	200019a5 	.word	0x200019a5

08017608 <__sinit_lock_acquire>:
 8017608:	4801      	ldr	r0, [pc, #4]	; (8017610 <__sinit_lock_acquire+0x8>)
 801760a:	f000 b8b9 	b.w	8017780 <__retarget_lock_acquire_recursive>
 801760e:	bf00      	nop
 8017610:	200019a6 	.word	0x200019a6

08017614 <__sinit_lock_release>:
 8017614:	4801      	ldr	r0, [pc, #4]	; (801761c <__sinit_lock_release+0x8>)
 8017616:	f000 b8b4 	b.w	8017782 <__retarget_lock_release_recursive>
 801761a:	bf00      	nop
 801761c:	200019a6 	.word	0x200019a6

08017620 <__sinit>:
 8017620:	b510      	push	{r4, lr}
 8017622:	4604      	mov	r4, r0
 8017624:	f7ff fff0 	bl	8017608 <__sinit_lock_acquire>
 8017628:	69a3      	ldr	r3, [r4, #24]
 801762a:	b11b      	cbz	r3, 8017634 <__sinit+0x14>
 801762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017630:	f7ff bff0 	b.w	8017614 <__sinit_lock_release>
 8017634:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017638:	6523      	str	r3, [r4, #80]	; 0x50
 801763a:	4b13      	ldr	r3, [pc, #76]	; (8017688 <__sinit+0x68>)
 801763c:	4a13      	ldr	r2, [pc, #76]	; (801768c <__sinit+0x6c>)
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	62a2      	str	r2, [r4, #40]	; 0x28
 8017642:	42a3      	cmp	r3, r4
 8017644:	bf04      	itt	eq
 8017646:	2301      	moveq	r3, #1
 8017648:	61a3      	streq	r3, [r4, #24]
 801764a:	4620      	mov	r0, r4
 801764c:	f000 f820 	bl	8017690 <__sfp>
 8017650:	6060      	str	r0, [r4, #4]
 8017652:	4620      	mov	r0, r4
 8017654:	f000 f81c 	bl	8017690 <__sfp>
 8017658:	60a0      	str	r0, [r4, #8]
 801765a:	4620      	mov	r0, r4
 801765c:	f000 f818 	bl	8017690 <__sfp>
 8017660:	2200      	movs	r2, #0
 8017662:	60e0      	str	r0, [r4, #12]
 8017664:	2104      	movs	r1, #4
 8017666:	6860      	ldr	r0, [r4, #4]
 8017668:	f7ff ff82 	bl	8017570 <std>
 801766c:	68a0      	ldr	r0, [r4, #8]
 801766e:	2201      	movs	r2, #1
 8017670:	2109      	movs	r1, #9
 8017672:	f7ff ff7d 	bl	8017570 <std>
 8017676:	68e0      	ldr	r0, [r4, #12]
 8017678:	2202      	movs	r2, #2
 801767a:	2112      	movs	r1, #18
 801767c:	f7ff ff78 	bl	8017570 <std>
 8017680:	2301      	movs	r3, #1
 8017682:	61a3      	str	r3, [r4, #24]
 8017684:	e7d2      	b.n	801762c <__sinit+0xc>
 8017686:	bf00      	nop
 8017688:	08018fd8 	.word	0x08018fd8
 801768c:	080175b9 	.word	0x080175b9

08017690 <__sfp>:
 8017690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017692:	4607      	mov	r7, r0
 8017694:	f7ff ffac 	bl	80175f0 <__sfp_lock_acquire>
 8017698:	4b1e      	ldr	r3, [pc, #120]	; (8017714 <__sfp+0x84>)
 801769a:	681e      	ldr	r6, [r3, #0]
 801769c:	69b3      	ldr	r3, [r6, #24]
 801769e:	b913      	cbnz	r3, 80176a6 <__sfp+0x16>
 80176a0:	4630      	mov	r0, r6
 80176a2:	f7ff ffbd 	bl	8017620 <__sinit>
 80176a6:	3648      	adds	r6, #72	; 0x48
 80176a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80176ac:	3b01      	subs	r3, #1
 80176ae:	d503      	bpl.n	80176b8 <__sfp+0x28>
 80176b0:	6833      	ldr	r3, [r6, #0]
 80176b2:	b30b      	cbz	r3, 80176f8 <__sfp+0x68>
 80176b4:	6836      	ldr	r6, [r6, #0]
 80176b6:	e7f7      	b.n	80176a8 <__sfp+0x18>
 80176b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80176bc:	b9d5      	cbnz	r5, 80176f4 <__sfp+0x64>
 80176be:	4b16      	ldr	r3, [pc, #88]	; (8017718 <__sfp+0x88>)
 80176c0:	60e3      	str	r3, [r4, #12]
 80176c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80176c6:	6665      	str	r5, [r4, #100]	; 0x64
 80176c8:	f000 f859 	bl	801777e <__retarget_lock_init_recursive>
 80176cc:	f7ff ff96 	bl	80175fc <__sfp_lock_release>
 80176d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80176d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80176d8:	6025      	str	r5, [r4, #0]
 80176da:	61a5      	str	r5, [r4, #24]
 80176dc:	2208      	movs	r2, #8
 80176de:	4629      	mov	r1, r5
 80176e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80176e4:	f7fb fada 	bl	8012c9c <memset>
 80176e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80176ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80176f0:	4620      	mov	r0, r4
 80176f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176f4:	3468      	adds	r4, #104	; 0x68
 80176f6:	e7d9      	b.n	80176ac <__sfp+0x1c>
 80176f8:	2104      	movs	r1, #4
 80176fa:	4638      	mov	r0, r7
 80176fc:	f7ff ff62 	bl	80175c4 <__sfmoreglue>
 8017700:	4604      	mov	r4, r0
 8017702:	6030      	str	r0, [r6, #0]
 8017704:	2800      	cmp	r0, #0
 8017706:	d1d5      	bne.n	80176b4 <__sfp+0x24>
 8017708:	f7ff ff78 	bl	80175fc <__sfp_lock_release>
 801770c:	230c      	movs	r3, #12
 801770e:	603b      	str	r3, [r7, #0]
 8017710:	e7ee      	b.n	80176f0 <__sfp+0x60>
 8017712:	bf00      	nop
 8017714:	08018fd8 	.word	0x08018fd8
 8017718:	ffff0001 	.word	0xffff0001

0801771c <fiprintf>:
 801771c:	b40e      	push	{r1, r2, r3}
 801771e:	b503      	push	{r0, r1, lr}
 8017720:	4601      	mov	r1, r0
 8017722:	ab03      	add	r3, sp, #12
 8017724:	4805      	ldr	r0, [pc, #20]	; (801773c <fiprintf+0x20>)
 8017726:	f853 2b04 	ldr.w	r2, [r3], #4
 801772a:	6800      	ldr	r0, [r0, #0]
 801772c:	9301      	str	r3, [sp, #4]
 801772e:	f000 f8a5 	bl	801787c <_vfiprintf_r>
 8017732:	b002      	add	sp, #8
 8017734:	f85d eb04 	ldr.w	lr, [sp], #4
 8017738:	b003      	add	sp, #12
 801773a:	4770      	bx	lr
 801773c:	20000108 	.word	0x20000108

08017740 <_fwalk_reent>:
 8017740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017744:	4606      	mov	r6, r0
 8017746:	4688      	mov	r8, r1
 8017748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801774c:	2700      	movs	r7, #0
 801774e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017752:	f1b9 0901 	subs.w	r9, r9, #1
 8017756:	d505      	bpl.n	8017764 <_fwalk_reent+0x24>
 8017758:	6824      	ldr	r4, [r4, #0]
 801775a:	2c00      	cmp	r4, #0
 801775c:	d1f7      	bne.n	801774e <_fwalk_reent+0xe>
 801775e:	4638      	mov	r0, r7
 8017760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017764:	89ab      	ldrh	r3, [r5, #12]
 8017766:	2b01      	cmp	r3, #1
 8017768:	d907      	bls.n	801777a <_fwalk_reent+0x3a>
 801776a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801776e:	3301      	adds	r3, #1
 8017770:	d003      	beq.n	801777a <_fwalk_reent+0x3a>
 8017772:	4629      	mov	r1, r5
 8017774:	4630      	mov	r0, r6
 8017776:	47c0      	blx	r8
 8017778:	4307      	orrs	r7, r0
 801777a:	3568      	adds	r5, #104	; 0x68
 801777c:	e7e9      	b.n	8017752 <_fwalk_reent+0x12>

0801777e <__retarget_lock_init_recursive>:
 801777e:	4770      	bx	lr

08017780 <__retarget_lock_acquire_recursive>:
 8017780:	4770      	bx	lr

08017782 <__retarget_lock_release_recursive>:
 8017782:	4770      	bx	lr

08017784 <memmove>:
 8017784:	4288      	cmp	r0, r1
 8017786:	b510      	push	{r4, lr}
 8017788:	eb01 0402 	add.w	r4, r1, r2
 801778c:	d902      	bls.n	8017794 <memmove+0x10>
 801778e:	4284      	cmp	r4, r0
 8017790:	4623      	mov	r3, r4
 8017792:	d807      	bhi.n	80177a4 <memmove+0x20>
 8017794:	1e43      	subs	r3, r0, #1
 8017796:	42a1      	cmp	r1, r4
 8017798:	d008      	beq.n	80177ac <memmove+0x28>
 801779a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801779e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80177a2:	e7f8      	b.n	8017796 <memmove+0x12>
 80177a4:	4402      	add	r2, r0
 80177a6:	4601      	mov	r1, r0
 80177a8:	428a      	cmp	r2, r1
 80177aa:	d100      	bne.n	80177ae <memmove+0x2a>
 80177ac:	bd10      	pop	{r4, pc}
 80177ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80177b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80177b6:	e7f7      	b.n	80177a8 <memmove+0x24>

080177b8 <__malloc_lock>:
 80177b8:	4801      	ldr	r0, [pc, #4]	; (80177c0 <__malloc_lock+0x8>)
 80177ba:	f7ff bfe1 	b.w	8017780 <__retarget_lock_acquire_recursive>
 80177be:	bf00      	nop
 80177c0:	200019a4 	.word	0x200019a4

080177c4 <__malloc_unlock>:
 80177c4:	4801      	ldr	r0, [pc, #4]	; (80177cc <__malloc_unlock+0x8>)
 80177c6:	f7ff bfdc 	b.w	8017782 <__retarget_lock_release_recursive>
 80177ca:	bf00      	nop
 80177cc:	200019a4 	.word	0x200019a4

080177d0 <_realloc_r>:
 80177d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d4:	4680      	mov	r8, r0
 80177d6:	4614      	mov	r4, r2
 80177d8:	460e      	mov	r6, r1
 80177da:	b921      	cbnz	r1, 80177e6 <_realloc_r+0x16>
 80177dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177e0:	4611      	mov	r1, r2
 80177e2:	f7fe bfc5 	b.w	8016770 <_malloc_r>
 80177e6:	b92a      	cbnz	r2, 80177f4 <_realloc_r+0x24>
 80177e8:	f7fe ff58 	bl	801669c <_free_r>
 80177ec:	4625      	mov	r5, r4
 80177ee:	4628      	mov	r0, r5
 80177f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177f4:	f000 fa9e 	bl	8017d34 <_malloc_usable_size_r>
 80177f8:	4284      	cmp	r4, r0
 80177fa:	4607      	mov	r7, r0
 80177fc:	d802      	bhi.n	8017804 <_realloc_r+0x34>
 80177fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017802:	d812      	bhi.n	801782a <_realloc_r+0x5a>
 8017804:	4621      	mov	r1, r4
 8017806:	4640      	mov	r0, r8
 8017808:	f7fe ffb2 	bl	8016770 <_malloc_r>
 801780c:	4605      	mov	r5, r0
 801780e:	2800      	cmp	r0, #0
 8017810:	d0ed      	beq.n	80177ee <_realloc_r+0x1e>
 8017812:	42bc      	cmp	r4, r7
 8017814:	4622      	mov	r2, r4
 8017816:	4631      	mov	r1, r6
 8017818:	bf28      	it	cs
 801781a:	463a      	movcs	r2, r7
 801781c:	f7fe fa68 	bl	8015cf0 <memcpy>
 8017820:	4631      	mov	r1, r6
 8017822:	4640      	mov	r0, r8
 8017824:	f7fe ff3a 	bl	801669c <_free_r>
 8017828:	e7e1      	b.n	80177ee <_realloc_r+0x1e>
 801782a:	4635      	mov	r5, r6
 801782c:	e7df      	b.n	80177ee <_realloc_r+0x1e>

0801782e <__sfputc_r>:
 801782e:	6893      	ldr	r3, [r2, #8]
 8017830:	3b01      	subs	r3, #1
 8017832:	2b00      	cmp	r3, #0
 8017834:	b410      	push	{r4}
 8017836:	6093      	str	r3, [r2, #8]
 8017838:	da07      	bge.n	801784a <__sfputc_r+0x1c>
 801783a:	6994      	ldr	r4, [r2, #24]
 801783c:	42a3      	cmp	r3, r4
 801783e:	db01      	blt.n	8017844 <__sfputc_r+0x16>
 8017840:	290a      	cmp	r1, #10
 8017842:	d102      	bne.n	801784a <__sfputc_r+0x1c>
 8017844:	bc10      	pop	{r4}
 8017846:	f000 b949 	b.w	8017adc <__swbuf_r>
 801784a:	6813      	ldr	r3, [r2, #0]
 801784c:	1c58      	adds	r0, r3, #1
 801784e:	6010      	str	r0, [r2, #0]
 8017850:	7019      	strb	r1, [r3, #0]
 8017852:	4608      	mov	r0, r1
 8017854:	bc10      	pop	{r4}
 8017856:	4770      	bx	lr

08017858 <__sfputs_r>:
 8017858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801785a:	4606      	mov	r6, r0
 801785c:	460f      	mov	r7, r1
 801785e:	4614      	mov	r4, r2
 8017860:	18d5      	adds	r5, r2, r3
 8017862:	42ac      	cmp	r4, r5
 8017864:	d101      	bne.n	801786a <__sfputs_r+0x12>
 8017866:	2000      	movs	r0, #0
 8017868:	e007      	b.n	801787a <__sfputs_r+0x22>
 801786a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801786e:	463a      	mov	r2, r7
 8017870:	4630      	mov	r0, r6
 8017872:	f7ff ffdc 	bl	801782e <__sfputc_r>
 8017876:	1c43      	adds	r3, r0, #1
 8017878:	d1f3      	bne.n	8017862 <__sfputs_r+0xa>
 801787a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801787c <_vfiprintf_r>:
 801787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017880:	460d      	mov	r5, r1
 8017882:	b09d      	sub	sp, #116	; 0x74
 8017884:	4614      	mov	r4, r2
 8017886:	4698      	mov	r8, r3
 8017888:	4606      	mov	r6, r0
 801788a:	b118      	cbz	r0, 8017894 <_vfiprintf_r+0x18>
 801788c:	6983      	ldr	r3, [r0, #24]
 801788e:	b90b      	cbnz	r3, 8017894 <_vfiprintf_r+0x18>
 8017890:	f7ff fec6 	bl	8017620 <__sinit>
 8017894:	4b89      	ldr	r3, [pc, #548]	; (8017abc <_vfiprintf_r+0x240>)
 8017896:	429d      	cmp	r5, r3
 8017898:	d11b      	bne.n	80178d2 <_vfiprintf_r+0x56>
 801789a:	6875      	ldr	r5, [r6, #4]
 801789c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801789e:	07d9      	lsls	r1, r3, #31
 80178a0:	d405      	bmi.n	80178ae <_vfiprintf_r+0x32>
 80178a2:	89ab      	ldrh	r3, [r5, #12]
 80178a4:	059a      	lsls	r2, r3, #22
 80178a6:	d402      	bmi.n	80178ae <_vfiprintf_r+0x32>
 80178a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80178aa:	f7ff ff69 	bl	8017780 <__retarget_lock_acquire_recursive>
 80178ae:	89ab      	ldrh	r3, [r5, #12]
 80178b0:	071b      	lsls	r3, r3, #28
 80178b2:	d501      	bpl.n	80178b8 <_vfiprintf_r+0x3c>
 80178b4:	692b      	ldr	r3, [r5, #16]
 80178b6:	b9eb      	cbnz	r3, 80178f4 <_vfiprintf_r+0x78>
 80178b8:	4629      	mov	r1, r5
 80178ba:	4630      	mov	r0, r6
 80178bc:	f000 f960 	bl	8017b80 <__swsetup_r>
 80178c0:	b1c0      	cbz	r0, 80178f4 <_vfiprintf_r+0x78>
 80178c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80178c4:	07dc      	lsls	r4, r3, #31
 80178c6:	d50e      	bpl.n	80178e6 <_vfiprintf_r+0x6a>
 80178c8:	f04f 30ff 	mov.w	r0, #4294967295
 80178cc:	b01d      	add	sp, #116	; 0x74
 80178ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178d2:	4b7b      	ldr	r3, [pc, #492]	; (8017ac0 <_vfiprintf_r+0x244>)
 80178d4:	429d      	cmp	r5, r3
 80178d6:	d101      	bne.n	80178dc <_vfiprintf_r+0x60>
 80178d8:	68b5      	ldr	r5, [r6, #8]
 80178da:	e7df      	b.n	801789c <_vfiprintf_r+0x20>
 80178dc:	4b79      	ldr	r3, [pc, #484]	; (8017ac4 <_vfiprintf_r+0x248>)
 80178de:	429d      	cmp	r5, r3
 80178e0:	bf08      	it	eq
 80178e2:	68f5      	ldreq	r5, [r6, #12]
 80178e4:	e7da      	b.n	801789c <_vfiprintf_r+0x20>
 80178e6:	89ab      	ldrh	r3, [r5, #12]
 80178e8:	0598      	lsls	r0, r3, #22
 80178ea:	d4ed      	bmi.n	80178c8 <_vfiprintf_r+0x4c>
 80178ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80178ee:	f7ff ff48 	bl	8017782 <__retarget_lock_release_recursive>
 80178f2:	e7e9      	b.n	80178c8 <_vfiprintf_r+0x4c>
 80178f4:	2300      	movs	r3, #0
 80178f6:	9309      	str	r3, [sp, #36]	; 0x24
 80178f8:	2320      	movs	r3, #32
 80178fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80178fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8017902:	2330      	movs	r3, #48	; 0x30
 8017904:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017ac8 <_vfiprintf_r+0x24c>
 8017908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801790c:	f04f 0901 	mov.w	r9, #1
 8017910:	4623      	mov	r3, r4
 8017912:	469a      	mov	sl, r3
 8017914:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017918:	b10a      	cbz	r2, 801791e <_vfiprintf_r+0xa2>
 801791a:	2a25      	cmp	r2, #37	; 0x25
 801791c:	d1f9      	bne.n	8017912 <_vfiprintf_r+0x96>
 801791e:	ebba 0b04 	subs.w	fp, sl, r4
 8017922:	d00b      	beq.n	801793c <_vfiprintf_r+0xc0>
 8017924:	465b      	mov	r3, fp
 8017926:	4622      	mov	r2, r4
 8017928:	4629      	mov	r1, r5
 801792a:	4630      	mov	r0, r6
 801792c:	f7ff ff94 	bl	8017858 <__sfputs_r>
 8017930:	3001      	adds	r0, #1
 8017932:	f000 80aa 	beq.w	8017a8a <_vfiprintf_r+0x20e>
 8017936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017938:	445a      	add	r2, fp
 801793a:	9209      	str	r2, [sp, #36]	; 0x24
 801793c:	f89a 3000 	ldrb.w	r3, [sl]
 8017940:	2b00      	cmp	r3, #0
 8017942:	f000 80a2 	beq.w	8017a8a <_vfiprintf_r+0x20e>
 8017946:	2300      	movs	r3, #0
 8017948:	f04f 32ff 	mov.w	r2, #4294967295
 801794c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017950:	f10a 0a01 	add.w	sl, sl, #1
 8017954:	9304      	str	r3, [sp, #16]
 8017956:	9307      	str	r3, [sp, #28]
 8017958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801795c:	931a      	str	r3, [sp, #104]	; 0x68
 801795e:	4654      	mov	r4, sl
 8017960:	2205      	movs	r2, #5
 8017962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017966:	4858      	ldr	r0, [pc, #352]	; (8017ac8 <_vfiprintf_r+0x24c>)
 8017968:	f7e8 fc12 	bl	8000190 <memchr>
 801796c:	9a04      	ldr	r2, [sp, #16]
 801796e:	b9d8      	cbnz	r0, 80179a8 <_vfiprintf_r+0x12c>
 8017970:	06d1      	lsls	r1, r2, #27
 8017972:	bf44      	itt	mi
 8017974:	2320      	movmi	r3, #32
 8017976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801797a:	0713      	lsls	r3, r2, #28
 801797c:	bf44      	itt	mi
 801797e:	232b      	movmi	r3, #43	; 0x2b
 8017980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017984:	f89a 3000 	ldrb.w	r3, [sl]
 8017988:	2b2a      	cmp	r3, #42	; 0x2a
 801798a:	d015      	beq.n	80179b8 <_vfiprintf_r+0x13c>
 801798c:	9a07      	ldr	r2, [sp, #28]
 801798e:	4654      	mov	r4, sl
 8017990:	2000      	movs	r0, #0
 8017992:	f04f 0c0a 	mov.w	ip, #10
 8017996:	4621      	mov	r1, r4
 8017998:	f811 3b01 	ldrb.w	r3, [r1], #1
 801799c:	3b30      	subs	r3, #48	; 0x30
 801799e:	2b09      	cmp	r3, #9
 80179a0:	d94e      	bls.n	8017a40 <_vfiprintf_r+0x1c4>
 80179a2:	b1b0      	cbz	r0, 80179d2 <_vfiprintf_r+0x156>
 80179a4:	9207      	str	r2, [sp, #28]
 80179a6:	e014      	b.n	80179d2 <_vfiprintf_r+0x156>
 80179a8:	eba0 0308 	sub.w	r3, r0, r8
 80179ac:	fa09 f303 	lsl.w	r3, r9, r3
 80179b0:	4313      	orrs	r3, r2
 80179b2:	9304      	str	r3, [sp, #16]
 80179b4:	46a2      	mov	sl, r4
 80179b6:	e7d2      	b.n	801795e <_vfiprintf_r+0xe2>
 80179b8:	9b03      	ldr	r3, [sp, #12]
 80179ba:	1d19      	adds	r1, r3, #4
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	9103      	str	r1, [sp, #12]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	bfbb      	ittet	lt
 80179c4:	425b      	neglt	r3, r3
 80179c6:	f042 0202 	orrlt.w	r2, r2, #2
 80179ca:	9307      	strge	r3, [sp, #28]
 80179cc:	9307      	strlt	r3, [sp, #28]
 80179ce:	bfb8      	it	lt
 80179d0:	9204      	strlt	r2, [sp, #16]
 80179d2:	7823      	ldrb	r3, [r4, #0]
 80179d4:	2b2e      	cmp	r3, #46	; 0x2e
 80179d6:	d10c      	bne.n	80179f2 <_vfiprintf_r+0x176>
 80179d8:	7863      	ldrb	r3, [r4, #1]
 80179da:	2b2a      	cmp	r3, #42	; 0x2a
 80179dc:	d135      	bne.n	8017a4a <_vfiprintf_r+0x1ce>
 80179de:	9b03      	ldr	r3, [sp, #12]
 80179e0:	1d1a      	adds	r2, r3, #4
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	9203      	str	r2, [sp, #12]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	bfb8      	it	lt
 80179ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80179ee:	3402      	adds	r4, #2
 80179f0:	9305      	str	r3, [sp, #20]
 80179f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8017acc <_vfiprintf_r+0x250>
 80179f6:	7821      	ldrb	r1, [r4, #0]
 80179f8:	2203      	movs	r2, #3
 80179fa:	4650      	mov	r0, sl
 80179fc:	f7e8 fbc8 	bl	8000190 <memchr>
 8017a00:	b140      	cbz	r0, 8017a14 <_vfiprintf_r+0x198>
 8017a02:	2340      	movs	r3, #64	; 0x40
 8017a04:	eba0 000a 	sub.w	r0, r0, sl
 8017a08:	fa03 f000 	lsl.w	r0, r3, r0
 8017a0c:	9b04      	ldr	r3, [sp, #16]
 8017a0e:	4303      	orrs	r3, r0
 8017a10:	3401      	adds	r4, #1
 8017a12:	9304      	str	r3, [sp, #16]
 8017a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a18:	482d      	ldr	r0, [pc, #180]	; (8017ad0 <_vfiprintf_r+0x254>)
 8017a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a1e:	2206      	movs	r2, #6
 8017a20:	f7e8 fbb6 	bl	8000190 <memchr>
 8017a24:	2800      	cmp	r0, #0
 8017a26:	d03f      	beq.n	8017aa8 <_vfiprintf_r+0x22c>
 8017a28:	4b2a      	ldr	r3, [pc, #168]	; (8017ad4 <_vfiprintf_r+0x258>)
 8017a2a:	bb1b      	cbnz	r3, 8017a74 <_vfiprintf_r+0x1f8>
 8017a2c:	9b03      	ldr	r3, [sp, #12]
 8017a2e:	3307      	adds	r3, #7
 8017a30:	f023 0307 	bic.w	r3, r3, #7
 8017a34:	3308      	adds	r3, #8
 8017a36:	9303      	str	r3, [sp, #12]
 8017a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a3a:	443b      	add	r3, r7
 8017a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8017a3e:	e767      	b.n	8017910 <_vfiprintf_r+0x94>
 8017a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a44:	460c      	mov	r4, r1
 8017a46:	2001      	movs	r0, #1
 8017a48:	e7a5      	b.n	8017996 <_vfiprintf_r+0x11a>
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	3401      	adds	r4, #1
 8017a4e:	9305      	str	r3, [sp, #20]
 8017a50:	4619      	mov	r1, r3
 8017a52:	f04f 0c0a 	mov.w	ip, #10
 8017a56:	4620      	mov	r0, r4
 8017a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a5c:	3a30      	subs	r2, #48	; 0x30
 8017a5e:	2a09      	cmp	r2, #9
 8017a60:	d903      	bls.n	8017a6a <_vfiprintf_r+0x1ee>
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d0c5      	beq.n	80179f2 <_vfiprintf_r+0x176>
 8017a66:	9105      	str	r1, [sp, #20]
 8017a68:	e7c3      	b.n	80179f2 <_vfiprintf_r+0x176>
 8017a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a6e:	4604      	mov	r4, r0
 8017a70:	2301      	movs	r3, #1
 8017a72:	e7f0      	b.n	8017a56 <_vfiprintf_r+0x1da>
 8017a74:	ab03      	add	r3, sp, #12
 8017a76:	9300      	str	r3, [sp, #0]
 8017a78:	462a      	mov	r2, r5
 8017a7a:	4b17      	ldr	r3, [pc, #92]	; (8017ad8 <_vfiprintf_r+0x25c>)
 8017a7c:	a904      	add	r1, sp, #16
 8017a7e:	4630      	mov	r0, r6
 8017a80:	f7fb f9b2 	bl	8012de8 <_printf_float>
 8017a84:	4607      	mov	r7, r0
 8017a86:	1c78      	adds	r0, r7, #1
 8017a88:	d1d6      	bne.n	8017a38 <_vfiprintf_r+0x1bc>
 8017a8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a8c:	07d9      	lsls	r1, r3, #31
 8017a8e:	d405      	bmi.n	8017a9c <_vfiprintf_r+0x220>
 8017a90:	89ab      	ldrh	r3, [r5, #12]
 8017a92:	059a      	lsls	r2, r3, #22
 8017a94:	d402      	bmi.n	8017a9c <_vfiprintf_r+0x220>
 8017a96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a98:	f7ff fe73 	bl	8017782 <__retarget_lock_release_recursive>
 8017a9c:	89ab      	ldrh	r3, [r5, #12]
 8017a9e:	065b      	lsls	r3, r3, #25
 8017aa0:	f53f af12 	bmi.w	80178c8 <_vfiprintf_r+0x4c>
 8017aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017aa6:	e711      	b.n	80178cc <_vfiprintf_r+0x50>
 8017aa8:	ab03      	add	r3, sp, #12
 8017aaa:	9300      	str	r3, [sp, #0]
 8017aac:	462a      	mov	r2, r5
 8017aae:	4b0a      	ldr	r3, [pc, #40]	; (8017ad8 <_vfiprintf_r+0x25c>)
 8017ab0:	a904      	add	r1, sp, #16
 8017ab2:	4630      	mov	r0, r6
 8017ab4:	f7fb fc30 	bl	8013318 <_printf_i>
 8017ab8:	e7e4      	b.n	8017a84 <_vfiprintf_r+0x208>
 8017aba:	bf00      	nop
 8017abc:	08019454 	.word	0x08019454
 8017ac0:	08019474 	.word	0x08019474
 8017ac4:	08019434 	.word	0x08019434
 8017ac8:	080193cc 	.word	0x080193cc
 8017acc:	080193d2 	.word	0x080193d2
 8017ad0:	080193d6 	.word	0x080193d6
 8017ad4:	08012de9 	.word	0x08012de9
 8017ad8:	08017859 	.word	0x08017859

08017adc <__swbuf_r>:
 8017adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ade:	460e      	mov	r6, r1
 8017ae0:	4614      	mov	r4, r2
 8017ae2:	4605      	mov	r5, r0
 8017ae4:	b118      	cbz	r0, 8017aee <__swbuf_r+0x12>
 8017ae6:	6983      	ldr	r3, [r0, #24]
 8017ae8:	b90b      	cbnz	r3, 8017aee <__swbuf_r+0x12>
 8017aea:	f7ff fd99 	bl	8017620 <__sinit>
 8017aee:	4b21      	ldr	r3, [pc, #132]	; (8017b74 <__swbuf_r+0x98>)
 8017af0:	429c      	cmp	r4, r3
 8017af2:	d12b      	bne.n	8017b4c <__swbuf_r+0x70>
 8017af4:	686c      	ldr	r4, [r5, #4]
 8017af6:	69a3      	ldr	r3, [r4, #24]
 8017af8:	60a3      	str	r3, [r4, #8]
 8017afa:	89a3      	ldrh	r3, [r4, #12]
 8017afc:	071a      	lsls	r2, r3, #28
 8017afe:	d52f      	bpl.n	8017b60 <__swbuf_r+0x84>
 8017b00:	6923      	ldr	r3, [r4, #16]
 8017b02:	b36b      	cbz	r3, 8017b60 <__swbuf_r+0x84>
 8017b04:	6923      	ldr	r3, [r4, #16]
 8017b06:	6820      	ldr	r0, [r4, #0]
 8017b08:	1ac0      	subs	r0, r0, r3
 8017b0a:	6963      	ldr	r3, [r4, #20]
 8017b0c:	b2f6      	uxtb	r6, r6
 8017b0e:	4283      	cmp	r3, r0
 8017b10:	4637      	mov	r7, r6
 8017b12:	dc04      	bgt.n	8017b1e <__swbuf_r+0x42>
 8017b14:	4621      	mov	r1, r4
 8017b16:	4628      	mov	r0, r5
 8017b18:	f7ff fcee 	bl	80174f8 <_fflush_r>
 8017b1c:	bb30      	cbnz	r0, 8017b6c <__swbuf_r+0x90>
 8017b1e:	68a3      	ldr	r3, [r4, #8]
 8017b20:	3b01      	subs	r3, #1
 8017b22:	60a3      	str	r3, [r4, #8]
 8017b24:	6823      	ldr	r3, [r4, #0]
 8017b26:	1c5a      	adds	r2, r3, #1
 8017b28:	6022      	str	r2, [r4, #0]
 8017b2a:	701e      	strb	r6, [r3, #0]
 8017b2c:	6963      	ldr	r3, [r4, #20]
 8017b2e:	3001      	adds	r0, #1
 8017b30:	4283      	cmp	r3, r0
 8017b32:	d004      	beq.n	8017b3e <__swbuf_r+0x62>
 8017b34:	89a3      	ldrh	r3, [r4, #12]
 8017b36:	07db      	lsls	r3, r3, #31
 8017b38:	d506      	bpl.n	8017b48 <__swbuf_r+0x6c>
 8017b3a:	2e0a      	cmp	r6, #10
 8017b3c:	d104      	bne.n	8017b48 <__swbuf_r+0x6c>
 8017b3e:	4621      	mov	r1, r4
 8017b40:	4628      	mov	r0, r5
 8017b42:	f7ff fcd9 	bl	80174f8 <_fflush_r>
 8017b46:	b988      	cbnz	r0, 8017b6c <__swbuf_r+0x90>
 8017b48:	4638      	mov	r0, r7
 8017b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b4c:	4b0a      	ldr	r3, [pc, #40]	; (8017b78 <__swbuf_r+0x9c>)
 8017b4e:	429c      	cmp	r4, r3
 8017b50:	d101      	bne.n	8017b56 <__swbuf_r+0x7a>
 8017b52:	68ac      	ldr	r4, [r5, #8]
 8017b54:	e7cf      	b.n	8017af6 <__swbuf_r+0x1a>
 8017b56:	4b09      	ldr	r3, [pc, #36]	; (8017b7c <__swbuf_r+0xa0>)
 8017b58:	429c      	cmp	r4, r3
 8017b5a:	bf08      	it	eq
 8017b5c:	68ec      	ldreq	r4, [r5, #12]
 8017b5e:	e7ca      	b.n	8017af6 <__swbuf_r+0x1a>
 8017b60:	4621      	mov	r1, r4
 8017b62:	4628      	mov	r0, r5
 8017b64:	f000 f80c 	bl	8017b80 <__swsetup_r>
 8017b68:	2800      	cmp	r0, #0
 8017b6a:	d0cb      	beq.n	8017b04 <__swbuf_r+0x28>
 8017b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8017b70:	e7ea      	b.n	8017b48 <__swbuf_r+0x6c>
 8017b72:	bf00      	nop
 8017b74:	08019454 	.word	0x08019454
 8017b78:	08019474 	.word	0x08019474
 8017b7c:	08019434 	.word	0x08019434

08017b80 <__swsetup_r>:
 8017b80:	4b32      	ldr	r3, [pc, #200]	; (8017c4c <__swsetup_r+0xcc>)
 8017b82:	b570      	push	{r4, r5, r6, lr}
 8017b84:	681d      	ldr	r5, [r3, #0]
 8017b86:	4606      	mov	r6, r0
 8017b88:	460c      	mov	r4, r1
 8017b8a:	b125      	cbz	r5, 8017b96 <__swsetup_r+0x16>
 8017b8c:	69ab      	ldr	r3, [r5, #24]
 8017b8e:	b913      	cbnz	r3, 8017b96 <__swsetup_r+0x16>
 8017b90:	4628      	mov	r0, r5
 8017b92:	f7ff fd45 	bl	8017620 <__sinit>
 8017b96:	4b2e      	ldr	r3, [pc, #184]	; (8017c50 <__swsetup_r+0xd0>)
 8017b98:	429c      	cmp	r4, r3
 8017b9a:	d10f      	bne.n	8017bbc <__swsetup_r+0x3c>
 8017b9c:	686c      	ldr	r4, [r5, #4]
 8017b9e:	89a3      	ldrh	r3, [r4, #12]
 8017ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ba4:	0719      	lsls	r1, r3, #28
 8017ba6:	d42c      	bmi.n	8017c02 <__swsetup_r+0x82>
 8017ba8:	06dd      	lsls	r5, r3, #27
 8017baa:	d411      	bmi.n	8017bd0 <__swsetup_r+0x50>
 8017bac:	2309      	movs	r3, #9
 8017bae:	6033      	str	r3, [r6, #0]
 8017bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017bb4:	81a3      	strh	r3, [r4, #12]
 8017bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8017bba:	e03e      	b.n	8017c3a <__swsetup_r+0xba>
 8017bbc:	4b25      	ldr	r3, [pc, #148]	; (8017c54 <__swsetup_r+0xd4>)
 8017bbe:	429c      	cmp	r4, r3
 8017bc0:	d101      	bne.n	8017bc6 <__swsetup_r+0x46>
 8017bc2:	68ac      	ldr	r4, [r5, #8]
 8017bc4:	e7eb      	b.n	8017b9e <__swsetup_r+0x1e>
 8017bc6:	4b24      	ldr	r3, [pc, #144]	; (8017c58 <__swsetup_r+0xd8>)
 8017bc8:	429c      	cmp	r4, r3
 8017bca:	bf08      	it	eq
 8017bcc:	68ec      	ldreq	r4, [r5, #12]
 8017bce:	e7e6      	b.n	8017b9e <__swsetup_r+0x1e>
 8017bd0:	0758      	lsls	r0, r3, #29
 8017bd2:	d512      	bpl.n	8017bfa <__swsetup_r+0x7a>
 8017bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017bd6:	b141      	cbz	r1, 8017bea <__swsetup_r+0x6a>
 8017bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017bdc:	4299      	cmp	r1, r3
 8017bde:	d002      	beq.n	8017be6 <__swsetup_r+0x66>
 8017be0:	4630      	mov	r0, r6
 8017be2:	f7fe fd5b 	bl	801669c <_free_r>
 8017be6:	2300      	movs	r3, #0
 8017be8:	6363      	str	r3, [r4, #52]	; 0x34
 8017bea:	89a3      	ldrh	r3, [r4, #12]
 8017bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017bf0:	81a3      	strh	r3, [r4, #12]
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	6063      	str	r3, [r4, #4]
 8017bf6:	6923      	ldr	r3, [r4, #16]
 8017bf8:	6023      	str	r3, [r4, #0]
 8017bfa:	89a3      	ldrh	r3, [r4, #12]
 8017bfc:	f043 0308 	orr.w	r3, r3, #8
 8017c00:	81a3      	strh	r3, [r4, #12]
 8017c02:	6923      	ldr	r3, [r4, #16]
 8017c04:	b94b      	cbnz	r3, 8017c1a <__swsetup_r+0x9a>
 8017c06:	89a3      	ldrh	r3, [r4, #12]
 8017c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c10:	d003      	beq.n	8017c1a <__swsetup_r+0x9a>
 8017c12:	4621      	mov	r1, r4
 8017c14:	4630      	mov	r0, r6
 8017c16:	f000 f84d 	bl	8017cb4 <__smakebuf_r>
 8017c1a:	89a0      	ldrh	r0, [r4, #12]
 8017c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017c20:	f010 0301 	ands.w	r3, r0, #1
 8017c24:	d00a      	beq.n	8017c3c <__swsetup_r+0xbc>
 8017c26:	2300      	movs	r3, #0
 8017c28:	60a3      	str	r3, [r4, #8]
 8017c2a:	6963      	ldr	r3, [r4, #20]
 8017c2c:	425b      	negs	r3, r3
 8017c2e:	61a3      	str	r3, [r4, #24]
 8017c30:	6923      	ldr	r3, [r4, #16]
 8017c32:	b943      	cbnz	r3, 8017c46 <__swsetup_r+0xc6>
 8017c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017c38:	d1ba      	bne.n	8017bb0 <__swsetup_r+0x30>
 8017c3a:	bd70      	pop	{r4, r5, r6, pc}
 8017c3c:	0781      	lsls	r1, r0, #30
 8017c3e:	bf58      	it	pl
 8017c40:	6963      	ldrpl	r3, [r4, #20]
 8017c42:	60a3      	str	r3, [r4, #8]
 8017c44:	e7f4      	b.n	8017c30 <__swsetup_r+0xb0>
 8017c46:	2000      	movs	r0, #0
 8017c48:	e7f7      	b.n	8017c3a <__swsetup_r+0xba>
 8017c4a:	bf00      	nop
 8017c4c:	20000108 	.word	0x20000108
 8017c50:	08019454 	.word	0x08019454
 8017c54:	08019474 	.word	0x08019474
 8017c58:	08019434 	.word	0x08019434

08017c5c <abort>:
 8017c5c:	b508      	push	{r3, lr}
 8017c5e:	2006      	movs	r0, #6
 8017c60:	f000 f898 	bl	8017d94 <raise>
 8017c64:	2001      	movs	r0, #1
 8017c66:	f7ea f9d7 	bl	8002018 <_exit>

08017c6a <__swhatbuf_r>:
 8017c6a:	b570      	push	{r4, r5, r6, lr}
 8017c6c:	460e      	mov	r6, r1
 8017c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c72:	2900      	cmp	r1, #0
 8017c74:	b096      	sub	sp, #88	; 0x58
 8017c76:	4614      	mov	r4, r2
 8017c78:	461d      	mov	r5, r3
 8017c7a:	da08      	bge.n	8017c8e <__swhatbuf_r+0x24>
 8017c7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017c80:	2200      	movs	r2, #0
 8017c82:	602a      	str	r2, [r5, #0]
 8017c84:	061a      	lsls	r2, r3, #24
 8017c86:	d410      	bmi.n	8017caa <__swhatbuf_r+0x40>
 8017c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017c8c:	e00e      	b.n	8017cac <__swhatbuf_r+0x42>
 8017c8e:	466a      	mov	r2, sp
 8017c90:	f000 f89c 	bl	8017dcc <_fstat_r>
 8017c94:	2800      	cmp	r0, #0
 8017c96:	dbf1      	blt.n	8017c7c <__swhatbuf_r+0x12>
 8017c98:	9a01      	ldr	r2, [sp, #4]
 8017c9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017c9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017ca2:	425a      	negs	r2, r3
 8017ca4:	415a      	adcs	r2, r3
 8017ca6:	602a      	str	r2, [r5, #0]
 8017ca8:	e7ee      	b.n	8017c88 <__swhatbuf_r+0x1e>
 8017caa:	2340      	movs	r3, #64	; 0x40
 8017cac:	2000      	movs	r0, #0
 8017cae:	6023      	str	r3, [r4, #0]
 8017cb0:	b016      	add	sp, #88	; 0x58
 8017cb2:	bd70      	pop	{r4, r5, r6, pc}

08017cb4 <__smakebuf_r>:
 8017cb4:	898b      	ldrh	r3, [r1, #12]
 8017cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017cb8:	079d      	lsls	r5, r3, #30
 8017cba:	4606      	mov	r6, r0
 8017cbc:	460c      	mov	r4, r1
 8017cbe:	d507      	bpl.n	8017cd0 <__smakebuf_r+0x1c>
 8017cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017cc4:	6023      	str	r3, [r4, #0]
 8017cc6:	6123      	str	r3, [r4, #16]
 8017cc8:	2301      	movs	r3, #1
 8017cca:	6163      	str	r3, [r4, #20]
 8017ccc:	b002      	add	sp, #8
 8017cce:	bd70      	pop	{r4, r5, r6, pc}
 8017cd0:	ab01      	add	r3, sp, #4
 8017cd2:	466a      	mov	r2, sp
 8017cd4:	f7ff ffc9 	bl	8017c6a <__swhatbuf_r>
 8017cd8:	9900      	ldr	r1, [sp, #0]
 8017cda:	4605      	mov	r5, r0
 8017cdc:	4630      	mov	r0, r6
 8017cde:	f7fe fd47 	bl	8016770 <_malloc_r>
 8017ce2:	b948      	cbnz	r0, 8017cf8 <__smakebuf_r+0x44>
 8017ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ce8:	059a      	lsls	r2, r3, #22
 8017cea:	d4ef      	bmi.n	8017ccc <__smakebuf_r+0x18>
 8017cec:	f023 0303 	bic.w	r3, r3, #3
 8017cf0:	f043 0302 	orr.w	r3, r3, #2
 8017cf4:	81a3      	strh	r3, [r4, #12]
 8017cf6:	e7e3      	b.n	8017cc0 <__smakebuf_r+0xc>
 8017cf8:	4b0d      	ldr	r3, [pc, #52]	; (8017d30 <__smakebuf_r+0x7c>)
 8017cfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8017cfc:	89a3      	ldrh	r3, [r4, #12]
 8017cfe:	6020      	str	r0, [r4, #0]
 8017d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d04:	81a3      	strh	r3, [r4, #12]
 8017d06:	9b00      	ldr	r3, [sp, #0]
 8017d08:	6163      	str	r3, [r4, #20]
 8017d0a:	9b01      	ldr	r3, [sp, #4]
 8017d0c:	6120      	str	r0, [r4, #16]
 8017d0e:	b15b      	cbz	r3, 8017d28 <__smakebuf_r+0x74>
 8017d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d14:	4630      	mov	r0, r6
 8017d16:	f000 f86b 	bl	8017df0 <_isatty_r>
 8017d1a:	b128      	cbz	r0, 8017d28 <__smakebuf_r+0x74>
 8017d1c:	89a3      	ldrh	r3, [r4, #12]
 8017d1e:	f023 0303 	bic.w	r3, r3, #3
 8017d22:	f043 0301 	orr.w	r3, r3, #1
 8017d26:	81a3      	strh	r3, [r4, #12]
 8017d28:	89a0      	ldrh	r0, [r4, #12]
 8017d2a:	4305      	orrs	r5, r0
 8017d2c:	81a5      	strh	r5, [r4, #12]
 8017d2e:	e7cd      	b.n	8017ccc <__smakebuf_r+0x18>
 8017d30:	080175b9 	.word	0x080175b9

08017d34 <_malloc_usable_size_r>:
 8017d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d38:	1f18      	subs	r0, r3, #4
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	bfbc      	itt	lt
 8017d3e:	580b      	ldrlt	r3, [r1, r0]
 8017d40:	18c0      	addlt	r0, r0, r3
 8017d42:	4770      	bx	lr

08017d44 <_raise_r>:
 8017d44:	291f      	cmp	r1, #31
 8017d46:	b538      	push	{r3, r4, r5, lr}
 8017d48:	4604      	mov	r4, r0
 8017d4a:	460d      	mov	r5, r1
 8017d4c:	d904      	bls.n	8017d58 <_raise_r+0x14>
 8017d4e:	2316      	movs	r3, #22
 8017d50:	6003      	str	r3, [r0, #0]
 8017d52:	f04f 30ff 	mov.w	r0, #4294967295
 8017d56:	bd38      	pop	{r3, r4, r5, pc}
 8017d58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017d5a:	b112      	cbz	r2, 8017d62 <_raise_r+0x1e>
 8017d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017d60:	b94b      	cbnz	r3, 8017d76 <_raise_r+0x32>
 8017d62:	4620      	mov	r0, r4
 8017d64:	f000 f830 	bl	8017dc8 <_getpid_r>
 8017d68:	462a      	mov	r2, r5
 8017d6a:	4601      	mov	r1, r0
 8017d6c:	4620      	mov	r0, r4
 8017d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d72:	f000 b817 	b.w	8017da4 <_kill_r>
 8017d76:	2b01      	cmp	r3, #1
 8017d78:	d00a      	beq.n	8017d90 <_raise_r+0x4c>
 8017d7a:	1c59      	adds	r1, r3, #1
 8017d7c:	d103      	bne.n	8017d86 <_raise_r+0x42>
 8017d7e:	2316      	movs	r3, #22
 8017d80:	6003      	str	r3, [r0, #0]
 8017d82:	2001      	movs	r0, #1
 8017d84:	e7e7      	b.n	8017d56 <_raise_r+0x12>
 8017d86:	2400      	movs	r4, #0
 8017d88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017d8c:	4628      	mov	r0, r5
 8017d8e:	4798      	blx	r3
 8017d90:	2000      	movs	r0, #0
 8017d92:	e7e0      	b.n	8017d56 <_raise_r+0x12>

08017d94 <raise>:
 8017d94:	4b02      	ldr	r3, [pc, #8]	; (8017da0 <raise+0xc>)
 8017d96:	4601      	mov	r1, r0
 8017d98:	6818      	ldr	r0, [r3, #0]
 8017d9a:	f7ff bfd3 	b.w	8017d44 <_raise_r>
 8017d9e:	bf00      	nop
 8017da0:	20000108 	.word	0x20000108

08017da4 <_kill_r>:
 8017da4:	b538      	push	{r3, r4, r5, lr}
 8017da6:	4d07      	ldr	r5, [pc, #28]	; (8017dc4 <_kill_r+0x20>)
 8017da8:	2300      	movs	r3, #0
 8017daa:	4604      	mov	r4, r0
 8017dac:	4608      	mov	r0, r1
 8017dae:	4611      	mov	r1, r2
 8017db0:	602b      	str	r3, [r5, #0]
 8017db2:	f7ea f929 	bl	8002008 <_kill>
 8017db6:	1c43      	adds	r3, r0, #1
 8017db8:	d102      	bne.n	8017dc0 <_kill_r+0x1c>
 8017dba:	682b      	ldr	r3, [r5, #0]
 8017dbc:	b103      	cbz	r3, 8017dc0 <_kill_r+0x1c>
 8017dbe:	6023      	str	r3, [r4, #0]
 8017dc0:	bd38      	pop	{r3, r4, r5, pc}
 8017dc2:	bf00      	nop
 8017dc4:	200019a0 	.word	0x200019a0

08017dc8 <_getpid_r>:
 8017dc8:	f7ea b91c 	b.w	8002004 <_getpid>

08017dcc <_fstat_r>:
 8017dcc:	b538      	push	{r3, r4, r5, lr}
 8017dce:	4d07      	ldr	r5, [pc, #28]	; (8017dec <_fstat_r+0x20>)
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	4604      	mov	r4, r0
 8017dd4:	4608      	mov	r0, r1
 8017dd6:	4611      	mov	r1, r2
 8017dd8:	602b      	str	r3, [r5, #0]
 8017dda:	f7ea f944 	bl	8002066 <_fstat>
 8017dde:	1c43      	adds	r3, r0, #1
 8017de0:	d102      	bne.n	8017de8 <_fstat_r+0x1c>
 8017de2:	682b      	ldr	r3, [r5, #0]
 8017de4:	b103      	cbz	r3, 8017de8 <_fstat_r+0x1c>
 8017de6:	6023      	str	r3, [r4, #0]
 8017de8:	bd38      	pop	{r3, r4, r5, pc}
 8017dea:	bf00      	nop
 8017dec:	200019a0 	.word	0x200019a0

08017df0 <_isatty_r>:
 8017df0:	b538      	push	{r3, r4, r5, lr}
 8017df2:	4d06      	ldr	r5, [pc, #24]	; (8017e0c <_isatty_r+0x1c>)
 8017df4:	2300      	movs	r3, #0
 8017df6:	4604      	mov	r4, r0
 8017df8:	4608      	mov	r0, r1
 8017dfa:	602b      	str	r3, [r5, #0]
 8017dfc:	f7ea f938 	bl	8002070 <_isatty>
 8017e00:	1c43      	adds	r3, r0, #1
 8017e02:	d102      	bne.n	8017e0a <_isatty_r+0x1a>
 8017e04:	682b      	ldr	r3, [r5, #0]
 8017e06:	b103      	cbz	r3, 8017e0a <_isatty_r+0x1a>
 8017e08:	6023      	str	r3, [r4, #0]
 8017e0a:	bd38      	pop	{r3, r4, r5, pc}
 8017e0c:	200019a0 	.word	0x200019a0

08017e10 <floor>:
 8017e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e14:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8017e18:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8017e1c:	2e13      	cmp	r6, #19
 8017e1e:	4602      	mov	r2, r0
 8017e20:	460b      	mov	r3, r1
 8017e22:	4607      	mov	r7, r0
 8017e24:	460c      	mov	r4, r1
 8017e26:	4605      	mov	r5, r0
 8017e28:	dc33      	bgt.n	8017e92 <floor+0x82>
 8017e2a:	2e00      	cmp	r6, #0
 8017e2c:	da14      	bge.n	8017e58 <floor+0x48>
 8017e2e:	a334      	add	r3, pc, #208	; (adr r3, 8017f00 <floor+0xf0>)
 8017e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e34:	f7e8 fab6 	bl	80003a4 <__adddf3>
 8017e38:	2200      	movs	r2, #0
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	f7e8 fef8 	bl	8000c30 <__aeabi_dcmpgt>
 8017e40:	b138      	cbz	r0, 8017e52 <floor+0x42>
 8017e42:	2c00      	cmp	r4, #0
 8017e44:	da58      	bge.n	8017ef8 <floor+0xe8>
 8017e46:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017e4a:	431d      	orrs	r5, r3
 8017e4c:	d001      	beq.n	8017e52 <floor+0x42>
 8017e4e:	4c2e      	ldr	r4, [pc, #184]	; (8017f08 <floor+0xf8>)
 8017e50:	2500      	movs	r5, #0
 8017e52:	4623      	mov	r3, r4
 8017e54:	462f      	mov	r7, r5
 8017e56:	e025      	b.n	8017ea4 <floor+0x94>
 8017e58:	4a2c      	ldr	r2, [pc, #176]	; (8017f0c <floor+0xfc>)
 8017e5a:	fa42 f806 	asr.w	r8, r2, r6
 8017e5e:	ea01 0208 	and.w	r2, r1, r8
 8017e62:	4302      	orrs	r2, r0
 8017e64:	d01e      	beq.n	8017ea4 <floor+0x94>
 8017e66:	a326      	add	r3, pc, #152	; (adr r3, 8017f00 <floor+0xf0>)
 8017e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e6c:	f7e8 fa9a 	bl	80003a4 <__adddf3>
 8017e70:	2200      	movs	r2, #0
 8017e72:	2300      	movs	r3, #0
 8017e74:	f7e8 fedc 	bl	8000c30 <__aeabi_dcmpgt>
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	d0ea      	beq.n	8017e52 <floor+0x42>
 8017e7c:	2c00      	cmp	r4, #0
 8017e7e:	bfbe      	ittt	lt
 8017e80:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017e84:	fa43 f606 	asrlt.w	r6, r3, r6
 8017e88:	19a4      	addlt	r4, r4, r6
 8017e8a:	ea24 0408 	bic.w	r4, r4, r8
 8017e8e:	2500      	movs	r5, #0
 8017e90:	e7df      	b.n	8017e52 <floor+0x42>
 8017e92:	2e33      	cmp	r6, #51	; 0x33
 8017e94:	dd0a      	ble.n	8017eac <floor+0x9c>
 8017e96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017e9a:	d103      	bne.n	8017ea4 <floor+0x94>
 8017e9c:	f7e8 fa82 	bl	80003a4 <__adddf3>
 8017ea0:	4607      	mov	r7, r0
 8017ea2:	460b      	mov	r3, r1
 8017ea4:	4638      	mov	r0, r7
 8017ea6:	4619      	mov	r1, r3
 8017ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017eac:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8017eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8017eb4:	fa22 f808 	lsr.w	r8, r2, r8
 8017eb8:	ea18 0f00 	tst.w	r8, r0
 8017ebc:	d0f2      	beq.n	8017ea4 <floor+0x94>
 8017ebe:	a310      	add	r3, pc, #64	; (adr r3, 8017f00 <floor+0xf0>)
 8017ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ec4:	f7e8 fa6e 	bl	80003a4 <__adddf3>
 8017ec8:	2200      	movs	r2, #0
 8017eca:	2300      	movs	r3, #0
 8017ecc:	f7e8 feb0 	bl	8000c30 <__aeabi_dcmpgt>
 8017ed0:	2800      	cmp	r0, #0
 8017ed2:	d0be      	beq.n	8017e52 <floor+0x42>
 8017ed4:	2c00      	cmp	r4, #0
 8017ed6:	da02      	bge.n	8017ede <floor+0xce>
 8017ed8:	2e14      	cmp	r6, #20
 8017eda:	d103      	bne.n	8017ee4 <floor+0xd4>
 8017edc:	3401      	adds	r4, #1
 8017ede:	ea25 0508 	bic.w	r5, r5, r8
 8017ee2:	e7b6      	b.n	8017e52 <floor+0x42>
 8017ee4:	2301      	movs	r3, #1
 8017ee6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8017eea:	fa03 f606 	lsl.w	r6, r3, r6
 8017eee:	4435      	add	r5, r6
 8017ef0:	42bd      	cmp	r5, r7
 8017ef2:	bf38      	it	cc
 8017ef4:	18e4      	addcc	r4, r4, r3
 8017ef6:	e7f2      	b.n	8017ede <floor+0xce>
 8017ef8:	2500      	movs	r5, #0
 8017efa:	462c      	mov	r4, r5
 8017efc:	e7a9      	b.n	8017e52 <floor+0x42>
 8017efe:	bf00      	nop
 8017f00:	8800759c 	.word	0x8800759c
 8017f04:	7e37e43c 	.word	0x7e37e43c
 8017f08:	bff00000 	.word	0xbff00000
 8017f0c:	000fffff 	.word	0x000fffff

08017f10 <_init>:
 8017f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f12:	bf00      	nop
 8017f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f16:	bc08      	pop	{r3}
 8017f18:	469e      	mov	lr, r3
 8017f1a:	4770      	bx	lr

08017f1c <_fini>:
 8017f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f1e:	bf00      	nop
 8017f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f22:	bc08      	pop	{r3}
 8017f24:	469e      	mov	lr, r3
 8017f26:	4770      	bx	lr
